// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/enumeration.proto

#include "common/enumeration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace common {
namespace enumeration {
}  // namespace enumeration
}  // namespace common
namespace protobuf_common_2fenumeration_2eproto {
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[14];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "common/enumeration.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030common/enumeration.proto\022\022common.enume"
      "ration*]\n\007EEnable\022\022\n\016UNKNOWNEENABLE\020\000\022\014\n"
      "\010DISABLED\020\002\022\013\n\007ENABLED\020\001\022\020\n\014OWNER_DELETE"
      "\020\003\022\021\n\rFRIEND_DELETE\020\004*/\n\007EReaded\022\014\n\010UNRE"
      "ADED\020\000\022\n\n\006READED\020\001\022\n\n\006SENDED\020\002*D\n\013EClien"
      "tType\022\013\n\007UNKNOWN\020\000\022\007\n\003IOS\020\001\022\013\n\007ANDROID\020\002"
      "\022\007\n\003WEB\020\003\022\t\n\005ZEBRA\020\004*O\n\023ETerminalDeviceT"
      "ype\022\025\n\021UNKNOWNDEVICETYPE\020\000\022\020\n\014MOBILE_PHO"
      "NE\020\001\022\017\n\013CAR_MACHINE\020\002*\?\n\021EUserOnlineStat"
      "us\022\021\n\rUNKNOWNSTATUS\020\000\022\013\n\007OFFLINE\020\001\022\n\n\006ON"
      "LINE\020\002*O\n\nELoginMode\022\017\n\013UNKNOWNMODE\020\000\022\021\n"
      "\rPASSWORD_MODE\020\001\022\r\n\tTOKENMODE\020\002\022\016\n\nDEBUG"
      "_MODE\020\003*C\n\014ENetworkType\022\027\n\023UNKNOWNENETWO"
      "RKTYPE\020\000\022\010\n\004WIFI\020\003\022\007\n\003M4G\020\001\022\007\n\003M2G\020\002*C\n\r"
      "ELanguageType\022\030\n\024UNKNOWNELANGUAGETYPE\020\000\022"
      "\013\n\007CHINESE\020\002\022\013\n\007ENGLISH\020\001*C\n\tECrewType\022\024"
      "\n\020UNKNOWNECREWTYPE\020\000\022\t\n\005OWNER\020\003\022\t\n\005ADMIN"
      "\020\001\022\n\n\006MEMBER\020\002*y\n\014ECallMsgType\022\027\n\023UNKNOW"
      "NECALLMSGTYPE\020\000\022\n\n\006INVITE\020\007\022\013\n\007CONNECT\020\001"
      "\022\010\n\004BUSY\020\002\022\n\n\006CANCEL\020\003\022\n\n\006REFUSE\020\004\022\007\n\003BY"
      "E\020\005\022\014\n\010REINVITE\020\006*Y\n\nEGroupType\022\025\n\021UNKNO"
      "WNEGROUPTYPE\020\000\022\n\n\006NORMAL\020\003\022\022\n\016FAMILY_NET"
      "WORK\020\001\022\024\n\020AND_FAMILY_GROUP\020\002*G\n\022EVcardMs"
      "gModelType\022\020\n\014UNKNOWN_TYPE\020\000\022\017\n\013SINGLE_C"
      "ARD\020\001\022\016\n\nGROUP_CARD\020\002*.\n\007ESilent\022\022\n\016UNKN"
      "OWNESILENT\020\000\022\006\n\002NO\020\002\022\007\n\003YES\020\001*i\n\027EInvita"
      "tionNoticeStatus\022\"\n\036UNKNOWNEINVITATIONNO"
      "TICESTATUS\020\000\022\017\n\013UNPROCESSED\020\001\022\014\n\010APPROVE"
      "D\020\002\022\013\n\007REFUSED\020\003B\'\n\035com.cmcc.littlec.pro"
      "to.commonB\004EnumP\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common/enumeration.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_common_2fenumeration_2eproto
namespace common {
namespace enumeration {
const ::google::protobuf::EnumDescriptor* EEnable_descriptor() {
  protobuf_common_2fenumeration_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2fenumeration_2eproto::file_level_enum_descriptors[0];
}
bool EEnable_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EReaded_descriptor() {
  protobuf_common_2fenumeration_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2fenumeration_2eproto::file_level_enum_descriptors[1];
}
bool EReaded_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EClientType_descriptor() {
  protobuf_common_2fenumeration_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2fenumeration_2eproto::file_level_enum_descriptors[2];
}
bool EClientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETerminalDeviceType_descriptor() {
  protobuf_common_2fenumeration_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2fenumeration_2eproto::file_level_enum_descriptors[3];
}
bool ETerminalDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EUserOnlineStatus_descriptor() {
  protobuf_common_2fenumeration_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2fenumeration_2eproto::file_level_enum_descriptors[4];
}
bool EUserOnlineStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELoginMode_descriptor() {
  protobuf_common_2fenumeration_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2fenumeration_2eproto::file_level_enum_descriptors[5];
}
bool ELoginMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ENetworkType_descriptor() {
  protobuf_common_2fenumeration_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2fenumeration_2eproto::file_level_enum_descriptors[6];
}
bool ENetworkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELanguageType_descriptor() {
  protobuf_common_2fenumeration_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2fenumeration_2eproto::file_level_enum_descriptors[7];
}
bool ELanguageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECrewType_descriptor() {
  protobuf_common_2fenumeration_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2fenumeration_2eproto::file_level_enum_descriptors[8];
}
bool ECrewType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECallMsgType_descriptor() {
  protobuf_common_2fenumeration_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2fenumeration_2eproto::file_level_enum_descriptors[9];
}
bool ECallMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGroupType_descriptor() {
  protobuf_common_2fenumeration_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2fenumeration_2eproto::file_level_enum_descriptors[10];
}
bool EGroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EVcardMsgModelType_descriptor() {
  protobuf_common_2fenumeration_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2fenumeration_2eproto::file_level_enum_descriptors[11];
}
bool EVcardMsgModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESilent_descriptor() {
  protobuf_common_2fenumeration_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2fenumeration_2eproto::file_level_enum_descriptors[12];
}
bool ESilent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EInvitationNoticeStatus_descriptor() {
  protobuf_common_2fenumeration_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2fenumeration_2eproto::file_level_enum_descriptors[13];
}
bool EInvitationNoticeStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace enumeration
}  // namespace common

// @@protoc_insertion_point(global_scope)
