// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/enumeration.proto

#ifndef PROTOBUF_common_2fenumeration_2eproto__INCLUDED
#define PROTOBUF_common_2fenumeration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace protobuf_common_2fenumeration_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
inline void InitDefaults() {
}
}  // namespace protobuf_common_2fenumeration_2eproto
namespace common {
namespace enumeration {
}  // namespace enumeration
}  // namespace common
namespace common {
namespace enumeration {

enum EEnable {
  UNKNOWNEENABLE = 0,
  DISABLED = 2,
  ENABLED = 1,
  OWNER_DELETE = 3,
  FRIEND_DELETE = 4,
  EEnable_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EEnable_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EEnable_IsValid(int value);
const EEnable EEnable_MIN = UNKNOWNEENABLE;
const EEnable EEnable_MAX = FRIEND_DELETE;
const int EEnable_ARRAYSIZE = EEnable_MAX + 1;

const ::google::protobuf::EnumDescriptor* EEnable_descriptor();
inline const ::std::string& EEnable_Name(EEnable value) {
  return ::google::protobuf::internal::NameOfEnum(
    EEnable_descriptor(), value);
}
inline bool EEnable_Parse(
    const ::std::string& name, EEnable* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EEnable>(
    EEnable_descriptor(), name, value);
}
enum EReaded {
  UNREADED = 0,
  READED = 1,
  SENDED = 2,
  EReaded_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EReaded_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EReaded_IsValid(int value);
const EReaded EReaded_MIN = UNREADED;
const EReaded EReaded_MAX = SENDED;
const int EReaded_ARRAYSIZE = EReaded_MAX + 1;

const ::google::protobuf::EnumDescriptor* EReaded_descriptor();
inline const ::std::string& EReaded_Name(EReaded value) {
  return ::google::protobuf::internal::NameOfEnum(
    EReaded_descriptor(), value);
}
inline bool EReaded_Parse(
    const ::std::string& name, EReaded* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EReaded>(
    EReaded_descriptor(), name, value);
}
enum EClientType {
  UNKNOWN = 0,
  IOS = 1,
  ANDROID = 2,
  WEB = 3,
  ZEBRA = 4,
  EClientType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EClientType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EClientType_IsValid(int value);
const EClientType EClientType_MIN = UNKNOWN;
const EClientType EClientType_MAX = ZEBRA;
const int EClientType_ARRAYSIZE = EClientType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EClientType_descriptor();
inline const ::std::string& EClientType_Name(EClientType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EClientType_descriptor(), value);
}
inline bool EClientType_Parse(
    const ::std::string& name, EClientType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EClientType>(
    EClientType_descriptor(), name, value);
}
enum ETerminalDeviceType {
  UNKNOWNDEVICETYPE = 0,
  MOBILE_PHONE = 1,
  CAR_MACHINE = 2,
  ETerminalDeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ETerminalDeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ETerminalDeviceType_IsValid(int value);
const ETerminalDeviceType ETerminalDeviceType_MIN = UNKNOWNDEVICETYPE;
const ETerminalDeviceType ETerminalDeviceType_MAX = CAR_MACHINE;
const int ETerminalDeviceType_ARRAYSIZE = ETerminalDeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETerminalDeviceType_descriptor();
inline const ::std::string& ETerminalDeviceType_Name(ETerminalDeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETerminalDeviceType_descriptor(), value);
}
inline bool ETerminalDeviceType_Parse(
    const ::std::string& name, ETerminalDeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETerminalDeviceType>(
    ETerminalDeviceType_descriptor(), name, value);
}
enum EUserOnlineStatus {
  UNKNOWNSTATUS = 0,
  OFFLINE = 1,
  ONLINE = 2,
  EUserOnlineStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EUserOnlineStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EUserOnlineStatus_IsValid(int value);
const EUserOnlineStatus EUserOnlineStatus_MIN = UNKNOWNSTATUS;
const EUserOnlineStatus EUserOnlineStatus_MAX = ONLINE;
const int EUserOnlineStatus_ARRAYSIZE = EUserOnlineStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EUserOnlineStatus_descriptor();
inline const ::std::string& EUserOnlineStatus_Name(EUserOnlineStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EUserOnlineStatus_descriptor(), value);
}
inline bool EUserOnlineStatus_Parse(
    const ::std::string& name, EUserOnlineStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EUserOnlineStatus>(
    EUserOnlineStatus_descriptor(), name, value);
}
enum ELoginMode {
  UNKNOWNMODE = 0,
  PASSWORD_MODE = 1,
  TOKENMODE = 2,
  DEBUG_MODE = 3,
  ELoginMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ELoginMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ELoginMode_IsValid(int value);
const ELoginMode ELoginMode_MIN = UNKNOWNMODE;
const ELoginMode ELoginMode_MAX = DEBUG_MODE;
const int ELoginMode_ARRAYSIZE = ELoginMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELoginMode_descriptor();
inline const ::std::string& ELoginMode_Name(ELoginMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELoginMode_descriptor(), value);
}
inline bool ELoginMode_Parse(
    const ::std::string& name, ELoginMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELoginMode>(
    ELoginMode_descriptor(), name, value);
}
enum ENetworkType {
  UNKNOWNENETWORKTYPE = 0,
  WIFI = 3,
  M4G = 1,
  M2G = 2,
  ENetworkType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ENetworkType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ENetworkType_IsValid(int value);
const ENetworkType ENetworkType_MIN = UNKNOWNENETWORKTYPE;
const ENetworkType ENetworkType_MAX = WIFI;
const int ENetworkType_ARRAYSIZE = ENetworkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENetworkType_descriptor();
inline const ::std::string& ENetworkType_Name(ENetworkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENetworkType_descriptor(), value);
}
inline bool ENetworkType_Parse(
    const ::std::string& name, ENetworkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENetworkType>(
    ENetworkType_descriptor(), name, value);
}
enum ELanguageType {
  UNKNOWNELANGUAGETYPE = 0,
  CHINESE = 2,
  ENGLISH = 1,
  ELanguageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ELanguageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ELanguageType_IsValid(int value);
const ELanguageType ELanguageType_MIN = UNKNOWNELANGUAGETYPE;
const ELanguageType ELanguageType_MAX = CHINESE;
const int ELanguageType_ARRAYSIZE = ELanguageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELanguageType_descriptor();
inline const ::std::string& ELanguageType_Name(ELanguageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELanguageType_descriptor(), value);
}
inline bool ELanguageType_Parse(
    const ::std::string& name, ELanguageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELanguageType>(
    ELanguageType_descriptor(), name, value);
}
enum ECrewType {
  UNKNOWNECREWTYPE = 0,
  OWNER = 3,
  ADMIN = 1,
  MEMBER = 2,
  ECrewType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ECrewType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ECrewType_IsValid(int value);
const ECrewType ECrewType_MIN = UNKNOWNECREWTYPE;
const ECrewType ECrewType_MAX = OWNER;
const int ECrewType_ARRAYSIZE = ECrewType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECrewType_descriptor();
inline const ::std::string& ECrewType_Name(ECrewType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECrewType_descriptor(), value);
}
inline bool ECrewType_Parse(
    const ::std::string& name, ECrewType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECrewType>(
    ECrewType_descriptor(), name, value);
}
enum ECallMsgType {
  UNKNOWNECALLMSGTYPE = 0,
  INVITE = 7,
  CONNECT = 1,
  BUSY = 2,
  CANCEL = 3,
  REFUSE = 4,
  BYE = 5,
  REINVITE = 6,
  ECallMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ECallMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ECallMsgType_IsValid(int value);
const ECallMsgType ECallMsgType_MIN = UNKNOWNECALLMSGTYPE;
const ECallMsgType ECallMsgType_MAX = INVITE;
const int ECallMsgType_ARRAYSIZE = ECallMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECallMsgType_descriptor();
inline const ::std::string& ECallMsgType_Name(ECallMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECallMsgType_descriptor(), value);
}
inline bool ECallMsgType_Parse(
    const ::std::string& name, ECallMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECallMsgType>(
    ECallMsgType_descriptor(), name, value);
}
enum EGroupType {
  UNKNOWNEGROUPTYPE = 0,
  NORMAL = 3,
  FAMILY_NETWORK = 1,
  AND_FAMILY_GROUP = 2,
  EGroupType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EGroupType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EGroupType_IsValid(int value);
const EGroupType EGroupType_MIN = UNKNOWNEGROUPTYPE;
const EGroupType EGroupType_MAX = NORMAL;
const int EGroupType_ARRAYSIZE = EGroupType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGroupType_descriptor();
inline const ::std::string& EGroupType_Name(EGroupType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGroupType_descriptor(), value);
}
inline bool EGroupType_Parse(
    const ::std::string& name, EGroupType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGroupType>(
    EGroupType_descriptor(), name, value);
}
enum EVcardMsgModelType {
  UNKNOWN_TYPE = 0,
  SINGLE_CARD = 1,
  GROUP_CARD = 2,
  EVcardMsgModelType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EVcardMsgModelType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EVcardMsgModelType_IsValid(int value);
const EVcardMsgModelType EVcardMsgModelType_MIN = UNKNOWN_TYPE;
const EVcardMsgModelType EVcardMsgModelType_MAX = GROUP_CARD;
const int EVcardMsgModelType_ARRAYSIZE = EVcardMsgModelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EVcardMsgModelType_descriptor();
inline const ::std::string& EVcardMsgModelType_Name(EVcardMsgModelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EVcardMsgModelType_descriptor(), value);
}
inline bool EVcardMsgModelType_Parse(
    const ::std::string& name, EVcardMsgModelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EVcardMsgModelType>(
    EVcardMsgModelType_descriptor(), name, value);
}
enum ESilent {
  UNKNOWNESILENT = 0,
  NO = 2,
  YES = 1,
  ESilent_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ESilent_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ESilent_IsValid(int value);
const ESilent ESilent_MIN = UNKNOWNESILENT;
const ESilent ESilent_MAX = NO;
const int ESilent_ARRAYSIZE = ESilent_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESilent_descriptor();
inline const ::std::string& ESilent_Name(ESilent value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESilent_descriptor(), value);
}
inline bool ESilent_Parse(
    const ::std::string& name, ESilent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESilent>(
    ESilent_descriptor(), name, value);
}
enum EInvitationNoticeStatus {
  UNKNOWNEINVITATIONNOTICESTATUS = 0,
  UNPROCESSED = 1,
  APPROVED = 2,
  REFUSED = 3,
  EInvitationNoticeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EInvitationNoticeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EInvitationNoticeStatus_IsValid(int value);
const EInvitationNoticeStatus EInvitationNoticeStatus_MIN = UNKNOWNEINVITATIONNOTICESTATUS;
const EInvitationNoticeStatus EInvitationNoticeStatus_MAX = REFUSED;
const int EInvitationNoticeStatus_ARRAYSIZE = EInvitationNoticeStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EInvitationNoticeStatus_descriptor();
inline const ::std::string& EInvitationNoticeStatus_Name(EInvitationNoticeStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EInvitationNoticeStatus_descriptor(), value);
}
inline bool EInvitationNoticeStatus_Parse(
    const ::std::string& name, EInvitationNoticeStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EInvitationNoticeStatus>(
    EInvitationNoticeStatus_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace enumeration
}  // namespace common

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::common::enumeration::EEnable> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enumeration::EEnable>() {
  return ::common::enumeration::EEnable_descriptor();
}
template <> struct is_proto_enum< ::common::enumeration::EReaded> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enumeration::EReaded>() {
  return ::common::enumeration::EReaded_descriptor();
}
template <> struct is_proto_enum< ::common::enumeration::EClientType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enumeration::EClientType>() {
  return ::common::enumeration::EClientType_descriptor();
}
template <> struct is_proto_enum< ::common::enumeration::ETerminalDeviceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enumeration::ETerminalDeviceType>() {
  return ::common::enumeration::ETerminalDeviceType_descriptor();
}
template <> struct is_proto_enum< ::common::enumeration::EUserOnlineStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enumeration::EUserOnlineStatus>() {
  return ::common::enumeration::EUserOnlineStatus_descriptor();
}
template <> struct is_proto_enum< ::common::enumeration::ELoginMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enumeration::ELoginMode>() {
  return ::common::enumeration::ELoginMode_descriptor();
}
template <> struct is_proto_enum< ::common::enumeration::ENetworkType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enumeration::ENetworkType>() {
  return ::common::enumeration::ENetworkType_descriptor();
}
template <> struct is_proto_enum< ::common::enumeration::ELanguageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enumeration::ELanguageType>() {
  return ::common::enumeration::ELanguageType_descriptor();
}
template <> struct is_proto_enum< ::common::enumeration::ECrewType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enumeration::ECrewType>() {
  return ::common::enumeration::ECrewType_descriptor();
}
template <> struct is_proto_enum< ::common::enumeration::ECallMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enumeration::ECallMsgType>() {
  return ::common::enumeration::ECallMsgType_descriptor();
}
template <> struct is_proto_enum< ::common::enumeration::EGroupType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enumeration::EGroupType>() {
  return ::common::enumeration::EGroupType_descriptor();
}
template <> struct is_proto_enum< ::common::enumeration::EVcardMsgModelType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enumeration::EVcardMsgModelType>() {
  return ::common::enumeration::EVcardMsgModelType_descriptor();
}
template <> struct is_proto_enum< ::common::enumeration::ESilent> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enumeration::ESilent>() {
  return ::common::enumeration::ESilent_descriptor();
}
template <> struct is_proto_enum< ::common::enumeration::EInvitationNoticeStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::enumeration::EInvitationNoticeStatus>() {
  return ::common::enumeration::EInvitationNoticeStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2fenumeration_2eproto__INCLUDED
