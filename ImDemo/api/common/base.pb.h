// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/base.proto

#ifndef PROTOBUF_common_2fbase_2eproto__INCLUDED
#define PROTOBUF_common_2fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/enumeration.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_common_2fbase_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMobileBaseImpl();
void InitDefaultsMobileBase();
inline void InitDefaults() {
  InitDefaultsMobileBase();
}
}  // namespace protobuf_common_2fbase_2eproto
namespace common {
namespace base {
class MobileBase;
class MobileBaseDefaultTypeInternal;
extern MobileBaseDefaultTypeInternal _MobileBase_default_instance_;
}  // namespace base
}  // namespace common
namespace common {
namespace base {

// ===================================================================

class MobileBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.base.MobileBase) */ {
 public:
  MobileBase();
  virtual ~MobileBase();

  MobileBase(const MobileBase& from);

  inline MobileBase& operator=(const MobileBase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MobileBase(MobileBase&& from) noexcept
    : MobileBase() {
    *this = ::std::move(from);
  }

  inline MobileBase& operator=(MobileBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MobileBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MobileBase* internal_default_instance() {
    return reinterpret_cast<const MobileBase*>(
               &_MobileBase_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MobileBase* other);
  friend void swap(MobileBase& a, MobileBase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MobileBase* New() const PROTOBUF_FINAL { return New(NULL); }

  MobileBase* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MobileBase& from);
  void MergeFrom(const MobileBase& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MobileBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sdk_version = 1;
  void clear_sdk_version();
  static const int kSdkVersionFieldNumber = 1;
  const ::std::string& sdk_version() const;
  void set_sdk_version(const ::std::string& value);
  #if LANG_CXX11
  void set_sdk_version(::std::string&& value);
  #endif
  void set_sdk_version(const char* value);
  void set_sdk_version(const char* value, size_t size);
  ::std::string* mutable_sdk_version();
  ::std::string* release_sdk_version();
  void set_allocated_sdk_version(::std::string* sdk_version);

  // string os_version = 4;
  void clear_os_version();
  static const int kOsVersionFieldNumber = 4;
  const ::std::string& os_version() const;
  void set_os_version(const ::std::string& value);
  #if LANG_CXX11
  void set_os_version(::std::string&& value);
  #endif
  void set_os_version(const char* value);
  void set_os_version(const char* value, size_t size);
  ::std::string* mutable_os_version();
  ::std::string* release_os_version();
  void set_allocated_os_version(::std::string* os_version);

  // string device = 6;
  void clear_device();
  static const int kDeviceFieldNumber = 6;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  #if LANG_CXX11
  void set_device(::std::string&& value);
  #endif
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // string imei = 7;
  void clear_imei();
  static const int kImeiFieldNumber = 7;
  const ::std::string& imei() const;
  void set_imei(const ::std::string& value);
  #if LANG_CXX11
  void set_imei(::std::string&& value);
  #endif
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  ::std::string* mutable_imei();
  ::std::string* release_imei();
  void set_allocated_imei(::std::string* imei);

  // string device_id = 8;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 8;
  const ::std::string& device_id() const;
  void set_device_id(const ::std::string& value);
  #if LANG_CXX11
  void set_device_id(::std::string&& value);
  #endif
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  ::std::string* mutable_device_id();
  ::std::string* release_device_id();
  void set_allocated_device_id(::std::string* device_id);

  // .common.enumeration.ELanguageType language_type = 2;
  void clear_language_type();
  static const int kLanguageTypeFieldNumber = 2;
  ::common::enumeration::ELanguageType language_type() const;
  void set_language_type(::common::enumeration::ELanguageType value);

  // .common.enumeration.ENetworkType net_type = 3;
  void clear_net_type();
  static const int kNetTypeFieldNumber = 3;
  ::common::enumeration::ENetworkType net_type() const;
  void set_net_type(::common::enumeration::ENetworkType value);

  // .common.enumeration.EClientType client_type = 5;
  void clear_client_type();
  static const int kClientTypeFieldNumber = 5;
  ::common::enumeration::EClientType client_type() const;
  void set_client_type(::common::enumeration::EClientType value);

  // .common.enumeration.ETerminalDeviceType terminal_device_type = 9;
  void clear_terminal_device_type();
  static const int kTerminalDeviceTypeFieldNumber = 9;
  ::common::enumeration::ETerminalDeviceType terminal_device_type() const;
  void set_terminal_device_type(::common::enumeration::ETerminalDeviceType value);

  // @@protoc_insertion_point(class_scope:common.base.MobileBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sdk_version_;
  ::google::protobuf::internal::ArenaStringPtr os_version_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::internal::ArenaStringPtr imei_;
  ::google::protobuf::internal::ArenaStringPtr device_id_;
  int language_type_;
  int net_type_;
  int client_type_;
  int terminal_device_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fbase_2eproto::TableStruct;
  friend void ::protobuf_common_2fbase_2eproto::InitDefaultsMobileBaseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MobileBase

// string sdk_version = 1;
inline void MobileBase::clear_sdk_version() {
  sdk_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MobileBase::sdk_version() const {
  // @@protoc_insertion_point(field_get:common.base.MobileBase.sdk_version)
  return sdk_version_.GetNoArena();
}
inline void MobileBase::set_sdk_version(const ::std::string& value) {
  
  sdk_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.base.MobileBase.sdk_version)
}
#if LANG_CXX11
inline void MobileBase::set_sdk_version(::std::string&& value) {
  
  sdk_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.base.MobileBase.sdk_version)
}
#endif
inline void MobileBase::set_sdk_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sdk_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.base.MobileBase.sdk_version)
}
inline void MobileBase::set_sdk_version(const char* value, size_t size) {
  
  sdk_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.base.MobileBase.sdk_version)
}
inline ::std::string* MobileBase::mutable_sdk_version() {
  
  // @@protoc_insertion_point(field_mutable:common.base.MobileBase.sdk_version)
  return sdk_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MobileBase::release_sdk_version() {
  // @@protoc_insertion_point(field_release:common.base.MobileBase.sdk_version)
  
  return sdk_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MobileBase::set_allocated_sdk_version(::std::string* sdk_version) {
  if (sdk_version != NULL) {
    
  } else {
    
  }
  sdk_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdk_version);
  // @@protoc_insertion_point(field_set_allocated:common.base.MobileBase.sdk_version)
}

// .common.enumeration.ELanguageType language_type = 2;
inline void MobileBase::clear_language_type() {
  language_type_ = 0;
}
inline ::common::enumeration::ELanguageType MobileBase::language_type() const {
  // @@protoc_insertion_point(field_get:common.base.MobileBase.language_type)
  return static_cast< ::common::enumeration::ELanguageType >(language_type_);
}
inline void MobileBase::set_language_type(::common::enumeration::ELanguageType value) {
  
  language_type_ = value;
  // @@protoc_insertion_point(field_set:common.base.MobileBase.language_type)
}

// .common.enumeration.ENetworkType net_type = 3;
inline void MobileBase::clear_net_type() {
  net_type_ = 0;
}
inline ::common::enumeration::ENetworkType MobileBase::net_type() const {
  // @@protoc_insertion_point(field_get:common.base.MobileBase.net_type)
  return static_cast< ::common::enumeration::ENetworkType >(net_type_);
}
inline void MobileBase::set_net_type(::common::enumeration::ENetworkType value) {
  
  net_type_ = value;
  // @@protoc_insertion_point(field_set:common.base.MobileBase.net_type)
}

// string os_version = 4;
inline void MobileBase::clear_os_version() {
  os_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MobileBase::os_version() const {
  // @@protoc_insertion_point(field_get:common.base.MobileBase.os_version)
  return os_version_.GetNoArena();
}
inline void MobileBase::set_os_version(const ::std::string& value) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.base.MobileBase.os_version)
}
#if LANG_CXX11
inline void MobileBase::set_os_version(::std::string&& value) {
  
  os_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.base.MobileBase.os_version)
}
#endif
inline void MobileBase::set_os_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.base.MobileBase.os_version)
}
inline void MobileBase::set_os_version(const char* value, size_t size) {
  
  os_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.base.MobileBase.os_version)
}
inline ::std::string* MobileBase::mutable_os_version() {
  
  // @@protoc_insertion_point(field_mutable:common.base.MobileBase.os_version)
  return os_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MobileBase::release_os_version() {
  // @@protoc_insertion_point(field_release:common.base.MobileBase.os_version)
  
  return os_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MobileBase::set_allocated_os_version(::std::string* os_version) {
  if (os_version != NULL) {
    
  } else {
    
  }
  os_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_version);
  // @@protoc_insertion_point(field_set_allocated:common.base.MobileBase.os_version)
}

// .common.enumeration.EClientType client_type = 5;
inline void MobileBase::clear_client_type() {
  client_type_ = 0;
}
inline ::common::enumeration::EClientType MobileBase::client_type() const {
  // @@protoc_insertion_point(field_get:common.base.MobileBase.client_type)
  return static_cast< ::common::enumeration::EClientType >(client_type_);
}
inline void MobileBase::set_client_type(::common::enumeration::EClientType value) {
  
  client_type_ = value;
  // @@protoc_insertion_point(field_set:common.base.MobileBase.client_type)
}

// string device = 6;
inline void MobileBase::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MobileBase::device() const {
  // @@protoc_insertion_point(field_get:common.base.MobileBase.device)
  return device_.GetNoArena();
}
inline void MobileBase::set_device(const ::std::string& value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.base.MobileBase.device)
}
#if LANG_CXX11
inline void MobileBase::set_device(::std::string&& value) {
  
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.base.MobileBase.device)
}
#endif
inline void MobileBase::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.base.MobileBase.device)
}
inline void MobileBase::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.base.MobileBase.device)
}
inline ::std::string* MobileBase::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:common.base.MobileBase.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MobileBase::release_device() {
  // @@protoc_insertion_point(field_release:common.base.MobileBase.device)
  
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MobileBase::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:common.base.MobileBase.device)
}

// string imei = 7;
inline void MobileBase::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MobileBase::imei() const {
  // @@protoc_insertion_point(field_get:common.base.MobileBase.imei)
  return imei_.GetNoArena();
}
inline void MobileBase::set_imei(const ::std::string& value) {
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.base.MobileBase.imei)
}
#if LANG_CXX11
inline void MobileBase::set_imei(::std::string&& value) {
  
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.base.MobileBase.imei)
}
#endif
inline void MobileBase::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.base.MobileBase.imei)
}
inline void MobileBase::set_imei(const char* value, size_t size) {
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.base.MobileBase.imei)
}
inline ::std::string* MobileBase::mutable_imei() {
  
  // @@protoc_insertion_point(field_mutable:common.base.MobileBase.imei)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MobileBase::release_imei() {
  // @@protoc_insertion_point(field_release:common.base.MobileBase.imei)
  
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MobileBase::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    
  } else {
    
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:common.base.MobileBase.imei)
}

// string device_id = 8;
inline void MobileBase::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MobileBase::device_id() const {
  // @@protoc_insertion_point(field_get:common.base.MobileBase.device_id)
  return device_id_.GetNoArena();
}
inline void MobileBase::set_device_id(const ::std::string& value) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.base.MobileBase.device_id)
}
#if LANG_CXX11
inline void MobileBase::set_device_id(::std::string&& value) {
  
  device_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.base.MobileBase.device_id)
}
#endif
inline void MobileBase::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.base.MobileBase.device_id)
}
inline void MobileBase::set_device_id(const char* value, size_t size) {
  
  device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.base.MobileBase.device_id)
}
inline ::std::string* MobileBase::mutable_device_id() {
  
  // @@protoc_insertion_point(field_mutable:common.base.MobileBase.device_id)
  return device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MobileBase::release_device_id() {
  // @@protoc_insertion_point(field_release:common.base.MobileBase.device_id)
  
  return device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MobileBase::set_allocated_device_id(::std::string* device_id) {
  if (device_id != NULL) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:common.base.MobileBase.device_id)
}

// .common.enumeration.ETerminalDeviceType terminal_device_type = 9;
inline void MobileBase::clear_terminal_device_type() {
  terminal_device_type_ = 0;
}
inline ::common::enumeration::ETerminalDeviceType MobileBase::terminal_device_type() const {
  // @@protoc_insertion_point(field_get:common.base.MobileBase.terminal_device_type)
  return static_cast< ::common::enumeration::ETerminalDeviceType >(terminal_device_type_);
}
inline void MobileBase::set_terminal_device_type(::common::enumeration::ETerminalDeviceType value) {
  
  terminal_device_type_ = value;
  // @@protoc_insertion_point(field_set:common.base.MobileBase.terminal_device_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace common

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2fbase_2eproto__INCLUDED
