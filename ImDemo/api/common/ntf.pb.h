// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/ntf.proto

#ifndef PROTOBUF_common_2fntf_2eproto__INCLUDED
#define PROTOBUF_common_2fntf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/enumeration.pb.h"
#include "common/msg.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_common_2fntf_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTransparentMsgNotificationImpl();
void InitDefaultsTransparentMsgNotification();
void InitDefaultsTransparentMsgCarbonNotificationImpl();
void InitDefaultsTransparentMsgCarbonNotification();
void InitDefaultsNewMsgNotificationImpl();
void InitDefaultsNewMsgNotification();
void InitDefaultsCarbonMsgNotificationImpl();
void InitDefaultsCarbonMsgNotification();
void InitDefaultsCallMsgNotificationImpl();
void InitDefaultsCallMsgNotification();
void InitDefaultsKickNotificationImpl();
void InitDefaultsKickNotification();
void InitDefaultsFriendUpdateNotificationImpl();
void InitDefaultsFriendUpdateNotification();
void InitDefaultsRetractNotificationImpl();
void InitDefaultsRetractNotification();
inline void InitDefaults() {
  InitDefaultsTransparentMsgNotification();
  InitDefaultsTransparentMsgCarbonNotification();
  InitDefaultsNewMsgNotification();
  InitDefaultsCarbonMsgNotification();
  InitDefaultsCallMsgNotification();
  InitDefaultsKickNotification();
  InitDefaultsFriendUpdateNotification();
  InitDefaultsRetractNotification();
}
}  // namespace protobuf_common_2fntf_2eproto
namespace common {
namespace ntf {
class CallMsgNotification;
class CallMsgNotificationDefaultTypeInternal;
extern CallMsgNotificationDefaultTypeInternal _CallMsgNotification_default_instance_;
class CarbonMsgNotification;
class CarbonMsgNotificationDefaultTypeInternal;
extern CarbonMsgNotificationDefaultTypeInternal _CarbonMsgNotification_default_instance_;
class FriendUpdateNotification;
class FriendUpdateNotificationDefaultTypeInternal;
extern FriendUpdateNotificationDefaultTypeInternal _FriendUpdateNotification_default_instance_;
class KickNotification;
class KickNotificationDefaultTypeInternal;
extern KickNotificationDefaultTypeInternal _KickNotification_default_instance_;
class NewMsgNotification;
class NewMsgNotificationDefaultTypeInternal;
extern NewMsgNotificationDefaultTypeInternal _NewMsgNotification_default_instance_;
class RetractNotification;
class RetractNotificationDefaultTypeInternal;
extern RetractNotificationDefaultTypeInternal _RetractNotification_default_instance_;
class TransparentMsgCarbonNotification;
class TransparentMsgCarbonNotificationDefaultTypeInternal;
extern TransparentMsgCarbonNotificationDefaultTypeInternal _TransparentMsgCarbonNotification_default_instance_;
class TransparentMsgNotification;
class TransparentMsgNotificationDefaultTypeInternal;
extern TransparentMsgNotificationDefaultTypeInternal _TransparentMsgNotification_default_instance_;
}  // namespace ntf
}  // namespace common
namespace common {
namespace ntf {

enum ENtfType {
  UNKNOWNENTFTYPE = 0,
  LOGIN_RESPONSE = 5,
  LOGOUT_RESPONSE = 1,
  KICK_NOTIFICATION = 2,
  STREAM_INIT_RESPONSE = 3,
  PING_RESPONSE = 4,
  NEW_MSG = 10,
  FRIEND_UPDATE_NOTIFICATION = 11,
  RETRACT_NOTIFICATION = 12,
  CARBON_MSG = 13,
  CALL_MSG = 14,
  GROUP_LIST_UPDATE_NOTIFICATION = 15,
  TRANSPARENT_MSG_NOTIFICATION = 17,
  TRANSPARENT_MSG_CARBON_NOTIFICATION = 18,
  CARMACHINE_STATUS_CHANGE_NOTIFICATION = 19,
  PERSONAL_INFORMATION_CHANGE_NOTIFICATION = 20,
  ENtfType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ENtfType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ENtfType_IsValid(int value);
const ENtfType ENtfType_MIN = UNKNOWNENTFTYPE;
const ENtfType ENtfType_MAX = PERSONAL_INFORMATION_CHANGE_NOTIFICATION;
const int ENtfType_ARRAYSIZE = ENtfType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ENtfType_descriptor();
inline const ::std::string& ENtfType_Name(ENtfType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ENtfType_descriptor(), value);
}
inline bool ENtfType_Parse(
    const ::std::string& name, ENtfType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ENtfType>(
    ENtfType_descriptor(), name, value);
}
// ===================================================================

class TransparentMsgNotification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.ntf.TransparentMsgNotification) */ {
 public:
  TransparentMsgNotification();
  virtual ~TransparentMsgNotification();

  TransparentMsgNotification(const TransparentMsgNotification& from);

  inline TransparentMsgNotification& operator=(const TransparentMsgNotification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransparentMsgNotification(TransparentMsgNotification&& from) noexcept
    : TransparentMsgNotification() {
    *this = ::std::move(from);
  }

  inline TransparentMsgNotification& operator=(TransparentMsgNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransparentMsgNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransparentMsgNotification* internal_default_instance() {
    return reinterpret_cast<const TransparentMsgNotification*>(
               &_TransparentMsgNotification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TransparentMsgNotification* other);
  friend void swap(TransparentMsgNotification& a, TransparentMsgNotification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransparentMsgNotification* New() const PROTOBUF_FINAL { return New(NULL); }

  TransparentMsgNotification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransparentMsgNotification& from);
  void MergeFrom(const TransparentMsgNotification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransparentMsgNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.msg.MessageUnit unit = 1;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 1;
  const ::common::msg::MessageUnit& unit() const;
  ::common::msg::MessageUnit* release_unit();
  ::common::msg::MessageUnit* mutable_unit();
  void set_allocated_unit(::common::msg::MessageUnit* unit);

  // @@protoc_insertion_point(class_scope:common.ntf.TransparentMsgNotification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::msg::MessageUnit* unit_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fntf_2eproto::TableStruct;
  friend void ::protobuf_common_2fntf_2eproto::InitDefaultsTransparentMsgNotificationImpl();
};
// -------------------------------------------------------------------

class TransparentMsgCarbonNotification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.ntf.TransparentMsgCarbonNotification) */ {
 public:
  TransparentMsgCarbonNotification();
  virtual ~TransparentMsgCarbonNotification();

  TransparentMsgCarbonNotification(const TransparentMsgCarbonNotification& from);

  inline TransparentMsgCarbonNotification& operator=(const TransparentMsgCarbonNotification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransparentMsgCarbonNotification(TransparentMsgCarbonNotification&& from) noexcept
    : TransparentMsgCarbonNotification() {
    *this = ::std::move(from);
  }

  inline TransparentMsgCarbonNotification& operator=(TransparentMsgCarbonNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransparentMsgCarbonNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransparentMsgCarbonNotification* internal_default_instance() {
    return reinterpret_cast<const TransparentMsgCarbonNotification*>(
               &_TransparentMsgCarbonNotification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TransparentMsgCarbonNotification* other);
  friend void swap(TransparentMsgCarbonNotification& a, TransparentMsgCarbonNotification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransparentMsgCarbonNotification* New() const PROTOBUF_FINAL { return New(NULL); }

  TransparentMsgCarbonNotification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransparentMsgCarbonNotification& from);
  void MergeFrom(const TransparentMsgCarbonNotification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransparentMsgCarbonNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.msg.MessageUnit unit = 1;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 1;
  const ::common::msg::MessageUnit& unit() const;
  ::common::msg::MessageUnit* release_unit();
  ::common::msg::MessageUnit* mutable_unit();
  void set_allocated_unit(::common::msg::MessageUnit* unit);

  // @@protoc_insertion_point(class_scope:common.ntf.TransparentMsgCarbonNotification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::msg::MessageUnit* unit_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fntf_2eproto::TableStruct;
  friend void ::protobuf_common_2fntf_2eproto::InitDefaultsTransparentMsgCarbonNotificationImpl();
};
// -------------------------------------------------------------------

class NewMsgNotification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.ntf.NewMsgNotification) */ {
 public:
  NewMsgNotification();
  virtual ~NewMsgNotification();

  NewMsgNotification(const NewMsgNotification& from);

  inline NewMsgNotification& operator=(const NewMsgNotification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewMsgNotification(NewMsgNotification&& from) noexcept
    : NewMsgNotification() {
    *this = ::std::move(from);
  }

  inline NewMsgNotification& operator=(NewMsgNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewMsgNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewMsgNotification* internal_default_instance() {
    return reinterpret_cast<const NewMsgNotification*>(
               &_NewMsgNotification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(NewMsgNotification* other);
  friend void swap(NewMsgNotification& a, NewMsgNotification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewMsgNotification* New() const PROTOBUF_FINAL { return New(NULL); }

  NewMsgNotification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewMsgNotification& from);
  void MergeFrom(const NewMsgNotification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewMsgNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // uint64 guid = 2;
  void clear_guid();
  static const int kGuidFieldNumber = 2;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:common.ntf.NewMsgNotification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::uint64 guid_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fntf_2eproto::TableStruct;
  friend void ::protobuf_common_2fntf_2eproto::InitDefaultsNewMsgNotificationImpl();
};
// -------------------------------------------------------------------

class CarbonMsgNotification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.ntf.CarbonMsgNotification) */ {
 public:
  CarbonMsgNotification();
  virtual ~CarbonMsgNotification();

  CarbonMsgNotification(const CarbonMsgNotification& from);

  inline CarbonMsgNotification& operator=(const CarbonMsgNotification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CarbonMsgNotification(CarbonMsgNotification&& from) noexcept
    : CarbonMsgNotification() {
    *this = ::std::move(from);
  }

  inline CarbonMsgNotification& operator=(CarbonMsgNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CarbonMsgNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarbonMsgNotification* internal_default_instance() {
    return reinterpret_cast<const CarbonMsgNotification*>(
               &_CarbonMsgNotification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CarbonMsgNotification* other);
  friend void swap(CarbonMsgNotification& a, CarbonMsgNotification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CarbonMsgNotification* New() const PROTOBUF_FINAL { return New(NULL); }

  CarbonMsgNotification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CarbonMsgNotification& from);
  void MergeFrom(const CarbonMsgNotification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CarbonMsgNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string sender_username = 3;
  void clear_sender_username();
  static const int kSenderUsernameFieldNumber = 3;
  const ::std::string& sender_username() const;
  void set_sender_username(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_username(::std::string&& value);
  #endif
  void set_sender_username(const char* value);
  void set_sender_username(const char* value, size_t size);
  ::std::string* mutable_sender_username();
  ::std::string* release_sender_username();
  void set_allocated_sender_username(::std::string* sender_username);

  // uint64 guid = 5;
  void clear_guid();
  static const int kGuidFieldNumber = 5;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // .common.enumeration.EClientType sender_client_type = 4;
  void clear_sender_client_type();
  static const int kSenderClientTypeFieldNumber = 4;
  ::common::enumeration::EClientType sender_client_type() const;
  void set_sender_client_type(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:common.ntf.CarbonMsgNotification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr sender_username_;
  ::google::protobuf::uint64 guid_;
  int sender_client_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fntf_2eproto::TableStruct;
  friend void ::protobuf_common_2fntf_2eproto::InitDefaultsCarbonMsgNotificationImpl();
};
// -------------------------------------------------------------------

class CallMsgNotification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.ntf.CallMsgNotification) */ {
 public:
  CallMsgNotification();
  virtual ~CallMsgNotification();

  CallMsgNotification(const CallMsgNotification& from);

  inline CallMsgNotification& operator=(const CallMsgNotification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallMsgNotification(CallMsgNotification&& from) noexcept
    : CallMsgNotification() {
    *this = ::std::move(from);
  }

  inline CallMsgNotification& operator=(CallMsgNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallMsgNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallMsgNotification* internal_default_instance() {
    return reinterpret_cast<const CallMsgNotification*>(
               &_CallMsgNotification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CallMsgNotification* other);
  friend void swap(CallMsgNotification& a, CallMsgNotification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallMsgNotification* New() const PROTOBUF_FINAL { return New(NULL); }

  CallMsgNotification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CallMsgNotification& from);
  void MergeFrom(const CallMsgNotification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CallMsgNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .common.enumeration.ECallMsgType call_msg_type = 1;
  void clear_call_msg_type();
  static const int kCallMsgTypeFieldNumber = 1;
  ::common::enumeration::ECallMsgType call_msg_type() const;
  void set_call_msg_type(::common::enumeration::ECallMsgType value);

  // @@protoc_insertion_point(class_scope:common.ntf.CallMsgNotification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  int call_msg_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fntf_2eproto::TableStruct;
  friend void ::protobuf_common_2fntf_2eproto::InitDefaultsCallMsgNotificationImpl();
};
// -------------------------------------------------------------------

class KickNotification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.ntf.KickNotification) */ {
 public:
  KickNotification();
  virtual ~KickNotification();

  KickNotification(const KickNotification& from);

  inline KickNotification& operator=(const KickNotification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KickNotification(KickNotification&& from) noexcept
    : KickNotification() {
    *this = ::std::move(from);
  }

  inline KickNotification& operator=(KickNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KickNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickNotification* internal_default_instance() {
    return reinterpret_cast<const KickNotification*>(
               &_KickNotification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(KickNotification* other);
  friend void swap(KickNotification& a, KickNotification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KickNotification* New() const PROTOBUF_FINAL { return New(NULL); }

  KickNotification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KickNotification& from);
  void MergeFrom(const KickNotification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KickNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // string imei = 3;
  void clear_imei();
  static const int kImeiFieldNumber = 3;
  const ::std::string& imei() const;
  void set_imei(const ::std::string& value);
  #if LANG_CXX11
  void set_imei(::std::string&& value);
  #endif
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  ::std::string* mutable_imei();
  ::std::string* release_imei();
  void set_allocated_imei(::std::string* imei);

  // .common.enumeration.EClientType login_client_type = 1;
  void clear_login_client_type();
  static const int kLoginClientTypeFieldNumber = 1;
  ::common::enumeration::EClientType login_client_type() const;
  void set_login_client_type(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:common.ntf.KickNotification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::internal::ArenaStringPtr imei_;
  int login_client_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fntf_2eproto::TableStruct;
  friend void ::protobuf_common_2fntf_2eproto::InitDefaultsKickNotificationImpl();
};
// -------------------------------------------------------------------

class FriendUpdateNotification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.ntf.FriendUpdateNotification) */ {
 public:
  FriendUpdateNotification();
  virtual ~FriendUpdateNotification();

  FriendUpdateNotification(const FriendUpdateNotification& from);

  inline FriendUpdateNotification& operator=(const FriendUpdateNotification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendUpdateNotification(FriendUpdateNotification&& from) noexcept
    : FriendUpdateNotification() {
    *this = ::std::move(from);
  }

  inline FriendUpdateNotification& operator=(FriendUpdateNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendUpdateNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendUpdateNotification* internal_default_instance() {
    return reinterpret_cast<const FriendUpdateNotification*>(
               &_FriendUpdateNotification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(FriendUpdateNotification* other);
  friend void swap(FriendUpdateNotification& a, FriendUpdateNotification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendUpdateNotification* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendUpdateNotification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendUpdateNotification& from);
  void MergeFrom(const FriendUpdateNotification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendUpdateNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:common.ntf.FriendUpdateNotification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fntf_2eproto::TableStruct;
  friend void ::protobuf_common_2fntf_2eproto::InitDefaultsFriendUpdateNotificationImpl();
};
// -------------------------------------------------------------------

class RetractNotification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.ntf.RetractNotification) */ {
 public:
  RetractNotification();
  virtual ~RetractNotification();

  RetractNotification(const RetractNotification& from);

  inline RetractNotification& operator=(const RetractNotification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RetractNotification(RetractNotification&& from) noexcept
    : RetractNotification() {
    *this = ::std::move(from);
  }

  inline RetractNotification& operator=(RetractNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RetractNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetractNotification* internal_default_instance() {
    return reinterpret_cast<const RetractNotification*>(
               &_RetractNotification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(RetractNotification* other);
  friend void swap(RetractNotification& a, RetractNotification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RetractNotification* New() const PROTOBUF_FINAL { return New(NULL); }

  RetractNotification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RetractNotification& from);
  void MergeFrom(const RetractNotification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RetractNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 3;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 3;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string uri = 4;
  void clear_uri();
  static const int kUriFieldNumber = 4;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // uint64 retract_guid = 5;
  void clear_retract_guid();
  static const int kRetractGuidFieldNumber = 5;
  ::google::protobuf::uint64 retract_guid() const;
  void set_retract_guid(::google::protobuf::uint64 value);

  // .common.msg.EMsgType msg_type = 2;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 2;
  ::common::msg::EMsgType msg_type() const;
  void set_msg_type(::common::msg::EMsgType value);

  // @@protoc_insertion_point(class_scope:common.ntf.RetractNotification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::uint64 retract_guid_;
  int msg_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fntf_2eproto::TableStruct;
  friend void ::protobuf_common_2fntf_2eproto::InitDefaultsRetractNotificationImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransparentMsgNotification

// .common.msg.MessageUnit unit = 1;
inline bool TransparentMsgNotification::has_unit() const {
  return this != internal_default_instance() && unit_ != NULL;
}
inline const ::common::msg::MessageUnit& TransparentMsgNotification::unit() const {
  const ::common::msg::MessageUnit* p = unit_;
  // @@protoc_insertion_point(field_get:common.ntf.TransparentMsgNotification.unit)
  return p != NULL ? *p : *reinterpret_cast<const ::common::msg::MessageUnit*>(
      &::common::msg::_MessageUnit_default_instance_);
}
inline ::common::msg::MessageUnit* TransparentMsgNotification::release_unit() {
  // @@protoc_insertion_point(field_release:common.ntf.TransparentMsgNotification.unit)
  
  ::common::msg::MessageUnit* temp = unit_;
  unit_ = NULL;
  return temp;
}
inline ::common::msg::MessageUnit* TransparentMsgNotification::mutable_unit() {
  
  if (unit_ == NULL) {
    unit_ = new ::common::msg::MessageUnit;
  }
  // @@protoc_insertion_point(field_mutable:common.ntf.TransparentMsgNotification.unit)
  return unit_;
}
inline void TransparentMsgNotification::set_allocated_unit(::common::msg::MessageUnit* unit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(unit_);
  }
  if (unit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    
  } else {
    
  }
  unit_ = unit;
  // @@protoc_insertion_point(field_set_allocated:common.ntf.TransparentMsgNotification.unit)
}

// -------------------------------------------------------------------

// TransparentMsgCarbonNotification

// .common.msg.MessageUnit unit = 1;
inline bool TransparentMsgCarbonNotification::has_unit() const {
  return this != internal_default_instance() && unit_ != NULL;
}
inline const ::common::msg::MessageUnit& TransparentMsgCarbonNotification::unit() const {
  const ::common::msg::MessageUnit* p = unit_;
  // @@protoc_insertion_point(field_get:common.ntf.TransparentMsgCarbonNotification.unit)
  return p != NULL ? *p : *reinterpret_cast<const ::common::msg::MessageUnit*>(
      &::common::msg::_MessageUnit_default_instance_);
}
inline ::common::msg::MessageUnit* TransparentMsgCarbonNotification::release_unit() {
  // @@protoc_insertion_point(field_release:common.ntf.TransparentMsgCarbonNotification.unit)
  
  ::common::msg::MessageUnit* temp = unit_;
  unit_ = NULL;
  return temp;
}
inline ::common::msg::MessageUnit* TransparentMsgCarbonNotification::mutable_unit() {
  
  if (unit_ == NULL) {
    unit_ = new ::common::msg::MessageUnit;
  }
  // @@protoc_insertion_point(field_mutable:common.ntf.TransparentMsgCarbonNotification.unit)
  return unit_;
}
inline void TransparentMsgCarbonNotification::set_allocated_unit(::common::msg::MessageUnit* unit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(unit_);
  }
  if (unit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    
  } else {
    
  }
  unit_ = unit;
  // @@protoc_insertion_point(field_set_allocated:common.ntf.TransparentMsgCarbonNotification.unit)
}

// -------------------------------------------------------------------

// NewMsgNotification

// string content = 1;
inline void NewMsgNotification::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewMsgNotification::content() const {
  // @@protoc_insertion_point(field_get:common.ntf.NewMsgNotification.content)
  return content_.GetNoArena();
}
inline void NewMsgNotification::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ntf.NewMsgNotification.content)
}
#if LANG_CXX11
inline void NewMsgNotification::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ntf.NewMsgNotification.content)
}
#endif
inline void NewMsgNotification::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ntf.NewMsgNotification.content)
}
inline void NewMsgNotification::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ntf.NewMsgNotification.content)
}
inline ::std::string* NewMsgNotification::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:common.ntf.NewMsgNotification.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewMsgNotification::release_content() {
  // @@protoc_insertion_point(field_release:common.ntf.NewMsgNotification.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewMsgNotification::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:common.ntf.NewMsgNotification.content)
}

// uint64 guid = 2;
inline void NewMsgNotification::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NewMsgNotification::guid() const {
  // @@protoc_insertion_point(field_get:common.ntf.NewMsgNotification.guid)
  return guid_;
}
inline void NewMsgNotification::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:common.ntf.NewMsgNotification.guid)
}

// -------------------------------------------------------------------

// CarbonMsgNotification

// string content = 1;
inline void CarbonMsgNotification::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CarbonMsgNotification::content() const {
  // @@protoc_insertion_point(field_get:common.ntf.CarbonMsgNotification.content)
  return content_.GetNoArena();
}
inline void CarbonMsgNotification::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ntf.CarbonMsgNotification.content)
}
#if LANG_CXX11
inline void CarbonMsgNotification::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ntf.CarbonMsgNotification.content)
}
#endif
inline void CarbonMsgNotification::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ntf.CarbonMsgNotification.content)
}
inline void CarbonMsgNotification::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ntf.CarbonMsgNotification.content)
}
inline ::std::string* CarbonMsgNotification::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:common.ntf.CarbonMsgNotification.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CarbonMsgNotification::release_content() {
  // @@protoc_insertion_point(field_release:common.ntf.CarbonMsgNotification.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CarbonMsgNotification::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:common.ntf.CarbonMsgNotification.content)
}

// string appkey = 2;
inline void CarbonMsgNotification::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CarbonMsgNotification::appkey() const {
  // @@protoc_insertion_point(field_get:common.ntf.CarbonMsgNotification.appkey)
  return appkey_.GetNoArena();
}
inline void CarbonMsgNotification::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ntf.CarbonMsgNotification.appkey)
}
#if LANG_CXX11
inline void CarbonMsgNotification::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ntf.CarbonMsgNotification.appkey)
}
#endif
inline void CarbonMsgNotification::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ntf.CarbonMsgNotification.appkey)
}
inline void CarbonMsgNotification::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ntf.CarbonMsgNotification.appkey)
}
inline ::std::string* CarbonMsgNotification::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:common.ntf.CarbonMsgNotification.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CarbonMsgNotification::release_appkey() {
  // @@protoc_insertion_point(field_release:common.ntf.CarbonMsgNotification.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CarbonMsgNotification::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:common.ntf.CarbonMsgNotification.appkey)
}

// string sender_username = 3;
inline void CarbonMsgNotification::clear_sender_username() {
  sender_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CarbonMsgNotification::sender_username() const {
  // @@protoc_insertion_point(field_get:common.ntf.CarbonMsgNotification.sender_username)
  return sender_username_.GetNoArena();
}
inline void CarbonMsgNotification::set_sender_username(const ::std::string& value) {
  
  sender_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ntf.CarbonMsgNotification.sender_username)
}
#if LANG_CXX11
inline void CarbonMsgNotification::set_sender_username(::std::string&& value) {
  
  sender_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ntf.CarbonMsgNotification.sender_username)
}
#endif
inline void CarbonMsgNotification::set_sender_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ntf.CarbonMsgNotification.sender_username)
}
inline void CarbonMsgNotification::set_sender_username(const char* value, size_t size) {
  
  sender_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ntf.CarbonMsgNotification.sender_username)
}
inline ::std::string* CarbonMsgNotification::mutable_sender_username() {
  
  // @@protoc_insertion_point(field_mutable:common.ntf.CarbonMsgNotification.sender_username)
  return sender_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CarbonMsgNotification::release_sender_username() {
  // @@protoc_insertion_point(field_release:common.ntf.CarbonMsgNotification.sender_username)
  
  return sender_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CarbonMsgNotification::set_allocated_sender_username(::std::string* sender_username) {
  if (sender_username != NULL) {
    
  } else {
    
  }
  sender_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_username);
  // @@protoc_insertion_point(field_set_allocated:common.ntf.CarbonMsgNotification.sender_username)
}

// .common.enumeration.EClientType sender_client_type = 4;
inline void CarbonMsgNotification::clear_sender_client_type() {
  sender_client_type_ = 0;
}
inline ::common::enumeration::EClientType CarbonMsgNotification::sender_client_type() const {
  // @@protoc_insertion_point(field_get:common.ntf.CarbonMsgNotification.sender_client_type)
  return static_cast< ::common::enumeration::EClientType >(sender_client_type_);
}
inline void CarbonMsgNotification::set_sender_client_type(::common::enumeration::EClientType value) {
  
  sender_client_type_ = value;
  // @@protoc_insertion_point(field_set:common.ntf.CarbonMsgNotification.sender_client_type)
}

// uint64 guid = 5;
inline void CarbonMsgNotification::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CarbonMsgNotification::guid() const {
  // @@protoc_insertion_point(field_get:common.ntf.CarbonMsgNotification.guid)
  return guid_;
}
inline void CarbonMsgNotification::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:common.ntf.CarbonMsgNotification.guid)
}

// -------------------------------------------------------------------

// CallMsgNotification

// .common.enumeration.ECallMsgType call_msg_type = 1;
inline void CallMsgNotification::clear_call_msg_type() {
  call_msg_type_ = 0;
}
inline ::common::enumeration::ECallMsgType CallMsgNotification::call_msg_type() const {
  // @@protoc_insertion_point(field_get:common.ntf.CallMsgNotification.call_msg_type)
  return static_cast< ::common::enumeration::ECallMsgType >(call_msg_type_);
}
inline void CallMsgNotification::set_call_msg_type(::common::enumeration::ECallMsgType value) {
  
  call_msg_type_ = value;
  // @@protoc_insertion_point(field_set:common.ntf.CallMsgNotification.call_msg_type)
}

// string content = 2;
inline void CallMsgNotification::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallMsgNotification::content() const {
  // @@protoc_insertion_point(field_get:common.ntf.CallMsgNotification.content)
  return content_.GetNoArena();
}
inline void CallMsgNotification::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ntf.CallMsgNotification.content)
}
#if LANG_CXX11
inline void CallMsgNotification::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ntf.CallMsgNotification.content)
}
#endif
inline void CallMsgNotification::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ntf.CallMsgNotification.content)
}
inline void CallMsgNotification::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ntf.CallMsgNotification.content)
}
inline ::std::string* CallMsgNotification::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:common.ntf.CallMsgNotification.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallMsgNotification::release_content() {
  // @@protoc_insertion_point(field_release:common.ntf.CallMsgNotification.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallMsgNotification::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:common.ntf.CallMsgNotification.content)
}

// -------------------------------------------------------------------

// KickNotification

// .common.enumeration.EClientType login_client_type = 1;
inline void KickNotification::clear_login_client_type() {
  login_client_type_ = 0;
}
inline ::common::enumeration::EClientType KickNotification::login_client_type() const {
  // @@protoc_insertion_point(field_get:common.ntf.KickNotification.login_client_type)
  return static_cast< ::common::enumeration::EClientType >(login_client_type_);
}
inline void KickNotification::set_login_client_type(::common::enumeration::EClientType value) {
  
  login_client_type_ = value;
  // @@protoc_insertion_point(field_set:common.ntf.KickNotification.login_client_type)
}

// string reason = 2;
inline void KickNotification::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KickNotification::reason() const {
  // @@protoc_insertion_point(field_get:common.ntf.KickNotification.reason)
  return reason_.GetNoArena();
}
inline void KickNotification::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ntf.KickNotification.reason)
}
#if LANG_CXX11
inline void KickNotification::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ntf.KickNotification.reason)
}
#endif
inline void KickNotification::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ntf.KickNotification.reason)
}
inline void KickNotification::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ntf.KickNotification.reason)
}
inline ::std::string* KickNotification::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:common.ntf.KickNotification.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KickNotification::release_reason() {
  // @@protoc_insertion_point(field_release:common.ntf.KickNotification.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KickNotification::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:common.ntf.KickNotification.reason)
}

// string imei = 3;
inline void KickNotification::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KickNotification::imei() const {
  // @@protoc_insertion_point(field_get:common.ntf.KickNotification.imei)
  return imei_.GetNoArena();
}
inline void KickNotification::set_imei(const ::std::string& value) {
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ntf.KickNotification.imei)
}
#if LANG_CXX11
inline void KickNotification::set_imei(::std::string&& value) {
  
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ntf.KickNotification.imei)
}
#endif
inline void KickNotification::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ntf.KickNotification.imei)
}
inline void KickNotification::set_imei(const char* value, size_t size) {
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ntf.KickNotification.imei)
}
inline ::std::string* KickNotification::mutable_imei() {
  
  // @@protoc_insertion_point(field_mutable:common.ntf.KickNotification.imei)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KickNotification::release_imei() {
  // @@protoc_insertion_point(field_release:common.ntf.KickNotification.imei)
  
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KickNotification::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    
  } else {
    
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:common.ntf.KickNotification.imei)
}

// -------------------------------------------------------------------

// FriendUpdateNotification

// string content = 1;
inline void FriendUpdateNotification::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendUpdateNotification::content() const {
  // @@protoc_insertion_point(field_get:common.ntf.FriendUpdateNotification.content)
  return content_.GetNoArena();
}
inline void FriendUpdateNotification::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ntf.FriendUpdateNotification.content)
}
#if LANG_CXX11
inline void FriendUpdateNotification::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ntf.FriendUpdateNotification.content)
}
#endif
inline void FriendUpdateNotification::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ntf.FriendUpdateNotification.content)
}
inline void FriendUpdateNotification::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ntf.FriendUpdateNotification.content)
}
inline ::std::string* FriendUpdateNotification::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:common.ntf.FriendUpdateNotification.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendUpdateNotification::release_content() {
  // @@protoc_insertion_point(field_release:common.ntf.FriendUpdateNotification.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendUpdateNotification::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:common.ntf.FriendUpdateNotification.content)
}

// -------------------------------------------------------------------

// RetractNotification

// string appkey = 1;
inline void RetractNotification::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RetractNotification::appkey() const {
  // @@protoc_insertion_point(field_get:common.ntf.RetractNotification.appkey)
  return appkey_.GetNoArena();
}
inline void RetractNotification::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ntf.RetractNotification.appkey)
}
#if LANG_CXX11
inline void RetractNotification::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ntf.RetractNotification.appkey)
}
#endif
inline void RetractNotification::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ntf.RetractNotification.appkey)
}
inline void RetractNotification::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ntf.RetractNotification.appkey)
}
inline ::std::string* RetractNotification::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:common.ntf.RetractNotification.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RetractNotification::release_appkey() {
  // @@protoc_insertion_point(field_release:common.ntf.RetractNotification.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetractNotification::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:common.ntf.RetractNotification.appkey)
}

// .common.msg.EMsgType msg_type = 2;
inline void RetractNotification::clear_msg_type() {
  msg_type_ = 0;
}
inline ::common::msg::EMsgType RetractNotification::msg_type() const {
  // @@protoc_insertion_point(field_get:common.ntf.RetractNotification.msg_type)
  return static_cast< ::common::msg::EMsgType >(msg_type_);
}
inline void RetractNotification::set_msg_type(::common::msg::EMsgType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:common.ntf.RetractNotification.msg_type)
}

// string from_username = 3;
inline void RetractNotification::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RetractNotification::from_username() const {
  // @@protoc_insertion_point(field_get:common.ntf.RetractNotification.from_username)
  return from_username_.GetNoArena();
}
inline void RetractNotification::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ntf.RetractNotification.from_username)
}
#if LANG_CXX11
inline void RetractNotification::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ntf.RetractNotification.from_username)
}
#endif
inline void RetractNotification::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ntf.RetractNotification.from_username)
}
inline void RetractNotification::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ntf.RetractNotification.from_username)
}
inline ::std::string* RetractNotification::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:common.ntf.RetractNotification.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RetractNotification::release_from_username() {
  // @@protoc_insertion_point(field_release:common.ntf.RetractNotification.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetractNotification::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:common.ntf.RetractNotification.from_username)
}

// string uri = 4;
inline void RetractNotification::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RetractNotification::uri() const {
  // @@protoc_insertion_point(field_get:common.ntf.RetractNotification.uri)
  return uri_.GetNoArena();
}
inline void RetractNotification::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.ntf.RetractNotification.uri)
}
#if LANG_CXX11
inline void RetractNotification::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.ntf.RetractNotification.uri)
}
#endif
inline void RetractNotification::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.ntf.RetractNotification.uri)
}
inline void RetractNotification::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.ntf.RetractNotification.uri)
}
inline ::std::string* RetractNotification::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:common.ntf.RetractNotification.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RetractNotification::release_uri() {
  // @@protoc_insertion_point(field_release:common.ntf.RetractNotification.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetractNotification::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:common.ntf.RetractNotification.uri)
}

// uint64 retract_guid = 5;
inline void RetractNotification::clear_retract_guid() {
  retract_guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RetractNotification::retract_guid() const {
  // @@protoc_insertion_point(field_get:common.ntf.RetractNotification.retract_guid)
  return retract_guid_;
}
inline void RetractNotification::set_retract_guid(::google::protobuf::uint64 value) {
  
  retract_guid_ = value;
  // @@protoc_insertion_point(field_set:common.ntf.RetractNotification.retract_guid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ntf
}  // namespace common

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::common::ntf::ENtfType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::ntf::ENtfType>() {
  return ::common::ntf::ENtfType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2fntf_2eproto__INCLUDED
