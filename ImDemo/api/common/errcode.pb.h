// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/errcode.proto

#ifndef PROTOBUF_common_2ferrcode_2eproto__INCLUDED
#define PROTOBUF_common_2ferrcode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace protobuf_common_2ferrcode_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
inline void InitDefaults() {
}
}  // namespace protobuf_common_2ferrcode_2eproto
namespace common {
namespace errcode {
}  // namespace errcode
}  // namespace common
namespace common {
namespace errcode {

enum EErrorCode {
  UNKNOWN_EERRORCODE = 0,
  OK = 200,
  DATABASE_ERROR = 1,
  SESSION_TIMEOUTED = 2,
  USER_NOT_EXISTED_OR_PWD_ERROR = 3,
  ERROR_SYSTEM = 4,
  FAILED_ACCESS_RESOURCE = 5,
  PERMISSION_DENIED = 6,
  INVALID_PARAM = 7,
  PROTO_PARSE_ERROR = 8,
  USER_LOGINED_OTHERDEVICE = 20,
  USER_TEMPPROHIBIT = 21,
  APPKEY_OR_APPKEYPWD_ERROR = 23,
  SERVER_INNER_ERROR = 500,
  USER_NOT_EXISTED = 501,
  USER_HAS_REGISTERED = 502,
  USER_PHONE_INVALID = 503,
  USER_CURRENT_SILENT = 504,
  USER_CURRENT_NOT_SILENT = 505,
  PHONE_HAS_REGISTERED = 506,
  PARAM_ERROR_PASSWORD_EMPTY = 507,
  USER_CREATE_ERROR = 511,
  USER_DELETE_ERROR = 512,
  USER_UPDATE_ERROR = 513,
  USER_QUERY_ERROR = 514,
  USER_DEVICEID_NOT_MATCH_THE_LAST = 515,
  USER_LOGIN_TOKEN_INVALID = 516,
  USER_NOT_LOGIN = 601,
  USER_CONFLICT_LOGIN = 602,
  SESSION_STATUS_ERROR = 603,
  CONNECTOR_USER_ALREADY_LOGIN = 604,
  CONNECTOR_LOGIN_MODE_MUST_FILL = 605,
  CHAT_SENDER_IS_FORBIDDEN = 1001,
  CHAT_RECEIVER_NOT_EXIST = 1002,
  CHAT_INVALID_MESSAGE = 1003,
  CHAT_MESSAGE_SAVE_FAILED = 1004,
  CHAT_FROM_IS_EMPTY = 1005,
  CHAT_EXCEED_MULTI_RECEIVER_LIMIT = 1006,
  CHAT_SOME_RECEIVER_NOT_EXIST = 1007,
  CHAT_SKIP_FILTER = 1008,
  CHAT_FILTER_NO_MESSAGE = 1009,
  CHAT_SENDER_IS_SHIELDED = 1010,
  PUSH_UID_NULL_ERROR = 1201,
  PUSH_CREATE_CRTIFICATE_FAILED = 1202,
  PUSH_DELETE_CRTIFICATE_FAILED = 1203,
  PUSH_CLEAR_TOKEN_FAILED = 1204,
  PUSH_SET_TOKEN_FAILED = 1205,
  PUSH_QUERY_CRT_TYPE_FAILED = 1206,
  PUSH_SET_BADGE_FAILED = 1207,
  PUSH_BUNDLEID_EMPYT = 1208,
  PUSH_USER_NOT_ONLINE = 1209,
  PUSH_CUSTOM_MSG_FAIL = 1210,
  PUSH_CUSTOM_MSG_CARBON_FAIL = 1211,
  PUSH_CUSTOM_MSG_SAVE_FIAL = 1212,
  GROUP_EXCEED_CREW_COUNT_LIMIT = 1401,
  GROUP_OWNER_MUST_NOT_BE_EMPTY = 1402,
  GROUP_NAME_EXCEED_LIMIT = 1403,
  GROUP_NOT_EXIST = 1404,
  GROUP_INVITEE_ALREADY_IN = 1405,
  GROUP_INVITATIN_UNAVAILABLE = 1406,
  GROUP_REQUESTER_NOT_IN_GROUP = 1407,
  GROUP_EMPTY_MEMBER_AND_INVITEE = 1408,
  GROUP_REQUESTER_IS_NOT_OWNER = 1409,
  GROUP_REQUESTER_ALREADY_IN = 1410,
  GROUP_CREW_NICK_EXCEED_LIMIT = 1411,
  GROUP_REASON_LENGTH_LIMIT = 1412,
  GROUP_JOIN_GROUP_HAS_BEEN_PROCESSED = 1413,
  GROUP_NEVER_JOIN_GROUP = 1414,
  GROUP_REQUESTER_IS_NOT_OWNER_OR_ADMIN = 1415,
  GROUP_NEW_OWNER_NOT_IN_GROUP = 1416,
  GROUP_ADMINS_INVALID = 1417,
  GROUP_PARAM_ERROR = 1418,
  GROUP_EMPTY_BEKICKED_LIST = 1419,
  GROUP_MEMBER_DO_KICK_FORBIDDEN = 1420,
  GROUP_SELF_KICK_FORBIDDEN = 1421,
  GROUP_ADMIN_KICK_NONMEMBER_FORBIDDEN = 1422,
  GROUP_CHANGE_NICK_LIST_EMPTY = 1423,
  GROUP_CHANGE_NICK_HASERROR = 1424,
  GROUP_NO_VALID_MEMBER_TO_BE_KICKED = 1425,
  GROUP_SETMANAGER_HASERROR = 1426,
  GROUP_UNSETMANAGER_HASERROR = 1427,
  GROUP_ADDMAMBER_HASERROR = 1428,
  GROUP_DELMAMBER_HASERROR = 1429,
  GROUP_INVITATION_OVERDUE = 1430,
  GROUP_DESC_EXCEED_LIMIT = 1431,
  GROUP_SOME_USER_NOT_REGISTERD = 1432,
  GROUP_OWNER_CAN_NOT_EXIT = 1433,
  GROUP_BEKICKED_NO_IN_GROUP = 1434,
  GROUP_CREATE_MEMBER_REPEATED = 1435,
  GROUP_SETADMIN_MEMBER_REPEATED = 1436,
  GROUP_UNSETADMIN_MEMBER_REPEATED = 1437,
  GROUP_NEW_OWNER_ALREADY_OWNER = 1438,
  GROUP_MEMBER_NOT_IN = 1439,
  GROUP_TAG_NOT_EXIST = 1440,
  GROUP_TAG_NAME_EXCEED_LIMIT = 1441,
  GROUP_TAG_DESC_EXCEED_LIMIT = 1442,
  GROUP_NOT_EXIST_OR_CREW_EMPTY = 1443,
  GROUP_MUST_SET_ASSEMBLY_POINT = 1444,
  GROUP_FILTER_NO_MESSAGE = 1445,
  JIMAO_SOME_USERS_NOT_EXISTS = 1601,
  JIMAO_WRONG_MSGTYPE_ERROR = 1607,
  JIMAO_PARSE_MSGDATA_ERROR = 1608,
  JIMAO_ADD_THREAD_ERROR = 1609,
  JIMAO_STORE_READEDSIGNAL_ERROR = 1610,
  JIMAO_AUDIO_NOT_EXIST = 1611,
  JIMAO_AUDIO_INNER_ERROR = 1622,
  JIMAO_MSG_HAD_SENDED = 1633,
  JIMAO_REDIS_ERROR = 1634,
  HMS_MESSAGE_STORE_ERROR = 2001,
  HMS_ERROR_PARSING_PROTOCLASS = 2002,
  HMS_NO_MESSAGE_FOUND = 2003,
  HMS_PARAM_FORMAT_ERROR = 2004,
  HMS_UNKOWN_QUERY_ERROR = 2005,
  HMS_GUID_INVALID_ERROR = 2006,
  HMS_INNER_ERROR = 2007,
  HMS_ERROR_UPDATE_USER_GUID = 2008,
  HMS_ERROR_QUERY_GROUP_LIST = 2009,
  HMS_USER_GROUP_LIST_EMPTY = 2010,
  HMS_SESSION_NOT_EXIST = 2011,
  HMS_ERROR_RETRACT_MESSAGE = 2012,
  HMS_MESSAGE_NO_ALL_REMOVED = 2013,
  HMS_USER_HAS_NO_SEND_MESSAGE = 2014,
  HMS_DATABASE_ERROR = 2015,
  HMS_TEMPORARY_MESSAGE_RETRACT = 2016,
  MSGGW_MESSAGE_UPLOAD_FAILED = 2201,
  MSGGW_MESSAGE_SEND_FAILD = 2202,
  MSGGW_SOME_USER_NOT_EXSIT = 2203,
  SERIAL_ZK_NODE_NOT_FOUND = 2401,
  SERIAL_SEQ_NOT_EXIST = 2402,
  SERIAL_WOKERID_NOT_EXIST = 2403,
  SERIAL_ID_DELETE_FAILED = 2404,
  SERIAL_ID_GENERATE_FAILED = 2405,
  SERIAL_SERVER_INNER_ERROR = 2406,
  SMS_SEND_FAILED = 2601,
  SMS_RECEIVER_PHONE_EMPTY = 2602,
  EMAIL_SEND_FAILED = 2801,
  EMAIL_RECEIVER_ADDRESS_EMPTY = 2802,
  FRONT_APPKEY_NOT_FOUND = 3001,
  FRONT_APPKEY_ALREADY_EXISTS = 3002,
  APPKEY_NOT_EXISTS = 3003,
  SECURITY_KEY_NOT_MATCH = 3004,
  INVALID_USERNAME = 3005,
  INVALID_PASSWORD = 3006,
  INVALID_PHONE = 3007,
  INVALID_NICK = 3008,
  INVALID_GROUPNAME = 3009,
  INVALID_APPKEY = 3010,
  INVALID_CONTENT_TYPE = 3011,
  KEYWORD_SHOULD_NOT_EMPTY = 3012,
  TOO_MANY_GROUP_OWNER = 3013,
  INVALID_GWMESSAGEID = 3014,
  REQUEST_LIST_EXCEED_LIMIT = 3015,
  FRONT_NO_SUCH_ENVIRONMENT = 3016,
  FRONT_SERVER_INNER_ERROR = 3017,
  INVALID_JSON = 3018,
  MONITOR_ALREADY_OPNE = 3201,
  MONITOR_ALREADY_CLOSED = 3202,
  MONITOR_FILE_UPLOAD_ERROR = 3203,
  MONITOR_CLOSE_FAILE = 3204,
  MONITOR_OPEN_FAILE = 3205,
  MONITOR_SERVER_INEER_ERROR = 3206,
  FRIEND_QUERY_FROM_NICK_FAILED = 3401,
  FRIEND_PARAMETER_EMPTY_ERROR = 3402,
  FRIEND_REQUEST_NOT_EXIST = 3403,
  FRIEND_REQUEST_HAS_BEEN_PROCESSED = 3404,
  FRIEND_REQUEST_RECEIVER_NOT_MATCH = 3405,
  FRIEND_APPKEY_NOT_MATCH = 3406,
  FRIEND_APPLY_SELF_ERROR = 3407,
  FRIEND_UPDATE_SELF_ERROR = 3408,
  FRIEND_IS_FRIEND_ALREADY = 3409,
  FRIEND_IS_NOT_FRIEND = 3410,
  FRIEND_REQUEST_HAS_BEEN_ACCEPT = 3411,
  FRIEND_REQUEST_HAS_BEEN_REJECT = 3412,
  FRIEND_REQUEST_HAS_BEEN_ACCEPT_ERROR_REJECT = 3413,
  FRIEND_REQUEST_HAS_BEEN_REJECT_ERROR_ACCEPT = 3414,
  FRIEND_REQUEST_HAS_EXPIRED = 3415,
  FRIEND_HAS_DELETE_APPLY = 3416,
  FRIEND_TWO_WAY_APLLY_REQUEST = 3417,
  FRIEND_OWNER_COUNT_OVER_LIMIT = 3418,
  FRIEND_TO_COUNT_OVER_LIMIT = 3419,
  AGENT_USERCREATE_HASERROR = 3601,
  AGENT_USERDELETE_HASERROR = 3602,
  AGENT_USERMODIFY_HASERROR = 3603,
  AGENT_USERQUERY_HASERROR = 3604,
  AGENT_USERSEARCH_HASERROR = 3605,
  AGENT_CREATEGROUP_ERROR = 3606,
  AGENT_GROUP_NOT_EXIST = 3607,
  AGENT_PARAM_FORMAT_ERROR = 3608,
  AGENT_INNER_ERROR = 3609,
  AGENT_GROUP_JOIN_IN_REASON_LIMIT = 3610,
  AGENT_GROUP_ALREADY_IN = 3611,
  AGENT_GROUP_USER_NOT_IN = 3612,
  AGENT_GROUP_DEL_MEMBER_HASERROR = 3613,
  AGENT_GROUP_CHANGENICK_HASERROR = 3614,
  AGENT_GROUP_ADDMEMBER_HASERROR = 3615,
  AGENT_GROUP_SETMANAGER_HASERROR = 3616,
  AGENT_GROUP_UNSETMANAGER_HASERROR = 3617,
  AGENT_GROUP_NAME_LENGTH_LIMIT = 3618,
  CHATROOM_PARAMETER_EMPTY = 3801,
  CHATROOM_ALREADY_FULL = 3802,
  CHATROOM_USER_NO_PRIVILEGES = 3803,
  CHATROOM_ALREADY_CLOSE = 3804,
  CHATROOM_NOT_EXIST = 3805,
  CHATROOM_ALREADY_EXIST = 3806,
  CHATROOM_ID_EMPTY = 3807,
  CHATROOM_USER_NAME_EMPTY = 3808,
  CHATROOM_ROOM_NAME_EMPTY = 3809,
  CHATROOM_APPKEY_EMPTY = 3810,
  CHATROOM_USER_NOT_IN_ROOM = 3811,
  CHATROOM_OWNER_CAN_NOT_EXIT = 3812,
  CHATROOM_INVITER_NOT_IN_ROOM = 3813,
  CHATROOM_SENDER_NOT_IN_ROOM = 3814,
  CHATROOM_ALREADY_OPEN = 3815,
  ROBOT_CONTENT_EMPTY = 4001,
  ROBOT_CORE_REFUSED = 4002,
  ROBOT_CONTENT_FORMAT_ERROR = 4003,
  ADAPTER_INVALID_JSON = 4201,
  ADAPTER_APPKEY_NOT_FOUND = 4202,
  ADAPTER_APPKEY_ALREADY_EXIST = 4203,
  ADAPTER_APPKEYENV_NOT_FOUND = 4204,
  ADAPTER_FRONTENV_NOT_FOUND = 4205,
  FLEET_EXCEED_CREW_COUNT_LIMIT = 4401,
  FLEET_OWNER_MUST_NOT_BE_EMPTY = 4402,
  FLEET_NAME_EXCEED_LIMIT = 4403,
  FLEET_NOT_EXIST = 4404,
  FLEET_INVITEE_ALREADY_IN = 4405,
  FLEET_INVITATIN_UNAVAILABLE = 4406,
  FLEET_REQUESTER_NOT_IN_FLEET = 4407,
  FLEET_EMPTY_MEMBER_AND_INVITEE = 4408,
  FLEET_REQUESTER_IS_NOT_OWNER = 4409,
  FLEET_REQUESTER_ALREADY_IN = 4410,
  FLEET_CREW_NICK_EXCEED_LIMIT = 4411,
  FLEET_REASON_LENGTH_LIMIT = 4412,
  FLEET_JOIN_FLEET_HAS_BEEN_PROCESSED = 4413,
  FLEET_NEVER_JOIN_FLEET = 4414,
  FLEET_NOT_EXIST_OR_CREW_EMPTY = 4415,
  FLEET_NEW_OWNER_NOT_IN_FLEET = 4416,
  FLEET_MEMBER_NOT_IN = 4417,
  FLEET_PARAM_ERROR = 4418,
  FLEET_EMPTY_BEKICKED_LIST = 4419,
  FLEET_MEMBER_DO_KICK_FORBIDDEN = 4420,
  FLEET_SELF_KICK_FORBIDDEN = 4421,
  FLEET_NEW_OWNER_ALREADY_OWNER = 4422,
  FLEET_CHANGE_NICK_LIST_EMPTY = 4423,
  FLEET_CHANGE_NICK_HASERROR = 4424,
  FLEET_NO_VALID_MEMBER_TO_BE_KICKED = 4425,
  FLEET_CREATE_MEMBER_REPEATED = 4426,
  FLEET_BEKICKED_NO_IN_FLEET = 4427,
  FLEET_ADDMAMBER_HASERROR = 4428,
  FLEET_DELMAMBER_HASERROR = 4429,
  FLEET_INVITATION_OVERDUE = 4430,
  FLEET_DESC_EXCEED_LIMIT = 4431,
  FLEET_SOME_USER_NOT_REGISTERD = 4432,
  FLEET_MUST_SET_ASSEMBLY_POINT = 4433,
  EErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EErrorCode_IsValid(int value);
const EErrorCode EErrorCode_MIN = UNKNOWN_EERRORCODE;
const EErrorCode EErrorCode_MAX = FLEET_MUST_SET_ASSEMBLY_POINT;
const int EErrorCode_ARRAYSIZE = EErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* EErrorCode_descriptor();
inline const ::std::string& EErrorCode_Name(EErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EErrorCode_descriptor(), value);
}
inline bool EErrorCode_Parse(
    const ::std::string& name, EErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EErrorCode>(
    EErrorCode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace errcode
}  // namespace common

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::common::errcode::EErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::errcode::EErrorCode>() {
  return ::common::errcode::EErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2ferrcode_2eproto__INCLUDED
