// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/data.proto

#ifndef PROTOBUF_common_2fdata_2eproto__INCLUDED
#define PROTOBUF_common_2fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/enumeration.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_common_2fdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsUserAndNickImpl();
void InitDefaultsUserAndNick();
void InitDefaultsUserAndRoleImpl();
void InitDefaultsUserAndRole();
void InitDefaultsMemberInfoImpl();
void InitDefaultsMemberInfo();
void InitDefaultsUserAndMsgImpl();
void InitDefaultsUserAndMsg();
inline void InitDefaults() {
  InitDefaultsUserAndNick();
  InitDefaultsUserAndRole();
  InitDefaultsMemberInfo();
  InitDefaultsUserAndMsg();
}
}  // namespace protobuf_common_2fdata_2eproto
namespace common {
namespace data {
class MemberInfo;
class MemberInfoDefaultTypeInternal;
extern MemberInfoDefaultTypeInternal _MemberInfo_default_instance_;
class UserAndMsg;
class UserAndMsgDefaultTypeInternal;
extern UserAndMsgDefaultTypeInternal _UserAndMsg_default_instance_;
class UserAndNick;
class UserAndNickDefaultTypeInternal;
extern UserAndNickDefaultTypeInternal _UserAndNick_default_instance_;
class UserAndRole;
class UserAndRoleDefaultTypeInternal;
extern UserAndRoleDefaultTypeInternal _UserAndRole_default_instance_;
}  // namespace data
}  // namespace common
namespace common {
namespace data {

// ===================================================================

class UserAndNick : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.data.UserAndNick) */ {
 public:
  UserAndNick();
  virtual ~UserAndNick();

  UserAndNick(const UserAndNick& from);

  inline UserAndNick& operator=(const UserAndNick& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserAndNick(UserAndNick&& from) noexcept
    : UserAndNick() {
    *this = ::std::move(from);
  }

  inline UserAndNick& operator=(UserAndNick&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAndNick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAndNick* internal_default_instance() {
    return reinterpret_cast<const UserAndNick*>(
               &_UserAndNick_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UserAndNick* other);
  friend void swap(UserAndNick& a, UserAndNick& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAndNick* New() const PROTOBUF_FINAL { return New(NULL); }

  UserAndNick* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserAndNick& from);
  void MergeFrom(const UserAndNick& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserAndNick* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string nick = 2;
  void clear_nick();
  static const int kNickFieldNumber = 2;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // @@protoc_insertion_point(class_scope:common.data.UserAndNick)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fdata_2eproto::TableStruct;
  friend void ::protobuf_common_2fdata_2eproto::InitDefaultsUserAndNickImpl();
};
// -------------------------------------------------------------------

class UserAndRole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.data.UserAndRole) */ {
 public:
  UserAndRole();
  virtual ~UserAndRole();

  UserAndRole(const UserAndRole& from);

  inline UserAndRole& operator=(const UserAndRole& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserAndRole(UserAndRole&& from) noexcept
    : UserAndRole() {
    *this = ::std::move(from);
  }

  inline UserAndRole& operator=(UserAndRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAndRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAndRole* internal_default_instance() {
    return reinterpret_cast<const UserAndRole*>(
               &_UserAndRole_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(UserAndRole* other);
  friend void swap(UserAndRole& a, UserAndRole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAndRole* New() const PROTOBUF_FINAL { return New(NULL); }

  UserAndRole* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserAndRole& from);
  void MergeFrom(const UserAndRole& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserAndRole* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // .common.enumeration.ECrewType role = 2;
  void clear_role();
  static const int kRoleFieldNumber = 2;
  ::common::enumeration::ECrewType role() const;
  void set_role(::common::enumeration::ECrewType value);

  // @@protoc_insertion_point(class_scope:common.data.UserAndRole)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  int role_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fdata_2eproto::TableStruct;
  friend void ::protobuf_common_2fdata_2eproto::InitDefaultsUserAndRoleImpl();
};
// -------------------------------------------------------------------

class MemberInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.data.MemberInfo) */ {
 public:
  MemberInfo();
  virtual ~MemberInfo();

  MemberInfo(const MemberInfo& from);

  inline MemberInfo& operator=(const MemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemberInfo(MemberInfo&& from) noexcept
    : MemberInfo() {
    *this = ::std::move(from);
  }

  inline MemberInfo& operator=(MemberInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberInfo* internal_default_instance() {
    return reinterpret_cast<const MemberInfo*>(
               &_MemberInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(MemberInfo* other);
  friend void swap(MemberInfo& a, MemberInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemberInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  MemberInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemberInfo& from);
  void MergeFrom(const MemberInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemberInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string nick = 2;
  void clear_nick();
  static const int kNickFieldNumber = 2;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // .common.enumeration.ECrewType role = 3;
  void clear_role();
  static const int kRoleFieldNumber = 3;
  ::common::enumeration::ECrewType role() const;
  void set_role(::common::enumeration::ECrewType value);

  // @@protoc_insertion_point(class_scope:common.data.MemberInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  int role_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fdata_2eproto::TableStruct;
  friend void ::protobuf_common_2fdata_2eproto::InitDefaultsMemberInfoImpl();
};
// -------------------------------------------------------------------

class UserAndMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.data.UserAndMsg) */ {
 public:
  UserAndMsg();
  virtual ~UserAndMsg();

  UserAndMsg(const UserAndMsg& from);

  inline UserAndMsg& operator=(const UserAndMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserAndMsg(UserAndMsg&& from) noexcept
    : UserAndMsg() {
    *this = ::std::move(from);
  }

  inline UserAndMsg& operator=(UserAndMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserAndMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserAndMsg* internal_default_instance() {
    return reinterpret_cast<const UserAndMsg*>(
               &_UserAndMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(UserAndMsg* other);
  friend void swap(UserAndMsg& a, UserAndMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserAndMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  UserAndMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserAndMsg& from);
  void MergeFrom(const UserAndMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserAndMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:common.data.UserAndMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fdata_2eproto::TableStruct;
  friend void ::protobuf_common_2fdata_2eproto::InitDefaultsUserAndMsgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserAndNick

// string username = 1;
inline void UserAndNick::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAndNick::username() const {
  // @@protoc_insertion_point(field_get:common.data.UserAndNick.username)
  return username_.GetNoArena();
}
inline void UserAndNick::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.data.UserAndNick.username)
}
#if LANG_CXX11
inline void UserAndNick::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.data.UserAndNick.username)
}
#endif
inline void UserAndNick::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.data.UserAndNick.username)
}
inline void UserAndNick::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.data.UserAndNick.username)
}
inline ::std::string* UserAndNick::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:common.data.UserAndNick.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAndNick::release_username() {
  // @@protoc_insertion_point(field_release:common.data.UserAndNick.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAndNick::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:common.data.UserAndNick.username)
}

// string nick = 2;
inline void UserAndNick::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAndNick::nick() const {
  // @@protoc_insertion_point(field_get:common.data.UserAndNick.nick)
  return nick_.GetNoArena();
}
inline void UserAndNick::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.data.UserAndNick.nick)
}
#if LANG_CXX11
inline void UserAndNick::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.data.UserAndNick.nick)
}
#endif
inline void UserAndNick::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.data.UserAndNick.nick)
}
inline void UserAndNick::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.data.UserAndNick.nick)
}
inline ::std::string* UserAndNick::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:common.data.UserAndNick.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAndNick::release_nick() {
  // @@protoc_insertion_point(field_release:common.data.UserAndNick.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAndNick::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:common.data.UserAndNick.nick)
}

// -------------------------------------------------------------------

// UserAndRole

// string username = 1;
inline void UserAndRole::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAndRole::username() const {
  // @@protoc_insertion_point(field_get:common.data.UserAndRole.username)
  return username_.GetNoArena();
}
inline void UserAndRole::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.data.UserAndRole.username)
}
#if LANG_CXX11
inline void UserAndRole::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.data.UserAndRole.username)
}
#endif
inline void UserAndRole::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.data.UserAndRole.username)
}
inline void UserAndRole::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.data.UserAndRole.username)
}
inline ::std::string* UserAndRole::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:common.data.UserAndRole.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAndRole::release_username() {
  // @@protoc_insertion_point(field_release:common.data.UserAndRole.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAndRole::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:common.data.UserAndRole.username)
}

// .common.enumeration.ECrewType role = 2;
inline void UserAndRole::clear_role() {
  role_ = 0;
}
inline ::common::enumeration::ECrewType UserAndRole::role() const {
  // @@protoc_insertion_point(field_get:common.data.UserAndRole.role)
  return static_cast< ::common::enumeration::ECrewType >(role_);
}
inline void UserAndRole::set_role(::common::enumeration::ECrewType value) {
  
  role_ = value;
  // @@protoc_insertion_point(field_set:common.data.UserAndRole.role)
}

// -------------------------------------------------------------------

// MemberInfo

// string username = 1;
inline void MemberInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MemberInfo::username() const {
  // @@protoc_insertion_point(field_get:common.data.MemberInfo.username)
  return username_.GetNoArena();
}
inline void MemberInfo::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.data.MemberInfo.username)
}
#if LANG_CXX11
inline void MemberInfo::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.data.MemberInfo.username)
}
#endif
inline void MemberInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.data.MemberInfo.username)
}
inline void MemberInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.data.MemberInfo.username)
}
inline ::std::string* MemberInfo::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:common.data.MemberInfo.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemberInfo::release_username() {
  // @@protoc_insertion_point(field_release:common.data.MemberInfo.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemberInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:common.data.MemberInfo.username)
}

// string nick = 2;
inline void MemberInfo::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MemberInfo::nick() const {
  // @@protoc_insertion_point(field_get:common.data.MemberInfo.nick)
  return nick_.GetNoArena();
}
inline void MemberInfo::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.data.MemberInfo.nick)
}
#if LANG_CXX11
inline void MemberInfo::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.data.MemberInfo.nick)
}
#endif
inline void MemberInfo::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.data.MemberInfo.nick)
}
inline void MemberInfo::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.data.MemberInfo.nick)
}
inline ::std::string* MemberInfo::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:common.data.MemberInfo.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MemberInfo::release_nick() {
  // @@protoc_insertion_point(field_release:common.data.MemberInfo.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MemberInfo::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:common.data.MemberInfo.nick)
}

// .common.enumeration.ECrewType role = 3;
inline void MemberInfo::clear_role() {
  role_ = 0;
}
inline ::common::enumeration::ECrewType MemberInfo::role() const {
  // @@protoc_insertion_point(field_get:common.data.MemberInfo.role)
  return static_cast< ::common::enumeration::ECrewType >(role_);
}
inline void MemberInfo::set_role(::common::enumeration::ECrewType value) {
  
  role_ = value;
  // @@protoc_insertion_point(field_set:common.data.MemberInfo.role)
}

// -------------------------------------------------------------------

// UserAndMsg

// string username = 1;
inline void UserAndMsg::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAndMsg::username() const {
  // @@protoc_insertion_point(field_get:common.data.UserAndMsg.username)
  return username_.GetNoArena();
}
inline void UserAndMsg::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.data.UserAndMsg.username)
}
#if LANG_CXX11
inline void UserAndMsg::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.data.UserAndMsg.username)
}
#endif
inline void UserAndMsg::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.data.UserAndMsg.username)
}
inline void UserAndMsg::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.data.UserAndMsg.username)
}
inline ::std::string* UserAndMsg::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:common.data.UserAndMsg.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAndMsg::release_username() {
  // @@protoc_insertion_point(field_release:common.data.UserAndMsg.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAndMsg::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:common.data.UserAndMsg.username)
}

// string msg = 2;
inline void UserAndMsg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserAndMsg::msg() const {
  // @@protoc_insertion_point(field_get:common.data.UserAndMsg.msg)
  return msg_.GetNoArena();
}
inline void UserAndMsg::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.data.UserAndMsg.msg)
}
#if LANG_CXX11
inline void UserAndMsg::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.data.UserAndMsg.msg)
}
#endif
inline void UserAndMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.data.UserAndMsg.msg)
}
inline void UserAndMsg::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.data.UserAndMsg.msg)
}
inline ::std::string* UserAndMsg::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:common.data.UserAndMsg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserAndMsg::release_msg() {
  // @@protoc_insertion_point(field_release:common.data.UserAndMsg.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserAndMsg::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:common.data.UserAndMsg.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace common

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2fdata_2eproto__INCLUDED
