// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/msg.proto

#ifndef PROTOBUF_common_2fmsg_2eproto__INCLUDED
#define PROTOBUF_common_2fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/enumeration.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_common_2fmsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[20];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMessageUnitImpl();
void InitDefaultsMessageUnit();
void InitDefaultsChatMessageImpl();
void InitDefaultsChatMessage();
void InitDefaultsGroupMessageImpl();
void InitDefaultsGroupMessage();
void InitDefaultsTransparentMessageImpl();
void InitDefaultsTransparentMessage();
void InitDefaultsFriendMessageImpl();
void InitDefaultsFriendMessage();
void InitDefaultsTextMessageImpl();
void InitDefaultsTextMessage();
void InitDefaultsImageMessageImpl();
void InitDefaultsImageMessage();
void InitDefaultsVideoMessageImpl();
void InitDefaultsVideoMessage();
void InitDefaultsAudioMessageImpl();
void InitDefaultsAudioMessage();
void InitDefaultsLocationMessageImpl();
void InitDefaultsLocationMessage();
void InitDefaultsAtMessageImpl();
void InitDefaultsAtMessage();
void InitDefaultsReadReceiptMessageImpl();
void InitDefaultsReadReceiptMessage();
void InitDefaultsFileMessageImpl();
void InitDefaultsFileMessage();
void InitDefaultsRetractMessageImpl();
void InitDefaultsRetractMessage();
void InitDefaultsCustomEntityImpl();
void InitDefaultsCustomEntity();
void InitDefaultsCustomMessageImpl();
void InitDefaultsCustomMessage();
void InitDefaultsCustomNoApnsMessageImpl();
void InitDefaultsCustomNoApnsMessage();
void InitDefaultsMsggwMessageImpl();
void InitDefaultsMsggwMessage();
void InitDefaultsVcardMessageImpl();
void InitDefaultsVcardMessage();
void InitDefaultsMergeMessageImpl();
void InitDefaultsMergeMessage();
inline void InitDefaults() {
  InitDefaultsMessageUnit();
  InitDefaultsChatMessage();
  InitDefaultsGroupMessage();
  InitDefaultsTransparentMessage();
  InitDefaultsFriendMessage();
  InitDefaultsTextMessage();
  InitDefaultsImageMessage();
  InitDefaultsVideoMessage();
  InitDefaultsAudioMessage();
  InitDefaultsLocationMessage();
  InitDefaultsAtMessage();
  InitDefaultsReadReceiptMessage();
  InitDefaultsFileMessage();
  InitDefaultsRetractMessage();
  InitDefaultsCustomEntity();
  InitDefaultsCustomMessage();
  InitDefaultsCustomNoApnsMessage();
  InitDefaultsMsggwMessage();
  InitDefaultsVcardMessage();
  InitDefaultsMergeMessage();
}
}  // namespace protobuf_common_2fmsg_2eproto
namespace common {
namespace msg {
class AtMessage;
class AtMessageDefaultTypeInternal;
extern AtMessageDefaultTypeInternal _AtMessage_default_instance_;
class AudioMessage;
class AudioMessageDefaultTypeInternal;
extern AudioMessageDefaultTypeInternal _AudioMessage_default_instance_;
class ChatMessage;
class ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class CustomEntity;
class CustomEntityDefaultTypeInternal;
extern CustomEntityDefaultTypeInternal _CustomEntity_default_instance_;
class CustomMessage;
class CustomMessageDefaultTypeInternal;
extern CustomMessageDefaultTypeInternal _CustomMessage_default_instance_;
class CustomNoApnsMessage;
class CustomNoApnsMessageDefaultTypeInternal;
extern CustomNoApnsMessageDefaultTypeInternal _CustomNoApnsMessage_default_instance_;
class FileMessage;
class FileMessageDefaultTypeInternal;
extern FileMessageDefaultTypeInternal _FileMessage_default_instance_;
class FriendMessage;
class FriendMessageDefaultTypeInternal;
extern FriendMessageDefaultTypeInternal _FriendMessage_default_instance_;
class GroupMessage;
class GroupMessageDefaultTypeInternal;
extern GroupMessageDefaultTypeInternal _GroupMessage_default_instance_;
class ImageMessage;
class ImageMessageDefaultTypeInternal;
extern ImageMessageDefaultTypeInternal _ImageMessage_default_instance_;
class LocationMessage;
class LocationMessageDefaultTypeInternal;
extern LocationMessageDefaultTypeInternal _LocationMessage_default_instance_;
class MergeMessage;
class MergeMessageDefaultTypeInternal;
extern MergeMessageDefaultTypeInternal _MergeMessage_default_instance_;
class MessageUnit;
class MessageUnitDefaultTypeInternal;
extern MessageUnitDefaultTypeInternal _MessageUnit_default_instance_;
class MsggwMessage;
class MsggwMessageDefaultTypeInternal;
extern MsggwMessageDefaultTypeInternal _MsggwMessage_default_instance_;
class ReadReceiptMessage;
class ReadReceiptMessageDefaultTypeInternal;
extern ReadReceiptMessageDefaultTypeInternal _ReadReceiptMessage_default_instance_;
class RetractMessage;
class RetractMessageDefaultTypeInternal;
extern RetractMessageDefaultTypeInternal _RetractMessage_default_instance_;
class TextMessage;
class TextMessageDefaultTypeInternal;
extern TextMessageDefaultTypeInternal _TextMessage_default_instance_;
class TransparentMessage;
class TransparentMessageDefaultTypeInternal;
extern TransparentMessageDefaultTypeInternal _TransparentMessage_default_instance_;
class VcardMessage;
class VcardMessageDefaultTypeInternal;
extern VcardMessageDefaultTypeInternal _VcardMessage_default_instance_;
class VideoMessage;
class VideoMessageDefaultTypeInternal;
extern VideoMessageDefaultTypeInternal _VideoMessage_default_instance_;
}  // namespace msg
}  // namespace common
namespace common {
namespace msg {

enum EMsgType {
  CHAT_MSG = 0,
  GROUP_MSG = 1,
  GROUP_SIGNAL = 2,
  MSGGW_MSG = 3,
  SYSTEM_MSG = 4,
  MULTI_MSG = 5,
  CHATROOM_MSG = 6,
  PRIVATE_MSG = 7,
  FLEET_SIGNAL = 8,
  TRANSPARENT_MSG = 9,
  INVITATION_MSG = 10,
  INVITATION_BATCH_MSG = 11,
  EMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EMsgType_IsValid(int value);
const EMsgType EMsgType_MIN = CHAT_MSG;
const EMsgType EMsgType_MAX = INVITATION_BATCH_MSG;
const int EMsgType_ARRAYSIZE = EMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMsgType_descriptor();
inline const ::std::string& EMsgType_Name(EMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMsgType_descriptor(), value);
}
inline bool EMsgType_Parse(
    const ::std::string& name, EMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMsgType>(
    EMsgType_descriptor(), name, value);
}
enum EMsgContentType {
  TEXT = 0,
  IMAGE = 1,
  VIDEO = 2,
  AUDIO = 3,
  LOCATION = 4,
  AT = 5,
  READ_RECEIPT = 6,
  FILE = 7,
  RETRACT = 8,
  CUSTOM = 9,
  JIMAO_READED = 10,
  JIMAO_SENDED = 11,
  VCARD = 12,
  SINGLE_READ_RECEIPT = 13,
  MERGE_MSG = 14,
  APPLY_FRIEND = 20,
  CUSTOM_NO_APNS = 31,
  CUSTOM_FAMILY = 32,
  FRIEND_MSG = 33,
  EMsgContentType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EMsgContentType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EMsgContentType_IsValid(int value);
const EMsgContentType EMsgContentType_MIN = TEXT;
const EMsgContentType EMsgContentType_MAX = FRIEND_MSG;
const int EMsgContentType_ARRAYSIZE = EMsgContentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMsgContentType_descriptor();
inline const ::std::string& EMsgContentType_Name(EMsgContentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMsgContentType_descriptor(), value);
}
inline bool EMsgContentType_Parse(
    const ::std::string& name, EMsgContentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMsgContentType>(
    EMsgContentType_descriptor(), name, value);
}
// ===================================================================

class MessageUnit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.MessageUnit) */ {
 public:
  MessageUnit();
  virtual ~MessageUnit();

  MessageUnit(const MessageUnit& from);

  inline MessageUnit& operator=(const MessageUnit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageUnit(MessageUnit&& from) noexcept
    : MessageUnit() {
    *this = ::std::move(from);
  }

  inline MessageUnit& operator=(MessageUnit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageUnit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageUnit* internal_default_instance() {
    return reinterpret_cast<const MessageUnit*>(
               &_MessageUnit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MessageUnit* other);
  friend void swap(MessageUnit& a, MessageUnit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageUnit* New() const PROTOBUF_FINAL { return New(NULL); }

  MessageUnit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MessageUnit& from);
  void MergeFrom(const MessageUnit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MessageUnit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .common.msg.EMsgType msg_type = 1;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 1;
  ::common::msg::EMsgType msg_type() const;
  void set_msg_type(::common::msg::EMsgType value);

  // bool is_retracted = 3;
  void clear_is_retracted();
  static const int kIsRetractedFieldNumber = 3;
  bool is_retracted() const;
  void set_is_retracted(bool value);

  // @@protoc_insertion_point(class_scope:common.msg.MessageUnit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int msg_type_;
  bool is_retracted_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsMessageUnitImpl();
};
// -------------------------------------------------------------------

class ChatMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.ChatMessage) */ {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatMessage(ChatMessage&& from) noexcept
    : ChatMessage() {
    *this = ::std::move(from);
  }

  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
               &_ChatMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ChatMessage* other);
  friend void swap(ChatMessage& a, ChatMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_nick = 3;
  void clear_from_nick();
  static const int kFromNickFieldNumber = 3;
  const ::std::string& from_nick() const;
  void set_from_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_from_nick(::std::string&& value);
  #endif
  void set_from_nick(const char* value);
  void set_from_nick(const char* value, size_t size);
  ::std::string* mutable_from_nick();
  ::std::string* release_from_nick();
  void set_allocated_from_nick(::std::string* from_nick);

  // bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string msg_id = 7;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 7;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // string to_username = 9;
  void clear_to_username();
  static const int kToUsernameFieldNumber = 9;
  const ::std::string& to_username() const;
  void set_to_username(const ::std::string& value);
  #if LANG_CXX11
  void set_to_username(::std::string&& value);
  #endif
  void set_to_username(const char* value);
  void set_to_username(const char* value, size_t size);
  ::std::string* mutable_to_username();
  ::std::string* release_to_username();
  void set_allocated_to_username(::std::string* to_username);

  // string from_phone = 12;
  void clear_from_phone();
  static const int kFromPhoneFieldNumber = 12;
  const ::std::string& from_phone() const;
  void set_from_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_from_phone(::std::string&& value);
  #endif
  void set_from_phone(const char* value);
  void set_from_phone(const char* value, size_t size);
  ::std::string* mutable_from_phone();
  ::std::string* release_from_phone();
  void set_allocated_from_phone(::std::string* from_phone);

  // string to_phone = 14;
  void clear_to_phone();
  static const int kToPhoneFieldNumber = 14;
  const ::std::string& to_phone() const;
  void set_to_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_to_phone(::std::string&& value);
  #endif
  void set_to_phone(const char* value);
  void set_to_phone(const char* value, size_t size);
  ::std::string* mutable_to_phone();
  ::std::string* release_to_phone();
  void set_allocated_to_phone(::std::string* to_phone);

  // string from_thumbnail = 16;
  void clear_from_thumbnail();
  static const int kFromThumbnailFieldNumber = 16;
  const ::std::string& from_thumbnail() const;
  void set_from_thumbnail(const ::std::string& value);
  #if LANG_CXX11
  void set_from_thumbnail(::std::string&& value);
  #endif
  void set_from_thumbnail(const char* value);
  void set_from_thumbnail(const char* value, size_t size);
  ::std::string* mutable_from_thumbnail();
  ::std::string* release_from_thumbnail();
  void set_allocated_from_thumbnail(::std::string* from_thumbnail);

  // uint64 guid = 6;
  void clear_guid();
  static const int kGuidFieldNumber = 6;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // .common.msg.EMsgContentType msg_content_type = 4;
  void clear_msg_content_type();
  static const int kMsgContentTypeFieldNumber = 4;
  ::common::msg::EMsgContentType msg_content_type() const;
  void set_msg_content_type(::common::msg::EMsgContentType value);

  // bool burn_after_read = 8;
  void clear_burn_after_read();
  static const int kBurnAfterReadFieldNumber = 8;
  bool burn_after_read() const;
  void set_burn_after_read(bool value);

  // bool is_jimao = 10;
  void clear_is_jimao();
  static const int kIsJimaoFieldNumber = 10;
  bool is_jimao() const;
  void set_is_jimao(bool value);

  // bool is_read = 11;
  void clear_is_read();
  static const int kIsReadFieldNumber = 11;
  bool is_read() const;
  void set_is_read(bool value);

  // bool to_user_is_unregistered = 13;
  void clear_to_user_is_unregistered();
  static const int kToUserIsUnregisteredFieldNumber = 13;
  bool to_user_is_unregistered() const;
  void set_to_user_is_unregistered(bool value);

  // uint32 user_enable = 15;
  void clear_user_enable();
  static const int kUserEnableFieldNumber = 15;
  ::google::protobuf::uint32 user_enable() const;
  void set_user_enable(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:common.msg.ChatMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_nick_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::internal::ArenaStringPtr to_username_;
  ::google::protobuf::internal::ArenaStringPtr from_phone_;
  ::google::protobuf::internal::ArenaStringPtr to_phone_;
  ::google::protobuf::internal::ArenaStringPtr from_thumbnail_;
  ::google::protobuf::uint64 guid_;
  int msg_content_type_;
  bool burn_after_read_;
  bool is_jimao_;
  bool is_read_;
  bool to_user_is_unregistered_;
  ::google::protobuf::uint32 user_enable_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsChatMessageImpl();
};
// -------------------------------------------------------------------

class GroupMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.GroupMessage) */ {
 public:
  GroupMessage();
  virtual ~GroupMessage();

  GroupMessage(const GroupMessage& from);

  inline GroupMessage& operator=(const GroupMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupMessage(GroupMessage&& from) noexcept
    : GroupMessage() {
    *this = ::std::move(from);
  }

  inline GroupMessage& operator=(GroupMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupMessage* internal_default_instance() {
    return reinterpret_cast<const GroupMessage*>(
               &_GroupMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GroupMessage* other);
  friend void swap(GroupMessage& a, GroupMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GroupMessage& from);
  void MergeFrom(const GroupMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string from_nick = 2;
  void clear_from_nick();
  static const int kFromNickFieldNumber = 2;
  const ::std::string& from_nick() const;
  void set_from_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_from_nick(::std::string&& value);
  #endif
  void set_from_nick(const char* value);
  void set_from_nick(const char* value, size_t size);
  ::std::string* mutable_from_nick();
  ::std::string* release_from_nick();
  void set_allocated_from_nick(::std::string* from_nick);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string uri = 4;
  void clear_uri();
  static const int kUriFieldNumber = 4;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // bytes data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string msg_id = 8;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 8;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // string group_name = 9;
  void clear_group_name();
  static const int kGroupNameFieldNumber = 9;
  const ::std::string& group_name() const;
  void set_group_name(const ::std::string& value);
  #if LANG_CXX11
  void set_group_name(::std::string&& value);
  #endif
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  ::std::string* mutable_group_name();
  ::std::string* release_group_name();
  void set_allocated_group_name(::std::string* group_name);

  // uint64 guid = 7;
  void clear_guid();
  static const int kGuidFieldNumber = 7;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // .common.msg.EMsgContentType msg_content_type = 5;
  void clear_msg_content_type();
  static const int kMsgContentTypeFieldNumber = 5;
  ::common::msg::EMsgContentType msg_content_type() const;
  void set_msg_content_type(::common::msg::EMsgContentType value);

  // bool is_jimao = 10;
  void clear_is_jimao();
  static const int kIsJimaoFieldNumber = 10;
  bool is_jimao() const;
  void set_is_jimao(bool value);

  // bool is_read = 11;
  void clear_is_read();
  static const int kIsReadFieldNumber = 11;
  bool is_read() const;
  void set_is_read(bool value);

  // @@protoc_insertion_point(class_scope:common.msg.GroupMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr from_nick_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::internal::ArenaStringPtr group_name_;
  ::google::protobuf::uint64 guid_;
  int msg_content_type_;
  bool is_jimao_;
  bool is_read_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsGroupMessageImpl();
};
// -------------------------------------------------------------------

class TransparentMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.TransparentMessage) */ {
 public:
  TransparentMessage();
  virtual ~TransparentMessage();

  TransparentMessage(const TransparentMessage& from);

  inline TransparentMessage& operator=(const TransparentMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransparentMessage(TransparentMessage&& from) noexcept
    : TransparentMessage() {
    *this = ::std::move(from);
  }

  inline TransparentMessage& operator=(TransparentMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransparentMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransparentMessage* internal_default_instance() {
    return reinterpret_cast<const TransparentMessage*>(
               &_TransparentMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TransparentMessage* other);
  friend void swap(TransparentMessage& a, TransparentMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransparentMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  TransparentMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransparentMessage& from);
  void MergeFrom(const TransparentMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransparentMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 2;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 2;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string to_useranem = 3;
  void clear_to_useranem();
  static const int kToUseranemFieldNumber = 3;
  const ::std::string& to_useranem() const;
  void set_to_useranem(const ::std::string& value);
  #if LANG_CXX11
  void set_to_useranem(::std::string&& value);
  #endif
  void set_to_useranem(const char* value);
  void set_to_useranem(const char* value, size_t size);
  ::std::string* mutable_to_useranem();
  ::std::string* release_to_useranem();
  void set_allocated_to_useranem(::std::string* to_useranem);

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string msg_id = 6;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 6;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // string from_nick = 7;
  void clear_from_nick();
  static const int kFromNickFieldNumber = 7;
  const ::std::string& from_nick() const;
  void set_from_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_from_nick(::std::string&& value);
  #endif
  void set_from_nick(const char* value);
  void set_from_nick(const char* value, size_t size);
  ::std::string* mutable_from_nick();
  ::std::string* release_from_nick();
  void set_allocated_from_nick(::std::string* from_nick);

  // uint64 guid = 5;
  void clear_guid();
  static const int kGuidFieldNumber = 5;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:common.msg.TransparentMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr to_useranem_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::internal::ArenaStringPtr from_nick_;
  ::google::protobuf::uint64 guid_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsTransparentMessageImpl();
};
// -------------------------------------------------------------------

class FriendMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.FriendMessage) */ {
 public:
  FriendMessage();
  virtual ~FriendMessage();

  FriendMessage(const FriendMessage& from);

  inline FriendMessage& operator=(const FriendMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendMessage(FriendMessage&& from) noexcept
    : FriendMessage() {
    *this = ::std::move(from);
  }

  inline FriendMessage& operator=(FriendMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendMessage* internal_default_instance() {
    return reinterpret_cast<const FriendMessage*>(
               &_FriendMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FriendMessage* other);
  friend void swap(FriendMessage& a, FriendMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendMessage& from);
  void MergeFrom(const FriendMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:common.msg.FriendMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsFriendMessageImpl();
};
// -------------------------------------------------------------------

class TextMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.TextMessage) */ {
 public:
  TextMessage();
  virtual ~TextMessage();

  TextMessage(const TextMessage& from);

  inline TextMessage& operator=(const TextMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TextMessage(TextMessage&& from) noexcept
    : TextMessage() {
    *this = ::std::move(from);
  }

  inline TextMessage& operator=(TextMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TextMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextMessage* internal_default_instance() {
    return reinterpret_cast<const TextMessage*>(
               &_TextMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(TextMessage* other);
  friend void swap(TextMessage& a, TextMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TextMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  TextMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TextMessage& from);
  void MergeFrom(const TextMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TextMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // bool burn_after_read = 2;
  void clear_burn_after_read();
  static const int kBurnAfterReadFieldNumber = 2;
  bool burn_after_read() const;
  void set_burn_after_read(bool value);

  // @@protoc_insertion_point(class_scope:common.msg.TextMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  bool burn_after_read_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsTextMessageImpl();
};
// -------------------------------------------------------------------

class ImageMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.ImageMessage) */ {
 public:
  ImageMessage();
  virtual ~ImageMessage();

  ImageMessage(const ImageMessage& from);

  inline ImageMessage& operator=(const ImageMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageMessage(ImageMessage&& from) noexcept
    : ImageMessage() {
    *this = ::std::move(from);
  }

  inline ImageMessage& operator=(ImageMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageMessage* internal_default_instance() {
    return reinterpret_cast<const ImageMessage*>(
               &_ImageMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ImageMessage* other);
  friend void swap(ImageMessage& a, ImageMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageMessage& from);
  void MergeFrom(const ImageMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 1;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // string origin_link = 2;
  void clear_origin_link();
  static const int kOriginLinkFieldNumber = 2;
  const ::std::string& origin_link() const;
  void set_origin_link(const ::std::string& value);
  #if LANG_CXX11
  void set_origin_link(::std::string&& value);
  #endif
  void set_origin_link(const char* value);
  void set_origin_link(const char* value, size_t size);
  ::std::string* mutable_origin_link();
  ::std::string* release_origin_link();
  void set_allocated_origin_link(::std::string* origin_link);

  // string big_link = 3;
  void clear_big_link();
  static const int kBigLinkFieldNumber = 3;
  const ::std::string& big_link() const;
  void set_big_link(const ::std::string& value);
  #if LANG_CXX11
  void set_big_link(::std::string&& value);
  #endif
  void set_big_link(const char* value);
  void set_big_link(const char* value, size_t size);
  ::std::string* mutable_big_link();
  ::std::string* release_big_link();
  void set_allocated_big_link(::std::string* big_link);

  // string middle_link = 4;
  void clear_middle_link();
  static const int kMiddleLinkFieldNumber = 4;
  const ::std::string& middle_link() const;
  void set_middle_link(const ::std::string& value);
  #if LANG_CXX11
  void set_middle_link(::std::string&& value);
  #endif
  void set_middle_link(const char* value);
  void set_middle_link(const char* value, size_t size);
  ::std::string* mutable_middle_link();
  ::std::string* release_middle_link();
  void set_allocated_middle_link(::std::string* middle_link);

  // string small_link = 5;
  void clear_small_link();
  static const int kSmallLinkFieldNumber = 5;
  const ::std::string& small_link() const;
  void set_small_link(const ::std::string& value);
  #if LANG_CXX11
  void set_small_link(::std::string&& value);
  #endif
  void set_small_link(const char* value);
  void set_small_link(const char* value, size_t size);
  ::std::string* mutable_small_link();
  ::std::string* release_small_link();
  void set_allocated_small_link(::std::string* small_link);

  // uint64 file_length = 6;
  void clear_file_length();
  static const int kFileLengthFieldNumber = 6;
  ::google::protobuf::uint64 file_length() const;
  void set_file_length(::google::protobuf::uint64 value);

  // bool isOrigin = 7;
  void clear_isorigin();
  static const int kIsOriginFieldNumber = 7;
  bool isorigin() const;
  void set_isorigin(bool value);

  // uint32 small_width = 8;
  void clear_small_width();
  static const int kSmallWidthFieldNumber = 8;
  ::google::protobuf::uint32 small_width() const;
  void set_small_width(::google::protobuf::uint32 value);

  // uint32 small_height = 9;
  void clear_small_height();
  static const int kSmallHeightFieldNumber = 9;
  ::google::protobuf::uint32 small_height() const;
  void set_small_height(::google::protobuf::uint32 value);

  // uint32 middle_width = 10;
  void clear_middle_width();
  static const int kMiddleWidthFieldNumber = 10;
  ::google::protobuf::uint32 middle_width() const;
  void set_middle_width(::google::protobuf::uint32 value);

  // uint32 middle_height = 11;
  void clear_middle_height();
  static const int kMiddleHeightFieldNumber = 11;
  ::google::protobuf::uint32 middle_height() const;
  void set_middle_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:common.msg.ImageMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr origin_link_;
  ::google::protobuf::internal::ArenaStringPtr big_link_;
  ::google::protobuf::internal::ArenaStringPtr middle_link_;
  ::google::protobuf::internal::ArenaStringPtr small_link_;
  ::google::protobuf::uint64 file_length_;
  bool isorigin_;
  ::google::protobuf::uint32 small_width_;
  ::google::protobuf::uint32 small_height_;
  ::google::protobuf::uint32 middle_width_;
  ::google::protobuf::uint32 middle_height_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsImageMessageImpl();
};
// -------------------------------------------------------------------

class VideoMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.VideoMessage) */ {
 public:
  VideoMessage();
  virtual ~VideoMessage();

  VideoMessage(const VideoMessage& from);

  inline VideoMessage& operator=(const VideoMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VideoMessage(VideoMessage&& from) noexcept
    : VideoMessage() {
    *this = ::std::move(from);
  }

  inline VideoMessage& operator=(VideoMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoMessage* internal_default_instance() {
    return reinterpret_cast<const VideoMessage*>(
               &_VideoMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(VideoMessage* other);
  friend void swap(VideoMessage& a, VideoMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VideoMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VideoMessage& from);
  void MergeFrom(const VideoMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VideoMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 1;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // string video_link = 2;
  void clear_video_link();
  static const int kVideoLinkFieldNumber = 2;
  const ::std::string& video_link() const;
  void set_video_link(const ::std::string& value);
  #if LANG_CXX11
  void set_video_link(::std::string&& value);
  #endif
  void set_video_link(const char* value);
  void set_video_link(const char* value, size_t size);
  ::std::string* mutable_video_link();
  ::std::string* release_video_link();
  void set_allocated_video_link(::std::string* video_link);

  // string video_screen_short_link = 3;
  void clear_video_screen_short_link();
  static const int kVideoScreenShortLinkFieldNumber = 3;
  const ::std::string& video_screen_short_link() const;
  void set_video_screen_short_link(const ::std::string& value);
  #if LANG_CXX11
  void set_video_screen_short_link(::std::string&& value);
  #endif
  void set_video_screen_short_link(const char* value);
  void set_video_screen_short_link(const char* value, size_t size);
  ::std::string* mutable_video_screen_short_link();
  ::std::string* release_video_screen_short_link();
  void set_allocated_video_screen_short_link(::std::string* video_screen_short_link);

  // uint64 file_length = 4;
  void clear_file_length();
  static const int kFileLengthFieldNumber = 4;
  ::google::protobuf::uint64 file_length() const;
  void set_file_length(::google::protobuf::uint64 value);

  // uint32 duration = 6;
  void clear_duration();
  static const int kDurationFieldNumber = 6;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // uint32 width = 9;
  void clear_width();
  static const int kWidthFieldNumber = 9;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 10;
  void clear_height();
  static const int kHeightFieldNumber = 10;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:common.msg.VideoMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr video_link_;
  ::google::protobuf::internal::ArenaStringPtr video_screen_short_link_;
  ::google::protobuf::uint64 file_length_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsVideoMessageImpl();
};
// -------------------------------------------------------------------

class AudioMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.AudioMessage) */ {
 public:
  AudioMessage();
  virtual ~AudioMessage();

  AudioMessage(const AudioMessage& from);

  inline AudioMessage& operator=(const AudioMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AudioMessage(AudioMessage&& from) noexcept
    : AudioMessage() {
    *this = ::std::move(from);
  }

  inline AudioMessage& operator=(AudioMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AudioMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AudioMessage* internal_default_instance() {
    return reinterpret_cast<const AudioMessage*>(
               &_AudioMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(AudioMessage* other);
  friend void swap(AudioMessage& a, AudioMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AudioMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  AudioMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AudioMessage& from);
  void MergeFrom(const AudioMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AudioMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 1;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // string audio_link = 2;
  void clear_audio_link();
  static const int kAudioLinkFieldNumber = 2;
  const ::std::string& audio_link() const;
  void set_audio_link(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_link(::std::string&& value);
  #endif
  void set_audio_link(const char* value);
  void set_audio_link(const char* value, size_t size);
  ::std::string* mutable_audio_link();
  ::std::string* release_audio_link();
  void set_allocated_audio_link(::std::string* audio_link);

  // string audio_to_word = 6;
  void clear_audio_to_word();
  static const int kAudioToWordFieldNumber = 6;
  const ::std::string& audio_to_word() const;
  void set_audio_to_word(const ::std::string& value);
  #if LANG_CXX11
  void set_audio_to_word(::std::string&& value);
  #endif
  void set_audio_to_word(const char* value);
  void set_audio_to_word(const char* value, size_t size);
  ::std::string* mutable_audio_to_word();
  ::std::string* release_audio_to_word();
  void set_allocated_audio_to_word(::std::string* audio_to_word);

  // uint64 file_length = 4;
  void clear_file_length();
  static const int kFileLengthFieldNumber = 4;
  ::google::protobuf::uint64 file_length() const;
  void set_file_length(::google::protobuf::uint64 value);

  // uint32 duration = 5;
  void clear_duration();
  static const int kDurationFieldNumber = 5;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:common.msg.AudioMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr audio_link_;
  ::google::protobuf::internal::ArenaStringPtr audio_to_word_;
  ::google::protobuf::uint64 file_length_;
  ::google::protobuf::uint32 duration_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsAudioMessageImpl();
};
// -------------------------------------------------------------------

class LocationMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.LocationMessage) */ {
 public:
  LocationMessage();
  virtual ~LocationMessage();

  LocationMessage(const LocationMessage& from);

  inline LocationMessage& operator=(const LocationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocationMessage(LocationMessage&& from) noexcept
    : LocationMessage() {
    *this = ::std::move(from);
  }

  inline LocationMessage& operator=(LocationMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocationMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationMessage* internal_default_instance() {
    return reinterpret_cast<const LocationMessage*>(
               &_LocationMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(LocationMessage* other);
  friend void swap(LocationMessage& a, LocationMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocationMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  LocationMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LocationMessage& from);
  void MergeFrom(const LocationMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LocationMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 1;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // string origin_link = 2;
  void clear_origin_link();
  static const int kOriginLinkFieldNumber = 2;
  const ::std::string& origin_link() const;
  void set_origin_link(const ::std::string& value);
  #if LANG_CXX11
  void set_origin_link(::std::string&& value);
  #endif
  void set_origin_link(const char* value);
  void set_origin_link(const char* value, size_t size);
  ::std::string* mutable_origin_link();
  ::std::string* release_origin_link();
  void set_allocated_origin_link(::std::string* origin_link);

  // string location_desc = 9;
  void clear_location_desc();
  static const int kLocationDescFieldNumber = 9;
  const ::std::string& location_desc() const;
  void set_location_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_location_desc(::std::string&& value);
  #endif
  void set_location_desc(const char* value);
  void set_location_desc(const char* value, size_t size);
  ::std::string* mutable_location_desc();
  ::std::string* release_location_desc();
  void set_allocated_location_desc(::std::string* location_desc);

  // string location_address = 10;
  void clear_location_address();
  static const int kLocationAddressFieldNumber = 10;
  const ::std::string& location_address() const;
  void set_location_address(const ::std::string& value);
  #if LANG_CXX11
  void set_location_address(::std::string&& value);
  #endif
  void set_location_address(const char* value);
  void set_location_address(const char* value, size_t size);
  ::std::string* mutable_location_address();
  ::std::string* release_location_address();
  void set_allocated_location_address(::std::string* location_address);

  // string poi_id = 11;
  void clear_poi_id();
  static const int kPoiIdFieldNumber = 11;
  const ::std::string& poi_id() const;
  void set_poi_id(const ::std::string& value);
  #if LANG_CXX11
  void set_poi_id(::std::string&& value);
  #endif
  void set_poi_id(const char* value);
  void set_poi_id(const char* value, size_t size);
  ::std::string* mutable_poi_id();
  ::std::string* release_poi_id();
  void set_allocated_poi_id(::std::string* poi_id);

  // uint64 file_length = 4;
  void clear_file_length();
  static const int kFileLengthFieldNumber = 4;
  ::google::protobuf::uint64 file_length() const;
  void set_file_length(::google::protobuf::uint64 value);

  // uint32 width = 5;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // uint32 height = 6;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // double longitude = 7;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 7;
  double longitude() const;
  void set_longitude(double value);

  // double latitude = 8;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 8;
  double latitude() const;
  void set_latitude(double value);

  // @@protoc_insertion_point(class_scope:common.msg.LocationMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr origin_link_;
  ::google::protobuf::internal::ArenaStringPtr location_desc_;
  ::google::protobuf::internal::ArenaStringPtr location_address_;
  ::google::protobuf::internal::ArenaStringPtr poi_id_;
  ::google::protobuf::uint64 file_length_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  double longitude_;
  double latitude_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsLocationMessageImpl();
};
// -------------------------------------------------------------------

class AtMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.AtMessage) */ {
 public:
  AtMessage();
  virtual ~AtMessage();

  AtMessage(const AtMessage& from);

  inline AtMessage& operator=(const AtMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AtMessage(AtMessage&& from) noexcept
    : AtMessage() {
    *this = ::std::move(from);
  }

  inline AtMessage& operator=(AtMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AtMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AtMessage* internal_default_instance() {
    return reinterpret_cast<const AtMessage*>(
               &_AtMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(AtMessage* other);
  friend void swap(AtMessage& a, AtMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AtMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  AtMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AtMessage& from);
  void MergeFrom(const AtMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AtMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string at_member = 1;
  int at_member_size() const;
  void clear_at_member();
  static const int kAtMemberFieldNumber = 1;
  const ::std::string& at_member(int index) const;
  ::std::string* mutable_at_member(int index);
  void set_at_member(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_at_member(int index, ::std::string&& value);
  #endif
  void set_at_member(int index, const char* value);
  void set_at_member(int index, const char* value, size_t size);
  ::std::string* add_at_member();
  void add_at_member(const ::std::string& value);
  #if LANG_CXX11
  void add_at_member(::std::string&& value);
  #endif
  void add_at_member(const char* value);
  void add_at_member(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& at_member() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_at_member();

  // string text = 3;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // bool at_all = 2;
  void clear_at_all();
  static const int kAtAllFieldNumber = 2;
  bool at_all() const;
  void set_at_all(bool value);

  // @@protoc_insertion_point(class_scope:common.msg.AtMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> at_member_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  bool at_all_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsAtMessageImpl();
};
// -------------------------------------------------------------------

class ReadReceiptMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.ReadReceiptMessage) */ {
 public:
  ReadReceiptMessage();
  virtual ~ReadReceiptMessage();

  ReadReceiptMessage(const ReadReceiptMessage& from);

  inline ReadReceiptMessage& operator=(const ReadReceiptMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadReceiptMessage(ReadReceiptMessage&& from) noexcept
    : ReadReceiptMessage() {
    *this = ::std::move(from);
  }

  inline ReadReceiptMessage& operator=(ReadReceiptMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadReceiptMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadReceiptMessage* internal_default_instance() {
    return reinterpret_cast<const ReadReceiptMessage*>(
               &_ReadReceiptMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ReadReceiptMessage* other);
  friend void swap(ReadReceiptMessage& a, ReadReceiptMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadReceiptMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ReadReceiptMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReadReceiptMessage& from);
  void MergeFrom(const ReadReceiptMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReadReceiptMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 receipt_guid = 1;
  void clear_receipt_guid();
  static const int kReceiptGuidFieldNumber = 1;
  ::google::protobuf::uint64 receipt_guid() const;
  void set_receipt_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:common.msg.ReadReceiptMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 receipt_guid_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsReadReceiptMessageImpl();
};
// -------------------------------------------------------------------

class FileMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.FileMessage) */ {
 public:
  FileMessage();
  virtual ~FileMessage();

  FileMessage(const FileMessage& from);

  inline FileMessage& operator=(const FileMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileMessage(FileMessage&& from) noexcept
    : FileMessage() {
    *this = ::std::move(from);
  }

  inline FileMessage& operator=(FileMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileMessage* internal_default_instance() {
    return reinterpret_cast<const FileMessage*>(
               &_FileMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(FileMessage* other);
  friend void swap(FileMessage& a, FileMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  FileMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FileMessage& from);
  void MergeFrom(const FileMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FileMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 1;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // string file_link = 2;
  void clear_file_link();
  static const int kFileLinkFieldNumber = 2;
  const ::std::string& file_link() const;
  void set_file_link(const ::std::string& value);
  #if LANG_CXX11
  void set_file_link(::std::string&& value);
  #endif
  void set_file_link(const char* value);
  void set_file_link(const char* value, size_t size);
  ::std::string* mutable_file_link();
  ::std::string* release_file_link();
  void set_allocated_file_link(::std::string* file_link);

  // uint64 file_length = 3;
  void clear_file_length();
  static const int kFileLengthFieldNumber = 3;
  ::google::protobuf::uint64 file_length() const;
  void set_file_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:common.msg.FileMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr file_link_;
  ::google::protobuf::uint64 file_length_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsFileMessageImpl();
};
// -------------------------------------------------------------------

class RetractMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.RetractMessage) */ {
 public:
  RetractMessage();
  virtual ~RetractMessage();

  RetractMessage(const RetractMessage& from);

  inline RetractMessage& operator=(const RetractMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RetractMessage(RetractMessage&& from) noexcept
    : RetractMessage() {
    *this = ::std::move(from);
  }

  inline RetractMessage& operator=(RetractMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RetractMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetractMessage* internal_default_instance() {
    return reinterpret_cast<const RetractMessage*>(
               &_RetractMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(RetractMessage* other);
  friend void swap(RetractMessage& a, RetractMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RetractMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  RetractMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RetractMessage& from);
  void MergeFrom(const RetractMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RetractMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 retract_guid = 1;
  void clear_retract_guid();
  static const int kRetractGuidFieldNumber = 1;
  ::google::protobuf::uint64 retract_guid() const;
  void set_retract_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:common.msg.RetractMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 retract_guid_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsRetractMessageImpl();
};
// -------------------------------------------------------------------

class CustomEntity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.CustomEntity) */ {
 public:
  CustomEntity();
  virtual ~CustomEntity();

  CustomEntity(const CustomEntity& from);

  inline CustomEntity& operator=(const CustomEntity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomEntity(CustomEntity&& from) noexcept
    : CustomEntity() {
    *this = ::std::move(from);
  }

  inline CustomEntity& operator=(CustomEntity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomEntity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomEntity* internal_default_instance() {
    return reinterpret_cast<const CustomEntity*>(
               &_CustomEntity_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(CustomEntity* other);
  friend void swap(CustomEntity& a, CustomEntity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomEntity* New() const PROTOBUF_FINAL { return New(NULL); }

  CustomEntity* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CustomEntity& from);
  void MergeFrom(const CustomEntity& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CustomEntity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:common.msg.CustomEntity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsCustomEntityImpl();
};
// -------------------------------------------------------------------

class CustomMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.CustomMessage) */ {
 public:
  CustomMessage();
  virtual ~CustomMessage();

  CustomMessage(const CustomMessage& from);

  inline CustomMessage& operator=(const CustomMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomMessage(CustomMessage&& from) noexcept
    : CustomMessage() {
    *this = ::std::move(from);
  }

  inline CustomMessage& operator=(CustomMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomMessage* internal_default_instance() {
    return reinterpret_cast<const CustomMessage*>(
               &_CustomMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(CustomMessage* other);
  friend void swap(CustomMessage& a, CustomMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CustomMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CustomMessage& from);
  void MergeFrom(const CustomMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CustomMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .common.msg.CustomEntity custom_entity = 3;
  int custom_entity_size() const;
  void clear_custom_entity();
  static const int kCustomEntityFieldNumber = 3;
  const ::common::msg::CustomEntity& custom_entity(int index) const;
  ::common::msg::CustomEntity* mutable_custom_entity(int index);
  ::common::msg::CustomEntity* add_custom_entity();
  ::google::protobuf::RepeatedPtrField< ::common::msg::CustomEntity >*
      mutable_custom_entity();
  const ::google::protobuf::RepeatedPtrField< ::common::msg::CustomEntity >&
      custom_entity() const;

  // string subType = 1;
  void clear_subtype();
  static const int kSubTypeFieldNumber = 1;
  const ::std::string& subtype() const;
  void set_subtype(const ::std::string& value);
  #if LANG_CXX11
  void set_subtype(::std::string&& value);
  #endif
  void set_subtype(const char* value);
  void set_subtype(const char* value, size_t size);
  ::std::string* mutable_subtype();
  ::std::string* release_subtype();
  void set_allocated_subtype(::std::string* subtype);

  // string notification = 2;
  void clear_notification();
  static const int kNotificationFieldNumber = 2;
  const ::std::string& notification() const;
  void set_notification(const ::std::string& value);
  #if LANG_CXX11
  void set_notification(::std::string&& value);
  #endif
  void set_notification(const char* value);
  void set_notification(const char* value, size_t size);
  ::std::string* mutable_notification();
  ::std::string* release_notification();
  void set_allocated_notification(::std::string* notification);

  // @@protoc_insertion_point(class_scope:common.msg.CustomMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::common::msg::CustomEntity > custom_entity_;
  ::google::protobuf::internal::ArenaStringPtr subtype_;
  ::google::protobuf::internal::ArenaStringPtr notification_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsCustomMessageImpl();
};
// -------------------------------------------------------------------

class CustomNoApnsMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.CustomNoApnsMessage) */ {
 public:
  CustomNoApnsMessage();
  virtual ~CustomNoApnsMessage();

  CustomNoApnsMessage(const CustomNoApnsMessage& from);

  inline CustomNoApnsMessage& operator=(const CustomNoApnsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CustomNoApnsMessage(CustomNoApnsMessage&& from) noexcept
    : CustomNoApnsMessage() {
    *this = ::std::move(from);
  }

  inline CustomNoApnsMessage& operator=(CustomNoApnsMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomNoApnsMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomNoApnsMessage* internal_default_instance() {
    return reinterpret_cast<const CustomNoApnsMessage*>(
               &_CustomNoApnsMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(CustomNoApnsMessage* other);
  friend void swap(CustomNoApnsMessage& a, CustomNoApnsMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomNoApnsMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CustomNoApnsMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CustomNoApnsMessage& from);
  void MergeFrom(const CustomNoApnsMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CustomNoApnsMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .common.msg.CustomEntity custom_entity = 3;
  int custom_entity_size() const;
  void clear_custom_entity();
  static const int kCustomEntityFieldNumber = 3;
  const ::common::msg::CustomEntity& custom_entity(int index) const;
  ::common::msg::CustomEntity* mutable_custom_entity(int index);
  ::common::msg::CustomEntity* add_custom_entity();
  ::google::protobuf::RepeatedPtrField< ::common::msg::CustomEntity >*
      mutable_custom_entity();
  const ::google::protobuf::RepeatedPtrField< ::common::msg::CustomEntity >&
      custom_entity() const;

  // string subType = 1;
  void clear_subtype();
  static const int kSubTypeFieldNumber = 1;
  const ::std::string& subtype() const;
  void set_subtype(const ::std::string& value);
  #if LANG_CXX11
  void set_subtype(::std::string&& value);
  #endif
  void set_subtype(const char* value);
  void set_subtype(const char* value, size_t size);
  ::std::string* mutable_subtype();
  ::std::string* release_subtype();
  void set_allocated_subtype(::std::string* subtype);

  // string notification = 2;
  void clear_notification();
  static const int kNotificationFieldNumber = 2;
  const ::std::string& notification() const;
  void set_notification(const ::std::string& value);
  #if LANG_CXX11
  void set_notification(::std::string&& value);
  #endif
  void set_notification(const char* value);
  void set_notification(const char* value, size_t size);
  ::std::string* mutable_notification();
  ::std::string* release_notification();
  void set_allocated_notification(::std::string* notification);

  // @@protoc_insertion_point(class_scope:common.msg.CustomNoApnsMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::common::msg::CustomEntity > custom_entity_;
  ::google::protobuf::internal::ArenaStringPtr subtype_;
  ::google::protobuf::internal::ArenaStringPtr notification_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsCustomNoApnsMessageImpl();
};
// -------------------------------------------------------------------

class MsggwMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.MsggwMessage) */ {
 public:
  MsggwMessage();
  virtual ~MsggwMessage();

  MsggwMessage(const MsggwMessage& from);

  inline MsggwMessage& operator=(const MsggwMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsggwMessage(MsggwMessage&& from) noexcept
    : MsggwMessage() {
    *this = ::std::move(from);
  }

  inline MsggwMessage& operator=(MsggwMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsggwMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsggwMessage* internal_default_instance() {
    return reinterpret_cast<const MsggwMessage*>(
               &_MsggwMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(MsggwMessage* other);
  friend void swap(MsggwMessage& a, MsggwMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsggwMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  MsggwMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsggwMessage& from);
  void MergeFrom(const MsggwMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsggwMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // string notification = 4;
  void clear_notification();
  static const int kNotificationFieldNumber = 4;
  const ::std::string& notification() const;
  void set_notification(const ::std::string& value);
  #if LANG_CXX11
  void set_notification(::std::string&& value);
  #endif
  void set_notification(const char* value);
  void set_notification(const char* value, size_t size);
  ::std::string* mutable_notification();
  ::std::string* release_notification();
  void set_allocated_notification(::std::string* notification);

  // string from = 5;
  void clear_from();
  static const int kFromFieldNumber = 5;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // uint64 guid = 3;
  void clear_guid();
  static const int kGuidFieldNumber = 3;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:common.msg.MsggwMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr notification_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::uint64 guid_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsMsggwMessageImpl();
};
// -------------------------------------------------------------------

class VcardMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.VcardMessage) */ {
 public:
  VcardMessage();
  virtual ~VcardMessage();

  VcardMessage(const VcardMessage& from);

  inline VcardMessage& operator=(const VcardMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VcardMessage(VcardMessage&& from) noexcept
    : VcardMessage() {
    *this = ::std::move(from);
  }

  inline VcardMessage& operator=(VcardMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VcardMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VcardMessage* internal_default_instance() {
    return reinterpret_cast<const VcardMessage*>(
               &_VcardMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(VcardMessage* other);
  friend void swap(VcardMessage& a, VcardMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VcardMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  VcardMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VcardMessage& from);
  void MergeFrom(const VcardMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VcardMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string nick = 2;
  void clear_nick();
  static const int kNickFieldNumber = 2;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // string phone_num = 3;
  void clear_phone_num();
  static const int kPhoneNumFieldNumber = 3;
  const ::std::string& phone_num() const;
  void set_phone_num(const ::std::string& value);
  #if LANG_CXX11
  void set_phone_num(::std::string&& value);
  #endif
  void set_phone_num(const char* value);
  void set_phone_num(const char* value, size_t size);
  ::std::string* mutable_phone_num();
  ::std::string* release_phone_num();
  void set_allocated_phone_num(::std::string* phone_num);

  // string original_link = 5;
  void clear_original_link();
  static const int kOriginalLinkFieldNumber = 5;
  const ::std::string& original_link() const;
  void set_original_link(const ::std::string& value);
  #if LANG_CXX11
  void set_original_link(::std::string&& value);
  #endif
  void set_original_link(const char* value);
  void set_original_link(const char* value, size_t size);
  ::std::string* mutable_original_link();
  ::std::string* release_original_link();
  void set_allocated_original_link(::std::string* original_link);

  // string thumbnail_link = 6;
  void clear_thumbnail_link();
  static const int kThumbnailLinkFieldNumber = 6;
  const ::std::string& thumbnail_link() const;
  void set_thumbnail_link(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_link(::std::string&& value);
  #endif
  void set_thumbnail_link(const char* value);
  void set_thumbnail_link(const char* value, size_t size);
  ::std::string* mutable_thumbnail_link();
  ::std::string* release_thumbnail_link();
  void set_allocated_thumbnail_link(::std::string* thumbnail_link);

  // .common.enumeration.EVcardMsgModelType vcard_type = 4;
  void clear_vcard_type();
  static const int kVcardTypeFieldNumber = 4;
  ::common::enumeration::EVcardMsgModelType vcard_type() const;
  void set_vcard_type(::common::enumeration::EVcardMsgModelType value);

  // @@protoc_insertion_point(class_scope:common.msg.VcardMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr phone_num_;
  ::google::protobuf::internal::ArenaStringPtr original_link_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_link_;
  int vcard_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsVcardMessageImpl();
};
// -------------------------------------------------------------------

class MergeMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:common.msg.MergeMessage) */ {
 public:
  MergeMessage();
  virtual ~MergeMessage();

  MergeMessage(const MergeMessage& from);

  inline MergeMessage& operator=(const MergeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MergeMessage(MergeMessage&& from) noexcept
    : MergeMessage() {
    *this = ::std::move(from);
  }

  inline MergeMessage& operator=(MergeMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MergeMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MergeMessage* internal_default_instance() {
    return reinterpret_cast<const MergeMessage*>(
               &_MergeMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(MergeMessage* other);
  friend void swap(MergeMessage& a, MergeMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MergeMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  MergeMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MergeMessage& from);
  void MergeFrom(const MergeMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MergeMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string msgContent = 2;
  int msgcontent_size() const;
  void clear_msgcontent();
  static const int kMsgContentFieldNumber = 2;
  const ::std::string& msgcontent(int index) const;
  ::std::string* mutable_msgcontent(int index);
  void set_msgcontent(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_msgcontent(int index, ::std::string&& value);
  #endif
  void set_msgcontent(int index, const char* value);
  void set_msgcontent(int index, const char* value, size_t size);
  ::std::string* add_msgcontent();
  void add_msgcontent(const ::std::string& value);
  #if LANG_CXX11
  void add_msgcontent(::std::string&& value);
  #endif
  void add_msgcontent(const char* value);
  void add_msgcontent(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& msgcontent() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_msgcontent();

  // repeated uint64 guidList = 3;
  int guidlist_size() const;
  void clear_guidlist();
  static const int kGuidListFieldNumber = 3;
  ::google::protobuf::uint64 guidlist(int index) const;
  void set_guidlist(int index, ::google::protobuf::uint64 value);
  void add_guidlist(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      guidlist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_guidlist();

  // string title = 1;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:common.msg.MergeMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> msgcontent_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > guidlist_;
  mutable int _guidlist_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  mutable int _cached_size_;
  friend struct ::protobuf_common_2fmsg_2eproto::TableStruct;
  friend void ::protobuf_common_2fmsg_2eproto::InitDefaultsMergeMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageUnit

// .common.msg.EMsgType msg_type = 1;
inline void MessageUnit::clear_msg_type() {
  msg_type_ = 0;
}
inline ::common::msg::EMsgType MessageUnit::msg_type() const {
  // @@protoc_insertion_point(field_get:common.msg.MessageUnit.msg_type)
  return static_cast< ::common::msg::EMsgType >(msg_type_);
}
inline void MessageUnit::set_msg_type(::common::msg::EMsgType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:common.msg.MessageUnit.msg_type)
}

// bytes data = 2;
inline void MessageUnit::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageUnit::data() const {
  // @@protoc_insertion_point(field_get:common.msg.MessageUnit.data)
  return data_.GetNoArena();
}
inline void MessageUnit::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.MessageUnit.data)
}
#if LANG_CXX11
inline void MessageUnit::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.MessageUnit.data)
}
#endif
inline void MessageUnit::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.MessageUnit.data)
}
inline void MessageUnit::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.MessageUnit.data)
}
inline ::std::string* MessageUnit::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.MessageUnit.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageUnit::release_data() {
  // @@protoc_insertion_point(field_release:common.msg.MessageUnit.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageUnit::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:common.msg.MessageUnit.data)
}

// bool is_retracted = 3;
inline void MessageUnit::clear_is_retracted() {
  is_retracted_ = false;
}
inline bool MessageUnit::is_retracted() const {
  // @@protoc_insertion_point(field_get:common.msg.MessageUnit.is_retracted)
  return is_retracted_;
}
inline void MessageUnit::set_is_retracted(bool value) {
  
  is_retracted_ = value;
  // @@protoc_insertion_point(field_set:common.msg.MessageUnit.is_retracted)
}

// -------------------------------------------------------------------

// ChatMessage

// string from_username = 1;
inline void ChatMessage::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessage::from_username() const {
  // @@protoc_insertion_point(field_get:common.msg.ChatMessage.from_username)
  return from_username_.GetNoArena();
}
inline void ChatMessage::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.ChatMessage.from_username)
}
#if LANG_CXX11
inline void ChatMessage::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.ChatMessage.from_username)
}
#endif
inline void ChatMessage::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.ChatMessage.from_username)
}
inline void ChatMessage::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.ChatMessage.from_username)
}
inline ::std::string* ChatMessage::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.ChatMessage.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_from_username() {
  // @@protoc_insertion_point(field_release:common.msg.ChatMessage.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:common.msg.ChatMessage.from_username)
}

// string appkey = 2;
inline void ChatMessage::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessage::appkey() const {
  // @@protoc_insertion_point(field_get:common.msg.ChatMessage.appkey)
  return appkey_.GetNoArena();
}
inline void ChatMessage::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.ChatMessage.appkey)
}
#if LANG_CXX11
inline void ChatMessage::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.ChatMessage.appkey)
}
#endif
inline void ChatMessage::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.ChatMessage.appkey)
}
inline void ChatMessage::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.ChatMessage.appkey)
}
inline ::std::string* ChatMessage::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.ChatMessage.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_appkey() {
  // @@protoc_insertion_point(field_release:common.msg.ChatMessage.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:common.msg.ChatMessage.appkey)
}

// string from_nick = 3;
inline void ChatMessage::clear_from_nick() {
  from_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessage::from_nick() const {
  // @@protoc_insertion_point(field_get:common.msg.ChatMessage.from_nick)
  return from_nick_.GetNoArena();
}
inline void ChatMessage::set_from_nick(const ::std::string& value) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.ChatMessage.from_nick)
}
#if LANG_CXX11
inline void ChatMessage::set_from_nick(::std::string&& value) {
  
  from_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.ChatMessage.from_nick)
}
#endif
inline void ChatMessage::set_from_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.ChatMessage.from_nick)
}
inline void ChatMessage::set_from_nick(const char* value, size_t size) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.ChatMessage.from_nick)
}
inline ::std::string* ChatMessage::mutable_from_nick() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.ChatMessage.from_nick)
  return from_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_from_nick() {
  // @@protoc_insertion_point(field_release:common.msg.ChatMessage.from_nick)
  
  return from_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_from_nick(::std::string* from_nick) {
  if (from_nick != NULL) {
    
  } else {
    
  }
  from_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_nick);
  // @@protoc_insertion_point(field_set_allocated:common.msg.ChatMessage.from_nick)
}

// .common.msg.EMsgContentType msg_content_type = 4;
inline void ChatMessage::clear_msg_content_type() {
  msg_content_type_ = 0;
}
inline ::common::msg::EMsgContentType ChatMessage::msg_content_type() const {
  // @@protoc_insertion_point(field_get:common.msg.ChatMessage.msg_content_type)
  return static_cast< ::common::msg::EMsgContentType >(msg_content_type_);
}
inline void ChatMessage::set_msg_content_type(::common::msg::EMsgContentType value) {
  
  msg_content_type_ = value;
  // @@protoc_insertion_point(field_set:common.msg.ChatMessage.msg_content_type)
}

// bytes data = 5;
inline void ChatMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessage::data() const {
  // @@protoc_insertion_point(field_get:common.msg.ChatMessage.data)
  return data_.GetNoArena();
}
inline void ChatMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.ChatMessage.data)
}
#if LANG_CXX11
inline void ChatMessage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.ChatMessage.data)
}
#endif
inline void ChatMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.ChatMessage.data)
}
inline void ChatMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.ChatMessage.data)
}
inline ::std::string* ChatMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.ChatMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_data() {
  // @@protoc_insertion_point(field_release:common.msg.ChatMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:common.msg.ChatMessage.data)
}

// uint64 guid = 6;
inline void ChatMessage::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChatMessage::guid() const {
  // @@protoc_insertion_point(field_get:common.msg.ChatMessage.guid)
  return guid_;
}
inline void ChatMessage::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:common.msg.ChatMessage.guid)
}

// string msg_id = 7;
inline void ChatMessage::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessage::msg_id() const {
  // @@protoc_insertion_point(field_get:common.msg.ChatMessage.msg_id)
  return msg_id_.GetNoArena();
}
inline void ChatMessage::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.ChatMessage.msg_id)
}
#if LANG_CXX11
inline void ChatMessage::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.ChatMessage.msg_id)
}
#endif
inline void ChatMessage::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.ChatMessage.msg_id)
}
inline void ChatMessage::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.ChatMessage.msg_id)
}
inline ::std::string* ChatMessage::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.ChatMessage.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_msg_id() {
  // @@protoc_insertion_point(field_release:common.msg.ChatMessage.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:common.msg.ChatMessage.msg_id)
}

// bool burn_after_read = 8;
inline void ChatMessage::clear_burn_after_read() {
  burn_after_read_ = false;
}
inline bool ChatMessage::burn_after_read() const {
  // @@protoc_insertion_point(field_get:common.msg.ChatMessage.burn_after_read)
  return burn_after_read_;
}
inline void ChatMessage::set_burn_after_read(bool value) {
  
  burn_after_read_ = value;
  // @@protoc_insertion_point(field_set:common.msg.ChatMessage.burn_after_read)
}

// string to_username = 9;
inline void ChatMessage::clear_to_username() {
  to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessage::to_username() const {
  // @@protoc_insertion_point(field_get:common.msg.ChatMessage.to_username)
  return to_username_.GetNoArena();
}
inline void ChatMessage::set_to_username(const ::std::string& value) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.ChatMessage.to_username)
}
#if LANG_CXX11
inline void ChatMessage::set_to_username(::std::string&& value) {
  
  to_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.ChatMessage.to_username)
}
#endif
inline void ChatMessage::set_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.ChatMessage.to_username)
}
inline void ChatMessage::set_to_username(const char* value, size_t size) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.ChatMessage.to_username)
}
inline ::std::string* ChatMessage::mutable_to_username() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.ChatMessage.to_username)
  return to_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_to_username() {
  // @@protoc_insertion_point(field_release:common.msg.ChatMessage.to_username)
  
  return to_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_to_username(::std::string* to_username) {
  if (to_username != NULL) {
    
  } else {
    
  }
  to_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_username);
  // @@protoc_insertion_point(field_set_allocated:common.msg.ChatMessage.to_username)
}

// bool is_jimao = 10;
inline void ChatMessage::clear_is_jimao() {
  is_jimao_ = false;
}
inline bool ChatMessage::is_jimao() const {
  // @@protoc_insertion_point(field_get:common.msg.ChatMessage.is_jimao)
  return is_jimao_;
}
inline void ChatMessage::set_is_jimao(bool value) {
  
  is_jimao_ = value;
  // @@protoc_insertion_point(field_set:common.msg.ChatMessage.is_jimao)
}

// bool is_read = 11;
inline void ChatMessage::clear_is_read() {
  is_read_ = false;
}
inline bool ChatMessage::is_read() const {
  // @@protoc_insertion_point(field_get:common.msg.ChatMessage.is_read)
  return is_read_;
}
inline void ChatMessage::set_is_read(bool value) {
  
  is_read_ = value;
  // @@protoc_insertion_point(field_set:common.msg.ChatMessage.is_read)
}

// string from_phone = 12;
inline void ChatMessage::clear_from_phone() {
  from_phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessage::from_phone() const {
  // @@protoc_insertion_point(field_get:common.msg.ChatMessage.from_phone)
  return from_phone_.GetNoArena();
}
inline void ChatMessage::set_from_phone(const ::std::string& value) {
  
  from_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.ChatMessage.from_phone)
}
#if LANG_CXX11
inline void ChatMessage::set_from_phone(::std::string&& value) {
  
  from_phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.ChatMessage.from_phone)
}
#endif
inline void ChatMessage::set_from_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.ChatMessage.from_phone)
}
inline void ChatMessage::set_from_phone(const char* value, size_t size) {
  
  from_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.ChatMessage.from_phone)
}
inline ::std::string* ChatMessage::mutable_from_phone() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.ChatMessage.from_phone)
  return from_phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_from_phone() {
  // @@protoc_insertion_point(field_release:common.msg.ChatMessage.from_phone)
  
  return from_phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_from_phone(::std::string* from_phone) {
  if (from_phone != NULL) {
    
  } else {
    
  }
  from_phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_phone);
  // @@protoc_insertion_point(field_set_allocated:common.msg.ChatMessage.from_phone)
}

// bool to_user_is_unregistered = 13;
inline void ChatMessage::clear_to_user_is_unregistered() {
  to_user_is_unregistered_ = false;
}
inline bool ChatMessage::to_user_is_unregistered() const {
  // @@protoc_insertion_point(field_get:common.msg.ChatMessage.to_user_is_unregistered)
  return to_user_is_unregistered_;
}
inline void ChatMessage::set_to_user_is_unregistered(bool value) {
  
  to_user_is_unregistered_ = value;
  // @@protoc_insertion_point(field_set:common.msg.ChatMessage.to_user_is_unregistered)
}

// string to_phone = 14;
inline void ChatMessage::clear_to_phone() {
  to_phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessage::to_phone() const {
  // @@protoc_insertion_point(field_get:common.msg.ChatMessage.to_phone)
  return to_phone_.GetNoArena();
}
inline void ChatMessage::set_to_phone(const ::std::string& value) {
  
  to_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.ChatMessage.to_phone)
}
#if LANG_CXX11
inline void ChatMessage::set_to_phone(::std::string&& value) {
  
  to_phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.ChatMessage.to_phone)
}
#endif
inline void ChatMessage::set_to_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.ChatMessage.to_phone)
}
inline void ChatMessage::set_to_phone(const char* value, size_t size) {
  
  to_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.ChatMessage.to_phone)
}
inline ::std::string* ChatMessage::mutable_to_phone() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.ChatMessage.to_phone)
  return to_phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_to_phone() {
  // @@protoc_insertion_point(field_release:common.msg.ChatMessage.to_phone)
  
  return to_phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_to_phone(::std::string* to_phone) {
  if (to_phone != NULL) {
    
  } else {
    
  }
  to_phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_phone);
  // @@protoc_insertion_point(field_set_allocated:common.msg.ChatMessage.to_phone)
}

// uint32 user_enable = 15;
inline void ChatMessage::clear_user_enable() {
  user_enable_ = 0u;
}
inline ::google::protobuf::uint32 ChatMessage::user_enable() const {
  // @@protoc_insertion_point(field_get:common.msg.ChatMessage.user_enable)
  return user_enable_;
}
inline void ChatMessage::set_user_enable(::google::protobuf::uint32 value) {
  
  user_enable_ = value;
  // @@protoc_insertion_point(field_set:common.msg.ChatMessage.user_enable)
}

// string from_thumbnail = 16;
inline void ChatMessage::clear_from_thumbnail() {
  from_thumbnail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessage::from_thumbnail() const {
  // @@protoc_insertion_point(field_get:common.msg.ChatMessage.from_thumbnail)
  return from_thumbnail_.GetNoArena();
}
inline void ChatMessage::set_from_thumbnail(const ::std::string& value) {
  
  from_thumbnail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.ChatMessage.from_thumbnail)
}
#if LANG_CXX11
inline void ChatMessage::set_from_thumbnail(::std::string&& value) {
  
  from_thumbnail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.ChatMessage.from_thumbnail)
}
#endif
inline void ChatMessage::set_from_thumbnail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_thumbnail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.ChatMessage.from_thumbnail)
}
inline void ChatMessage::set_from_thumbnail(const char* value, size_t size) {
  
  from_thumbnail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.ChatMessage.from_thumbnail)
}
inline ::std::string* ChatMessage::mutable_from_thumbnail() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.ChatMessage.from_thumbnail)
  return from_thumbnail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessage::release_from_thumbnail() {
  // @@protoc_insertion_point(field_release:common.msg.ChatMessage.from_thumbnail)
  
  return from_thumbnail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessage::set_allocated_from_thumbnail(::std::string* from_thumbnail) {
  if (from_thumbnail != NULL) {
    
  } else {
    
  }
  from_thumbnail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_thumbnail);
  // @@protoc_insertion_point(field_set_allocated:common.msg.ChatMessage.from_thumbnail)
}

// -------------------------------------------------------------------

// GroupMessage

// string from_username = 1;
inline void GroupMessage::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMessage::from_username() const {
  // @@protoc_insertion_point(field_get:common.msg.GroupMessage.from_username)
  return from_username_.GetNoArena();
}
inline void GroupMessage::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.GroupMessage.from_username)
}
#if LANG_CXX11
inline void GroupMessage::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.GroupMessage.from_username)
}
#endif
inline void GroupMessage::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.GroupMessage.from_username)
}
inline void GroupMessage::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.GroupMessage.from_username)
}
inline ::std::string* GroupMessage::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.GroupMessage.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMessage::release_from_username() {
  // @@protoc_insertion_point(field_release:common.msg.GroupMessage.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMessage::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:common.msg.GroupMessage.from_username)
}

// string from_nick = 2;
inline void GroupMessage::clear_from_nick() {
  from_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMessage::from_nick() const {
  // @@protoc_insertion_point(field_get:common.msg.GroupMessage.from_nick)
  return from_nick_.GetNoArena();
}
inline void GroupMessage::set_from_nick(const ::std::string& value) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.GroupMessage.from_nick)
}
#if LANG_CXX11
inline void GroupMessage::set_from_nick(::std::string&& value) {
  
  from_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.GroupMessage.from_nick)
}
#endif
inline void GroupMessage::set_from_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.GroupMessage.from_nick)
}
inline void GroupMessage::set_from_nick(const char* value, size_t size) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.GroupMessage.from_nick)
}
inline ::std::string* GroupMessage::mutable_from_nick() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.GroupMessage.from_nick)
  return from_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMessage::release_from_nick() {
  // @@protoc_insertion_point(field_release:common.msg.GroupMessage.from_nick)
  
  return from_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMessage::set_allocated_from_nick(::std::string* from_nick) {
  if (from_nick != NULL) {
    
  } else {
    
  }
  from_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_nick);
  // @@protoc_insertion_point(field_set_allocated:common.msg.GroupMessage.from_nick)
}

// string appkey = 3;
inline void GroupMessage::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMessage::appkey() const {
  // @@protoc_insertion_point(field_get:common.msg.GroupMessage.appkey)
  return appkey_.GetNoArena();
}
inline void GroupMessage::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.GroupMessage.appkey)
}
#if LANG_CXX11
inline void GroupMessage::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.GroupMessage.appkey)
}
#endif
inline void GroupMessage::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.GroupMessage.appkey)
}
inline void GroupMessage::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.GroupMessage.appkey)
}
inline ::std::string* GroupMessage::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.GroupMessage.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMessage::release_appkey() {
  // @@protoc_insertion_point(field_release:common.msg.GroupMessage.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMessage::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:common.msg.GroupMessage.appkey)
}

// string uri = 4;
inline void GroupMessage::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMessage::uri() const {
  // @@protoc_insertion_point(field_get:common.msg.GroupMessage.uri)
  return uri_.GetNoArena();
}
inline void GroupMessage::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.GroupMessage.uri)
}
#if LANG_CXX11
inline void GroupMessage::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.GroupMessage.uri)
}
#endif
inline void GroupMessage::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.GroupMessage.uri)
}
inline void GroupMessage::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.GroupMessage.uri)
}
inline ::std::string* GroupMessage::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.GroupMessage.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMessage::release_uri() {
  // @@protoc_insertion_point(field_release:common.msg.GroupMessage.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMessage::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:common.msg.GroupMessage.uri)
}

// .common.msg.EMsgContentType msg_content_type = 5;
inline void GroupMessage::clear_msg_content_type() {
  msg_content_type_ = 0;
}
inline ::common::msg::EMsgContentType GroupMessage::msg_content_type() const {
  // @@protoc_insertion_point(field_get:common.msg.GroupMessage.msg_content_type)
  return static_cast< ::common::msg::EMsgContentType >(msg_content_type_);
}
inline void GroupMessage::set_msg_content_type(::common::msg::EMsgContentType value) {
  
  msg_content_type_ = value;
  // @@protoc_insertion_point(field_set:common.msg.GroupMessage.msg_content_type)
}

// bytes data = 6;
inline void GroupMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMessage::data() const {
  // @@protoc_insertion_point(field_get:common.msg.GroupMessage.data)
  return data_.GetNoArena();
}
inline void GroupMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.GroupMessage.data)
}
#if LANG_CXX11
inline void GroupMessage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.GroupMessage.data)
}
#endif
inline void GroupMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.GroupMessage.data)
}
inline void GroupMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.GroupMessage.data)
}
inline ::std::string* GroupMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.GroupMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMessage::release_data() {
  // @@protoc_insertion_point(field_release:common.msg.GroupMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:common.msg.GroupMessage.data)
}

// uint64 guid = 7;
inline void GroupMessage::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GroupMessage::guid() const {
  // @@protoc_insertion_point(field_get:common.msg.GroupMessage.guid)
  return guid_;
}
inline void GroupMessage::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:common.msg.GroupMessage.guid)
}

// string msg_id = 8;
inline void GroupMessage::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMessage::msg_id() const {
  // @@protoc_insertion_point(field_get:common.msg.GroupMessage.msg_id)
  return msg_id_.GetNoArena();
}
inline void GroupMessage::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.GroupMessage.msg_id)
}
#if LANG_CXX11
inline void GroupMessage::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.GroupMessage.msg_id)
}
#endif
inline void GroupMessage::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.GroupMessage.msg_id)
}
inline void GroupMessage::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.GroupMessage.msg_id)
}
inline ::std::string* GroupMessage::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.GroupMessage.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMessage::release_msg_id() {
  // @@protoc_insertion_point(field_release:common.msg.GroupMessage.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMessage::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:common.msg.GroupMessage.msg_id)
}

// string group_name = 9;
inline void GroupMessage::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMessage::group_name() const {
  // @@protoc_insertion_point(field_get:common.msg.GroupMessage.group_name)
  return group_name_.GetNoArena();
}
inline void GroupMessage::set_group_name(const ::std::string& value) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.GroupMessage.group_name)
}
#if LANG_CXX11
inline void GroupMessage::set_group_name(::std::string&& value) {
  
  group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.GroupMessage.group_name)
}
#endif
inline void GroupMessage::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.GroupMessage.group_name)
}
inline void GroupMessage::set_group_name(const char* value, size_t size) {
  
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.GroupMessage.group_name)
}
inline ::std::string* GroupMessage::mutable_group_name() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.GroupMessage.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMessage::release_group_name() {
  // @@protoc_insertion_point(field_release:common.msg.GroupMessage.group_name)
  
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMessage::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:common.msg.GroupMessage.group_name)
}

// bool is_jimao = 10;
inline void GroupMessage::clear_is_jimao() {
  is_jimao_ = false;
}
inline bool GroupMessage::is_jimao() const {
  // @@protoc_insertion_point(field_get:common.msg.GroupMessage.is_jimao)
  return is_jimao_;
}
inline void GroupMessage::set_is_jimao(bool value) {
  
  is_jimao_ = value;
  // @@protoc_insertion_point(field_set:common.msg.GroupMessage.is_jimao)
}

// bool is_read = 11;
inline void GroupMessage::clear_is_read() {
  is_read_ = false;
}
inline bool GroupMessage::is_read() const {
  // @@protoc_insertion_point(field_get:common.msg.GroupMessage.is_read)
  return is_read_;
}
inline void GroupMessage::set_is_read(bool value) {
  
  is_read_ = value;
  // @@protoc_insertion_point(field_set:common.msg.GroupMessage.is_read)
}

// -------------------------------------------------------------------

// TransparentMessage

// string appkey = 1;
inline void TransparentMessage::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransparentMessage::appkey() const {
  // @@protoc_insertion_point(field_get:common.msg.TransparentMessage.appkey)
  return appkey_.GetNoArena();
}
inline void TransparentMessage::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.TransparentMessage.appkey)
}
#if LANG_CXX11
inline void TransparentMessage::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.TransparentMessage.appkey)
}
#endif
inline void TransparentMessage::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.TransparentMessage.appkey)
}
inline void TransparentMessage::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.TransparentMessage.appkey)
}
inline ::std::string* TransparentMessage::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.TransparentMessage.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransparentMessage::release_appkey() {
  // @@protoc_insertion_point(field_release:common.msg.TransparentMessage.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransparentMessage::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:common.msg.TransparentMessage.appkey)
}

// string from_username = 2;
inline void TransparentMessage::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransparentMessage::from_username() const {
  // @@protoc_insertion_point(field_get:common.msg.TransparentMessage.from_username)
  return from_username_.GetNoArena();
}
inline void TransparentMessage::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.TransparentMessage.from_username)
}
#if LANG_CXX11
inline void TransparentMessage::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.TransparentMessage.from_username)
}
#endif
inline void TransparentMessage::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.TransparentMessage.from_username)
}
inline void TransparentMessage::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.TransparentMessage.from_username)
}
inline ::std::string* TransparentMessage::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.TransparentMessage.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransparentMessage::release_from_username() {
  // @@protoc_insertion_point(field_release:common.msg.TransparentMessage.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransparentMessage::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:common.msg.TransparentMessage.from_username)
}

// string to_useranem = 3;
inline void TransparentMessage::clear_to_useranem() {
  to_useranem_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransparentMessage::to_useranem() const {
  // @@protoc_insertion_point(field_get:common.msg.TransparentMessage.to_useranem)
  return to_useranem_.GetNoArena();
}
inline void TransparentMessage::set_to_useranem(const ::std::string& value) {
  
  to_useranem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.TransparentMessage.to_useranem)
}
#if LANG_CXX11
inline void TransparentMessage::set_to_useranem(::std::string&& value) {
  
  to_useranem_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.TransparentMessage.to_useranem)
}
#endif
inline void TransparentMessage::set_to_useranem(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_useranem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.TransparentMessage.to_useranem)
}
inline void TransparentMessage::set_to_useranem(const char* value, size_t size) {
  
  to_useranem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.TransparentMessage.to_useranem)
}
inline ::std::string* TransparentMessage::mutable_to_useranem() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.TransparentMessage.to_useranem)
  return to_useranem_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransparentMessage::release_to_useranem() {
  // @@protoc_insertion_point(field_release:common.msg.TransparentMessage.to_useranem)
  
  return to_useranem_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransparentMessage::set_allocated_to_useranem(::std::string* to_useranem) {
  if (to_useranem != NULL) {
    
  } else {
    
  }
  to_useranem_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_useranem);
  // @@protoc_insertion_point(field_set_allocated:common.msg.TransparentMessage.to_useranem)
}

// bytes data = 4;
inline void TransparentMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransparentMessage::data() const {
  // @@protoc_insertion_point(field_get:common.msg.TransparentMessage.data)
  return data_.GetNoArena();
}
inline void TransparentMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.TransparentMessage.data)
}
#if LANG_CXX11
inline void TransparentMessage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.TransparentMessage.data)
}
#endif
inline void TransparentMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.TransparentMessage.data)
}
inline void TransparentMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.TransparentMessage.data)
}
inline ::std::string* TransparentMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.TransparentMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransparentMessage::release_data() {
  // @@protoc_insertion_point(field_release:common.msg.TransparentMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransparentMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:common.msg.TransparentMessage.data)
}

// uint64 guid = 5;
inline void TransparentMessage::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TransparentMessage::guid() const {
  // @@protoc_insertion_point(field_get:common.msg.TransparentMessage.guid)
  return guid_;
}
inline void TransparentMessage::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:common.msg.TransparentMessage.guid)
}

// string msg_id = 6;
inline void TransparentMessage::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransparentMessage::msg_id() const {
  // @@protoc_insertion_point(field_get:common.msg.TransparentMessage.msg_id)
  return msg_id_.GetNoArena();
}
inline void TransparentMessage::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.TransparentMessage.msg_id)
}
#if LANG_CXX11
inline void TransparentMessage::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.TransparentMessage.msg_id)
}
#endif
inline void TransparentMessage::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.TransparentMessage.msg_id)
}
inline void TransparentMessage::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.TransparentMessage.msg_id)
}
inline ::std::string* TransparentMessage::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.TransparentMessage.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransparentMessage::release_msg_id() {
  // @@protoc_insertion_point(field_release:common.msg.TransparentMessage.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransparentMessage::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:common.msg.TransparentMessage.msg_id)
}

// string from_nick = 7;
inline void TransparentMessage::clear_from_nick() {
  from_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransparentMessage::from_nick() const {
  // @@protoc_insertion_point(field_get:common.msg.TransparentMessage.from_nick)
  return from_nick_.GetNoArena();
}
inline void TransparentMessage::set_from_nick(const ::std::string& value) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.TransparentMessage.from_nick)
}
#if LANG_CXX11
inline void TransparentMessage::set_from_nick(::std::string&& value) {
  
  from_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.TransparentMessage.from_nick)
}
#endif
inline void TransparentMessage::set_from_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.TransparentMessage.from_nick)
}
inline void TransparentMessage::set_from_nick(const char* value, size_t size) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.TransparentMessage.from_nick)
}
inline ::std::string* TransparentMessage::mutable_from_nick() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.TransparentMessage.from_nick)
  return from_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransparentMessage::release_from_nick() {
  // @@protoc_insertion_point(field_release:common.msg.TransparentMessage.from_nick)
  
  return from_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransparentMessage::set_allocated_from_nick(::std::string* from_nick) {
  if (from_nick != NULL) {
    
  } else {
    
  }
  from_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_nick);
  // @@protoc_insertion_point(field_set_allocated:common.msg.TransparentMessage.from_nick)
}

// -------------------------------------------------------------------

// FriendMessage

// string text = 1;
inline void FriendMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendMessage::text() const {
  // @@protoc_insertion_point(field_get:common.msg.FriendMessage.text)
  return text_.GetNoArena();
}
inline void FriendMessage::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.FriendMessage.text)
}
#if LANG_CXX11
inline void FriendMessage::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.FriendMessage.text)
}
#endif
inline void FriendMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.FriendMessage.text)
}
inline void FriendMessage::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.FriendMessage.text)
}
inline ::std::string* FriendMessage::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.FriendMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendMessage::release_text() {
  // @@protoc_insertion_point(field_release:common.msg.FriendMessage.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendMessage::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:common.msg.FriendMessage.text)
}

// -------------------------------------------------------------------

// TextMessage

// string text = 1;
inline void TextMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TextMessage::text() const {
  // @@protoc_insertion_point(field_get:common.msg.TextMessage.text)
  return text_.GetNoArena();
}
inline void TextMessage::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.TextMessage.text)
}
#if LANG_CXX11
inline void TextMessage::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.TextMessage.text)
}
#endif
inline void TextMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.TextMessage.text)
}
inline void TextMessage::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.TextMessage.text)
}
inline ::std::string* TextMessage::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.TextMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TextMessage::release_text() {
  // @@protoc_insertion_point(field_release:common.msg.TextMessage.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TextMessage::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:common.msg.TextMessage.text)
}

// bool burn_after_read = 2;
inline void TextMessage::clear_burn_after_read() {
  burn_after_read_ = false;
}
inline bool TextMessage::burn_after_read() const {
  // @@protoc_insertion_point(field_get:common.msg.TextMessage.burn_after_read)
  return burn_after_read_;
}
inline void TextMessage::set_burn_after_read(bool value) {
  
  burn_after_read_ = value;
  // @@protoc_insertion_point(field_set:common.msg.TextMessage.burn_after_read)
}

// -------------------------------------------------------------------

// ImageMessage

// string file_name = 1;
inline void ImageMessage::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageMessage::file_name() const {
  // @@protoc_insertion_point(field_get:common.msg.ImageMessage.file_name)
  return file_name_.GetNoArena();
}
inline void ImageMessage::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.ImageMessage.file_name)
}
#if LANG_CXX11
inline void ImageMessage::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.ImageMessage.file_name)
}
#endif
inline void ImageMessage::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.ImageMessage.file_name)
}
inline void ImageMessage::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.ImageMessage.file_name)
}
inline ::std::string* ImageMessage::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.ImageMessage.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageMessage::release_file_name() {
  // @@protoc_insertion_point(field_release:common.msg.ImageMessage.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMessage::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:common.msg.ImageMessage.file_name)
}

// string origin_link = 2;
inline void ImageMessage::clear_origin_link() {
  origin_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageMessage::origin_link() const {
  // @@protoc_insertion_point(field_get:common.msg.ImageMessage.origin_link)
  return origin_link_.GetNoArena();
}
inline void ImageMessage::set_origin_link(const ::std::string& value) {
  
  origin_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.ImageMessage.origin_link)
}
#if LANG_CXX11
inline void ImageMessage::set_origin_link(::std::string&& value) {
  
  origin_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.ImageMessage.origin_link)
}
#endif
inline void ImageMessage::set_origin_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  origin_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.ImageMessage.origin_link)
}
inline void ImageMessage::set_origin_link(const char* value, size_t size) {
  
  origin_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.ImageMessage.origin_link)
}
inline ::std::string* ImageMessage::mutable_origin_link() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.ImageMessage.origin_link)
  return origin_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageMessage::release_origin_link() {
  // @@protoc_insertion_point(field_release:common.msg.ImageMessage.origin_link)
  
  return origin_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMessage::set_allocated_origin_link(::std::string* origin_link) {
  if (origin_link != NULL) {
    
  } else {
    
  }
  origin_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin_link);
  // @@protoc_insertion_point(field_set_allocated:common.msg.ImageMessage.origin_link)
}

// string big_link = 3;
inline void ImageMessage::clear_big_link() {
  big_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageMessage::big_link() const {
  // @@protoc_insertion_point(field_get:common.msg.ImageMessage.big_link)
  return big_link_.GetNoArena();
}
inline void ImageMessage::set_big_link(const ::std::string& value) {
  
  big_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.ImageMessage.big_link)
}
#if LANG_CXX11
inline void ImageMessage::set_big_link(::std::string&& value) {
  
  big_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.ImageMessage.big_link)
}
#endif
inline void ImageMessage::set_big_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  big_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.ImageMessage.big_link)
}
inline void ImageMessage::set_big_link(const char* value, size_t size) {
  
  big_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.ImageMessage.big_link)
}
inline ::std::string* ImageMessage::mutable_big_link() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.ImageMessage.big_link)
  return big_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageMessage::release_big_link() {
  // @@protoc_insertion_point(field_release:common.msg.ImageMessage.big_link)
  
  return big_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMessage::set_allocated_big_link(::std::string* big_link) {
  if (big_link != NULL) {
    
  } else {
    
  }
  big_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), big_link);
  // @@protoc_insertion_point(field_set_allocated:common.msg.ImageMessage.big_link)
}

// string middle_link = 4;
inline void ImageMessage::clear_middle_link() {
  middle_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageMessage::middle_link() const {
  // @@protoc_insertion_point(field_get:common.msg.ImageMessage.middle_link)
  return middle_link_.GetNoArena();
}
inline void ImageMessage::set_middle_link(const ::std::string& value) {
  
  middle_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.ImageMessage.middle_link)
}
#if LANG_CXX11
inline void ImageMessage::set_middle_link(::std::string&& value) {
  
  middle_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.ImageMessage.middle_link)
}
#endif
inline void ImageMessage::set_middle_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  middle_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.ImageMessage.middle_link)
}
inline void ImageMessage::set_middle_link(const char* value, size_t size) {
  
  middle_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.ImageMessage.middle_link)
}
inline ::std::string* ImageMessage::mutable_middle_link() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.ImageMessage.middle_link)
  return middle_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageMessage::release_middle_link() {
  // @@protoc_insertion_point(field_release:common.msg.ImageMessage.middle_link)
  
  return middle_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMessage::set_allocated_middle_link(::std::string* middle_link) {
  if (middle_link != NULL) {
    
  } else {
    
  }
  middle_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), middle_link);
  // @@protoc_insertion_point(field_set_allocated:common.msg.ImageMessage.middle_link)
}

// string small_link = 5;
inline void ImageMessage::clear_small_link() {
  small_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageMessage::small_link() const {
  // @@protoc_insertion_point(field_get:common.msg.ImageMessage.small_link)
  return small_link_.GetNoArena();
}
inline void ImageMessage::set_small_link(const ::std::string& value) {
  
  small_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.ImageMessage.small_link)
}
#if LANG_CXX11
inline void ImageMessage::set_small_link(::std::string&& value) {
  
  small_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.ImageMessage.small_link)
}
#endif
inline void ImageMessage::set_small_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  small_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.ImageMessage.small_link)
}
inline void ImageMessage::set_small_link(const char* value, size_t size) {
  
  small_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.ImageMessage.small_link)
}
inline ::std::string* ImageMessage::mutable_small_link() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.ImageMessage.small_link)
  return small_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageMessage::release_small_link() {
  // @@protoc_insertion_point(field_release:common.msg.ImageMessage.small_link)
  
  return small_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageMessage::set_allocated_small_link(::std::string* small_link) {
  if (small_link != NULL) {
    
  } else {
    
  }
  small_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), small_link);
  // @@protoc_insertion_point(field_set_allocated:common.msg.ImageMessage.small_link)
}

// uint64 file_length = 6;
inline void ImageMessage::clear_file_length() {
  file_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ImageMessage::file_length() const {
  // @@protoc_insertion_point(field_get:common.msg.ImageMessage.file_length)
  return file_length_;
}
inline void ImageMessage::set_file_length(::google::protobuf::uint64 value) {
  
  file_length_ = value;
  // @@protoc_insertion_point(field_set:common.msg.ImageMessage.file_length)
}

// bool isOrigin = 7;
inline void ImageMessage::clear_isorigin() {
  isorigin_ = false;
}
inline bool ImageMessage::isorigin() const {
  // @@protoc_insertion_point(field_get:common.msg.ImageMessage.isOrigin)
  return isorigin_;
}
inline void ImageMessage::set_isorigin(bool value) {
  
  isorigin_ = value;
  // @@protoc_insertion_point(field_set:common.msg.ImageMessage.isOrigin)
}

// uint32 small_width = 8;
inline void ImageMessage::clear_small_width() {
  small_width_ = 0u;
}
inline ::google::protobuf::uint32 ImageMessage::small_width() const {
  // @@protoc_insertion_point(field_get:common.msg.ImageMessage.small_width)
  return small_width_;
}
inline void ImageMessage::set_small_width(::google::protobuf::uint32 value) {
  
  small_width_ = value;
  // @@protoc_insertion_point(field_set:common.msg.ImageMessage.small_width)
}

// uint32 small_height = 9;
inline void ImageMessage::clear_small_height() {
  small_height_ = 0u;
}
inline ::google::protobuf::uint32 ImageMessage::small_height() const {
  // @@protoc_insertion_point(field_get:common.msg.ImageMessage.small_height)
  return small_height_;
}
inline void ImageMessage::set_small_height(::google::protobuf::uint32 value) {
  
  small_height_ = value;
  // @@protoc_insertion_point(field_set:common.msg.ImageMessage.small_height)
}

// uint32 middle_width = 10;
inline void ImageMessage::clear_middle_width() {
  middle_width_ = 0u;
}
inline ::google::protobuf::uint32 ImageMessage::middle_width() const {
  // @@protoc_insertion_point(field_get:common.msg.ImageMessage.middle_width)
  return middle_width_;
}
inline void ImageMessage::set_middle_width(::google::protobuf::uint32 value) {
  
  middle_width_ = value;
  // @@protoc_insertion_point(field_set:common.msg.ImageMessage.middle_width)
}

// uint32 middle_height = 11;
inline void ImageMessage::clear_middle_height() {
  middle_height_ = 0u;
}
inline ::google::protobuf::uint32 ImageMessage::middle_height() const {
  // @@protoc_insertion_point(field_get:common.msg.ImageMessage.middle_height)
  return middle_height_;
}
inline void ImageMessage::set_middle_height(::google::protobuf::uint32 value) {
  
  middle_height_ = value;
  // @@protoc_insertion_point(field_set:common.msg.ImageMessage.middle_height)
}

// -------------------------------------------------------------------

// VideoMessage

// string file_name = 1;
inline void VideoMessage::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoMessage::file_name() const {
  // @@protoc_insertion_point(field_get:common.msg.VideoMessage.file_name)
  return file_name_.GetNoArena();
}
inline void VideoMessage::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.VideoMessage.file_name)
}
#if LANG_CXX11
inline void VideoMessage::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.VideoMessage.file_name)
}
#endif
inline void VideoMessage::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.VideoMessage.file_name)
}
inline void VideoMessage::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.VideoMessage.file_name)
}
inline ::std::string* VideoMessage::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.VideoMessage.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMessage::release_file_name() {
  // @@protoc_insertion_point(field_release:common.msg.VideoMessage.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMessage::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:common.msg.VideoMessage.file_name)
}

// string video_link = 2;
inline void VideoMessage::clear_video_link() {
  video_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoMessage::video_link() const {
  // @@protoc_insertion_point(field_get:common.msg.VideoMessage.video_link)
  return video_link_.GetNoArena();
}
inline void VideoMessage::set_video_link(const ::std::string& value) {
  
  video_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.VideoMessage.video_link)
}
#if LANG_CXX11
inline void VideoMessage::set_video_link(::std::string&& value) {
  
  video_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.VideoMessage.video_link)
}
#endif
inline void VideoMessage::set_video_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  video_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.VideoMessage.video_link)
}
inline void VideoMessage::set_video_link(const char* value, size_t size) {
  
  video_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.VideoMessage.video_link)
}
inline ::std::string* VideoMessage::mutable_video_link() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.VideoMessage.video_link)
  return video_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMessage::release_video_link() {
  // @@protoc_insertion_point(field_release:common.msg.VideoMessage.video_link)
  
  return video_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMessage::set_allocated_video_link(::std::string* video_link) {
  if (video_link != NULL) {
    
  } else {
    
  }
  video_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_link);
  // @@protoc_insertion_point(field_set_allocated:common.msg.VideoMessage.video_link)
}

// string video_screen_short_link = 3;
inline void VideoMessage::clear_video_screen_short_link() {
  video_screen_short_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoMessage::video_screen_short_link() const {
  // @@protoc_insertion_point(field_get:common.msg.VideoMessage.video_screen_short_link)
  return video_screen_short_link_.GetNoArena();
}
inline void VideoMessage::set_video_screen_short_link(const ::std::string& value) {
  
  video_screen_short_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.VideoMessage.video_screen_short_link)
}
#if LANG_CXX11
inline void VideoMessage::set_video_screen_short_link(::std::string&& value) {
  
  video_screen_short_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.VideoMessage.video_screen_short_link)
}
#endif
inline void VideoMessage::set_video_screen_short_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  video_screen_short_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.VideoMessage.video_screen_short_link)
}
inline void VideoMessage::set_video_screen_short_link(const char* value, size_t size) {
  
  video_screen_short_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.VideoMessage.video_screen_short_link)
}
inline ::std::string* VideoMessage::mutable_video_screen_short_link() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.VideoMessage.video_screen_short_link)
  return video_screen_short_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoMessage::release_video_screen_short_link() {
  // @@protoc_insertion_point(field_release:common.msg.VideoMessage.video_screen_short_link)
  
  return video_screen_short_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoMessage::set_allocated_video_screen_short_link(::std::string* video_screen_short_link) {
  if (video_screen_short_link != NULL) {
    
  } else {
    
  }
  video_screen_short_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), video_screen_short_link);
  // @@protoc_insertion_point(field_set_allocated:common.msg.VideoMessage.video_screen_short_link)
}

// uint64 file_length = 4;
inline void VideoMessage::clear_file_length() {
  file_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VideoMessage::file_length() const {
  // @@protoc_insertion_point(field_get:common.msg.VideoMessage.file_length)
  return file_length_;
}
inline void VideoMessage::set_file_length(::google::protobuf::uint64 value) {
  
  file_length_ = value;
  // @@protoc_insertion_point(field_set:common.msg.VideoMessage.file_length)
}

// uint32 duration = 6;
inline void VideoMessage::clear_duration() {
  duration_ = 0u;
}
inline ::google::protobuf::uint32 VideoMessage::duration() const {
  // @@protoc_insertion_point(field_get:common.msg.VideoMessage.duration)
  return duration_;
}
inline void VideoMessage::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:common.msg.VideoMessage.duration)
}

// uint32 width = 9;
inline void VideoMessage::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 VideoMessage::width() const {
  // @@protoc_insertion_point(field_get:common.msg.VideoMessage.width)
  return width_;
}
inline void VideoMessage::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:common.msg.VideoMessage.width)
}

// uint32 height = 10;
inline void VideoMessage::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 VideoMessage::height() const {
  // @@protoc_insertion_point(field_get:common.msg.VideoMessage.height)
  return height_;
}
inline void VideoMessage::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:common.msg.VideoMessage.height)
}

// -------------------------------------------------------------------

// AudioMessage

// string file_name = 1;
inline void AudioMessage::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioMessage::file_name() const {
  // @@protoc_insertion_point(field_get:common.msg.AudioMessage.file_name)
  return file_name_.GetNoArena();
}
inline void AudioMessage::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.AudioMessage.file_name)
}
#if LANG_CXX11
inline void AudioMessage::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.AudioMessage.file_name)
}
#endif
inline void AudioMessage::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.AudioMessage.file_name)
}
inline void AudioMessage::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.AudioMessage.file_name)
}
inline ::std::string* AudioMessage::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.AudioMessage.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioMessage::release_file_name() {
  // @@protoc_insertion_point(field_release:common.msg.AudioMessage.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioMessage::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:common.msg.AudioMessage.file_name)
}

// string audio_link = 2;
inline void AudioMessage::clear_audio_link() {
  audio_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioMessage::audio_link() const {
  // @@protoc_insertion_point(field_get:common.msg.AudioMessage.audio_link)
  return audio_link_.GetNoArena();
}
inline void AudioMessage::set_audio_link(const ::std::string& value) {
  
  audio_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.AudioMessage.audio_link)
}
#if LANG_CXX11
inline void AudioMessage::set_audio_link(::std::string&& value) {
  
  audio_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.AudioMessage.audio_link)
}
#endif
inline void AudioMessage::set_audio_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  audio_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.AudioMessage.audio_link)
}
inline void AudioMessage::set_audio_link(const char* value, size_t size) {
  
  audio_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.AudioMessage.audio_link)
}
inline ::std::string* AudioMessage::mutable_audio_link() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.AudioMessage.audio_link)
  return audio_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioMessage::release_audio_link() {
  // @@protoc_insertion_point(field_release:common.msg.AudioMessage.audio_link)
  
  return audio_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioMessage::set_allocated_audio_link(::std::string* audio_link) {
  if (audio_link != NULL) {
    
  } else {
    
  }
  audio_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_link);
  // @@protoc_insertion_point(field_set_allocated:common.msg.AudioMessage.audio_link)
}

// uint64 file_length = 4;
inline void AudioMessage::clear_file_length() {
  file_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AudioMessage::file_length() const {
  // @@protoc_insertion_point(field_get:common.msg.AudioMessage.file_length)
  return file_length_;
}
inline void AudioMessage::set_file_length(::google::protobuf::uint64 value) {
  
  file_length_ = value;
  // @@protoc_insertion_point(field_set:common.msg.AudioMessage.file_length)
}

// uint32 duration = 5;
inline void AudioMessage::clear_duration() {
  duration_ = 0u;
}
inline ::google::protobuf::uint32 AudioMessage::duration() const {
  // @@protoc_insertion_point(field_get:common.msg.AudioMessage.duration)
  return duration_;
}
inline void AudioMessage::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:common.msg.AudioMessage.duration)
}

// string audio_to_word = 6;
inline void AudioMessage::clear_audio_to_word() {
  audio_to_word_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AudioMessage::audio_to_word() const {
  // @@protoc_insertion_point(field_get:common.msg.AudioMessage.audio_to_word)
  return audio_to_word_.GetNoArena();
}
inline void AudioMessage::set_audio_to_word(const ::std::string& value) {
  
  audio_to_word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.AudioMessage.audio_to_word)
}
#if LANG_CXX11
inline void AudioMessage::set_audio_to_word(::std::string&& value) {
  
  audio_to_word_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.AudioMessage.audio_to_word)
}
#endif
inline void AudioMessage::set_audio_to_word(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  audio_to_word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.AudioMessage.audio_to_word)
}
inline void AudioMessage::set_audio_to_word(const char* value, size_t size) {
  
  audio_to_word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.AudioMessage.audio_to_word)
}
inline ::std::string* AudioMessage::mutable_audio_to_word() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.AudioMessage.audio_to_word)
  return audio_to_word_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AudioMessage::release_audio_to_word() {
  // @@protoc_insertion_point(field_release:common.msg.AudioMessage.audio_to_word)
  
  return audio_to_word_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AudioMessage::set_allocated_audio_to_word(::std::string* audio_to_word) {
  if (audio_to_word != NULL) {
    
  } else {
    
  }
  audio_to_word_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audio_to_word);
  // @@protoc_insertion_point(field_set_allocated:common.msg.AudioMessage.audio_to_word)
}

// -------------------------------------------------------------------

// LocationMessage

// string file_name = 1;
inline void LocationMessage::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationMessage::file_name() const {
  // @@protoc_insertion_point(field_get:common.msg.LocationMessage.file_name)
  return file_name_.GetNoArena();
}
inline void LocationMessage::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.LocationMessage.file_name)
}
#if LANG_CXX11
inline void LocationMessage::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.LocationMessage.file_name)
}
#endif
inline void LocationMessage::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.LocationMessage.file_name)
}
inline void LocationMessage::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.LocationMessage.file_name)
}
inline ::std::string* LocationMessage::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.LocationMessage.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationMessage::release_file_name() {
  // @@protoc_insertion_point(field_release:common.msg.LocationMessage.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationMessage::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:common.msg.LocationMessage.file_name)
}

// string origin_link = 2;
inline void LocationMessage::clear_origin_link() {
  origin_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationMessage::origin_link() const {
  // @@protoc_insertion_point(field_get:common.msg.LocationMessage.origin_link)
  return origin_link_.GetNoArena();
}
inline void LocationMessage::set_origin_link(const ::std::string& value) {
  
  origin_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.LocationMessage.origin_link)
}
#if LANG_CXX11
inline void LocationMessage::set_origin_link(::std::string&& value) {
  
  origin_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.LocationMessage.origin_link)
}
#endif
inline void LocationMessage::set_origin_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  origin_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.LocationMessage.origin_link)
}
inline void LocationMessage::set_origin_link(const char* value, size_t size) {
  
  origin_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.LocationMessage.origin_link)
}
inline ::std::string* LocationMessage::mutable_origin_link() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.LocationMessage.origin_link)
  return origin_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationMessage::release_origin_link() {
  // @@protoc_insertion_point(field_release:common.msg.LocationMessage.origin_link)
  
  return origin_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationMessage::set_allocated_origin_link(::std::string* origin_link) {
  if (origin_link != NULL) {
    
  } else {
    
  }
  origin_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), origin_link);
  // @@protoc_insertion_point(field_set_allocated:common.msg.LocationMessage.origin_link)
}

// uint64 file_length = 4;
inline void LocationMessage::clear_file_length() {
  file_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LocationMessage::file_length() const {
  // @@protoc_insertion_point(field_get:common.msg.LocationMessage.file_length)
  return file_length_;
}
inline void LocationMessage::set_file_length(::google::protobuf::uint64 value) {
  
  file_length_ = value;
  // @@protoc_insertion_point(field_set:common.msg.LocationMessage.file_length)
}

// uint32 width = 5;
inline void LocationMessage::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 LocationMessage::width() const {
  // @@protoc_insertion_point(field_get:common.msg.LocationMessage.width)
  return width_;
}
inline void LocationMessage::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:common.msg.LocationMessage.width)
}

// uint32 height = 6;
inline void LocationMessage::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 LocationMessage::height() const {
  // @@protoc_insertion_point(field_get:common.msg.LocationMessage.height)
  return height_;
}
inline void LocationMessage::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:common.msg.LocationMessage.height)
}

// double longitude = 7;
inline void LocationMessage::clear_longitude() {
  longitude_ = 0;
}
inline double LocationMessage::longitude() const {
  // @@protoc_insertion_point(field_get:common.msg.LocationMessage.longitude)
  return longitude_;
}
inline void LocationMessage::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:common.msg.LocationMessage.longitude)
}

// double latitude = 8;
inline void LocationMessage::clear_latitude() {
  latitude_ = 0;
}
inline double LocationMessage::latitude() const {
  // @@protoc_insertion_point(field_get:common.msg.LocationMessage.latitude)
  return latitude_;
}
inline void LocationMessage::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:common.msg.LocationMessage.latitude)
}

// string location_desc = 9;
inline void LocationMessage::clear_location_desc() {
  location_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationMessage::location_desc() const {
  // @@protoc_insertion_point(field_get:common.msg.LocationMessage.location_desc)
  return location_desc_.GetNoArena();
}
inline void LocationMessage::set_location_desc(const ::std::string& value) {
  
  location_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.LocationMessage.location_desc)
}
#if LANG_CXX11
inline void LocationMessage::set_location_desc(::std::string&& value) {
  
  location_desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.LocationMessage.location_desc)
}
#endif
inline void LocationMessage::set_location_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.LocationMessage.location_desc)
}
inline void LocationMessage::set_location_desc(const char* value, size_t size) {
  
  location_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.LocationMessage.location_desc)
}
inline ::std::string* LocationMessage::mutable_location_desc() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.LocationMessage.location_desc)
  return location_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationMessage::release_location_desc() {
  // @@protoc_insertion_point(field_release:common.msg.LocationMessage.location_desc)
  
  return location_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationMessage::set_allocated_location_desc(::std::string* location_desc) {
  if (location_desc != NULL) {
    
  } else {
    
  }
  location_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_desc);
  // @@protoc_insertion_point(field_set_allocated:common.msg.LocationMessage.location_desc)
}

// string location_address = 10;
inline void LocationMessage::clear_location_address() {
  location_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationMessage::location_address() const {
  // @@protoc_insertion_point(field_get:common.msg.LocationMessage.location_address)
  return location_address_.GetNoArena();
}
inline void LocationMessage::set_location_address(const ::std::string& value) {
  
  location_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.LocationMessage.location_address)
}
#if LANG_CXX11
inline void LocationMessage::set_location_address(::std::string&& value) {
  
  location_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.LocationMessage.location_address)
}
#endif
inline void LocationMessage::set_location_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.LocationMessage.location_address)
}
inline void LocationMessage::set_location_address(const char* value, size_t size) {
  
  location_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.LocationMessage.location_address)
}
inline ::std::string* LocationMessage::mutable_location_address() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.LocationMessage.location_address)
  return location_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationMessage::release_location_address() {
  // @@protoc_insertion_point(field_release:common.msg.LocationMessage.location_address)
  
  return location_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationMessage::set_allocated_location_address(::std::string* location_address) {
  if (location_address != NULL) {
    
  } else {
    
  }
  location_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location_address);
  // @@protoc_insertion_point(field_set_allocated:common.msg.LocationMessage.location_address)
}

// string poi_id = 11;
inline void LocationMessage::clear_poi_id() {
  poi_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationMessage::poi_id() const {
  // @@protoc_insertion_point(field_get:common.msg.LocationMessage.poi_id)
  return poi_id_.GetNoArena();
}
inline void LocationMessage::set_poi_id(const ::std::string& value) {
  
  poi_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.LocationMessage.poi_id)
}
#if LANG_CXX11
inline void LocationMessage::set_poi_id(::std::string&& value) {
  
  poi_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.LocationMessage.poi_id)
}
#endif
inline void LocationMessage::set_poi_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  poi_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.LocationMessage.poi_id)
}
inline void LocationMessage::set_poi_id(const char* value, size_t size) {
  
  poi_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.LocationMessage.poi_id)
}
inline ::std::string* LocationMessage::mutable_poi_id() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.LocationMessage.poi_id)
  return poi_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationMessage::release_poi_id() {
  // @@protoc_insertion_point(field_release:common.msg.LocationMessage.poi_id)
  
  return poi_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationMessage::set_allocated_poi_id(::std::string* poi_id) {
  if (poi_id != NULL) {
    
  } else {
    
  }
  poi_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), poi_id);
  // @@protoc_insertion_point(field_set_allocated:common.msg.LocationMessage.poi_id)
}

// -------------------------------------------------------------------

// AtMessage

// repeated string at_member = 1;
inline int AtMessage::at_member_size() const {
  return at_member_.size();
}
inline void AtMessage::clear_at_member() {
  at_member_.Clear();
}
inline const ::std::string& AtMessage::at_member(int index) const {
  // @@protoc_insertion_point(field_get:common.msg.AtMessage.at_member)
  return at_member_.Get(index);
}
inline ::std::string* AtMessage::mutable_at_member(int index) {
  // @@protoc_insertion_point(field_mutable:common.msg.AtMessage.at_member)
  return at_member_.Mutable(index);
}
inline void AtMessage::set_at_member(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:common.msg.AtMessage.at_member)
  at_member_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AtMessage::set_at_member(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:common.msg.AtMessage.at_member)
  at_member_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AtMessage::set_at_member(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  at_member_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:common.msg.AtMessage.at_member)
}
inline void AtMessage::set_at_member(int index, const char* value, size_t size) {
  at_member_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:common.msg.AtMessage.at_member)
}
inline ::std::string* AtMessage::add_at_member() {
  // @@protoc_insertion_point(field_add_mutable:common.msg.AtMessage.at_member)
  return at_member_.Add();
}
inline void AtMessage::add_at_member(const ::std::string& value) {
  at_member_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:common.msg.AtMessage.at_member)
}
#if LANG_CXX11
inline void AtMessage::add_at_member(::std::string&& value) {
  at_member_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:common.msg.AtMessage.at_member)
}
#endif
inline void AtMessage::add_at_member(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  at_member_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:common.msg.AtMessage.at_member)
}
inline void AtMessage::add_at_member(const char* value, size_t size) {
  at_member_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:common.msg.AtMessage.at_member)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AtMessage::at_member() const {
  // @@protoc_insertion_point(field_list:common.msg.AtMessage.at_member)
  return at_member_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AtMessage::mutable_at_member() {
  // @@protoc_insertion_point(field_mutable_list:common.msg.AtMessage.at_member)
  return &at_member_;
}

// bool at_all = 2;
inline void AtMessage::clear_at_all() {
  at_all_ = false;
}
inline bool AtMessage::at_all() const {
  // @@protoc_insertion_point(field_get:common.msg.AtMessage.at_all)
  return at_all_;
}
inline void AtMessage::set_at_all(bool value) {
  
  at_all_ = value;
  // @@protoc_insertion_point(field_set:common.msg.AtMessage.at_all)
}

// string text = 3;
inline void AtMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AtMessage::text() const {
  // @@protoc_insertion_point(field_get:common.msg.AtMessage.text)
  return text_.GetNoArena();
}
inline void AtMessage::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.AtMessage.text)
}
#if LANG_CXX11
inline void AtMessage::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.AtMessage.text)
}
#endif
inline void AtMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.AtMessage.text)
}
inline void AtMessage::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.AtMessage.text)
}
inline ::std::string* AtMessage::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.AtMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AtMessage::release_text() {
  // @@protoc_insertion_point(field_release:common.msg.AtMessage.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AtMessage::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:common.msg.AtMessage.text)
}

// -------------------------------------------------------------------

// ReadReceiptMessage

// uint64 receipt_guid = 1;
inline void ReadReceiptMessage::clear_receipt_guid() {
  receipt_guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReadReceiptMessage::receipt_guid() const {
  // @@protoc_insertion_point(field_get:common.msg.ReadReceiptMessage.receipt_guid)
  return receipt_guid_;
}
inline void ReadReceiptMessage::set_receipt_guid(::google::protobuf::uint64 value) {
  
  receipt_guid_ = value;
  // @@protoc_insertion_point(field_set:common.msg.ReadReceiptMessage.receipt_guid)
}

// -------------------------------------------------------------------

// FileMessage

// string file_name = 1;
inline void FileMessage::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileMessage::file_name() const {
  // @@protoc_insertion_point(field_get:common.msg.FileMessage.file_name)
  return file_name_.GetNoArena();
}
inline void FileMessage::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.FileMessage.file_name)
}
#if LANG_CXX11
inline void FileMessage::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.FileMessage.file_name)
}
#endif
inline void FileMessage::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.FileMessage.file_name)
}
inline void FileMessage::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.FileMessage.file_name)
}
inline ::std::string* FileMessage::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.FileMessage.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileMessage::release_file_name() {
  // @@protoc_insertion_point(field_release:common.msg.FileMessage.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileMessage::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:common.msg.FileMessage.file_name)
}

// string file_link = 2;
inline void FileMessage::clear_file_link() {
  file_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileMessage::file_link() const {
  // @@protoc_insertion_point(field_get:common.msg.FileMessage.file_link)
  return file_link_.GetNoArena();
}
inline void FileMessage::set_file_link(const ::std::string& value) {
  
  file_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.FileMessage.file_link)
}
#if LANG_CXX11
inline void FileMessage::set_file_link(::std::string&& value) {
  
  file_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.FileMessage.file_link)
}
#endif
inline void FileMessage::set_file_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.FileMessage.file_link)
}
inline void FileMessage::set_file_link(const char* value, size_t size) {
  
  file_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.FileMessage.file_link)
}
inline ::std::string* FileMessage::mutable_file_link() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.FileMessage.file_link)
  return file_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileMessage::release_file_link() {
  // @@protoc_insertion_point(field_release:common.msg.FileMessage.file_link)
  
  return file_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileMessage::set_allocated_file_link(::std::string* file_link) {
  if (file_link != NULL) {
    
  } else {
    
  }
  file_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_link);
  // @@protoc_insertion_point(field_set_allocated:common.msg.FileMessage.file_link)
}

// uint64 file_length = 3;
inline void FileMessage::clear_file_length() {
  file_length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FileMessage::file_length() const {
  // @@protoc_insertion_point(field_get:common.msg.FileMessage.file_length)
  return file_length_;
}
inline void FileMessage::set_file_length(::google::protobuf::uint64 value) {
  
  file_length_ = value;
  // @@protoc_insertion_point(field_set:common.msg.FileMessage.file_length)
}

// -------------------------------------------------------------------

// RetractMessage

// uint64 retract_guid = 1;
inline void RetractMessage::clear_retract_guid() {
  retract_guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RetractMessage::retract_guid() const {
  // @@protoc_insertion_point(field_get:common.msg.RetractMessage.retract_guid)
  return retract_guid_;
}
inline void RetractMessage::set_retract_guid(::google::protobuf::uint64 value) {
  
  retract_guid_ = value;
  // @@protoc_insertion_point(field_set:common.msg.RetractMessage.retract_guid)
}

// -------------------------------------------------------------------

// CustomEntity

// string key = 1;
inline void CustomEntity::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomEntity::key() const {
  // @@protoc_insertion_point(field_get:common.msg.CustomEntity.key)
  return key_.GetNoArena();
}
inline void CustomEntity::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.CustomEntity.key)
}
#if LANG_CXX11
inline void CustomEntity::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.CustomEntity.key)
}
#endif
inline void CustomEntity::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.CustomEntity.key)
}
inline void CustomEntity::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.CustomEntity.key)
}
inline ::std::string* CustomEntity::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.CustomEntity.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomEntity::release_key() {
  // @@protoc_insertion_point(field_release:common.msg.CustomEntity.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomEntity::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:common.msg.CustomEntity.key)
}

// string value = 2;
inline void CustomEntity::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomEntity::value() const {
  // @@protoc_insertion_point(field_get:common.msg.CustomEntity.value)
  return value_.GetNoArena();
}
inline void CustomEntity::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.CustomEntity.value)
}
#if LANG_CXX11
inline void CustomEntity::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.CustomEntity.value)
}
#endif
inline void CustomEntity::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.CustomEntity.value)
}
inline void CustomEntity::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.CustomEntity.value)
}
inline ::std::string* CustomEntity::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.CustomEntity.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomEntity::release_value() {
  // @@protoc_insertion_point(field_release:common.msg.CustomEntity.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomEntity::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:common.msg.CustomEntity.value)
}

// -------------------------------------------------------------------

// CustomMessage

// string subType = 1;
inline void CustomMessage::clear_subtype() {
  subtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomMessage::subtype() const {
  // @@protoc_insertion_point(field_get:common.msg.CustomMessage.subType)
  return subtype_.GetNoArena();
}
inline void CustomMessage::set_subtype(const ::std::string& value) {
  
  subtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.CustomMessage.subType)
}
#if LANG_CXX11
inline void CustomMessage::set_subtype(::std::string&& value) {
  
  subtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.CustomMessage.subType)
}
#endif
inline void CustomMessage::set_subtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.CustomMessage.subType)
}
inline void CustomMessage::set_subtype(const char* value, size_t size) {
  
  subtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.CustomMessage.subType)
}
inline ::std::string* CustomMessage::mutable_subtype() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.CustomMessage.subType)
  return subtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomMessage::release_subtype() {
  // @@protoc_insertion_point(field_release:common.msg.CustomMessage.subType)
  
  return subtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomMessage::set_allocated_subtype(::std::string* subtype) {
  if (subtype != NULL) {
    
  } else {
    
  }
  subtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subtype);
  // @@protoc_insertion_point(field_set_allocated:common.msg.CustomMessage.subType)
}

// string notification = 2;
inline void CustomMessage::clear_notification() {
  notification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomMessage::notification() const {
  // @@protoc_insertion_point(field_get:common.msg.CustomMessage.notification)
  return notification_.GetNoArena();
}
inline void CustomMessage::set_notification(const ::std::string& value) {
  
  notification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.CustomMessage.notification)
}
#if LANG_CXX11
inline void CustomMessage::set_notification(::std::string&& value) {
  
  notification_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.CustomMessage.notification)
}
#endif
inline void CustomMessage::set_notification(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  notification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.CustomMessage.notification)
}
inline void CustomMessage::set_notification(const char* value, size_t size) {
  
  notification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.CustomMessage.notification)
}
inline ::std::string* CustomMessage::mutable_notification() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.CustomMessage.notification)
  return notification_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomMessage::release_notification() {
  // @@protoc_insertion_point(field_release:common.msg.CustomMessage.notification)
  
  return notification_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomMessage::set_allocated_notification(::std::string* notification) {
  if (notification != NULL) {
    
  } else {
    
  }
  notification_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notification);
  // @@protoc_insertion_point(field_set_allocated:common.msg.CustomMessage.notification)
}

// repeated .common.msg.CustomEntity custom_entity = 3;
inline int CustomMessage::custom_entity_size() const {
  return custom_entity_.size();
}
inline void CustomMessage::clear_custom_entity() {
  custom_entity_.Clear();
}
inline const ::common::msg::CustomEntity& CustomMessage::custom_entity(int index) const {
  // @@protoc_insertion_point(field_get:common.msg.CustomMessage.custom_entity)
  return custom_entity_.Get(index);
}
inline ::common::msg::CustomEntity* CustomMessage::mutable_custom_entity(int index) {
  // @@protoc_insertion_point(field_mutable:common.msg.CustomMessage.custom_entity)
  return custom_entity_.Mutable(index);
}
inline ::common::msg::CustomEntity* CustomMessage::add_custom_entity() {
  // @@protoc_insertion_point(field_add:common.msg.CustomMessage.custom_entity)
  return custom_entity_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::common::msg::CustomEntity >*
CustomMessage::mutable_custom_entity() {
  // @@protoc_insertion_point(field_mutable_list:common.msg.CustomMessage.custom_entity)
  return &custom_entity_;
}
inline const ::google::protobuf::RepeatedPtrField< ::common::msg::CustomEntity >&
CustomMessage::custom_entity() const {
  // @@protoc_insertion_point(field_list:common.msg.CustomMessage.custom_entity)
  return custom_entity_;
}

// -------------------------------------------------------------------

// CustomNoApnsMessage

// string subType = 1;
inline void CustomNoApnsMessage::clear_subtype() {
  subtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomNoApnsMessage::subtype() const {
  // @@protoc_insertion_point(field_get:common.msg.CustomNoApnsMessage.subType)
  return subtype_.GetNoArena();
}
inline void CustomNoApnsMessage::set_subtype(const ::std::string& value) {
  
  subtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.CustomNoApnsMessage.subType)
}
#if LANG_CXX11
inline void CustomNoApnsMessage::set_subtype(::std::string&& value) {
  
  subtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.CustomNoApnsMessage.subType)
}
#endif
inline void CustomNoApnsMessage::set_subtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.CustomNoApnsMessage.subType)
}
inline void CustomNoApnsMessage::set_subtype(const char* value, size_t size) {
  
  subtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.CustomNoApnsMessage.subType)
}
inline ::std::string* CustomNoApnsMessage::mutable_subtype() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.CustomNoApnsMessage.subType)
  return subtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomNoApnsMessage::release_subtype() {
  // @@protoc_insertion_point(field_release:common.msg.CustomNoApnsMessage.subType)
  
  return subtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomNoApnsMessage::set_allocated_subtype(::std::string* subtype) {
  if (subtype != NULL) {
    
  } else {
    
  }
  subtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subtype);
  // @@protoc_insertion_point(field_set_allocated:common.msg.CustomNoApnsMessage.subType)
}

// string notification = 2;
inline void CustomNoApnsMessage::clear_notification() {
  notification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomNoApnsMessage::notification() const {
  // @@protoc_insertion_point(field_get:common.msg.CustomNoApnsMessage.notification)
  return notification_.GetNoArena();
}
inline void CustomNoApnsMessage::set_notification(const ::std::string& value) {
  
  notification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.CustomNoApnsMessage.notification)
}
#if LANG_CXX11
inline void CustomNoApnsMessage::set_notification(::std::string&& value) {
  
  notification_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.CustomNoApnsMessage.notification)
}
#endif
inline void CustomNoApnsMessage::set_notification(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  notification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.CustomNoApnsMessage.notification)
}
inline void CustomNoApnsMessage::set_notification(const char* value, size_t size) {
  
  notification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.CustomNoApnsMessage.notification)
}
inline ::std::string* CustomNoApnsMessage::mutable_notification() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.CustomNoApnsMessage.notification)
  return notification_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomNoApnsMessage::release_notification() {
  // @@protoc_insertion_point(field_release:common.msg.CustomNoApnsMessage.notification)
  
  return notification_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomNoApnsMessage::set_allocated_notification(::std::string* notification) {
  if (notification != NULL) {
    
  } else {
    
  }
  notification_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notification);
  // @@protoc_insertion_point(field_set_allocated:common.msg.CustomNoApnsMessage.notification)
}

// repeated .common.msg.CustomEntity custom_entity = 3;
inline int CustomNoApnsMessage::custom_entity_size() const {
  return custom_entity_.size();
}
inline void CustomNoApnsMessage::clear_custom_entity() {
  custom_entity_.Clear();
}
inline const ::common::msg::CustomEntity& CustomNoApnsMessage::custom_entity(int index) const {
  // @@protoc_insertion_point(field_get:common.msg.CustomNoApnsMessage.custom_entity)
  return custom_entity_.Get(index);
}
inline ::common::msg::CustomEntity* CustomNoApnsMessage::mutable_custom_entity(int index) {
  // @@protoc_insertion_point(field_mutable:common.msg.CustomNoApnsMessage.custom_entity)
  return custom_entity_.Mutable(index);
}
inline ::common::msg::CustomEntity* CustomNoApnsMessage::add_custom_entity() {
  // @@protoc_insertion_point(field_add:common.msg.CustomNoApnsMessage.custom_entity)
  return custom_entity_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::common::msg::CustomEntity >*
CustomNoApnsMessage::mutable_custom_entity() {
  // @@protoc_insertion_point(field_mutable_list:common.msg.CustomNoApnsMessage.custom_entity)
  return &custom_entity_;
}
inline const ::google::protobuf::RepeatedPtrField< ::common::msg::CustomEntity >&
CustomNoApnsMessage::custom_entity() const {
  // @@protoc_insertion_point(field_list:common.msg.CustomNoApnsMessage.custom_entity)
  return custom_entity_;
}

// -------------------------------------------------------------------

// MsggwMessage

// string appkey = 1;
inline void MsggwMessage::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsggwMessage::appkey() const {
  // @@protoc_insertion_point(field_get:common.msg.MsggwMessage.appkey)
  return appkey_.GetNoArena();
}
inline void MsggwMessage::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.MsggwMessage.appkey)
}
#if LANG_CXX11
inline void MsggwMessage::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.MsggwMessage.appkey)
}
#endif
inline void MsggwMessage::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.MsggwMessage.appkey)
}
inline void MsggwMessage::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.MsggwMessage.appkey)
}
inline ::std::string* MsggwMessage::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.MsggwMessage.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsggwMessage::release_appkey() {
  // @@protoc_insertion_point(field_release:common.msg.MsggwMessage.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsggwMessage::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:common.msg.MsggwMessage.appkey)
}

// string content = 2;
inline void MsggwMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsggwMessage::content() const {
  // @@protoc_insertion_point(field_get:common.msg.MsggwMessage.content)
  return content_.GetNoArena();
}
inline void MsggwMessage::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.MsggwMessage.content)
}
#if LANG_CXX11
inline void MsggwMessage::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.MsggwMessage.content)
}
#endif
inline void MsggwMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.MsggwMessage.content)
}
inline void MsggwMessage::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.MsggwMessage.content)
}
inline ::std::string* MsggwMessage::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.MsggwMessage.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsggwMessage::release_content() {
  // @@protoc_insertion_point(field_release:common.msg.MsggwMessage.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsggwMessage::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:common.msg.MsggwMessage.content)
}

// uint64 guid = 3;
inline void MsggwMessage::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MsggwMessage::guid() const {
  // @@protoc_insertion_point(field_get:common.msg.MsggwMessage.guid)
  return guid_;
}
inline void MsggwMessage::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:common.msg.MsggwMessage.guid)
}

// string notification = 4;
inline void MsggwMessage::clear_notification() {
  notification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsggwMessage::notification() const {
  // @@protoc_insertion_point(field_get:common.msg.MsggwMessage.notification)
  return notification_.GetNoArena();
}
inline void MsggwMessage::set_notification(const ::std::string& value) {
  
  notification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.MsggwMessage.notification)
}
#if LANG_CXX11
inline void MsggwMessage::set_notification(::std::string&& value) {
  
  notification_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.MsggwMessage.notification)
}
#endif
inline void MsggwMessage::set_notification(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  notification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.MsggwMessage.notification)
}
inline void MsggwMessage::set_notification(const char* value, size_t size) {
  
  notification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.MsggwMessage.notification)
}
inline ::std::string* MsggwMessage::mutable_notification() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.MsggwMessage.notification)
  return notification_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsggwMessage::release_notification() {
  // @@protoc_insertion_point(field_release:common.msg.MsggwMessage.notification)
  
  return notification_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsggwMessage::set_allocated_notification(::std::string* notification) {
  if (notification != NULL) {
    
  } else {
    
  }
  notification_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notification);
  // @@protoc_insertion_point(field_set_allocated:common.msg.MsggwMessage.notification)
}

// string from = 5;
inline void MsggwMessage::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsggwMessage::from() const {
  // @@protoc_insertion_point(field_get:common.msg.MsggwMessage.from)
  return from_.GetNoArena();
}
inline void MsggwMessage::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.MsggwMessage.from)
}
#if LANG_CXX11
inline void MsggwMessage::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.MsggwMessage.from)
}
#endif
inline void MsggwMessage::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.MsggwMessage.from)
}
inline void MsggwMessage::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.MsggwMessage.from)
}
inline ::std::string* MsggwMessage::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.MsggwMessage.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsggwMessage::release_from() {
  // @@protoc_insertion_point(field_release:common.msg.MsggwMessage.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsggwMessage::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:common.msg.MsggwMessage.from)
}

// -------------------------------------------------------------------

// VcardMessage

// string user_id = 1;
inline void VcardMessage::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VcardMessage::user_id() const {
  // @@protoc_insertion_point(field_get:common.msg.VcardMessage.user_id)
  return user_id_.GetNoArena();
}
inline void VcardMessage::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.VcardMessage.user_id)
}
#if LANG_CXX11
inline void VcardMessage::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.VcardMessage.user_id)
}
#endif
inline void VcardMessage::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.VcardMessage.user_id)
}
inline void VcardMessage::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.VcardMessage.user_id)
}
inline ::std::string* VcardMessage::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.VcardMessage.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VcardMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:common.msg.VcardMessage.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VcardMessage::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:common.msg.VcardMessage.user_id)
}

// string nick = 2;
inline void VcardMessage::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VcardMessage::nick() const {
  // @@protoc_insertion_point(field_get:common.msg.VcardMessage.nick)
  return nick_.GetNoArena();
}
inline void VcardMessage::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.VcardMessage.nick)
}
#if LANG_CXX11
inline void VcardMessage::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.VcardMessage.nick)
}
#endif
inline void VcardMessage::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.VcardMessage.nick)
}
inline void VcardMessage::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.VcardMessage.nick)
}
inline ::std::string* VcardMessage::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.VcardMessage.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VcardMessage::release_nick() {
  // @@protoc_insertion_point(field_release:common.msg.VcardMessage.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VcardMessage::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:common.msg.VcardMessage.nick)
}

// string phone_num = 3;
inline void VcardMessage::clear_phone_num() {
  phone_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VcardMessage::phone_num() const {
  // @@protoc_insertion_point(field_get:common.msg.VcardMessage.phone_num)
  return phone_num_.GetNoArena();
}
inline void VcardMessage::set_phone_num(const ::std::string& value) {
  
  phone_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.VcardMessage.phone_num)
}
#if LANG_CXX11
inline void VcardMessage::set_phone_num(::std::string&& value) {
  
  phone_num_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.VcardMessage.phone_num)
}
#endif
inline void VcardMessage::set_phone_num(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.VcardMessage.phone_num)
}
inline void VcardMessage::set_phone_num(const char* value, size_t size) {
  
  phone_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.VcardMessage.phone_num)
}
inline ::std::string* VcardMessage::mutable_phone_num() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.VcardMessage.phone_num)
  return phone_num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VcardMessage::release_phone_num() {
  // @@protoc_insertion_point(field_release:common.msg.VcardMessage.phone_num)
  
  return phone_num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VcardMessage::set_allocated_phone_num(::std::string* phone_num) {
  if (phone_num != NULL) {
    
  } else {
    
  }
  phone_num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone_num);
  // @@protoc_insertion_point(field_set_allocated:common.msg.VcardMessage.phone_num)
}

// .common.enumeration.EVcardMsgModelType vcard_type = 4;
inline void VcardMessage::clear_vcard_type() {
  vcard_type_ = 0;
}
inline ::common::enumeration::EVcardMsgModelType VcardMessage::vcard_type() const {
  // @@protoc_insertion_point(field_get:common.msg.VcardMessage.vcard_type)
  return static_cast< ::common::enumeration::EVcardMsgModelType >(vcard_type_);
}
inline void VcardMessage::set_vcard_type(::common::enumeration::EVcardMsgModelType value) {
  
  vcard_type_ = value;
  // @@protoc_insertion_point(field_set:common.msg.VcardMessage.vcard_type)
}

// string original_link = 5;
inline void VcardMessage::clear_original_link() {
  original_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VcardMessage::original_link() const {
  // @@protoc_insertion_point(field_get:common.msg.VcardMessage.original_link)
  return original_link_.GetNoArena();
}
inline void VcardMessage::set_original_link(const ::std::string& value) {
  
  original_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.VcardMessage.original_link)
}
#if LANG_CXX11
inline void VcardMessage::set_original_link(::std::string&& value) {
  
  original_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.VcardMessage.original_link)
}
#endif
inline void VcardMessage::set_original_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  original_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.VcardMessage.original_link)
}
inline void VcardMessage::set_original_link(const char* value, size_t size) {
  
  original_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.VcardMessage.original_link)
}
inline ::std::string* VcardMessage::mutable_original_link() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.VcardMessage.original_link)
  return original_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VcardMessage::release_original_link() {
  // @@protoc_insertion_point(field_release:common.msg.VcardMessage.original_link)
  
  return original_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VcardMessage::set_allocated_original_link(::std::string* original_link) {
  if (original_link != NULL) {
    
  } else {
    
  }
  original_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_link);
  // @@protoc_insertion_point(field_set_allocated:common.msg.VcardMessage.original_link)
}

// string thumbnail_link = 6;
inline void VcardMessage::clear_thumbnail_link() {
  thumbnail_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VcardMessage::thumbnail_link() const {
  // @@protoc_insertion_point(field_get:common.msg.VcardMessage.thumbnail_link)
  return thumbnail_link_.GetNoArena();
}
inline void VcardMessage::set_thumbnail_link(const ::std::string& value) {
  
  thumbnail_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.VcardMessage.thumbnail_link)
}
#if LANG_CXX11
inline void VcardMessage::set_thumbnail_link(::std::string&& value) {
  
  thumbnail_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.VcardMessage.thumbnail_link)
}
#endif
inline void VcardMessage::set_thumbnail_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.VcardMessage.thumbnail_link)
}
inline void VcardMessage::set_thumbnail_link(const char* value, size_t size) {
  
  thumbnail_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.VcardMessage.thumbnail_link)
}
inline ::std::string* VcardMessage::mutable_thumbnail_link() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.VcardMessage.thumbnail_link)
  return thumbnail_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VcardMessage::release_thumbnail_link() {
  // @@protoc_insertion_point(field_release:common.msg.VcardMessage.thumbnail_link)
  
  return thumbnail_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VcardMessage::set_allocated_thumbnail_link(::std::string* thumbnail_link) {
  if (thumbnail_link != NULL) {
    
  } else {
    
  }
  thumbnail_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_link);
  // @@protoc_insertion_point(field_set_allocated:common.msg.VcardMessage.thumbnail_link)
}

// -------------------------------------------------------------------

// MergeMessage

// string title = 1;
inline void MergeMessage::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MergeMessage::title() const {
  // @@protoc_insertion_point(field_get:common.msg.MergeMessage.title)
  return title_.GetNoArena();
}
inline void MergeMessage::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.msg.MergeMessage.title)
}
#if LANG_CXX11
inline void MergeMessage::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.msg.MergeMessage.title)
}
#endif
inline void MergeMessage::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.msg.MergeMessage.title)
}
inline void MergeMessage::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.msg.MergeMessage.title)
}
inline ::std::string* MergeMessage::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:common.msg.MergeMessage.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MergeMessage::release_title() {
  // @@protoc_insertion_point(field_release:common.msg.MergeMessage.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MergeMessage::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:common.msg.MergeMessage.title)
}

// repeated string msgContent = 2;
inline int MergeMessage::msgcontent_size() const {
  return msgcontent_.size();
}
inline void MergeMessage::clear_msgcontent() {
  msgcontent_.Clear();
}
inline const ::std::string& MergeMessage::msgcontent(int index) const {
  // @@protoc_insertion_point(field_get:common.msg.MergeMessage.msgContent)
  return msgcontent_.Get(index);
}
inline ::std::string* MergeMessage::mutable_msgcontent(int index) {
  // @@protoc_insertion_point(field_mutable:common.msg.MergeMessage.msgContent)
  return msgcontent_.Mutable(index);
}
inline void MergeMessage::set_msgcontent(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:common.msg.MergeMessage.msgContent)
  msgcontent_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MergeMessage::set_msgcontent(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:common.msg.MergeMessage.msgContent)
  msgcontent_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MergeMessage::set_msgcontent(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  msgcontent_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:common.msg.MergeMessage.msgContent)
}
inline void MergeMessage::set_msgcontent(int index, const char* value, size_t size) {
  msgcontent_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:common.msg.MergeMessage.msgContent)
}
inline ::std::string* MergeMessage::add_msgcontent() {
  // @@protoc_insertion_point(field_add_mutable:common.msg.MergeMessage.msgContent)
  return msgcontent_.Add();
}
inline void MergeMessage::add_msgcontent(const ::std::string& value) {
  msgcontent_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:common.msg.MergeMessage.msgContent)
}
#if LANG_CXX11
inline void MergeMessage::add_msgcontent(::std::string&& value) {
  msgcontent_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:common.msg.MergeMessage.msgContent)
}
#endif
inline void MergeMessage::add_msgcontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  msgcontent_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:common.msg.MergeMessage.msgContent)
}
inline void MergeMessage::add_msgcontent(const char* value, size_t size) {
  msgcontent_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:common.msg.MergeMessage.msgContent)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MergeMessage::msgcontent() const {
  // @@protoc_insertion_point(field_list:common.msg.MergeMessage.msgContent)
  return msgcontent_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MergeMessage::mutable_msgcontent() {
  // @@protoc_insertion_point(field_mutable_list:common.msg.MergeMessage.msgContent)
  return &msgcontent_;
}

// repeated uint64 guidList = 3;
inline int MergeMessage::guidlist_size() const {
  return guidlist_.size();
}
inline void MergeMessage::clear_guidlist() {
  guidlist_.Clear();
}
inline ::google::protobuf::uint64 MergeMessage::guidlist(int index) const {
  // @@protoc_insertion_point(field_get:common.msg.MergeMessage.guidList)
  return guidlist_.Get(index);
}
inline void MergeMessage::set_guidlist(int index, ::google::protobuf::uint64 value) {
  guidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:common.msg.MergeMessage.guidList)
}
inline void MergeMessage::add_guidlist(::google::protobuf::uint64 value) {
  guidlist_.Add(value);
  // @@protoc_insertion_point(field_add:common.msg.MergeMessage.guidList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
MergeMessage::guidlist() const {
  // @@protoc_insertion_point(field_list:common.msg.MergeMessage.guidList)
  return guidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
MergeMessage::mutable_guidlist() {
  // @@protoc_insertion_point(field_mutable_list:common.msg.MergeMessage.guidList)
  return &guidlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace common

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::common::msg::EMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::msg::EMsgType>() {
  return ::common::msg::EMsgType_descriptor();
}
template <> struct is_proto_enum< ::common::msg::EMsgContentType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::msg::EMsgContentType>() {
  return ::common::msg::EMsgContentType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2fmsg_2eproto__INCLUDED
