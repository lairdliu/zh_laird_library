// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: outer/conversation.proto

#ifndef PROTOBUF_outer_2fconversation_2eproto__INCLUDED
#define PROTOBUF_outer_2fconversation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/errcode.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_outer_2fconversation_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSyncConvrsRequestImpl();
void InitDefaultsSyncConvrsRequest();
void InitDefaultsSyncConvrsResponseImpl();
void InitDefaultsSyncConvrsResponse();
void InitDefaultsUploadConvrsRequestImpl();
void InitDefaultsUploadConvrsRequest();
void InitDefaultsUploadConvrsResponseImpl();
void InitDefaultsUploadConvrsResponse();
void InitDefaultsConvrsInfoImpl();
void InitDefaultsConvrsInfo();
inline void InitDefaults() {
  InitDefaultsSyncConvrsRequest();
  InitDefaultsSyncConvrsResponse();
  InitDefaultsUploadConvrsRequest();
  InitDefaultsUploadConvrsResponse();
  InitDefaultsConvrsInfo();
}
}  // namespace protobuf_outer_2fconversation_2eproto
namespace outer {
namespace conversations {
class ConvrsInfo;
class ConvrsInfoDefaultTypeInternal;
extern ConvrsInfoDefaultTypeInternal _ConvrsInfo_default_instance_;
class SyncConvrsRequest;
class SyncConvrsRequestDefaultTypeInternal;
extern SyncConvrsRequestDefaultTypeInternal _SyncConvrsRequest_default_instance_;
class SyncConvrsResponse;
class SyncConvrsResponseDefaultTypeInternal;
extern SyncConvrsResponseDefaultTypeInternal _SyncConvrsResponse_default_instance_;
class UploadConvrsRequest;
class UploadConvrsRequestDefaultTypeInternal;
extern UploadConvrsRequestDefaultTypeInternal _UploadConvrsRequest_default_instance_;
class UploadConvrsResponse;
class UploadConvrsResponseDefaultTypeInternal;
extern UploadConvrsResponseDefaultTypeInternal _UploadConvrsResponse_default_instance_;
}  // namespace conversations
}  // namespace outer
namespace outer {
namespace conversations {

// ===================================================================

class SyncConvrsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.conversations.SyncConvrsRequest) */ {
 public:
  SyncConvrsRequest();
  virtual ~SyncConvrsRequest();

  SyncConvrsRequest(const SyncConvrsRequest& from);

  inline SyncConvrsRequest& operator=(const SyncConvrsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncConvrsRequest(SyncConvrsRequest&& from) noexcept
    : SyncConvrsRequest() {
    *this = ::std::move(from);
  }

  inline SyncConvrsRequest& operator=(SyncConvrsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncConvrsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncConvrsRequest* internal_default_instance() {
    return reinterpret_cast<const SyncConvrsRequest*>(
               &_SyncConvrsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SyncConvrsRequest* other);
  friend void swap(SyncConvrsRequest& a, SyncConvrsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncConvrsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SyncConvrsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SyncConvrsRequest& from);
  void MergeFrom(const SyncConvrsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SyncConvrsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.conversations.SyncConvrsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconversation_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconversation_2eproto::InitDefaultsSyncConvrsRequestImpl();
};
// -------------------------------------------------------------------

class SyncConvrsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.conversations.SyncConvrsResponse) */ {
 public:
  SyncConvrsResponse();
  virtual ~SyncConvrsResponse();

  SyncConvrsResponse(const SyncConvrsResponse& from);

  inline SyncConvrsResponse& operator=(const SyncConvrsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncConvrsResponse(SyncConvrsResponse&& from) noexcept
    : SyncConvrsResponse() {
    *this = ::std::move(from);
  }

  inline SyncConvrsResponse& operator=(SyncConvrsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncConvrsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncConvrsResponse* internal_default_instance() {
    return reinterpret_cast<const SyncConvrsResponse*>(
               &_SyncConvrsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SyncConvrsResponse* other);
  friend void swap(SyncConvrsResponse& a, SyncConvrsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncConvrsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SyncConvrsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SyncConvrsResponse& from);
  void MergeFrom(const SyncConvrsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SyncConvrsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.conversations.ConvrsInfo convrsInfo = 3;
  int convrsinfo_size() const;
  void clear_convrsinfo();
  static const int kConvrsInfoFieldNumber = 3;
  const ::outer::conversations::ConvrsInfo& convrsinfo(int index) const;
  ::outer::conversations::ConvrsInfo* mutable_convrsinfo(int index);
  ::outer::conversations::ConvrsInfo* add_convrsinfo();
  ::google::protobuf::RepeatedPtrField< ::outer::conversations::ConvrsInfo >*
      mutable_convrsinfo();
  const ::google::protobuf::RepeatedPtrField< ::outer::conversations::ConvrsInfo >&
      convrsinfo() const;

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.conversations.SyncConvrsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::conversations::ConvrsInfo > convrsinfo_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconversation_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconversation_2eproto::InitDefaultsSyncConvrsResponseImpl();
};
// -------------------------------------------------------------------

class UploadConvrsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.conversations.UploadConvrsRequest) */ {
 public:
  UploadConvrsRequest();
  virtual ~UploadConvrsRequest();

  UploadConvrsRequest(const UploadConvrsRequest& from);

  inline UploadConvrsRequest& operator=(const UploadConvrsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UploadConvrsRequest(UploadConvrsRequest&& from) noexcept
    : UploadConvrsRequest() {
    *this = ::std::move(from);
  }

  inline UploadConvrsRequest& operator=(UploadConvrsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadConvrsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadConvrsRequest* internal_default_instance() {
    return reinterpret_cast<const UploadConvrsRequest*>(
               &_UploadConvrsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(UploadConvrsRequest* other);
  friend void swap(UploadConvrsRequest& a, UploadConvrsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UploadConvrsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadConvrsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadConvrsRequest& from);
  void MergeFrom(const UploadConvrsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadConvrsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.conversations.ConvrsInfo convrsInfo = 4;
  int convrsinfo_size() const;
  void clear_convrsinfo();
  static const int kConvrsInfoFieldNumber = 4;
  const ::outer::conversations::ConvrsInfo& convrsinfo(int index) const;
  ::outer::conversations::ConvrsInfo* mutable_convrsinfo(int index);
  ::outer::conversations::ConvrsInfo* add_convrsinfo();
  ::google::protobuf::RepeatedPtrField< ::outer::conversations::ConvrsInfo >*
      mutable_convrsinfo();
  const ::google::protobuf::RepeatedPtrField< ::outer::conversations::ConvrsInfo >&
      convrsinfo() const;

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.conversations.UploadConvrsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::conversations::ConvrsInfo > convrsinfo_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconversation_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconversation_2eproto::InitDefaultsUploadConvrsRequestImpl();
};
// -------------------------------------------------------------------

class UploadConvrsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.conversations.UploadConvrsResponse) */ {
 public:
  UploadConvrsResponse();
  virtual ~UploadConvrsResponse();

  UploadConvrsResponse(const UploadConvrsResponse& from);

  inline UploadConvrsResponse& operator=(const UploadConvrsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UploadConvrsResponse(UploadConvrsResponse&& from) noexcept
    : UploadConvrsResponse() {
    *this = ::std::move(from);
  }

  inline UploadConvrsResponse& operator=(UploadConvrsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadConvrsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadConvrsResponse* internal_default_instance() {
    return reinterpret_cast<const UploadConvrsResponse*>(
               &_UploadConvrsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(UploadConvrsResponse* other);
  friend void swap(UploadConvrsResponse& a, UploadConvrsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UploadConvrsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadConvrsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadConvrsResponse& from);
  void MergeFrom(const UploadConvrsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadConvrsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.conversations.UploadConvrsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconversation_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconversation_2eproto::InitDefaultsUploadConvrsResponseImpl();
};
// -------------------------------------------------------------------

class ConvrsInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.conversations.ConvrsInfo) */ {
 public:
  ConvrsInfo();
  virtual ~ConvrsInfo();

  ConvrsInfo(const ConvrsInfo& from);

  inline ConvrsInfo& operator=(const ConvrsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConvrsInfo(ConvrsInfo&& from) noexcept
    : ConvrsInfo() {
    *this = ::std::move(from);
  }

  inline ConvrsInfo& operator=(ConvrsInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConvrsInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConvrsInfo* internal_default_instance() {
    return reinterpret_cast<const ConvrsInfo*>(
               &_ConvrsInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ConvrsInfo* other);
  friend void swap(ConvrsInfo& a, ConvrsInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConvrsInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ConvrsInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConvrsInfo& from);
  void MergeFrom(const ConvrsInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConvrsInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sessioner = 1;
  void clear_sessioner();
  static const int kSessionerFieldNumber = 1;
  const ::std::string& sessioner() const;
  void set_sessioner(const ::std::string& value);
  #if LANG_CXX11
  void set_sessioner(::std::string&& value);
  #endif
  void set_sessioner(const char* value);
  void set_sessioner(const char* value, size_t size);
  ::std::string* mutable_sessioner();
  ::std::string* release_sessioner();
  void set_allocated_sessioner(::std::string* sessioner);

  // string sessioner_info = 3;
  void clear_sessioner_info();
  static const int kSessionerInfoFieldNumber = 3;
  const ::std::string& sessioner_info() const;
  void set_sessioner_info(const ::std::string& value);
  #if LANG_CXX11
  void set_sessioner_info(::std::string&& value);
  #endif
  void set_sessioner_info(const char* value);
  void set_sessioner_info(const char* value, size_t size);
  ::std::string* mutable_sessioner_info();
  ::std::string* release_sessioner_info();
  void set_allocated_sessioner_info(::std::string* sessioner_info);

  // uint64 modified = 2;
  void clear_modified();
  static const int kModifiedFieldNumber = 2;
  ::google::protobuf::uint64 modified() const;
  void set_modified(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.conversations.ConvrsInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sessioner_;
  ::google::protobuf::internal::ArenaStringPtr sessioner_info_;
  ::google::protobuf::uint64 modified_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconversation_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconversation_2eproto::InitDefaultsConvrsInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncConvrsRequest

// string username = 1;
inline void SyncConvrsRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncConvrsRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.conversations.SyncConvrsRequest.username)
  return username_.GetNoArena();
}
inline void SyncConvrsRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.conversations.SyncConvrsRequest.username)
}
#if LANG_CXX11
inline void SyncConvrsRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.conversations.SyncConvrsRequest.username)
}
#endif
inline void SyncConvrsRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.conversations.SyncConvrsRequest.username)
}
inline void SyncConvrsRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.conversations.SyncConvrsRequest.username)
}
inline ::std::string* SyncConvrsRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.conversations.SyncConvrsRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncConvrsRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.conversations.SyncConvrsRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncConvrsRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.conversations.SyncConvrsRequest.username)
}

// string appkey = 2;
inline void SyncConvrsRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncConvrsRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.conversations.SyncConvrsRequest.appkey)
  return appkey_.GetNoArena();
}
inline void SyncConvrsRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.conversations.SyncConvrsRequest.appkey)
}
#if LANG_CXX11
inline void SyncConvrsRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.conversations.SyncConvrsRequest.appkey)
}
#endif
inline void SyncConvrsRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.conversations.SyncConvrsRequest.appkey)
}
inline void SyncConvrsRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.conversations.SyncConvrsRequest.appkey)
}
inline ::std::string* SyncConvrsRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.conversations.SyncConvrsRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncConvrsRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.conversations.SyncConvrsRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncConvrsRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.conversations.SyncConvrsRequest.appkey)
}

// string msg_id = 3;
inline void SyncConvrsRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncConvrsRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.conversations.SyncConvrsRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void SyncConvrsRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.conversations.SyncConvrsRequest.msg_id)
}
#if LANG_CXX11
inline void SyncConvrsRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.conversations.SyncConvrsRequest.msg_id)
}
#endif
inline void SyncConvrsRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.conversations.SyncConvrsRequest.msg_id)
}
inline void SyncConvrsRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.conversations.SyncConvrsRequest.msg_id)
}
inline ::std::string* SyncConvrsRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.conversations.SyncConvrsRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncConvrsRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.conversations.SyncConvrsRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncConvrsRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.conversations.SyncConvrsRequest.msg_id)
}

// -------------------------------------------------------------------

// SyncConvrsResponse

// .common.errcode.EErrorCode ret = 1;
inline void SyncConvrsResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode SyncConvrsResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.conversations.SyncConvrsResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void SyncConvrsResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.conversations.SyncConvrsResponse.ret)
}

// string msg_id = 2;
inline void SyncConvrsResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncConvrsResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.conversations.SyncConvrsResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void SyncConvrsResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.conversations.SyncConvrsResponse.msg_id)
}
#if LANG_CXX11
inline void SyncConvrsResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.conversations.SyncConvrsResponse.msg_id)
}
#endif
inline void SyncConvrsResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.conversations.SyncConvrsResponse.msg_id)
}
inline void SyncConvrsResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.conversations.SyncConvrsResponse.msg_id)
}
inline ::std::string* SyncConvrsResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.conversations.SyncConvrsResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncConvrsResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.conversations.SyncConvrsResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncConvrsResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.conversations.SyncConvrsResponse.msg_id)
}

// repeated .outer.conversations.ConvrsInfo convrsInfo = 3;
inline int SyncConvrsResponse::convrsinfo_size() const {
  return convrsinfo_.size();
}
inline void SyncConvrsResponse::clear_convrsinfo() {
  convrsinfo_.Clear();
}
inline const ::outer::conversations::ConvrsInfo& SyncConvrsResponse::convrsinfo(int index) const {
  // @@protoc_insertion_point(field_get:outer.conversations.SyncConvrsResponse.convrsInfo)
  return convrsinfo_.Get(index);
}
inline ::outer::conversations::ConvrsInfo* SyncConvrsResponse::mutable_convrsinfo(int index) {
  // @@protoc_insertion_point(field_mutable:outer.conversations.SyncConvrsResponse.convrsInfo)
  return convrsinfo_.Mutable(index);
}
inline ::outer::conversations::ConvrsInfo* SyncConvrsResponse::add_convrsinfo() {
  // @@protoc_insertion_point(field_add:outer.conversations.SyncConvrsResponse.convrsInfo)
  return convrsinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::conversations::ConvrsInfo >*
SyncConvrsResponse::mutable_convrsinfo() {
  // @@protoc_insertion_point(field_mutable_list:outer.conversations.SyncConvrsResponse.convrsInfo)
  return &convrsinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::conversations::ConvrsInfo >&
SyncConvrsResponse::convrsinfo() const {
  // @@protoc_insertion_point(field_list:outer.conversations.SyncConvrsResponse.convrsInfo)
  return convrsinfo_;
}

// -------------------------------------------------------------------

// UploadConvrsRequest

// string username = 1;
inline void UploadConvrsRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadConvrsRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.conversations.UploadConvrsRequest.username)
  return username_.GetNoArena();
}
inline void UploadConvrsRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.conversations.UploadConvrsRequest.username)
}
#if LANG_CXX11
inline void UploadConvrsRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.conversations.UploadConvrsRequest.username)
}
#endif
inline void UploadConvrsRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.conversations.UploadConvrsRequest.username)
}
inline void UploadConvrsRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.conversations.UploadConvrsRequest.username)
}
inline ::std::string* UploadConvrsRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.conversations.UploadConvrsRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadConvrsRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.conversations.UploadConvrsRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadConvrsRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.conversations.UploadConvrsRequest.username)
}

// string appkey = 2;
inline void UploadConvrsRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadConvrsRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.conversations.UploadConvrsRequest.appkey)
  return appkey_.GetNoArena();
}
inline void UploadConvrsRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.conversations.UploadConvrsRequest.appkey)
}
#if LANG_CXX11
inline void UploadConvrsRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.conversations.UploadConvrsRequest.appkey)
}
#endif
inline void UploadConvrsRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.conversations.UploadConvrsRequest.appkey)
}
inline void UploadConvrsRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.conversations.UploadConvrsRequest.appkey)
}
inline ::std::string* UploadConvrsRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.conversations.UploadConvrsRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadConvrsRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.conversations.UploadConvrsRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadConvrsRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.conversations.UploadConvrsRequest.appkey)
}

// string msg_id = 3;
inline void UploadConvrsRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadConvrsRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.conversations.UploadConvrsRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void UploadConvrsRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.conversations.UploadConvrsRequest.msg_id)
}
#if LANG_CXX11
inline void UploadConvrsRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.conversations.UploadConvrsRequest.msg_id)
}
#endif
inline void UploadConvrsRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.conversations.UploadConvrsRequest.msg_id)
}
inline void UploadConvrsRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.conversations.UploadConvrsRequest.msg_id)
}
inline ::std::string* UploadConvrsRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.conversations.UploadConvrsRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadConvrsRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.conversations.UploadConvrsRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadConvrsRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.conversations.UploadConvrsRequest.msg_id)
}

// repeated .outer.conversations.ConvrsInfo convrsInfo = 4;
inline int UploadConvrsRequest::convrsinfo_size() const {
  return convrsinfo_.size();
}
inline void UploadConvrsRequest::clear_convrsinfo() {
  convrsinfo_.Clear();
}
inline const ::outer::conversations::ConvrsInfo& UploadConvrsRequest::convrsinfo(int index) const {
  // @@protoc_insertion_point(field_get:outer.conversations.UploadConvrsRequest.convrsInfo)
  return convrsinfo_.Get(index);
}
inline ::outer::conversations::ConvrsInfo* UploadConvrsRequest::mutable_convrsinfo(int index) {
  // @@protoc_insertion_point(field_mutable:outer.conversations.UploadConvrsRequest.convrsInfo)
  return convrsinfo_.Mutable(index);
}
inline ::outer::conversations::ConvrsInfo* UploadConvrsRequest::add_convrsinfo() {
  // @@protoc_insertion_point(field_add:outer.conversations.UploadConvrsRequest.convrsInfo)
  return convrsinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::conversations::ConvrsInfo >*
UploadConvrsRequest::mutable_convrsinfo() {
  // @@protoc_insertion_point(field_mutable_list:outer.conversations.UploadConvrsRequest.convrsInfo)
  return &convrsinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::conversations::ConvrsInfo >&
UploadConvrsRequest::convrsinfo() const {
  // @@protoc_insertion_point(field_list:outer.conversations.UploadConvrsRequest.convrsInfo)
  return convrsinfo_;
}

// -------------------------------------------------------------------

// UploadConvrsResponse

// .common.errcode.EErrorCode ret = 1;
inline void UploadConvrsResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode UploadConvrsResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.conversations.UploadConvrsResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void UploadConvrsResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.conversations.UploadConvrsResponse.ret)
}

// string msg_id = 2;
inline void UploadConvrsResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadConvrsResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.conversations.UploadConvrsResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void UploadConvrsResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.conversations.UploadConvrsResponse.msg_id)
}
#if LANG_CXX11
inline void UploadConvrsResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.conversations.UploadConvrsResponse.msg_id)
}
#endif
inline void UploadConvrsResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.conversations.UploadConvrsResponse.msg_id)
}
inline void UploadConvrsResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.conversations.UploadConvrsResponse.msg_id)
}
inline ::std::string* UploadConvrsResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.conversations.UploadConvrsResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadConvrsResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.conversations.UploadConvrsResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadConvrsResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.conversations.UploadConvrsResponse.msg_id)
}

// -------------------------------------------------------------------

// ConvrsInfo

// string sessioner = 1;
inline void ConvrsInfo::clear_sessioner() {
  sessioner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConvrsInfo::sessioner() const {
  // @@protoc_insertion_point(field_get:outer.conversations.ConvrsInfo.sessioner)
  return sessioner_.GetNoArena();
}
inline void ConvrsInfo::set_sessioner(const ::std::string& value) {
  
  sessioner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.conversations.ConvrsInfo.sessioner)
}
#if LANG_CXX11
inline void ConvrsInfo::set_sessioner(::std::string&& value) {
  
  sessioner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.conversations.ConvrsInfo.sessioner)
}
#endif
inline void ConvrsInfo::set_sessioner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sessioner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.conversations.ConvrsInfo.sessioner)
}
inline void ConvrsInfo::set_sessioner(const char* value, size_t size) {
  
  sessioner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.conversations.ConvrsInfo.sessioner)
}
inline ::std::string* ConvrsInfo::mutable_sessioner() {
  
  // @@protoc_insertion_point(field_mutable:outer.conversations.ConvrsInfo.sessioner)
  return sessioner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConvrsInfo::release_sessioner() {
  // @@protoc_insertion_point(field_release:outer.conversations.ConvrsInfo.sessioner)
  
  return sessioner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConvrsInfo::set_allocated_sessioner(::std::string* sessioner) {
  if (sessioner != NULL) {
    
  } else {
    
  }
  sessioner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessioner);
  // @@protoc_insertion_point(field_set_allocated:outer.conversations.ConvrsInfo.sessioner)
}

// uint64 modified = 2;
inline void ConvrsInfo::clear_modified() {
  modified_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ConvrsInfo::modified() const {
  // @@protoc_insertion_point(field_get:outer.conversations.ConvrsInfo.modified)
  return modified_;
}
inline void ConvrsInfo::set_modified(::google::protobuf::uint64 value) {
  
  modified_ = value;
  // @@protoc_insertion_point(field_set:outer.conversations.ConvrsInfo.modified)
}

// string sessioner_info = 3;
inline void ConvrsInfo::clear_sessioner_info() {
  sessioner_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConvrsInfo::sessioner_info() const {
  // @@protoc_insertion_point(field_get:outer.conversations.ConvrsInfo.sessioner_info)
  return sessioner_info_.GetNoArena();
}
inline void ConvrsInfo::set_sessioner_info(const ::std::string& value) {
  
  sessioner_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.conversations.ConvrsInfo.sessioner_info)
}
#if LANG_CXX11
inline void ConvrsInfo::set_sessioner_info(::std::string&& value) {
  
  sessioner_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.conversations.ConvrsInfo.sessioner_info)
}
#endif
inline void ConvrsInfo::set_sessioner_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sessioner_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.conversations.ConvrsInfo.sessioner_info)
}
inline void ConvrsInfo::set_sessioner_info(const char* value, size_t size) {
  
  sessioner_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.conversations.ConvrsInfo.sessioner_info)
}
inline ::std::string* ConvrsInfo::mutable_sessioner_info() {
  
  // @@protoc_insertion_point(field_mutable:outer.conversations.ConvrsInfo.sessioner_info)
  return sessioner_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConvrsInfo::release_sessioner_info() {
  // @@protoc_insertion_point(field_release:outer.conversations.ConvrsInfo.sessioner_info)
  
  return sessioner_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConvrsInfo::set_allocated_sessioner_info(::std::string* sessioner_info) {
  if (sessioner_info != NULL) {
    
  } else {
    
  }
  sessioner_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessioner_info);
  // @@protoc_insertion_point(field_set_allocated:outer.conversations.ConvrsInfo.sessioner_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace conversations
}  // namespace outer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_outer_2fconversation_2eproto__INCLUDED
