// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: outer/monitor.proto

#ifndef PROTOBUF_outer_2fmonitor_2eproto__INCLUDED
#define PROTOBUF_outer_2fmonitor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/errcode.pb.h"
#include "common/base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_outer_2fmonitor_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsOptimizeLogRequestImpl();
void InitDefaultsOptimizeLogRequest();
void InitDefaultsOptimizeLogResponseImpl();
void InitDefaultsOptimizeLogResponse();
inline void InitDefaults() {
  InitDefaultsOptimizeLogRequest();
  InitDefaultsOptimizeLogResponse();
}
}  // namespace protobuf_outer_2fmonitor_2eproto
namespace outer {
namespace monitor {
class OptimizeLogRequest;
class OptimizeLogRequestDefaultTypeInternal;
extern OptimizeLogRequestDefaultTypeInternal _OptimizeLogRequest_default_instance_;
class OptimizeLogResponse;
class OptimizeLogResponseDefaultTypeInternal;
extern OptimizeLogResponseDefaultTypeInternal _OptimizeLogResponse_default_instance_;
}  // namespace monitor
}  // namespace outer
namespace outer {
namespace monitor {

// ===================================================================

class OptimizeLogRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.monitor.OptimizeLogRequest) */ {
 public:
  OptimizeLogRequest();
  virtual ~OptimizeLogRequest();

  OptimizeLogRequest(const OptimizeLogRequest& from);

  inline OptimizeLogRequest& operator=(const OptimizeLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptimizeLogRequest(OptimizeLogRequest&& from) noexcept
    : OptimizeLogRequest() {
    *this = ::std::move(from);
  }

  inline OptimizeLogRequest& operator=(OptimizeLogRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OptimizeLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptimizeLogRequest* internal_default_instance() {
    return reinterpret_cast<const OptimizeLogRequest*>(
               &_OptimizeLogRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(OptimizeLogRequest* other);
  friend void swap(OptimizeLogRequest& a, OptimizeLogRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptimizeLogRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  OptimizeLogRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OptimizeLogRequest& from);
  void MergeFrom(const OptimizeLogRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OptimizeLogRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 4;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 4;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string service_name = 5;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 5;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string invoke_method = 6;
  void clear_invoke_method();
  static const int kInvokeMethodFieldNumber = 6;
  const ::std::string& invoke_method() const;
  void set_invoke_method(const ::std::string& value);
  #if LANG_CXX11
  void set_invoke_method(::std::string&& value);
  #endif
  void set_invoke_method(const char* value);
  void set_invoke_method(const char* value, size_t size);
  ::std::string* mutable_invoke_method();
  ::std::string* release_invoke_method();
  void set_allocated_invoke_method(::std::string* invoke_method);

  // .common.base.MobileBase base_info = 1;
  bool has_base_info() const;
  void clear_base_info();
  static const int kBaseInfoFieldNumber = 1;
  const ::common::base::MobileBase& base_info() const;
  ::common::base::MobileBase* release_base_info();
  ::common::base::MobileBase* mutable_base_info();
  void set_allocated_base_info(::common::base::MobileBase* base_info);

  // uint64 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.monitor.OptimizeLogRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr invoke_method_;
  ::common::base::MobileBase* base_info_;
  ::google::protobuf::uint64 time_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fmonitor_2eproto::TableStruct;
  friend void ::protobuf_outer_2fmonitor_2eproto::InitDefaultsOptimizeLogRequestImpl();
};
// -------------------------------------------------------------------

class OptimizeLogResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.monitor.OptimizeLogResponse) */ {
 public:
  OptimizeLogResponse();
  virtual ~OptimizeLogResponse();

  OptimizeLogResponse(const OptimizeLogResponse& from);

  inline OptimizeLogResponse& operator=(const OptimizeLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OptimizeLogResponse(OptimizeLogResponse&& from) noexcept
    : OptimizeLogResponse() {
    *this = ::std::move(from);
  }

  inline OptimizeLogResponse& operator=(OptimizeLogResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OptimizeLogResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OptimizeLogResponse* internal_default_instance() {
    return reinterpret_cast<const OptimizeLogResponse*>(
               &_OptimizeLogResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(OptimizeLogResponse* other);
  friend void swap(OptimizeLogResponse& a, OptimizeLogResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OptimizeLogResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  OptimizeLogResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OptimizeLogResponse& from);
  void MergeFrom(const OptimizeLogResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OptimizeLogResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.monitor.OptimizeLogResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fmonitor_2eproto::TableStruct;
  friend void ::protobuf_outer_2fmonitor_2eproto::InitDefaultsOptimizeLogResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OptimizeLogRequest

// .common.base.MobileBase base_info = 1;
inline bool OptimizeLogRequest::has_base_info() const {
  return this != internal_default_instance() && base_info_ != NULL;
}
inline const ::common::base::MobileBase& OptimizeLogRequest::base_info() const {
  const ::common::base::MobileBase* p = base_info_;
  // @@protoc_insertion_point(field_get:outer.monitor.OptimizeLogRequest.base_info)
  return p != NULL ? *p : *reinterpret_cast<const ::common::base::MobileBase*>(
      &::common::base::_MobileBase_default_instance_);
}
inline ::common::base::MobileBase* OptimizeLogRequest::release_base_info() {
  // @@protoc_insertion_point(field_release:outer.monitor.OptimizeLogRequest.base_info)
  
  ::common::base::MobileBase* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline ::common::base::MobileBase* OptimizeLogRequest::mutable_base_info() {
  
  if (base_info_ == NULL) {
    base_info_ = new ::common::base::MobileBase;
  }
  // @@protoc_insertion_point(field_mutable:outer.monitor.OptimizeLogRequest.base_info)
  return base_info_;
}
inline void OptimizeLogRequest::set_allocated_base_info(::common::base::MobileBase* base_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(base_info_);
  }
  if (base_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base_info, submessage_arena);
    }
    
  } else {
    
  }
  base_info_ = base_info;
  // @@protoc_insertion_point(field_set_allocated:outer.monitor.OptimizeLogRequest.base_info)
}

// uint64 time = 2;
inline void OptimizeLogRequest::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 OptimizeLogRequest::time() const {
  // @@protoc_insertion_point(field_get:outer.monitor.OptimizeLogRequest.time)
  return time_;
}
inline void OptimizeLogRequest::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:outer.monitor.OptimizeLogRequest.time)
}

// string username = 3;
inline void OptimizeLogRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptimizeLogRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.monitor.OptimizeLogRequest.username)
  return username_.GetNoArena();
}
inline void OptimizeLogRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.monitor.OptimizeLogRequest.username)
}
#if LANG_CXX11
inline void OptimizeLogRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.monitor.OptimizeLogRequest.username)
}
#endif
inline void OptimizeLogRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.monitor.OptimizeLogRequest.username)
}
inline void OptimizeLogRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.monitor.OptimizeLogRequest.username)
}
inline ::std::string* OptimizeLogRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.monitor.OptimizeLogRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptimizeLogRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.monitor.OptimizeLogRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptimizeLogRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.monitor.OptimizeLogRequest.username)
}

// string appkey = 4;
inline void OptimizeLogRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptimizeLogRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.monitor.OptimizeLogRequest.appkey)
  return appkey_.GetNoArena();
}
inline void OptimizeLogRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.monitor.OptimizeLogRequest.appkey)
}
#if LANG_CXX11
inline void OptimizeLogRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.monitor.OptimizeLogRequest.appkey)
}
#endif
inline void OptimizeLogRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.monitor.OptimizeLogRequest.appkey)
}
inline void OptimizeLogRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.monitor.OptimizeLogRequest.appkey)
}
inline ::std::string* OptimizeLogRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.monitor.OptimizeLogRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptimizeLogRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.monitor.OptimizeLogRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptimizeLogRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.monitor.OptimizeLogRequest.appkey)
}

// string service_name = 5;
inline void OptimizeLogRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptimizeLogRequest::service_name() const {
  // @@protoc_insertion_point(field_get:outer.monitor.OptimizeLogRequest.service_name)
  return service_name_.GetNoArena();
}
inline void OptimizeLogRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.monitor.OptimizeLogRequest.service_name)
}
#if LANG_CXX11
inline void OptimizeLogRequest::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.monitor.OptimizeLogRequest.service_name)
}
#endif
inline void OptimizeLogRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.monitor.OptimizeLogRequest.service_name)
}
inline void OptimizeLogRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.monitor.OptimizeLogRequest.service_name)
}
inline ::std::string* OptimizeLogRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.monitor.OptimizeLogRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptimizeLogRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:outer.monitor.OptimizeLogRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptimizeLogRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:outer.monitor.OptimizeLogRequest.service_name)
}

// string invoke_method = 6;
inline void OptimizeLogRequest::clear_invoke_method() {
  invoke_method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OptimizeLogRequest::invoke_method() const {
  // @@protoc_insertion_point(field_get:outer.monitor.OptimizeLogRequest.invoke_method)
  return invoke_method_.GetNoArena();
}
inline void OptimizeLogRequest::set_invoke_method(const ::std::string& value) {
  
  invoke_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.monitor.OptimizeLogRequest.invoke_method)
}
#if LANG_CXX11
inline void OptimizeLogRequest::set_invoke_method(::std::string&& value) {
  
  invoke_method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.monitor.OptimizeLogRequest.invoke_method)
}
#endif
inline void OptimizeLogRequest::set_invoke_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  invoke_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.monitor.OptimizeLogRequest.invoke_method)
}
inline void OptimizeLogRequest::set_invoke_method(const char* value, size_t size) {
  
  invoke_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.monitor.OptimizeLogRequest.invoke_method)
}
inline ::std::string* OptimizeLogRequest::mutable_invoke_method() {
  
  // @@protoc_insertion_point(field_mutable:outer.monitor.OptimizeLogRequest.invoke_method)
  return invoke_method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OptimizeLogRequest::release_invoke_method() {
  // @@protoc_insertion_point(field_release:outer.monitor.OptimizeLogRequest.invoke_method)
  
  return invoke_method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OptimizeLogRequest::set_allocated_invoke_method(::std::string* invoke_method) {
  if (invoke_method != NULL) {
    
  } else {
    
  }
  invoke_method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invoke_method);
  // @@protoc_insertion_point(field_set_allocated:outer.monitor.OptimizeLogRequest.invoke_method)
}

// -------------------------------------------------------------------

// OptimizeLogResponse

// .common.errcode.EErrorCode ret = 1;
inline void OptimizeLogResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode OptimizeLogResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.monitor.OptimizeLogResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void OptimizeLogResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.monitor.OptimizeLogResponse.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace monitor
}  // namespace outer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_outer_2fmonitor_2eproto__INCLUDED
