// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: outer/chatroom.proto

#ifndef PROTOBUF_outer_2fchatroom_2eproto__INCLUDED
#define PROTOBUF_outer_2fchatroom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/errcode.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_outer_2fchatroom_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[24];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsChatroomInfoImpl();
void InitDefaultsChatroomInfo();
void InitDefaultsCrewImpl();
void InitDefaultsCrew();
void InitDefaultsChatroomDetailImpl();
void InitDefaultsChatroomDetail();
void InitDefaultsChatroomSignalImpl();
void InitDefaultsChatroomSignal();
void InitDefaultsSearchRoomByNameRequestImpl();
void InitDefaultsSearchRoomByNameRequest();
void InitDefaultsSearchRoomByNameResponseImpl();
void InitDefaultsSearchRoomByNameResponse();
void InitDefaultsSearchRoomByIdRequestImpl();
void InitDefaultsSearchRoomByIdRequest();
void InitDefaultsSearchRoomByIdResponseImpl();
void InitDefaultsSearchRoomByIdResponse();
void InitDefaultsGetRoomListRequestImpl();
void InitDefaultsGetRoomListRequest();
void InitDefaultsGetRoomListResponseImpl();
void InitDefaultsGetRoomListResponse();
void InitDefaultsQueryRoomDetailRequestImpl();
void InitDefaultsQueryRoomDetailRequest();
void InitDefaultsQueryRoomDetailResponseImpl();
void InitDefaultsQueryRoomDetailResponse();
void InitDefaultsSetRoomInfoRequestImpl();
void InitDefaultsSetRoomInfoRequest();
void InitDefaultsSetRoomInfoResponseImpl();
void InitDefaultsSetRoomInfoResponse();
void InitDefaultsAddMemberToRoomRequestImpl();
void InitDefaultsAddMemberToRoomRequest();
void InitDefaultsAddMemberToRoomResponseImpl();
void InitDefaultsAddMemberToRoomResponse();
void InitDefaultsJoinRoomRequestImpl();
void InitDefaultsJoinRoomRequest();
void InitDefaultsJoinRoomResponseImpl();
void InitDefaultsJoinRoomResponse();
void InitDefaultsExitRoomRequestImpl();
void InitDefaultsExitRoomRequest();
void InitDefaultsExitRoomResponseImpl();
void InitDefaultsExitRoomResponse();
void InitDefaultsGetTotalMemberCountRequestImpl();
void InitDefaultsGetTotalMemberCountRequest();
void InitDefaultsGetTotalMemberCountResponseImpl();
void InitDefaultsGetTotalMemberCountResponse();
void InitDefaultsSendRoomMessageRequestImpl();
void InitDefaultsSendRoomMessageRequest();
void InitDefaultsSendRoomMessageResponseImpl();
void InitDefaultsSendRoomMessageResponse();
inline void InitDefaults() {
  InitDefaultsChatroomInfo();
  InitDefaultsCrew();
  InitDefaultsChatroomDetail();
  InitDefaultsChatroomSignal();
  InitDefaultsSearchRoomByNameRequest();
  InitDefaultsSearchRoomByNameResponse();
  InitDefaultsSearchRoomByIdRequest();
  InitDefaultsSearchRoomByIdResponse();
  InitDefaultsGetRoomListRequest();
  InitDefaultsGetRoomListResponse();
  InitDefaultsQueryRoomDetailRequest();
  InitDefaultsQueryRoomDetailResponse();
  InitDefaultsSetRoomInfoRequest();
  InitDefaultsSetRoomInfoResponse();
  InitDefaultsAddMemberToRoomRequest();
  InitDefaultsAddMemberToRoomResponse();
  InitDefaultsJoinRoomRequest();
  InitDefaultsJoinRoomResponse();
  InitDefaultsExitRoomRequest();
  InitDefaultsExitRoomResponse();
  InitDefaultsGetTotalMemberCountRequest();
  InitDefaultsGetTotalMemberCountResponse();
  InitDefaultsSendRoomMessageRequest();
  InitDefaultsSendRoomMessageResponse();
}
}  // namespace protobuf_outer_2fchatroom_2eproto
namespace outer {
namespace chatroom {
class AddMemberToRoomRequest;
class AddMemberToRoomRequestDefaultTypeInternal;
extern AddMemberToRoomRequestDefaultTypeInternal _AddMemberToRoomRequest_default_instance_;
class AddMemberToRoomResponse;
class AddMemberToRoomResponseDefaultTypeInternal;
extern AddMemberToRoomResponseDefaultTypeInternal _AddMemberToRoomResponse_default_instance_;
class ChatroomDetail;
class ChatroomDetailDefaultTypeInternal;
extern ChatroomDetailDefaultTypeInternal _ChatroomDetail_default_instance_;
class ChatroomInfo;
class ChatroomInfoDefaultTypeInternal;
extern ChatroomInfoDefaultTypeInternal _ChatroomInfo_default_instance_;
class ChatroomSignal;
class ChatroomSignalDefaultTypeInternal;
extern ChatroomSignalDefaultTypeInternal _ChatroomSignal_default_instance_;
class Crew;
class CrewDefaultTypeInternal;
extern CrewDefaultTypeInternal _Crew_default_instance_;
class ExitRoomRequest;
class ExitRoomRequestDefaultTypeInternal;
extern ExitRoomRequestDefaultTypeInternal _ExitRoomRequest_default_instance_;
class ExitRoomResponse;
class ExitRoomResponseDefaultTypeInternal;
extern ExitRoomResponseDefaultTypeInternal _ExitRoomResponse_default_instance_;
class GetRoomListRequest;
class GetRoomListRequestDefaultTypeInternal;
extern GetRoomListRequestDefaultTypeInternal _GetRoomListRequest_default_instance_;
class GetRoomListResponse;
class GetRoomListResponseDefaultTypeInternal;
extern GetRoomListResponseDefaultTypeInternal _GetRoomListResponse_default_instance_;
class GetTotalMemberCountRequest;
class GetTotalMemberCountRequestDefaultTypeInternal;
extern GetTotalMemberCountRequestDefaultTypeInternal _GetTotalMemberCountRequest_default_instance_;
class GetTotalMemberCountResponse;
class GetTotalMemberCountResponseDefaultTypeInternal;
extern GetTotalMemberCountResponseDefaultTypeInternal _GetTotalMemberCountResponse_default_instance_;
class JoinRoomRequest;
class JoinRoomRequestDefaultTypeInternal;
extern JoinRoomRequestDefaultTypeInternal _JoinRoomRequest_default_instance_;
class JoinRoomResponse;
class JoinRoomResponseDefaultTypeInternal;
extern JoinRoomResponseDefaultTypeInternal _JoinRoomResponse_default_instance_;
class QueryRoomDetailRequest;
class QueryRoomDetailRequestDefaultTypeInternal;
extern QueryRoomDetailRequestDefaultTypeInternal _QueryRoomDetailRequest_default_instance_;
class QueryRoomDetailResponse;
class QueryRoomDetailResponseDefaultTypeInternal;
extern QueryRoomDetailResponseDefaultTypeInternal _QueryRoomDetailResponse_default_instance_;
class SearchRoomByIdRequest;
class SearchRoomByIdRequestDefaultTypeInternal;
extern SearchRoomByIdRequestDefaultTypeInternal _SearchRoomByIdRequest_default_instance_;
class SearchRoomByIdResponse;
class SearchRoomByIdResponseDefaultTypeInternal;
extern SearchRoomByIdResponseDefaultTypeInternal _SearchRoomByIdResponse_default_instance_;
class SearchRoomByNameRequest;
class SearchRoomByNameRequestDefaultTypeInternal;
extern SearchRoomByNameRequestDefaultTypeInternal _SearchRoomByNameRequest_default_instance_;
class SearchRoomByNameResponse;
class SearchRoomByNameResponseDefaultTypeInternal;
extern SearchRoomByNameResponseDefaultTypeInternal _SearchRoomByNameResponse_default_instance_;
class SendRoomMessageRequest;
class SendRoomMessageRequestDefaultTypeInternal;
extern SendRoomMessageRequestDefaultTypeInternal _SendRoomMessageRequest_default_instance_;
class SendRoomMessageResponse;
class SendRoomMessageResponseDefaultTypeInternal;
extern SendRoomMessageResponseDefaultTypeInternal _SendRoomMessageResponse_default_instance_;
class SetRoomInfoRequest;
class SetRoomInfoRequestDefaultTypeInternal;
extern SetRoomInfoRequestDefaultTypeInternal _SetRoomInfoRequest_default_instance_;
class SetRoomInfoResponse;
class SetRoomInfoResponseDefaultTypeInternal;
extern SetRoomInfoResponseDefaultTypeInternal _SetRoomInfoResponse_default_instance_;
}  // namespace chatroom
}  // namespace outer
namespace outer {
namespace chatroom {

enum ERoomState {
  UNKNOWNEROOMSTATE = 0,
  CLOSE = 2,
  OPEN = 1,
  ERoomState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ERoomState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ERoomState_IsValid(int value);
const ERoomState ERoomState_MIN = UNKNOWNEROOMSTATE;
const ERoomState ERoomState_MAX = CLOSE;
const int ERoomState_ARRAYSIZE = ERoomState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERoomState_descriptor();
inline const ::std::string& ERoomState_Name(ERoomState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERoomState_descriptor(), value);
}
inline bool ERoomState_Parse(
    const ::std::string& name, ERoomState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERoomState>(
    ERoomState_descriptor(), name, value);
}
enum EMsgType {
  UNKNOWNEMSGTYPE = 0,
  TEXT = 1,
  EMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EMsgType_IsValid(int value);
const EMsgType EMsgType_MIN = UNKNOWNEMSGTYPE;
const EMsgType EMsgType_MAX = TEXT;
const int EMsgType_ARRAYSIZE = EMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMsgType_descriptor();
inline const ::std::string& EMsgType_Name(EMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMsgType_descriptor(), value);
}
inline bool EMsgType_Parse(
    const ::std::string& name, EMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMsgType>(
    EMsgType_descriptor(), name, value);
}
enum ERole {
  UNKNOWNEROLE = 0,
  MEMBER = 3,
  ADMIN = 1,
  OWNER = 2,
  ERole_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ERole_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ERole_IsValid(int value);
const ERole ERole_MIN = UNKNOWNEROLE;
const ERole ERole_MAX = MEMBER;
const int ERole_ARRAYSIZE = ERole_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERole_descriptor();
inline const ::std::string& ERole_Name(ERole value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERole_descriptor(), value);
}
inline bool ERole_Parse(
    const ::std::string& name, ERole* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERole>(
    ERole_descriptor(), name, value);
}
enum ESignalType {
  UNKNOWNESIGNALTYPE = 0,
  CREW_JOIN_SIGNAL = 6,
  CREW_EXIT_SIGNAL = 1,
  CHATROOM_CLOSE_SIGNAL = 2,
  CHATROOM_DELETE_SIGNAL = 3,
  OWNER_CHANGED_SIGNAL = 4,
  CHATROOM_INFO_CHANGED_SIGNAL = 5,
  ESignalType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ESignalType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ESignalType_IsValid(int value);
const ESignalType ESignalType_MIN = UNKNOWNESIGNALTYPE;
const ESignalType ESignalType_MAX = CREW_JOIN_SIGNAL;
const int ESignalType_ARRAYSIZE = ESignalType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESignalType_descriptor();
inline const ::std::string& ESignalType_Name(ESignalType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESignalType_descriptor(), value);
}
inline bool ESignalType_Parse(
    const ::std::string& name, ESignalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESignalType>(
    ESignalType_descriptor(), name, value);
}
// ===================================================================

class ChatroomInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.ChatroomInfo) */ {
 public:
  ChatroomInfo();
  virtual ~ChatroomInfo();

  ChatroomInfo(const ChatroomInfo& from);

  inline ChatroomInfo& operator=(const ChatroomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatroomInfo(ChatroomInfo&& from) noexcept
    : ChatroomInfo() {
    *this = ::std::move(from);
  }

  inline ChatroomInfo& operator=(ChatroomInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatroomInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatroomInfo* internal_default_instance() {
    return reinterpret_cast<const ChatroomInfo*>(
               &_ChatroomInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ChatroomInfo* other);
  friend void swap(ChatroomInfo& a, ChatroomInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatroomInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatroomInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatroomInfo& from);
  void MergeFrom(const ChatroomInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatroomInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string room_name = 1;
  void clear_room_name();
  static const int kRoomNameFieldNumber = 1;
  const ::std::string& room_name() const;
  void set_room_name(const ::std::string& value);
  #if LANG_CXX11
  void set_room_name(::std::string&& value);
  #endif
  void set_room_name(const char* value);
  void set_room_name(const char* value, size_t size);
  ::std::string* mutable_room_name();
  ::std::string* release_room_name();
  void set_allocated_room_name(::std::string* room_name);

  // uint64 room_id = 2;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.ChatroomInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr room_name_;
  ::google::protobuf::uint64 room_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsChatroomInfoImpl();
};
// -------------------------------------------------------------------

class Crew : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.Crew) */ {
 public:
  Crew();
  virtual ~Crew();

  Crew(const Crew& from);

  inline Crew& operator=(const Crew& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Crew(Crew&& from) noexcept
    : Crew() {
    *this = ::std::move(from);
  }

  inline Crew& operator=(Crew&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Crew& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Crew* internal_default_instance() {
    return reinterpret_cast<const Crew*>(
               &_Crew_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Crew* other);
  friend void swap(Crew& a, Crew& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Crew* New() const PROTOBUF_FINAL { return New(NULL); }

  Crew* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Crew& from);
  void MergeFrom(const Crew& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Crew* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string nick = 3;
  void clear_nick();
  static const int kNickFieldNumber = 3;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // string modified = 5;
  void clear_modified();
  static const int kModifiedFieldNumber = 5;
  const ::std::string& modified() const;
  void set_modified(const ::std::string& value);
  #if LANG_CXX11
  void set_modified(::std::string&& value);
  #endif
  void set_modified(const char* value);
  void set_modified(const char* value, size_t size);
  ::std::string* mutable_modified();
  ::std::string* release_modified();
  void set_allocated_modified(::std::string* modified);

  // .outer.chatroom.ERole role = 4;
  void clear_role();
  static const int kRoleFieldNumber = 4;
  ::outer::chatroom::ERole role() const;
  void set_role(::outer::chatroom::ERole value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.Crew)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr modified_;
  int role_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsCrewImpl();
};
// -------------------------------------------------------------------

class ChatroomDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.ChatroomDetail) */ {
 public:
  ChatroomDetail();
  virtual ~ChatroomDetail();

  ChatroomDetail(const ChatroomDetail& from);

  inline ChatroomDetail& operator=(const ChatroomDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatroomDetail(ChatroomDetail&& from) noexcept
    : ChatroomDetail() {
    *this = ::std::move(from);
  }

  inline ChatroomDetail& operator=(ChatroomDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatroomDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatroomDetail* internal_default_instance() {
    return reinterpret_cast<const ChatroomDetail*>(
               &_ChatroomDetail_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ChatroomDetail* other);
  friend void swap(ChatroomDetail& a, ChatroomDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatroomDetail* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatroomDetail* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatroomDetail& from);
  void MergeFrom(const ChatroomDetail& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatroomDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.chatroom.Crew members = 7;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 7;
  const ::outer::chatroom::Crew& members(int index) const;
  ::outer::chatroom::Crew* mutable_members(int index);
  ::outer::chatroom::Crew* add_members();
  ::google::protobuf::RepeatedPtrField< ::outer::chatroom::Crew >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::outer::chatroom::Crew >&
      members() const;

  // string owner_name = 1;
  void clear_owner_name();
  static const int kOwnerNameFieldNumber = 1;
  const ::std::string& owner_name() const;
  void set_owner_name(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_name(::std::string&& value);
  #endif
  void set_owner_name(const char* value);
  void set_owner_name(const char* value, size_t size);
  ::std::string* mutable_owner_name();
  ::std::string* release_owner_name();
  void set_allocated_owner_name(::std::string* owner_name);

  // string room_name = 2;
  void clear_room_name();
  static const int kRoomNameFieldNumber = 2;
  const ::std::string& room_name() const;
  void set_room_name(const ::std::string& value);
  #if LANG_CXX11
  void set_room_name(::std::string&& value);
  #endif
  void set_room_name(const char* value);
  void set_room_name(const char* value, size_t size);
  ::std::string* mutable_room_name();
  ::std::string* release_room_name();
  void set_allocated_room_name(::std::string* room_name);

  // string desc = 6;
  void clear_desc();
  static const int kDescFieldNumber = 6;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // uint64 room_id = 3;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // uint64 created = 5;
  void clear_created();
  static const int kCreatedFieldNumber = 5;
  ::google::protobuf::uint64 created() const;
  void set_created(::google::protobuf::uint64 value);

  // uint32 member_count = 4;
  void clear_member_count();
  static const int kMemberCountFieldNumber = 4;
  ::google::protobuf::uint32 member_count() const;
  void set_member_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.ChatroomDetail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::chatroom::Crew > members_;
  ::google::protobuf::internal::ArenaStringPtr owner_name_;
  ::google::protobuf::internal::ArenaStringPtr room_name_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::uint64 room_id_;
  ::google::protobuf::uint64 created_;
  ::google::protobuf::uint32 member_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsChatroomDetailImpl();
};
// -------------------------------------------------------------------

class ChatroomSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.ChatroomSignal) */ {
 public:
  ChatroomSignal();
  virtual ~ChatroomSignal();

  ChatroomSignal(const ChatroomSignal& from);

  inline ChatroomSignal& operator=(const ChatroomSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatroomSignal(ChatroomSignal&& from) noexcept
    : ChatroomSignal() {
    *this = ::std::move(from);
  }

  inline ChatroomSignal& operator=(ChatroomSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatroomSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatroomSignal* internal_default_instance() {
    return reinterpret_cast<const ChatroomSignal*>(
               &_ChatroomSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ChatroomSignal* other);
  friend void swap(ChatroomSignal& a, ChatroomSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatroomSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatroomSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatroomSignal& from);
  void MergeFrom(const ChatroomSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatroomSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.chatroom.Crew crew_info = 2;
  int crew_info_size() const;
  void clear_crew_info();
  static const int kCrewInfoFieldNumber = 2;
  const ::outer::chatroom::Crew& crew_info(int index) const;
  ::outer::chatroom::Crew* mutable_crew_info(int index);
  ::outer::chatroom::Crew* add_crew_info();
  ::google::protobuf::RepeatedPtrField< ::outer::chatroom::Crew >*
      mutable_crew_info();
  const ::google::protobuf::RepeatedPtrField< ::outer::chatroom::Crew >&
      crew_info() const;

  // .outer.chatroom.ChatroomDetail chatroom_info = 3;
  bool has_chatroom_info() const;
  void clear_chatroom_info();
  static const int kChatroomInfoFieldNumber = 3;
  const ::outer::chatroom::ChatroomDetail& chatroom_info() const;
  ::outer::chatroom::ChatroomDetail* release_chatroom_info();
  ::outer::chatroom::ChatroomDetail* mutable_chatroom_info();
  void set_allocated_chatroom_info(::outer::chatroom::ChatroomDetail* chatroom_info);

  // uint64 guid = 4;
  void clear_guid();
  static const int kGuidFieldNumber = 4;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // .outer.chatroom.ESignalType signal_type = 1;
  void clear_signal_type();
  static const int kSignalTypeFieldNumber = 1;
  ::outer::chatroom::ESignalType signal_type() const;
  void set_signal_type(::outer::chatroom::ESignalType value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.ChatroomSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::chatroom::Crew > crew_info_;
  ::outer::chatroom::ChatroomDetail* chatroom_info_;
  ::google::protobuf::uint64 guid_;
  int signal_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsChatroomSignalImpl();
};
// -------------------------------------------------------------------

class SearchRoomByNameRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.SearchRoomByNameRequest) */ {
 public:
  SearchRoomByNameRequest();
  virtual ~SearchRoomByNameRequest();

  SearchRoomByNameRequest(const SearchRoomByNameRequest& from);

  inline SearchRoomByNameRequest& operator=(const SearchRoomByNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchRoomByNameRequest(SearchRoomByNameRequest&& from) noexcept
    : SearchRoomByNameRequest() {
    *this = ::std::move(from);
  }

  inline SearchRoomByNameRequest& operator=(SearchRoomByNameRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRoomByNameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRoomByNameRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRoomByNameRequest*>(
               &_SearchRoomByNameRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SearchRoomByNameRequest* other);
  friend void swap(SearchRoomByNameRequest& a, SearchRoomByNameRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchRoomByNameRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchRoomByNameRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchRoomByNameRequest& from);
  void MergeFrom(const SearchRoomByNameRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchRoomByNameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string room_name = 3;
  void clear_room_name();
  static const int kRoomNameFieldNumber = 3;
  const ::std::string& room_name() const;
  void set_room_name(const ::std::string& value);
  #if LANG_CXX11
  void set_room_name(::std::string&& value);
  #endif
  void set_room_name(const char* value);
  void set_room_name(const char* value, size_t size);
  ::std::string* mutable_room_name();
  ::std::string* release_room_name();
  void set_allocated_room_name(::std::string* room_name);

  // @@protoc_insertion_point(class_scope:outer.chatroom.SearchRoomByNameRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr room_name_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSearchRoomByNameRequestImpl();
};
// -------------------------------------------------------------------

class SearchRoomByNameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.SearchRoomByNameResponse) */ {
 public:
  SearchRoomByNameResponse();
  virtual ~SearchRoomByNameResponse();

  SearchRoomByNameResponse(const SearchRoomByNameResponse& from);

  inline SearchRoomByNameResponse& operator=(const SearchRoomByNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchRoomByNameResponse(SearchRoomByNameResponse&& from) noexcept
    : SearchRoomByNameResponse() {
    *this = ::std::move(from);
  }

  inline SearchRoomByNameResponse& operator=(SearchRoomByNameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRoomByNameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRoomByNameResponse* internal_default_instance() {
    return reinterpret_cast<const SearchRoomByNameResponse*>(
               &_SearchRoomByNameResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SearchRoomByNameResponse* other);
  friend void swap(SearchRoomByNameResponse& a, SearchRoomByNameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchRoomByNameResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchRoomByNameResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchRoomByNameResponse& from);
  void MergeFrom(const SearchRoomByNameResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchRoomByNameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.chatroom.ChatroomInfo room_info = 1;
  int room_info_size() const;
  void clear_room_info();
  static const int kRoomInfoFieldNumber = 1;
  const ::outer::chatroom::ChatroomInfo& room_info(int index) const;
  ::outer::chatroom::ChatroomInfo* mutable_room_info(int index);
  ::outer::chatroom::ChatroomInfo* add_room_info();
  ::google::protobuf::RepeatedPtrField< ::outer::chatroom::ChatroomInfo >*
      mutable_room_info();
  const ::google::protobuf::RepeatedPtrField< ::outer::chatroom::ChatroomInfo >&
      room_info() const;

  // .common.errcode.EErrorCode ret = 2;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.SearchRoomByNameResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::chatroom::ChatroomInfo > room_info_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSearchRoomByNameResponseImpl();
};
// -------------------------------------------------------------------

class SearchRoomByIdRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.SearchRoomByIdRequest) */ {
 public:
  SearchRoomByIdRequest();
  virtual ~SearchRoomByIdRequest();

  SearchRoomByIdRequest(const SearchRoomByIdRequest& from);

  inline SearchRoomByIdRequest& operator=(const SearchRoomByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchRoomByIdRequest(SearchRoomByIdRequest&& from) noexcept
    : SearchRoomByIdRequest() {
    *this = ::std::move(from);
  }

  inline SearchRoomByIdRequest& operator=(SearchRoomByIdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRoomByIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRoomByIdRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRoomByIdRequest*>(
               &_SearchRoomByIdRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SearchRoomByIdRequest* other);
  friend void swap(SearchRoomByIdRequest& a, SearchRoomByIdRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchRoomByIdRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchRoomByIdRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchRoomByIdRequest& from);
  void MergeFrom(const SearchRoomByIdRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchRoomByIdRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // uint64 room_id = 3;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.SearchRoomByIdRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::uint64 room_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSearchRoomByIdRequestImpl();
};
// -------------------------------------------------------------------

class SearchRoomByIdResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.SearchRoomByIdResponse) */ {
 public:
  SearchRoomByIdResponse();
  virtual ~SearchRoomByIdResponse();

  SearchRoomByIdResponse(const SearchRoomByIdResponse& from);

  inline SearchRoomByIdResponse& operator=(const SearchRoomByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchRoomByIdResponse(SearchRoomByIdResponse&& from) noexcept
    : SearchRoomByIdResponse() {
    *this = ::std::move(from);
  }

  inline SearchRoomByIdResponse& operator=(SearchRoomByIdResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRoomByIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRoomByIdResponse* internal_default_instance() {
    return reinterpret_cast<const SearchRoomByIdResponse*>(
               &_SearchRoomByIdResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SearchRoomByIdResponse* other);
  friend void swap(SearchRoomByIdResponse& a, SearchRoomByIdResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchRoomByIdResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchRoomByIdResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchRoomByIdResponse& from);
  void MergeFrom(const SearchRoomByIdResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchRoomByIdResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.chatroom.ChatroomInfo room_info = 1;
  int room_info_size() const;
  void clear_room_info();
  static const int kRoomInfoFieldNumber = 1;
  const ::outer::chatroom::ChatroomInfo& room_info(int index) const;
  ::outer::chatroom::ChatroomInfo* mutable_room_info(int index);
  ::outer::chatroom::ChatroomInfo* add_room_info();
  ::google::protobuf::RepeatedPtrField< ::outer::chatroom::ChatroomInfo >*
      mutable_room_info();
  const ::google::protobuf::RepeatedPtrField< ::outer::chatroom::ChatroomInfo >&
      room_info() const;

  // .common.errcode.EErrorCode ret = 2;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.SearchRoomByIdResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::chatroom::ChatroomInfo > room_info_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSearchRoomByIdResponseImpl();
};
// -------------------------------------------------------------------

class GetRoomListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.GetRoomListRequest) */ {
 public:
  GetRoomListRequest();
  virtual ~GetRoomListRequest();

  GetRoomListRequest(const GetRoomListRequest& from);

  inline GetRoomListRequest& operator=(const GetRoomListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRoomListRequest(GetRoomListRequest&& from) noexcept
    : GetRoomListRequest() {
    *this = ::std::move(from);
  }

  inline GetRoomListRequest& operator=(GetRoomListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRoomListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRoomListRequest* internal_default_instance() {
    return reinterpret_cast<const GetRoomListRequest*>(
               &_GetRoomListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GetRoomListRequest* other);
  friend void swap(GetRoomListRequest& a, GetRoomListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRoomListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRoomListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRoomListRequest& from);
  void MergeFrom(const GetRoomListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRoomListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string modified = 3;
  void clear_modified();
  static const int kModifiedFieldNumber = 3;
  const ::std::string& modified() const;
  void set_modified(const ::std::string& value);
  #if LANG_CXX11
  void set_modified(::std::string&& value);
  #endif
  void set_modified(const char* value);
  void set_modified(const char* value, size_t size);
  ::std::string* mutable_modified();
  ::std::string* release_modified();
  void set_allocated_modified(::std::string* modified);

  // @@protoc_insertion_point(class_scope:outer.chatroom.GetRoomListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr modified_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsGetRoomListRequestImpl();
};
// -------------------------------------------------------------------

class GetRoomListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.GetRoomListResponse) */ {
 public:
  GetRoomListResponse();
  virtual ~GetRoomListResponse();

  GetRoomListResponse(const GetRoomListResponse& from);

  inline GetRoomListResponse& operator=(const GetRoomListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRoomListResponse(GetRoomListResponse&& from) noexcept
    : GetRoomListResponse() {
    *this = ::std::move(from);
  }

  inline GetRoomListResponse& operator=(GetRoomListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRoomListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRoomListResponse* internal_default_instance() {
    return reinterpret_cast<const GetRoomListResponse*>(
               &_GetRoomListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(GetRoomListResponse* other);
  friend void swap(GetRoomListResponse& a, GetRoomListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRoomListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetRoomListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetRoomListResponse& from);
  void MergeFrom(const GetRoomListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetRoomListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.chatroom.ChatroomInfo room_info = 1;
  int room_info_size() const;
  void clear_room_info();
  static const int kRoomInfoFieldNumber = 1;
  const ::outer::chatroom::ChatroomInfo& room_info(int index) const;
  ::outer::chatroom::ChatroomInfo* mutable_room_info(int index);
  ::outer::chatroom::ChatroomInfo* add_room_info();
  ::google::protobuf::RepeatedPtrField< ::outer::chatroom::ChatroomInfo >*
      mutable_room_info();
  const ::google::protobuf::RepeatedPtrField< ::outer::chatroom::ChatroomInfo >&
      room_info() const;

  // .common.errcode.EErrorCode ret = 2;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.GetRoomListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::chatroom::ChatroomInfo > room_info_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsGetRoomListResponseImpl();
};
// -------------------------------------------------------------------

class QueryRoomDetailRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.QueryRoomDetailRequest) */ {
 public:
  QueryRoomDetailRequest();
  virtual ~QueryRoomDetailRequest();

  QueryRoomDetailRequest(const QueryRoomDetailRequest& from);

  inline QueryRoomDetailRequest& operator=(const QueryRoomDetailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryRoomDetailRequest(QueryRoomDetailRequest&& from) noexcept
    : QueryRoomDetailRequest() {
    *this = ::std::move(from);
  }

  inline QueryRoomDetailRequest& operator=(QueryRoomDetailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRoomDetailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRoomDetailRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRoomDetailRequest*>(
               &_QueryRoomDetailRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(QueryRoomDetailRequest* other);
  friend void swap(QueryRoomDetailRequest& a, QueryRoomDetailRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryRoomDetailRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryRoomDetailRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryRoomDetailRequest& from);
  void MergeFrom(const QueryRoomDetailRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryRoomDetailRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // uint64 room_id = 3;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.QueryRoomDetailRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::uint64 room_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsQueryRoomDetailRequestImpl();
};
// -------------------------------------------------------------------

class QueryRoomDetailResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.QueryRoomDetailResponse) */ {
 public:
  QueryRoomDetailResponse();
  virtual ~QueryRoomDetailResponse();

  QueryRoomDetailResponse(const QueryRoomDetailResponse& from);

  inline QueryRoomDetailResponse& operator=(const QueryRoomDetailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryRoomDetailResponse(QueryRoomDetailResponse&& from) noexcept
    : QueryRoomDetailResponse() {
    *this = ::std::move(from);
  }

  inline QueryRoomDetailResponse& operator=(QueryRoomDetailResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRoomDetailResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRoomDetailResponse* internal_default_instance() {
    return reinterpret_cast<const QueryRoomDetailResponse*>(
               &_QueryRoomDetailResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(QueryRoomDetailResponse* other);
  friend void swap(QueryRoomDetailResponse& a, QueryRoomDetailResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryRoomDetailResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryRoomDetailResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryRoomDetailResponse& from);
  void MergeFrom(const QueryRoomDetailResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryRoomDetailResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .outer.chatroom.ChatroomDetail room_detail = 1;
  bool has_room_detail() const;
  void clear_room_detail();
  static const int kRoomDetailFieldNumber = 1;
  const ::outer::chatroom::ChatroomDetail& room_detail() const;
  ::outer::chatroom::ChatroomDetail* release_room_detail();
  ::outer::chatroom::ChatroomDetail* mutable_room_detail();
  void set_allocated_room_detail(::outer::chatroom::ChatroomDetail* room_detail);

  // .common.errcode.EErrorCode ret = 2;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.QueryRoomDetailResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::outer::chatroom::ChatroomDetail* room_detail_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsQueryRoomDetailResponseImpl();
};
// -------------------------------------------------------------------

class SetRoomInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.SetRoomInfoRequest) */ {
 public:
  SetRoomInfoRequest();
  virtual ~SetRoomInfoRequest();

  SetRoomInfoRequest(const SetRoomInfoRequest& from);

  inline SetRoomInfoRequest& operator=(const SetRoomInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetRoomInfoRequest(SetRoomInfoRequest&& from) noexcept
    : SetRoomInfoRequest() {
    *this = ::std::move(from);
  }

  inline SetRoomInfoRequest& operator=(SetRoomInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetRoomInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRoomInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SetRoomInfoRequest*>(
               &_SetRoomInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(SetRoomInfoRequest* other);
  friend void swap(SetRoomInfoRequest& a, SetRoomInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetRoomInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetRoomInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetRoomInfoRequest& from);
  void MergeFrom(const SetRoomInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetRoomInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_name = 1;
  void clear_from_name();
  static const int kFromNameFieldNumber = 1;
  const ::std::string& from_name() const;
  void set_from_name(const ::std::string& value);
  #if LANG_CXX11
  void set_from_name(::std::string&& value);
  #endif
  void set_from_name(const char* value);
  void set_from_name(const char* value, size_t size);
  ::std::string* mutable_from_name();
  ::std::string* release_from_name();
  void set_allocated_from_name(::std::string* from_name);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string room_name = 4;
  void clear_room_name();
  static const int kRoomNameFieldNumber = 4;
  const ::std::string& room_name() const;
  void set_room_name(const ::std::string& value);
  #if LANG_CXX11
  void set_room_name(::std::string&& value);
  #endif
  void set_room_name(const char* value);
  void set_room_name(const char* value, size_t size);
  ::std::string* mutable_room_name();
  ::std::string* release_room_name();
  void set_allocated_room_name(::std::string* room_name);

  // uint64 room_id = 3;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.SetRoomInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_name_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr room_name_;
  ::google::protobuf::uint64 room_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSetRoomInfoRequestImpl();
};
// -------------------------------------------------------------------

class SetRoomInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.SetRoomInfoResponse) */ {
 public:
  SetRoomInfoResponse();
  virtual ~SetRoomInfoResponse();

  SetRoomInfoResponse(const SetRoomInfoResponse& from);

  inline SetRoomInfoResponse& operator=(const SetRoomInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetRoomInfoResponse(SetRoomInfoResponse&& from) noexcept
    : SetRoomInfoResponse() {
    *this = ::std::move(from);
  }

  inline SetRoomInfoResponse& operator=(SetRoomInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetRoomInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRoomInfoResponse* internal_default_instance() {
    return reinterpret_cast<const SetRoomInfoResponse*>(
               &_SetRoomInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(SetRoomInfoResponse* other);
  friend void swap(SetRoomInfoResponse& a, SetRoomInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetRoomInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SetRoomInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetRoomInfoResponse& from);
  void MergeFrom(const SetRoomInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetRoomInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.SetRoomInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSetRoomInfoResponseImpl();
};
// -------------------------------------------------------------------

class AddMemberToRoomRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.AddMemberToRoomRequest) */ {
 public:
  AddMemberToRoomRequest();
  virtual ~AddMemberToRoomRequest();

  AddMemberToRoomRequest(const AddMemberToRoomRequest& from);

  inline AddMemberToRoomRequest& operator=(const AddMemberToRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddMemberToRoomRequest(AddMemberToRoomRequest&& from) noexcept
    : AddMemberToRoomRequest() {
    *this = ::std::move(from);
  }

  inline AddMemberToRoomRequest& operator=(AddMemberToRoomRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMemberToRoomRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddMemberToRoomRequest* internal_default_instance() {
    return reinterpret_cast<const AddMemberToRoomRequest*>(
               &_AddMemberToRoomRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(AddMemberToRoomRequest* other);
  friend void swap(AddMemberToRoomRequest& a, AddMemberToRoomRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddMemberToRoomRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddMemberToRoomRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddMemberToRoomRequest& from);
  void MergeFrom(const AddMemberToRoomRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddMemberToRoomRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string invitee_name = 3;
  int invitee_name_size() const;
  void clear_invitee_name();
  static const int kInviteeNameFieldNumber = 3;
  const ::std::string& invitee_name(int index) const;
  ::std::string* mutable_invitee_name(int index);
  void set_invitee_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_invitee_name(int index, ::std::string&& value);
  #endif
  void set_invitee_name(int index, const char* value);
  void set_invitee_name(int index, const char* value, size_t size);
  ::std::string* add_invitee_name();
  void add_invitee_name(const ::std::string& value);
  #if LANG_CXX11
  void add_invitee_name(::std::string&& value);
  #endif
  void add_invitee_name(const char* value);
  void add_invitee_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& invitee_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_invitee_name();

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // uint64 room_id = 4;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 4;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.AddMemberToRoomRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> invitee_name_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::uint64 room_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsAddMemberToRoomRequestImpl();
};
// -------------------------------------------------------------------

class AddMemberToRoomResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.AddMemberToRoomResponse) */ {
 public:
  AddMemberToRoomResponse();
  virtual ~AddMemberToRoomResponse();

  AddMemberToRoomResponse(const AddMemberToRoomResponse& from);

  inline AddMemberToRoomResponse& operator=(const AddMemberToRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddMemberToRoomResponse(AddMemberToRoomResponse&& from) noexcept
    : AddMemberToRoomResponse() {
    *this = ::std::move(from);
  }

  inline AddMemberToRoomResponse& operator=(AddMemberToRoomResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMemberToRoomResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddMemberToRoomResponse* internal_default_instance() {
    return reinterpret_cast<const AddMemberToRoomResponse*>(
               &_AddMemberToRoomResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(AddMemberToRoomResponse* other);
  friend void swap(AddMemberToRoomResponse& a, AddMemberToRoomResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddMemberToRoomResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AddMemberToRoomResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddMemberToRoomResponse& from);
  void MergeFrom(const AddMemberToRoomResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddMemberToRoomResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.AddMemberToRoomResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsAddMemberToRoomResponseImpl();
};
// -------------------------------------------------------------------

class JoinRoomRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.JoinRoomRequest) */ {
 public:
  JoinRoomRequest();
  virtual ~JoinRoomRequest();

  JoinRoomRequest(const JoinRoomRequest& from);

  inline JoinRoomRequest& operator=(const JoinRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoinRoomRequest(JoinRoomRequest&& from) noexcept
    : JoinRoomRequest() {
    *this = ::std::move(from);
  }

  inline JoinRoomRequest& operator=(JoinRoomRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinRoomRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinRoomRequest* internal_default_instance() {
    return reinterpret_cast<const JoinRoomRequest*>(
               &_JoinRoomRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(JoinRoomRequest* other);
  friend void swap(JoinRoomRequest& a, JoinRoomRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinRoomRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinRoomRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JoinRoomRequest& from);
  void MergeFrom(const JoinRoomRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinRoomRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // uint64 room_id = 3;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.JoinRoomRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::uint64 room_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsJoinRoomRequestImpl();
};
// -------------------------------------------------------------------

class JoinRoomResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.JoinRoomResponse) */ {
 public:
  JoinRoomResponse();
  virtual ~JoinRoomResponse();

  JoinRoomResponse(const JoinRoomResponse& from);

  inline JoinRoomResponse& operator=(const JoinRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoinRoomResponse(JoinRoomResponse&& from) noexcept
    : JoinRoomResponse() {
    *this = ::std::move(from);
  }

  inline JoinRoomResponse& operator=(JoinRoomResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinRoomResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinRoomResponse* internal_default_instance() {
    return reinterpret_cast<const JoinRoomResponse*>(
               &_JoinRoomResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(JoinRoomResponse* other);
  friend void swap(JoinRoomResponse& a, JoinRoomResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinRoomResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinRoomResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JoinRoomResponse& from);
  void MergeFrom(const JoinRoomResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinRoomResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.JoinRoomResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsJoinRoomResponseImpl();
};
// -------------------------------------------------------------------

class ExitRoomRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.ExitRoomRequest) */ {
 public:
  ExitRoomRequest();
  virtual ~ExitRoomRequest();

  ExitRoomRequest(const ExitRoomRequest& from);

  inline ExitRoomRequest& operator=(const ExitRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExitRoomRequest(ExitRoomRequest&& from) noexcept
    : ExitRoomRequest() {
    *this = ::std::move(from);
  }

  inline ExitRoomRequest& operator=(ExitRoomRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitRoomRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExitRoomRequest* internal_default_instance() {
    return reinterpret_cast<const ExitRoomRequest*>(
               &_ExitRoomRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(ExitRoomRequest* other);
  friend void swap(ExitRoomRequest& a, ExitRoomRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExitRoomRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ExitRoomRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExitRoomRequest& from);
  void MergeFrom(const ExitRoomRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExitRoomRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // uint64 room_id = 3;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.ExitRoomRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::uint64 room_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsExitRoomRequestImpl();
};
// -------------------------------------------------------------------

class ExitRoomResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.ExitRoomResponse) */ {
 public:
  ExitRoomResponse();
  virtual ~ExitRoomResponse();

  ExitRoomResponse(const ExitRoomResponse& from);

  inline ExitRoomResponse& operator=(const ExitRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExitRoomResponse(ExitRoomResponse&& from) noexcept
    : ExitRoomResponse() {
    *this = ::std::move(from);
  }

  inline ExitRoomResponse& operator=(ExitRoomResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitRoomResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExitRoomResponse* internal_default_instance() {
    return reinterpret_cast<const ExitRoomResponse*>(
               &_ExitRoomResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(ExitRoomResponse* other);
  friend void swap(ExitRoomResponse& a, ExitRoomResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExitRoomResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ExitRoomResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExitRoomResponse& from);
  void MergeFrom(const ExitRoomResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExitRoomResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.ExitRoomResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsExitRoomResponseImpl();
};
// -------------------------------------------------------------------

class GetTotalMemberCountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.GetTotalMemberCountRequest) */ {
 public:
  GetTotalMemberCountRequest();
  virtual ~GetTotalMemberCountRequest();

  GetTotalMemberCountRequest(const GetTotalMemberCountRequest& from);

  inline GetTotalMemberCountRequest& operator=(const GetTotalMemberCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTotalMemberCountRequest(GetTotalMemberCountRequest&& from) noexcept
    : GetTotalMemberCountRequest() {
    *this = ::std::move(from);
  }

  inline GetTotalMemberCountRequest& operator=(GetTotalMemberCountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTotalMemberCountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTotalMemberCountRequest* internal_default_instance() {
    return reinterpret_cast<const GetTotalMemberCountRequest*>(
               &_GetTotalMemberCountRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(GetTotalMemberCountRequest* other);
  friend void swap(GetTotalMemberCountRequest& a, GetTotalMemberCountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTotalMemberCountRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetTotalMemberCountRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetTotalMemberCountRequest& from);
  void MergeFrom(const GetTotalMemberCountRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetTotalMemberCountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // uint64 room_id = 3;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.GetTotalMemberCountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::uint64 room_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsGetTotalMemberCountRequestImpl();
};
// -------------------------------------------------------------------

class GetTotalMemberCountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.GetTotalMemberCountResponse) */ {
 public:
  GetTotalMemberCountResponse();
  virtual ~GetTotalMemberCountResponse();

  GetTotalMemberCountResponse(const GetTotalMemberCountResponse& from);

  inline GetTotalMemberCountResponse& operator=(const GetTotalMemberCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTotalMemberCountResponse(GetTotalMemberCountResponse&& from) noexcept
    : GetTotalMemberCountResponse() {
    *this = ::std::move(from);
  }

  inline GetTotalMemberCountResponse& operator=(GetTotalMemberCountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTotalMemberCountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTotalMemberCountResponse* internal_default_instance() {
    return reinterpret_cast<const GetTotalMemberCountResponse*>(
               &_GetTotalMemberCountResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(GetTotalMemberCountResponse* other);
  friend void swap(GetTotalMemberCountResponse& a, GetTotalMemberCountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTotalMemberCountResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetTotalMemberCountResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetTotalMemberCountResponse& from);
  void MergeFrom(const GetTotalMemberCountResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetTotalMemberCountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 member_count = 1;
  void clear_member_count();
  static const int kMemberCountFieldNumber = 1;
  ::google::protobuf::uint64 member_count() const;
  void set_member_count(::google::protobuf::uint64 value);

  // .common.errcode.EErrorCode ret = 2;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.GetTotalMemberCountResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 member_count_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsGetTotalMemberCountResponseImpl();
};
// -------------------------------------------------------------------

class SendRoomMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.SendRoomMessageRequest) */ {
 public:
  SendRoomMessageRequest();
  virtual ~SendRoomMessageRequest();

  SendRoomMessageRequest(const SendRoomMessageRequest& from);

  inline SendRoomMessageRequest& operator=(const SendRoomMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendRoomMessageRequest(SendRoomMessageRequest&& from) noexcept
    : SendRoomMessageRequest() {
    *this = ::std::move(from);
  }

  inline SendRoomMessageRequest& operator=(SendRoomMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendRoomMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendRoomMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SendRoomMessageRequest*>(
               &_SendRoomMessageRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(SendRoomMessageRequest* other);
  friend void swap(SendRoomMessageRequest& a, SendRoomMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendRoomMessageRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SendRoomMessageRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendRoomMessageRequest& from);
  void MergeFrom(const SendRoomMessageRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendRoomMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint64 room_id = 3;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::uint64 room_id() const;
  void set_room_id(::google::protobuf::uint64 value);

  // .outer.chatroom.EMsgType msg_type = 4;
  void clear_msg_type();
  static const int kMsgTypeFieldNumber = 4;
  ::outer::chatroom::EMsgType msg_type() const;
  void set_msg_type(::outer::chatroom::EMsgType value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.SendRoomMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 room_id_;
  int msg_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSendRoomMessageRequestImpl();
};
// -------------------------------------------------------------------

class SendRoomMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chatroom.SendRoomMessageResponse) */ {
 public:
  SendRoomMessageResponse();
  virtual ~SendRoomMessageResponse();

  SendRoomMessageResponse(const SendRoomMessageResponse& from);

  inline SendRoomMessageResponse& operator=(const SendRoomMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendRoomMessageResponse(SendRoomMessageResponse&& from) noexcept
    : SendRoomMessageResponse() {
    *this = ::std::move(from);
  }

  inline SendRoomMessageResponse& operator=(SendRoomMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendRoomMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendRoomMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SendRoomMessageResponse*>(
               &_SendRoomMessageResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(SendRoomMessageResponse* other);
  friend void swap(SendRoomMessageResponse& a, SendRoomMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendRoomMessageResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SendRoomMessageResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendRoomMessageResponse& from);
  void MergeFrom(const SendRoomMessageResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendRoomMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.chatroom.SendRoomMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchatroom_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSendRoomMessageResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatroomInfo

// string room_name = 1;
inline void ChatroomInfo::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatroomInfo::room_name() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.ChatroomInfo.room_name)
  return room_name_.GetNoArena();
}
inline void ChatroomInfo::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.ChatroomInfo.room_name)
}
#if LANG_CXX11
inline void ChatroomInfo::set_room_name(::std::string&& value) {
  
  room_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.ChatroomInfo.room_name)
}
#endif
inline void ChatroomInfo::set_room_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.ChatroomInfo.room_name)
}
inline void ChatroomInfo::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.ChatroomInfo.room_name)
}
inline ::std::string* ChatroomInfo::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.ChatroomInfo.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatroomInfo::release_room_name() {
  // @@protoc_insertion_point(field_release:outer.chatroom.ChatroomInfo.room_name)
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatroomInfo::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.ChatroomInfo.room_name)
}

// uint64 room_id = 2;
inline void ChatroomInfo::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChatroomInfo::room_id() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.ChatroomInfo.room_id)
  return room_id_;
}
inline void ChatroomInfo::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.ChatroomInfo.room_id)
}

// -------------------------------------------------------------------

// Crew

// string username = 1;
inline void Crew::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Crew::username() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.Crew.username)
  return username_.GetNoArena();
}
inline void Crew::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.Crew.username)
}
#if LANG_CXX11
inline void Crew::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.Crew.username)
}
#endif
inline void Crew::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.Crew.username)
}
inline void Crew::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.Crew.username)
}
inline ::std::string* Crew::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.Crew.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Crew::release_username() {
  // @@protoc_insertion_point(field_release:outer.chatroom.Crew.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Crew::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.Crew.username)
}

// string appkey = 2;
inline void Crew::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Crew::appkey() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.Crew.appkey)
  return appkey_.GetNoArena();
}
inline void Crew::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.Crew.appkey)
}
#if LANG_CXX11
inline void Crew::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.Crew.appkey)
}
#endif
inline void Crew::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.Crew.appkey)
}
inline void Crew::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.Crew.appkey)
}
inline ::std::string* Crew::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.Crew.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Crew::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.chatroom.Crew.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Crew::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.Crew.appkey)
}

// string nick = 3;
inline void Crew::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Crew::nick() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.Crew.nick)
  return nick_.GetNoArena();
}
inline void Crew::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.Crew.nick)
}
#if LANG_CXX11
inline void Crew::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.Crew.nick)
}
#endif
inline void Crew::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.Crew.nick)
}
inline void Crew::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.Crew.nick)
}
inline ::std::string* Crew::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.Crew.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Crew::release_nick() {
  // @@protoc_insertion_point(field_release:outer.chatroom.Crew.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Crew::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.Crew.nick)
}

// .outer.chatroom.ERole role = 4;
inline void Crew::clear_role() {
  role_ = 0;
}
inline ::outer::chatroom::ERole Crew::role() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.Crew.role)
  return static_cast< ::outer::chatroom::ERole >(role_);
}
inline void Crew::set_role(::outer::chatroom::ERole value) {
  
  role_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.Crew.role)
}

// string modified = 5;
inline void Crew::clear_modified() {
  modified_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Crew::modified() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.Crew.modified)
  return modified_.GetNoArena();
}
inline void Crew::set_modified(const ::std::string& value) {
  
  modified_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.Crew.modified)
}
#if LANG_CXX11
inline void Crew::set_modified(::std::string&& value) {
  
  modified_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.Crew.modified)
}
#endif
inline void Crew::set_modified(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  modified_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.Crew.modified)
}
inline void Crew::set_modified(const char* value, size_t size) {
  
  modified_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.Crew.modified)
}
inline ::std::string* Crew::mutable_modified() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.Crew.modified)
  return modified_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Crew::release_modified() {
  // @@protoc_insertion_point(field_release:outer.chatroom.Crew.modified)
  
  return modified_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Crew::set_allocated_modified(::std::string* modified) {
  if (modified != NULL) {
    
  } else {
    
  }
  modified_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modified);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.Crew.modified)
}

// -------------------------------------------------------------------

// ChatroomDetail

// string owner_name = 1;
inline void ChatroomDetail::clear_owner_name() {
  owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatroomDetail::owner_name() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.ChatroomDetail.owner_name)
  return owner_name_.GetNoArena();
}
inline void ChatroomDetail::set_owner_name(const ::std::string& value) {
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.ChatroomDetail.owner_name)
}
#if LANG_CXX11
inline void ChatroomDetail::set_owner_name(::std::string&& value) {
  
  owner_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.ChatroomDetail.owner_name)
}
#endif
inline void ChatroomDetail::set_owner_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.ChatroomDetail.owner_name)
}
inline void ChatroomDetail::set_owner_name(const char* value, size_t size) {
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.ChatroomDetail.owner_name)
}
inline ::std::string* ChatroomDetail::mutable_owner_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.ChatroomDetail.owner_name)
  return owner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatroomDetail::release_owner_name() {
  // @@protoc_insertion_point(field_release:outer.chatroom.ChatroomDetail.owner_name)
  
  return owner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatroomDetail::set_allocated_owner_name(::std::string* owner_name) {
  if (owner_name != NULL) {
    
  } else {
    
  }
  owner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_name);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.ChatroomDetail.owner_name)
}

// string room_name = 2;
inline void ChatroomDetail::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatroomDetail::room_name() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.ChatroomDetail.room_name)
  return room_name_.GetNoArena();
}
inline void ChatroomDetail::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.ChatroomDetail.room_name)
}
#if LANG_CXX11
inline void ChatroomDetail::set_room_name(::std::string&& value) {
  
  room_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.ChatroomDetail.room_name)
}
#endif
inline void ChatroomDetail::set_room_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.ChatroomDetail.room_name)
}
inline void ChatroomDetail::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.ChatroomDetail.room_name)
}
inline ::std::string* ChatroomDetail::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.ChatroomDetail.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatroomDetail::release_room_name() {
  // @@protoc_insertion_point(field_release:outer.chatroom.ChatroomDetail.room_name)
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatroomDetail::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.ChatroomDetail.room_name)
}

// uint64 room_id = 3;
inline void ChatroomDetail::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChatroomDetail::room_id() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.ChatroomDetail.room_id)
  return room_id_;
}
inline void ChatroomDetail::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.ChatroomDetail.room_id)
}

// uint32 member_count = 4;
inline void ChatroomDetail::clear_member_count() {
  member_count_ = 0u;
}
inline ::google::protobuf::uint32 ChatroomDetail::member_count() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.ChatroomDetail.member_count)
  return member_count_;
}
inline void ChatroomDetail::set_member_count(::google::protobuf::uint32 value) {
  
  member_count_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.ChatroomDetail.member_count)
}

// uint64 created = 5;
inline void ChatroomDetail::clear_created() {
  created_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChatroomDetail::created() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.ChatroomDetail.created)
  return created_;
}
inline void ChatroomDetail::set_created(::google::protobuf::uint64 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.ChatroomDetail.created)
}

// string desc = 6;
inline void ChatroomDetail::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatroomDetail::desc() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.ChatroomDetail.desc)
  return desc_.GetNoArena();
}
inline void ChatroomDetail::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.ChatroomDetail.desc)
}
#if LANG_CXX11
inline void ChatroomDetail::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.ChatroomDetail.desc)
}
#endif
inline void ChatroomDetail::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.ChatroomDetail.desc)
}
inline void ChatroomDetail::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.ChatroomDetail.desc)
}
inline ::std::string* ChatroomDetail::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.ChatroomDetail.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatroomDetail::release_desc() {
  // @@protoc_insertion_point(field_release:outer.chatroom.ChatroomDetail.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatroomDetail::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.ChatroomDetail.desc)
}

// repeated .outer.chatroom.Crew members = 7;
inline int ChatroomDetail::members_size() const {
  return members_.size();
}
inline void ChatroomDetail::clear_members() {
  members_.Clear();
}
inline const ::outer::chatroom::Crew& ChatroomDetail::members(int index) const {
  // @@protoc_insertion_point(field_get:outer.chatroom.ChatroomDetail.members)
  return members_.Get(index);
}
inline ::outer::chatroom::Crew* ChatroomDetail::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:outer.chatroom.ChatroomDetail.members)
  return members_.Mutable(index);
}
inline ::outer::chatroom::Crew* ChatroomDetail::add_members() {
  // @@protoc_insertion_point(field_add:outer.chatroom.ChatroomDetail.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::chatroom::Crew >*
ChatroomDetail::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:outer.chatroom.ChatroomDetail.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::chatroom::Crew >&
ChatroomDetail::members() const {
  // @@protoc_insertion_point(field_list:outer.chatroom.ChatroomDetail.members)
  return members_;
}

// -------------------------------------------------------------------

// ChatroomSignal

// .outer.chatroom.ESignalType signal_type = 1;
inline void ChatroomSignal::clear_signal_type() {
  signal_type_ = 0;
}
inline ::outer::chatroom::ESignalType ChatroomSignal::signal_type() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.ChatroomSignal.signal_type)
  return static_cast< ::outer::chatroom::ESignalType >(signal_type_);
}
inline void ChatroomSignal::set_signal_type(::outer::chatroom::ESignalType value) {
  
  signal_type_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.ChatroomSignal.signal_type)
}

// repeated .outer.chatroom.Crew crew_info = 2;
inline int ChatroomSignal::crew_info_size() const {
  return crew_info_.size();
}
inline void ChatroomSignal::clear_crew_info() {
  crew_info_.Clear();
}
inline const ::outer::chatroom::Crew& ChatroomSignal::crew_info(int index) const {
  // @@protoc_insertion_point(field_get:outer.chatroom.ChatroomSignal.crew_info)
  return crew_info_.Get(index);
}
inline ::outer::chatroom::Crew* ChatroomSignal::mutable_crew_info(int index) {
  // @@protoc_insertion_point(field_mutable:outer.chatroom.ChatroomSignal.crew_info)
  return crew_info_.Mutable(index);
}
inline ::outer::chatroom::Crew* ChatroomSignal::add_crew_info() {
  // @@protoc_insertion_point(field_add:outer.chatroom.ChatroomSignal.crew_info)
  return crew_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::chatroom::Crew >*
ChatroomSignal::mutable_crew_info() {
  // @@protoc_insertion_point(field_mutable_list:outer.chatroom.ChatroomSignal.crew_info)
  return &crew_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::chatroom::Crew >&
ChatroomSignal::crew_info() const {
  // @@protoc_insertion_point(field_list:outer.chatroom.ChatroomSignal.crew_info)
  return crew_info_;
}

// .outer.chatroom.ChatroomDetail chatroom_info = 3;
inline bool ChatroomSignal::has_chatroom_info() const {
  return this != internal_default_instance() && chatroom_info_ != NULL;
}
inline void ChatroomSignal::clear_chatroom_info() {
  if (GetArenaNoVirtual() == NULL && chatroom_info_ != NULL) {
    delete chatroom_info_;
  }
  chatroom_info_ = NULL;
}
inline const ::outer::chatroom::ChatroomDetail& ChatroomSignal::chatroom_info() const {
  const ::outer::chatroom::ChatroomDetail* p = chatroom_info_;
  // @@protoc_insertion_point(field_get:outer.chatroom.ChatroomSignal.chatroom_info)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::chatroom::ChatroomDetail*>(
      &::outer::chatroom::_ChatroomDetail_default_instance_);
}
inline ::outer::chatroom::ChatroomDetail* ChatroomSignal::release_chatroom_info() {
  // @@protoc_insertion_point(field_release:outer.chatroom.ChatroomSignal.chatroom_info)
  
  ::outer::chatroom::ChatroomDetail* temp = chatroom_info_;
  chatroom_info_ = NULL;
  return temp;
}
inline ::outer::chatroom::ChatroomDetail* ChatroomSignal::mutable_chatroom_info() {
  
  if (chatroom_info_ == NULL) {
    chatroom_info_ = new ::outer::chatroom::ChatroomDetail;
  }
  // @@protoc_insertion_point(field_mutable:outer.chatroom.ChatroomSignal.chatroom_info)
  return chatroom_info_;
}
inline void ChatroomSignal::set_allocated_chatroom_info(::outer::chatroom::ChatroomDetail* chatroom_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete chatroom_info_;
  }
  if (chatroom_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      chatroom_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chatroom_info, submessage_arena);
    }
    
  } else {
    
  }
  chatroom_info_ = chatroom_info;
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.ChatroomSignal.chatroom_info)
}

// uint64 guid = 4;
inline void ChatroomSignal::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChatroomSignal::guid() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.ChatroomSignal.guid)
  return guid_;
}
inline void ChatroomSignal::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.ChatroomSignal.guid)
}

// -------------------------------------------------------------------

// SearchRoomByNameRequest

// string from_username = 1;
inline void SearchRoomByNameRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchRoomByNameRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SearchRoomByNameRequest.from_username)
  return from_username_.GetNoArena();
}
inline void SearchRoomByNameRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.SearchRoomByNameRequest.from_username)
}
#if LANG_CXX11
inline void SearchRoomByNameRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.SearchRoomByNameRequest.from_username)
}
#endif
inline void SearchRoomByNameRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.SearchRoomByNameRequest.from_username)
}
inline void SearchRoomByNameRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.SearchRoomByNameRequest.from_username)
}
inline ::std::string* SearchRoomByNameRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.SearchRoomByNameRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRoomByNameRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.chatroom.SearchRoomByNameRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRoomByNameRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.SearchRoomByNameRequest.from_username)
}

// string appkey = 2;
inline void SearchRoomByNameRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchRoomByNameRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SearchRoomByNameRequest.appkey)
  return appkey_.GetNoArena();
}
inline void SearchRoomByNameRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.SearchRoomByNameRequest.appkey)
}
#if LANG_CXX11
inline void SearchRoomByNameRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.SearchRoomByNameRequest.appkey)
}
#endif
inline void SearchRoomByNameRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.SearchRoomByNameRequest.appkey)
}
inline void SearchRoomByNameRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.SearchRoomByNameRequest.appkey)
}
inline ::std::string* SearchRoomByNameRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.SearchRoomByNameRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRoomByNameRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.chatroom.SearchRoomByNameRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRoomByNameRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.SearchRoomByNameRequest.appkey)
}

// string room_name = 3;
inline void SearchRoomByNameRequest::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchRoomByNameRequest::room_name() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SearchRoomByNameRequest.room_name)
  return room_name_.GetNoArena();
}
inline void SearchRoomByNameRequest::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.SearchRoomByNameRequest.room_name)
}
#if LANG_CXX11
inline void SearchRoomByNameRequest::set_room_name(::std::string&& value) {
  
  room_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.SearchRoomByNameRequest.room_name)
}
#endif
inline void SearchRoomByNameRequest::set_room_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.SearchRoomByNameRequest.room_name)
}
inline void SearchRoomByNameRequest::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.SearchRoomByNameRequest.room_name)
}
inline ::std::string* SearchRoomByNameRequest::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.SearchRoomByNameRequest.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRoomByNameRequest::release_room_name() {
  // @@protoc_insertion_point(field_release:outer.chatroom.SearchRoomByNameRequest.room_name)
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRoomByNameRequest::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.SearchRoomByNameRequest.room_name)
}

// -------------------------------------------------------------------

// SearchRoomByNameResponse

// repeated .outer.chatroom.ChatroomInfo room_info = 1;
inline int SearchRoomByNameResponse::room_info_size() const {
  return room_info_.size();
}
inline void SearchRoomByNameResponse::clear_room_info() {
  room_info_.Clear();
}
inline const ::outer::chatroom::ChatroomInfo& SearchRoomByNameResponse::room_info(int index) const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SearchRoomByNameResponse.room_info)
  return room_info_.Get(index);
}
inline ::outer::chatroom::ChatroomInfo* SearchRoomByNameResponse::mutable_room_info(int index) {
  // @@protoc_insertion_point(field_mutable:outer.chatroom.SearchRoomByNameResponse.room_info)
  return room_info_.Mutable(index);
}
inline ::outer::chatroom::ChatroomInfo* SearchRoomByNameResponse::add_room_info() {
  // @@protoc_insertion_point(field_add:outer.chatroom.SearchRoomByNameResponse.room_info)
  return room_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::chatroom::ChatroomInfo >*
SearchRoomByNameResponse::mutable_room_info() {
  // @@protoc_insertion_point(field_mutable_list:outer.chatroom.SearchRoomByNameResponse.room_info)
  return &room_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::chatroom::ChatroomInfo >&
SearchRoomByNameResponse::room_info() const {
  // @@protoc_insertion_point(field_list:outer.chatroom.SearchRoomByNameResponse.room_info)
  return room_info_;
}

// .common.errcode.EErrorCode ret = 2;
inline void SearchRoomByNameResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode SearchRoomByNameResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SearchRoomByNameResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void SearchRoomByNameResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.SearchRoomByNameResponse.ret)
}

// -------------------------------------------------------------------

// SearchRoomByIdRequest

// string from_username = 1;
inline void SearchRoomByIdRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchRoomByIdRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SearchRoomByIdRequest.from_username)
  return from_username_.GetNoArena();
}
inline void SearchRoomByIdRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.SearchRoomByIdRequest.from_username)
}
#if LANG_CXX11
inline void SearchRoomByIdRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.SearchRoomByIdRequest.from_username)
}
#endif
inline void SearchRoomByIdRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.SearchRoomByIdRequest.from_username)
}
inline void SearchRoomByIdRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.SearchRoomByIdRequest.from_username)
}
inline ::std::string* SearchRoomByIdRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.SearchRoomByIdRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRoomByIdRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.chatroom.SearchRoomByIdRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRoomByIdRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.SearchRoomByIdRequest.from_username)
}

// string appkey = 2;
inline void SearchRoomByIdRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchRoomByIdRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SearchRoomByIdRequest.appkey)
  return appkey_.GetNoArena();
}
inline void SearchRoomByIdRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.SearchRoomByIdRequest.appkey)
}
#if LANG_CXX11
inline void SearchRoomByIdRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.SearchRoomByIdRequest.appkey)
}
#endif
inline void SearchRoomByIdRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.SearchRoomByIdRequest.appkey)
}
inline void SearchRoomByIdRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.SearchRoomByIdRequest.appkey)
}
inline ::std::string* SearchRoomByIdRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.SearchRoomByIdRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRoomByIdRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.chatroom.SearchRoomByIdRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRoomByIdRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.SearchRoomByIdRequest.appkey)
}

// uint64 room_id = 3;
inline void SearchRoomByIdRequest::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SearchRoomByIdRequest::room_id() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SearchRoomByIdRequest.room_id)
  return room_id_;
}
inline void SearchRoomByIdRequest::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.SearchRoomByIdRequest.room_id)
}

// -------------------------------------------------------------------

// SearchRoomByIdResponse

// repeated .outer.chatroom.ChatroomInfo room_info = 1;
inline int SearchRoomByIdResponse::room_info_size() const {
  return room_info_.size();
}
inline void SearchRoomByIdResponse::clear_room_info() {
  room_info_.Clear();
}
inline const ::outer::chatroom::ChatroomInfo& SearchRoomByIdResponse::room_info(int index) const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SearchRoomByIdResponse.room_info)
  return room_info_.Get(index);
}
inline ::outer::chatroom::ChatroomInfo* SearchRoomByIdResponse::mutable_room_info(int index) {
  // @@protoc_insertion_point(field_mutable:outer.chatroom.SearchRoomByIdResponse.room_info)
  return room_info_.Mutable(index);
}
inline ::outer::chatroom::ChatroomInfo* SearchRoomByIdResponse::add_room_info() {
  // @@protoc_insertion_point(field_add:outer.chatroom.SearchRoomByIdResponse.room_info)
  return room_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::chatroom::ChatroomInfo >*
SearchRoomByIdResponse::mutable_room_info() {
  // @@protoc_insertion_point(field_mutable_list:outer.chatroom.SearchRoomByIdResponse.room_info)
  return &room_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::chatroom::ChatroomInfo >&
SearchRoomByIdResponse::room_info() const {
  // @@protoc_insertion_point(field_list:outer.chatroom.SearchRoomByIdResponse.room_info)
  return room_info_;
}

// .common.errcode.EErrorCode ret = 2;
inline void SearchRoomByIdResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode SearchRoomByIdResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SearchRoomByIdResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void SearchRoomByIdResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.SearchRoomByIdResponse.ret)
}

// -------------------------------------------------------------------

// GetRoomListRequest

// string from_username = 1;
inline void GetRoomListRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRoomListRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.GetRoomListRequest.from_username)
  return from_username_.GetNoArena();
}
inline void GetRoomListRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.GetRoomListRequest.from_username)
}
#if LANG_CXX11
inline void GetRoomListRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.GetRoomListRequest.from_username)
}
#endif
inline void GetRoomListRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.GetRoomListRequest.from_username)
}
inline void GetRoomListRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.GetRoomListRequest.from_username)
}
inline ::std::string* GetRoomListRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.GetRoomListRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRoomListRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.chatroom.GetRoomListRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRoomListRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.GetRoomListRequest.from_username)
}

// string appkey = 2;
inline void GetRoomListRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRoomListRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.GetRoomListRequest.appkey)
  return appkey_.GetNoArena();
}
inline void GetRoomListRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.GetRoomListRequest.appkey)
}
#if LANG_CXX11
inline void GetRoomListRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.GetRoomListRequest.appkey)
}
#endif
inline void GetRoomListRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.GetRoomListRequest.appkey)
}
inline void GetRoomListRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.GetRoomListRequest.appkey)
}
inline ::std::string* GetRoomListRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.GetRoomListRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRoomListRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.chatroom.GetRoomListRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRoomListRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.GetRoomListRequest.appkey)
}

// string modified = 3;
inline void GetRoomListRequest::clear_modified() {
  modified_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRoomListRequest::modified() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.GetRoomListRequest.modified)
  return modified_.GetNoArena();
}
inline void GetRoomListRequest::set_modified(const ::std::string& value) {
  
  modified_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.GetRoomListRequest.modified)
}
#if LANG_CXX11
inline void GetRoomListRequest::set_modified(::std::string&& value) {
  
  modified_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.GetRoomListRequest.modified)
}
#endif
inline void GetRoomListRequest::set_modified(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  modified_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.GetRoomListRequest.modified)
}
inline void GetRoomListRequest::set_modified(const char* value, size_t size) {
  
  modified_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.GetRoomListRequest.modified)
}
inline ::std::string* GetRoomListRequest::mutable_modified() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.GetRoomListRequest.modified)
  return modified_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRoomListRequest::release_modified() {
  // @@protoc_insertion_point(field_release:outer.chatroom.GetRoomListRequest.modified)
  
  return modified_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRoomListRequest::set_allocated_modified(::std::string* modified) {
  if (modified != NULL) {
    
  } else {
    
  }
  modified_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modified);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.GetRoomListRequest.modified)
}

// -------------------------------------------------------------------

// GetRoomListResponse

// repeated .outer.chatroom.ChatroomInfo room_info = 1;
inline int GetRoomListResponse::room_info_size() const {
  return room_info_.size();
}
inline void GetRoomListResponse::clear_room_info() {
  room_info_.Clear();
}
inline const ::outer::chatroom::ChatroomInfo& GetRoomListResponse::room_info(int index) const {
  // @@protoc_insertion_point(field_get:outer.chatroom.GetRoomListResponse.room_info)
  return room_info_.Get(index);
}
inline ::outer::chatroom::ChatroomInfo* GetRoomListResponse::mutable_room_info(int index) {
  // @@protoc_insertion_point(field_mutable:outer.chatroom.GetRoomListResponse.room_info)
  return room_info_.Mutable(index);
}
inline ::outer::chatroom::ChatroomInfo* GetRoomListResponse::add_room_info() {
  // @@protoc_insertion_point(field_add:outer.chatroom.GetRoomListResponse.room_info)
  return room_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::chatroom::ChatroomInfo >*
GetRoomListResponse::mutable_room_info() {
  // @@protoc_insertion_point(field_mutable_list:outer.chatroom.GetRoomListResponse.room_info)
  return &room_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::chatroom::ChatroomInfo >&
GetRoomListResponse::room_info() const {
  // @@protoc_insertion_point(field_list:outer.chatroom.GetRoomListResponse.room_info)
  return room_info_;
}

// .common.errcode.EErrorCode ret = 2;
inline void GetRoomListResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode GetRoomListResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.GetRoomListResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void GetRoomListResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.GetRoomListResponse.ret)
}

// -------------------------------------------------------------------

// QueryRoomDetailRequest

// string from_username = 1;
inline void QueryRoomDetailRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryRoomDetailRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.QueryRoomDetailRequest.from_username)
  return from_username_.GetNoArena();
}
inline void QueryRoomDetailRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.QueryRoomDetailRequest.from_username)
}
#if LANG_CXX11
inline void QueryRoomDetailRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.QueryRoomDetailRequest.from_username)
}
#endif
inline void QueryRoomDetailRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.QueryRoomDetailRequest.from_username)
}
inline void QueryRoomDetailRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.QueryRoomDetailRequest.from_username)
}
inline ::std::string* QueryRoomDetailRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.QueryRoomDetailRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryRoomDetailRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.chatroom.QueryRoomDetailRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRoomDetailRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.QueryRoomDetailRequest.from_username)
}

// string appkey = 2;
inline void QueryRoomDetailRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryRoomDetailRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.QueryRoomDetailRequest.appkey)
  return appkey_.GetNoArena();
}
inline void QueryRoomDetailRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.QueryRoomDetailRequest.appkey)
}
#if LANG_CXX11
inline void QueryRoomDetailRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.QueryRoomDetailRequest.appkey)
}
#endif
inline void QueryRoomDetailRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.QueryRoomDetailRequest.appkey)
}
inline void QueryRoomDetailRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.QueryRoomDetailRequest.appkey)
}
inline ::std::string* QueryRoomDetailRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.QueryRoomDetailRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryRoomDetailRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.chatroom.QueryRoomDetailRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRoomDetailRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.QueryRoomDetailRequest.appkey)
}

// uint64 room_id = 3;
inline void QueryRoomDetailRequest::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QueryRoomDetailRequest::room_id() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.QueryRoomDetailRequest.room_id)
  return room_id_;
}
inline void QueryRoomDetailRequest::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.QueryRoomDetailRequest.room_id)
}

// -------------------------------------------------------------------

// QueryRoomDetailResponse

// .outer.chatroom.ChatroomDetail room_detail = 1;
inline bool QueryRoomDetailResponse::has_room_detail() const {
  return this != internal_default_instance() && room_detail_ != NULL;
}
inline void QueryRoomDetailResponse::clear_room_detail() {
  if (GetArenaNoVirtual() == NULL && room_detail_ != NULL) {
    delete room_detail_;
  }
  room_detail_ = NULL;
}
inline const ::outer::chatroom::ChatroomDetail& QueryRoomDetailResponse::room_detail() const {
  const ::outer::chatroom::ChatroomDetail* p = room_detail_;
  // @@protoc_insertion_point(field_get:outer.chatroom.QueryRoomDetailResponse.room_detail)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::chatroom::ChatroomDetail*>(
      &::outer::chatroom::_ChatroomDetail_default_instance_);
}
inline ::outer::chatroom::ChatroomDetail* QueryRoomDetailResponse::release_room_detail() {
  // @@protoc_insertion_point(field_release:outer.chatroom.QueryRoomDetailResponse.room_detail)
  
  ::outer::chatroom::ChatroomDetail* temp = room_detail_;
  room_detail_ = NULL;
  return temp;
}
inline ::outer::chatroom::ChatroomDetail* QueryRoomDetailResponse::mutable_room_detail() {
  
  if (room_detail_ == NULL) {
    room_detail_ = new ::outer::chatroom::ChatroomDetail;
  }
  // @@protoc_insertion_point(field_mutable:outer.chatroom.QueryRoomDetailResponse.room_detail)
  return room_detail_;
}
inline void QueryRoomDetailResponse::set_allocated_room_detail(::outer::chatroom::ChatroomDetail* room_detail) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete room_detail_;
  }
  if (room_detail) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      room_detail = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, room_detail, submessage_arena);
    }
    
  } else {
    
  }
  room_detail_ = room_detail;
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.QueryRoomDetailResponse.room_detail)
}

// .common.errcode.EErrorCode ret = 2;
inline void QueryRoomDetailResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode QueryRoomDetailResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.QueryRoomDetailResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void QueryRoomDetailResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.QueryRoomDetailResponse.ret)
}

// -------------------------------------------------------------------

// SetRoomInfoRequest

// string from_name = 1;
inline void SetRoomInfoRequest::clear_from_name() {
  from_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetRoomInfoRequest::from_name() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SetRoomInfoRequest.from_name)
  return from_name_.GetNoArena();
}
inline void SetRoomInfoRequest::set_from_name(const ::std::string& value) {
  
  from_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.SetRoomInfoRequest.from_name)
}
#if LANG_CXX11
inline void SetRoomInfoRequest::set_from_name(::std::string&& value) {
  
  from_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.SetRoomInfoRequest.from_name)
}
#endif
inline void SetRoomInfoRequest::set_from_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.SetRoomInfoRequest.from_name)
}
inline void SetRoomInfoRequest::set_from_name(const char* value, size_t size) {
  
  from_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.SetRoomInfoRequest.from_name)
}
inline ::std::string* SetRoomInfoRequest::mutable_from_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.SetRoomInfoRequest.from_name)
  return from_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetRoomInfoRequest::release_from_name() {
  // @@protoc_insertion_point(field_release:outer.chatroom.SetRoomInfoRequest.from_name)
  
  return from_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetRoomInfoRequest::set_allocated_from_name(::std::string* from_name) {
  if (from_name != NULL) {
    
  } else {
    
  }
  from_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_name);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.SetRoomInfoRequest.from_name)
}

// string appkey = 2;
inline void SetRoomInfoRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetRoomInfoRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SetRoomInfoRequest.appkey)
  return appkey_.GetNoArena();
}
inline void SetRoomInfoRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.SetRoomInfoRequest.appkey)
}
#if LANG_CXX11
inline void SetRoomInfoRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.SetRoomInfoRequest.appkey)
}
#endif
inline void SetRoomInfoRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.SetRoomInfoRequest.appkey)
}
inline void SetRoomInfoRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.SetRoomInfoRequest.appkey)
}
inline ::std::string* SetRoomInfoRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.SetRoomInfoRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetRoomInfoRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.chatroom.SetRoomInfoRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetRoomInfoRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.SetRoomInfoRequest.appkey)
}

// uint64 room_id = 3;
inline void SetRoomInfoRequest::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SetRoomInfoRequest::room_id() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SetRoomInfoRequest.room_id)
  return room_id_;
}
inline void SetRoomInfoRequest::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.SetRoomInfoRequest.room_id)
}

// string room_name = 4;
inline void SetRoomInfoRequest::clear_room_name() {
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetRoomInfoRequest::room_name() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SetRoomInfoRequest.room_name)
  return room_name_.GetNoArena();
}
inline void SetRoomInfoRequest::set_room_name(const ::std::string& value) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.SetRoomInfoRequest.room_name)
}
#if LANG_CXX11
inline void SetRoomInfoRequest::set_room_name(::std::string&& value) {
  
  room_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.SetRoomInfoRequest.room_name)
}
#endif
inline void SetRoomInfoRequest::set_room_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.SetRoomInfoRequest.room_name)
}
inline void SetRoomInfoRequest::set_room_name(const char* value, size_t size) {
  
  room_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.SetRoomInfoRequest.room_name)
}
inline ::std::string* SetRoomInfoRequest::mutable_room_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.SetRoomInfoRequest.room_name)
  return room_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetRoomInfoRequest::release_room_name() {
  // @@protoc_insertion_point(field_release:outer.chatroom.SetRoomInfoRequest.room_name)
  
  return room_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetRoomInfoRequest::set_allocated_room_name(::std::string* room_name) {
  if (room_name != NULL) {
    
  } else {
    
  }
  room_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_name);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.SetRoomInfoRequest.room_name)
}

// -------------------------------------------------------------------

// SetRoomInfoResponse

// .common.errcode.EErrorCode ret = 1;
inline void SetRoomInfoResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode SetRoomInfoResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SetRoomInfoResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void SetRoomInfoResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.SetRoomInfoResponse.ret)
}

// -------------------------------------------------------------------

// AddMemberToRoomRequest

// string from_username = 1;
inline void AddMemberToRoomRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddMemberToRoomRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.AddMemberToRoomRequest.from_username)
  return from_username_.GetNoArena();
}
inline void AddMemberToRoomRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.AddMemberToRoomRequest.from_username)
}
#if LANG_CXX11
inline void AddMemberToRoomRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.AddMemberToRoomRequest.from_username)
}
#endif
inline void AddMemberToRoomRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.AddMemberToRoomRequest.from_username)
}
inline void AddMemberToRoomRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.AddMemberToRoomRequest.from_username)
}
inline ::std::string* AddMemberToRoomRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.AddMemberToRoomRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddMemberToRoomRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.chatroom.AddMemberToRoomRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddMemberToRoomRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.AddMemberToRoomRequest.from_username)
}

// string appkey = 2;
inline void AddMemberToRoomRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddMemberToRoomRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.AddMemberToRoomRequest.appkey)
  return appkey_.GetNoArena();
}
inline void AddMemberToRoomRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.AddMemberToRoomRequest.appkey)
}
#if LANG_CXX11
inline void AddMemberToRoomRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.AddMemberToRoomRequest.appkey)
}
#endif
inline void AddMemberToRoomRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.AddMemberToRoomRequest.appkey)
}
inline void AddMemberToRoomRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.AddMemberToRoomRequest.appkey)
}
inline ::std::string* AddMemberToRoomRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.AddMemberToRoomRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddMemberToRoomRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.chatroom.AddMemberToRoomRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddMemberToRoomRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.AddMemberToRoomRequest.appkey)
}

// repeated string invitee_name = 3;
inline int AddMemberToRoomRequest::invitee_name_size() const {
  return invitee_name_.size();
}
inline void AddMemberToRoomRequest::clear_invitee_name() {
  invitee_name_.Clear();
}
inline const ::std::string& AddMemberToRoomRequest::invitee_name(int index) const {
  // @@protoc_insertion_point(field_get:outer.chatroom.AddMemberToRoomRequest.invitee_name)
  return invitee_name_.Get(index);
}
inline ::std::string* AddMemberToRoomRequest::mutable_invitee_name(int index) {
  // @@protoc_insertion_point(field_mutable:outer.chatroom.AddMemberToRoomRequest.invitee_name)
  return invitee_name_.Mutable(index);
}
inline void AddMemberToRoomRequest::set_invitee_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.chatroom.AddMemberToRoomRequest.invitee_name)
  invitee_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AddMemberToRoomRequest::set_invitee_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.chatroom.AddMemberToRoomRequest.invitee_name)
  invitee_name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AddMemberToRoomRequest::set_invitee_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  invitee_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.chatroom.AddMemberToRoomRequest.invitee_name)
}
inline void AddMemberToRoomRequest::set_invitee_name(int index, const char* value, size_t size) {
  invitee_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.AddMemberToRoomRequest.invitee_name)
}
inline ::std::string* AddMemberToRoomRequest::add_invitee_name() {
  // @@protoc_insertion_point(field_add_mutable:outer.chatroom.AddMemberToRoomRequest.invitee_name)
  return invitee_name_.Add();
}
inline void AddMemberToRoomRequest::add_invitee_name(const ::std::string& value) {
  invitee_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.chatroom.AddMemberToRoomRequest.invitee_name)
}
#if LANG_CXX11
inline void AddMemberToRoomRequest::add_invitee_name(::std::string&& value) {
  invitee_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.chatroom.AddMemberToRoomRequest.invitee_name)
}
#endif
inline void AddMemberToRoomRequest::add_invitee_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  invitee_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.chatroom.AddMemberToRoomRequest.invitee_name)
}
inline void AddMemberToRoomRequest::add_invitee_name(const char* value, size_t size) {
  invitee_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.chatroom.AddMemberToRoomRequest.invitee_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddMemberToRoomRequest::invitee_name() const {
  // @@protoc_insertion_point(field_list:outer.chatroom.AddMemberToRoomRequest.invitee_name)
  return invitee_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AddMemberToRoomRequest::mutable_invitee_name() {
  // @@protoc_insertion_point(field_mutable_list:outer.chatroom.AddMemberToRoomRequest.invitee_name)
  return &invitee_name_;
}

// uint64 room_id = 4;
inline void AddMemberToRoomRequest::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AddMemberToRoomRequest::room_id() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.AddMemberToRoomRequest.room_id)
  return room_id_;
}
inline void AddMemberToRoomRequest::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.AddMemberToRoomRequest.room_id)
}

// -------------------------------------------------------------------

// AddMemberToRoomResponse

// .common.errcode.EErrorCode ret = 1;
inline void AddMemberToRoomResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode AddMemberToRoomResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.AddMemberToRoomResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void AddMemberToRoomResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.AddMemberToRoomResponse.ret)
}

// -------------------------------------------------------------------

// JoinRoomRequest

// string from_username = 1;
inline void JoinRoomRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinRoomRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.JoinRoomRequest.from_username)
  return from_username_.GetNoArena();
}
inline void JoinRoomRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.JoinRoomRequest.from_username)
}
#if LANG_CXX11
inline void JoinRoomRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.JoinRoomRequest.from_username)
}
#endif
inline void JoinRoomRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.JoinRoomRequest.from_username)
}
inline void JoinRoomRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.JoinRoomRequest.from_username)
}
inline ::std::string* JoinRoomRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.JoinRoomRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinRoomRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.chatroom.JoinRoomRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.JoinRoomRequest.from_username)
}

// string appkey = 2;
inline void JoinRoomRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinRoomRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.JoinRoomRequest.appkey)
  return appkey_.GetNoArena();
}
inline void JoinRoomRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.JoinRoomRequest.appkey)
}
#if LANG_CXX11
inline void JoinRoomRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.JoinRoomRequest.appkey)
}
#endif
inline void JoinRoomRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.JoinRoomRequest.appkey)
}
inline void JoinRoomRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.JoinRoomRequest.appkey)
}
inline ::std::string* JoinRoomRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.JoinRoomRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinRoomRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.chatroom.JoinRoomRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinRoomRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.JoinRoomRequest.appkey)
}

// uint64 room_id = 3;
inline void JoinRoomRequest::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 JoinRoomRequest::room_id() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.JoinRoomRequest.room_id)
  return room_id_;
}
inline void JoinRoomRequest::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.JoinRoomRequest.room_id)
}

// -------------------------------------------------------------------

// JoinRoomResponse

// .common.errcode.EErrorCode ret = 1;
inline void JoinRoomResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode JoinRoomResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.JoinRoomResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void JoinRoomResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.JoinRoomResponse.ret)
}

// -------------------------------------------------------------------

// ExitRoomRequest

// string from_username = 1;
inline void ExitRoomRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExitRoomRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.ExitRoomRequest.from_username)
  return from_username_.GetNoArena();
}
inline void ExitRoomRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.ExitRoomRequest.from_username)
}
#if LANG_CXX11
inline void ExitRoomRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.ExitRoomRequest.from_username)
}
#endif
inline void ExitRoomRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.ExitRoomRequest.from_username)
}
inline void ExitRoomRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.ExitRoomRequest.from_username)
}
inline ::std::string* ExitRoomRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.ExitRoomRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExitRoomRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.chatroom.ExitRoomRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExitRoomRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.ExitRoomRequest.from_username)
}

// string appkey = 2;
inline void ExitRoomRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExitRoomRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.ExitRoomRequest.appkey)
  return appkey_.GetNoArena();
}
inline void ExitRoomRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.ExitRoomRequest.appkey)
}
#if LANG_CXX11
inline void ExitRoomRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.ExitRoomRequest.appkey)
}
#endif
inline void ExitRoomRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.ExitRoomRequest.appkey)
}
inline void ExitRoomRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.ExitRoomRequest.appkey)
}
inline ::std::string* ExitRoomRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.ExitRoomRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExitRoomRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.chatroom.ExitRoomRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExitRoomRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.ExitRoomRequest.appkey)
}

// uint64 room_id = 3;
inline void ExitRoomRequest::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ExitRoomRequest::room_id() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.ExitRoomRequest.room_id)
  return room_id_;
}
inline void ExitRoomRequest::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.ExitRoomRequest.room_id)
}

// -------------------------------------------------------------------

// ExitRoomResponse

// .common.errcode.EErrorCode ret = 1;
inline void ExitRoomResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode ExitRoomResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.ExitRoomResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void ExitRoomResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.ExitRoomResponse.ret)
}

// -------------------------------------------------------------------

// GetTotalMemberCountRequest

// string from_username = 1;
inline void GetTotalMemberCountRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTotalMemberCountRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.GetTotalMemberCountRequest.from_username)
  return from_username_.GetNoArena();
}
inline void GetTotalMemberCountRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.GetTotalMemberCountRequest.from_username)
}
#if LANG_CXX11
inline void GetTotalMemberCountRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.GetTotalMemberCountRequest.from_username)
}
#endif
inline void GetTotalMemberCountRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.GetTotalMemberCountRequest.from_username)
}
inline void GetTotalMemberCountRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.GetTotalMemberCountRequest.from_username)
}
inline ::std::string* GetTotalMemberCountRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.GetTotalMemberCountRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTotalMemberCountRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.chatroom.GetTotalMemberCountRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTotalMemberCountRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.GetTotalMemberCountRequest.from_username)
}

// string appkey = 2;
inline void GetTotalMemberCountRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTotalMemberCountRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.GetTotalMemberCountRequest.appkey)
  return appkey_.GetNoArena();
}
inline void GetTotalMemberCountRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.GetTotalMemberCountRequest.appkey)
}
#if LANG_CXX11
inline void GetTotalMemberCountRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.GetTotalMemberCountRequest.appkey)
}
#endif
inline void GetTotalMemberCountRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.GetTotalMemberCountRequest.appkey)
}
inline void GetTotalMemberCountRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.GetTotalMemberCountRequest.appkey)
}
inline ::std::string* GetTotalMemberCountRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.GetTotalMemberCountRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTotalMemberCountRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.chatroom.GetTotalMemberCountRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTotalMemberCountRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.GetTotalMemberCountRequest.appkey)
}

// uint64 room_id = 3;
inline void GetTotalMemberCountRequest::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetTotalMemberCountRequest::room_id() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.GetTotalMemberCountRequest.room_id)
  return room_id_;
}
inline void GetTotalMemberCountRequest::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.GetTotalMemberCountRequest.room_id)
}

// -------------------------------------------------------------------

// GetTotalMemberCountResponse

// uint64 member_count = 1;
inline void GetTotalMemberCountResponse::clear_member_count() {
  member_count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetTotalMemberCountResponse::member_count() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.GetTotalMemberCountResponse.member_count)
  return member_count_;
}
inline void GetTotalMemberCountResponse::set_member_count(::google::protobuf::uint64 value) {
  
  member_count_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.GetTotalMemberCountResponse.member_count)
}

// .common.errcode.EErrorCode ret = 2;
inline void GetTotalMemberCountResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode GetTotalMemberCountResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.GetTotalMemberCountResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void GetTotalMemberCountResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.GetTotalMemberCountResponse.ret)
}

// -------------------------------------------------------------------

// SendRoomMessageRequest

// string from_username = 1;
inline void SendRoomMessageRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendRoomMessageRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SendRoomMessageRequest.from_username)
  return from_username_.GetNoArena();
}
inline void SendRoomMessageRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.SendRoomMessageRequest.from_username)
}
#if LANG_CXX11
inline void SendRoomMessageRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.SendRoomMessageRequest.from_username)
}
#endif
inline void SendRoomMessageRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.SendRoomMessageRequest.from_username)
}
inline void SendRoomMessageRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.SendRoomMessageRequest.from_username)
}
inline ::std::string* SendRoomMessageRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.SendRoomMessageRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendRoomMessageRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.chatroom.SendRoomMessageRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendRoomMessageRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.SendRoomMessageRequest.from_username)
}

// string appkey = 2;
inline void SendRoomMessageRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendRoomMessageRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SendRoomMessageRequest.appkey)
  return appkey_.GetNoArena();
}
inline void SendRoomMessageRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.SendRoomMessageRequest.appkey)
}
#if LANG_CXX11
inline void SendRoomMessageRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.SendRoomMessageRequest.appkey)
}
#endif
inline void SendRoomMessageRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.SendRoomMessageRequest.appkey)
}
inline void SendRoomMessageRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.SendRoomMessageRequest.appkey)
}
inline ::std::string* SendRoomMessageRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.SendRoomMessageRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendRoomMessageRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.chatroom.SendRoomMessageRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendRoomMessageRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.SendRoomMessageRequest.appkey)
}

// uint64 room_id = 3;
inline void SendRoomMessageRequest::clear_room_id() {
  room_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SendRoomMessageRequest::room_id() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SendRoomMessageRequest.room_id)
  return room_id_;
}
inline void SendRoomMessageRequest::set_room_id(::google::protobuf::uint64 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.SendRoomMessageRequest.room_id)
}

// .outer.chatroom.EMsgType msg_type = 4;
inline void SendRoomMessageRequest::clear_msg_type() {
  msg_type_ = 0;
}
inline ::outer::chatroom::EMsgType SendRoomMessageRequest::msg_type() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SendRoomMessageRequest.msg_type)
  return static_cast< ::outer::chatroom::EMsgType >(msg_type_);
}
inline void SendRoomMessageRequest::set_msg_type(::outer::chatroom::EMsgType value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.SendRoomMessageRequest.msg_type)
}

// bytes data = 5;
inline void SendRoomMessageRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendRoomMessageRequest::data() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SendRoomMessageRequest.data)
  return data_.GetNoArena();
}
inline void SendRoomMessageRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chatroom.SendRoomMessageRequest.data)
}
#if LANG_CXX11
inline void SendRoomMessageRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chatroom.SendRoomMessageRequest.data)
}
#endif
inline void SendRoomMessageRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chatroom.SendRoomMessageRequest.data)
}
inline void SendRoomMessageRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chatroom.SendRoomMessageRequest.data)
}
inline ::std::string* SendRoomMessageRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.chatroom.SendRoomMessageRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendRoomMessageRequest::release_data() {
  // @@protoc_insertion_point(field_release:outer.chatroom.SendRoomMessageRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendRoomMessageRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.chatroom.SendRoomMessageRequest.data)
}

// -------------------------------------------------------------------

// SendRoomMessageResponse

// .common.errcode.EErrorCode ret = 1;
inline void SendRoomMessageResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode SendRoomMessageResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.chatroom.SendRoomMessageResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void SendRoomMessageResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.chatroom.SendRoomMessageResponse.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chatroom
}  // namespace outer

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::outer::chatroom::ERoomState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::outer::chatroom::ERoomState>() {
  return ::outer::chatroom::ERoomState_descriptor();
}
template <> struct is_proto_enum< ::outer::chatroom::EMsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::outer::chatroom::EMsgType>() {
  return ::outer::chatroom::EMsgType_descriptor();
}
template <> struct is_proto_enum< ::outer::chatroom::ERole> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::outer::chatroom::ERole>() {
  return ::outer::chatroom::ERole_descriptor();
}
template <> struct is_proto_enum< ::outer::chatroom::ESignalType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::outer::chatroom::ESignalType>() {
  return ::outer::chatroom::ESignalType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_outer_2fchatroom_2eproto__INCLUDED
