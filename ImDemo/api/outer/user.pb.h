// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: outer/user.proto

#ifndef PROTOBUF_outer_2fuser_2eproto__INCLUDED
#define PROTOBUF_outer_2fuser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/errcode.pb.h"
#include "common/enumeration.pb.h"
#include "common/base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_outer_2fuser_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[33];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsUserInfoImpl();
void InitDefaultsUserInfo();
void InitDefaultsUserLoginRequestImpl();
void InitDefaultsUserLoginRequest();
void InitDefaultsUserLoginResponseImpl();
void InitDefaultsUserLoginResponse();
void InitDefaultsUserRegisterRequestImpl();
void InitDefaultsUserRegisterRequest();
void InitDefaultsUserRegisterResponseImpl();
void InitDefaultsUserRegisterResponse();
void InitDefaultsPasswordUpdateRequestImpl();
void InitDefaultsPasswordUpdateRequest();
void InitDefaultsPasswordUpdateResponseImpl();
void InitDefaultsPasswordUpdateResponse();
void InitDefaultsNickUpdateRequestImpl();
void InitDefaultsNickUpdateRequest();
void InitDefaultsNickUpdateResponseImpl();
void InitDefaultsNickUpdateResponse();
void InitDefaultsPhoneUpdateRequestImpl();
void InitDefaultsPhoneUpdateRequest();
void InitDefaultsPhoneUpdateResponseImpl();
void InitDefaultsPhoneUpdateResponse();
void InitDefaultsUserSearchRequestImpl();
void InitDefaultsUserSearchRequest();
void InitDefaultsUserSearchResponseImpl();
void InitDefaultsUserSearchResponse();
void InitDefaultsGetUserInfoRequestImpl();
void InitDefaultsGetUserInfoRequest();
void InitDefaultsGetUserInfoResponseImpl();
void InitDefaultsGetUserInfoResponse();
void InitDefaultsBatchGetUserInfoRequestImpl();
void InitDefaultsBatchGetUserInfoRequest();
void InitDefaultsBatchGetUserInfoResponseImpl();
void InitDefaultsBatchGetUserInfoResponse();
void InitDefaultsCheckUserListRequestImpl();
void InitDefaultsCheckUserListRequest();
void InitDefaultsCheckUserListResponseImpl();
void InitDefaultsCheckUserListResponse();
void InitDefaultsSetSilentStateRequestImpl();
void InitDefaultsSetSilentStateRequest();
void InitDefaultsSetSilentStateResponseImpl();
void InitDefaultsSetSilentStateResponse();
void InitDefaultsUploadAvatarRequestImpl();
void InitDefaultsUploadAvatarRequest();
void InitDefaultsUploadAvatarResponseImpl();
void InitDefaultsUploadAvatarResponse();
void InitDefaultsGetMyShieldingListRequestImpl();
void InitDefaultsGetMyShieldingListRequest();
void InitDefaultsGetMyShieldingListResponseImpl();
void InitDefaultsGetMyShieldingListResponse();
void InitDefaultsSetShieldingStateRequestImpl();
void InitDefaultsSetShieldingStateRequest();
void InitDefaultsSetShieldingStateResponseImpl();
void InitDefaultsSetShieldingStateResponse();
void InitDefaultsQueryUserOnlineStatusRequestImpl();
void InitDefaultsQueryUserOnlineStatusRequest();
void InitDefaultsQueryUserOnlineStatusResponseImpl();
void InitDefaultsQueryUserOnlineStatusResponse();
void InitDefaultsKickCarMachineRequestImpl();
void InitDefaultsKickCarMachineRequest();
void InitDefaultsKickCarMachineResponseImpl();
void InitDefaultsKickCarMachineResponse();
void InitDefaultsDisplayUpdateRequestImpl();
void InitDefaultsDisplayUpdateRequest();
void InitDefaultsDisplayUpdateResponseImpl();
void InitDefaultsDisplayUpdateResponse();
inline void InitDefaults() {
  InitDefaultsUserInfo();
  InitDefaultsUserLoginRequest();
  InitDefaultsUserLoginResponse();
  InitDefaultsUserRegisterRequest();
  InitDefaultsUserRegisterResponse();
  InitDefaultsPasswordUpdateRequest();
  InitDefaultsPasswordUpdateResponse();
  InitDefaultsNickUpdateRequest();
  InitDefaultsNickUpdateResponse();
  InitDefaultsPhoneUpdateRequest();
  InitDefaultsPhoneUpdateResponse();
  InitDefaultsUserSearchRequest();
  InitDefaultsUserSearchResponse();
  InitDefaultsGetUserInfoRequest();
  InitDefaultsGetUserInfoResponse();
  InitDefaultsBatchGetUserInfoRequest();
  InitDefaultsBatchGetUserInfoResponse();
  InitDefaultsCheckUserListRequest();
  InitDefaultsCheckUserListResponse();
  InitDefaultsSetSilentStateRequest();
  InitDefaultsSetSilentStateResponse();
  InitDefaultsUploadAvatarRequest();
  InitDefaultsUploadAvatarResponse();
  InitDefaultsGetMyShieldingListRequest();
  InitDefaultsGetMyShieldingListResponse();
  InitDefaultsSetShieldingStateRequest();
  InitDefaultsSetShieldingStateResponse();
  InitDefaultsQueryUserOnlineStatusRequest();
  InitDefaultsQueryUserOnlineStatusResponse();
  InitDefaultsKickCarMachineRequest();
  InitDefaultsKickCarMachineResponse();
  InitDefaultsDisplayUpdateRequest();
  InitDefaultsDisplayUpdateResponse();
}
}  // namespace protobuf_outer_2fuser_2eproto
namespace outer {
namespace user {
class BatchGetUserInfoRequest;
class BatchGetUserInfoRequestDefaultTypeInternal;
extern BatchGetUserInfoRequestDefaultTypeInternal _BatchGetUserInfoRequest_default_instance_;
class BatchGetUserInfoResponse;
class BatchGetUserInfoResponseDefaultTypeInternal;
extern BatchGetUserInfoResponseDefaultTypeInternal _BatchGetUserInfoResponse_default_instance_;
class CheckUserListRequest;
class CheckUserListRequestDefaultTypeInternal;
extern CheckUserListRequestDefaultTypeInternal _CheckUserListRequest_default_instance_;
class CheckUserListResponse;
class CheckUserListResponseDefaultTypeInternal;
extern CheckUserListResponseDefaultTypeInternal _CheckUserListResponse_default_instance_;
class DisplayUpdateRequest;
class DisplayUpdateRequestDefaultTypeInternal;
extern DisplayUpdateRequestDefaultTypeInternal _DisplayUpdateRequest_default_instance_;
class DisplayUpdateResponse;
class DisplayUpdateResponseDefaultTypeInternal;
extern DisplayUpdateResponseDefaultTypeInternal _DisplayUpdateResponse_default_instance_;
class GetMyShieldingListRequest;
class GetMyShieldingListRequestDefaultTypeInternal;
extern GetMyShieldingListRequestDefaultTypeInternal _GetMyShieldingListRequest_default_instance_;
class GetMyShieldingListResponse;
class GetMyShieldingListResponseDefaultTypeInternal;
extern GetMyShieldingListResponseDefaultTypeInternal _GetMyShieldingListResponse_default_instance_;
class GetUserInfoRequest;
class GetUserInfoRequestDefaultTypeInternal;
extern GetUserInfoRequestDefaultTypeInternal _GetUserInfoRequest_default_instance_;
class GetUserInfoResponse;
class GetUserInfoResponseDefaultTypeInternal;
extern GetUserInfoResponseDefaultTypeInternal _GetUserInfoResponse_default_instance_;
class KickCarMachineRequest;
class KickCarMachineRequestDefaultTypeInternal;
extern KickCarMachineRequestDefaultTypeInternal _KickCarMachineRequest_default_instance_;
class KickCarMachineResponse;
class KickCarMachineResponseDefaultTypeInternal;
extern KickCarMachineResponseDefaultTypeInternal _KickCarMachineResponse_default_instance_;
class NickUpdateRequest;
class NickUpdateRequestDefaultTypeInternal;
extern NickUpdateRequestDefaultTypeInternal _NickUpdateRequest_default_instance_;
class NickUpdateResponse;
class NickUpdateResponseDefaultTypeInternal;
extern NickUpdateResponseDefaultTypeInternal _NickUpdateResponse_default_instance_;
class PasswordUpdateRequest;
class PasswordUpdateRequestDefaultTypeInternal;
extern PasswordUpdateRequestDefaultTypeInternal _PasswordUpdateRequest_default_instance_;
class PasswordUpdateResponse;
class PasswordUpdateResponseDefaultTypeInternal;
extern PasswordUpdateResponseDefaultTypeInternal _PasswordUpdateResponse_default_instance_;
class PhoneUpdateRequest;
class PhoneUpdateRequestDefaultTypeInternal;
extern PhoneUpdateRequestDefaultTypeInternal _PhoneUpdateRequest_default_instance_;
class PhoneUpdateResponse;
class PhoneUpdateResponseDefaultTypeInternal;
extern PhoneUpdateResponseDefaultTypeInternal _PhoneUpdateResponse_default_instance_;
class QueryUserOnlineStatusRequest;
class QueryUserOnlineStatusRequestDefaultTypeInternal;
extern QueryUserOnlineStatusRequestDefaultTypeInternal _QueryUserOnlineStatusRequest_default_instance_;
class QueryUserOnlineStatusResponse;
class QueryUserOnlineStatusResponseDefaultTypeInternal;
extern QueryUserOnlineStatusResponseDefaultTypeInternal _QueryUserOnlineStatusResponse_default_instance_;
class SetShieldingStateRequest;
class SetShieldingStateRequestDefaultTypeInternal;
extern SetShieldingStateRequestDefaultTypeInternal _SetShieldingStateRequest_default_instance_;
class SetShieldingStateResponse;
class SetShieldingStateResponseDefaultTypeInternal;
extern SetShieldingStateResponseDefaultTypeInternal _SetShieldingStateResponse_default_instance_;
class SetSilentStateRequest;
class SetSilentStateRequestDefaultTypeInternal;
extern SetSilentStateRequestDefaultTypeInternal _SetSilentStateRequest_default_instance_;
class SetSilentStateResponse;
class SetSilentStateResponseDefaultTypeInternal;
extern SetSilentStateResponseDefaultTypeInternal _SetSilentStateResponse_default_instance_;
class UploadAvatarRequest;
class UploadAvatarRequestDefaultTypeInternal;
extern UploadAvatarRequestDefaultTypeInternal _UploadAvatarRequest_default_instance_;
class UploadAvatarResponse;
class UploadAvatarResponseDefaultTypeInternal;
extern UploadAvatarResponseDefaultTypeInternal _UploadAvatarResponse_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserLoginRequest;
class UserLoginRequestDefaultTypeInternal;
extern UserLoginRequestDefaultTypeInternal _UserLoginRequest_default_instance_;
class UserLoginResponse;
class UserLoginResponseDefaultTypeInternal;
extern UserLoginResponseDefaultTypeInternal _UserLoginResponse_default_instance_;
class UserRegisterRequest;
class UserRegisterRequestDefaultTypeInternal;
extern UserRegisterRequestDefaultTypeInternal _UserRegisterRequest_default_instance_;
class UserRegisterResponse;
class UserRegisterResponseDefaultTypeInternal;
extern UserRegisterResponseDefaultTypeInternal _UserRegisterResponse_default_instance_;
class UserSearchRequest;
class UserSearchRequestDefaultTypeInternal;
extern UserSearchRequestDefaultTypeInternal _UserSearchRequest_default_instance_;
class UserSearchResponse;
class UserSearchResponseDefaultTypeInternal;
extern UserSearchResponseDefaultTypeInternal _UserSearchResponse_default_instance_;
}  // namespace user
}  // namespace outer
namespace outer {
namespace user {

// ===================================================================

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string nick = 3;
  void clear_nick();
  static const int kNickFieldNumber = 3;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // string phone = 4;
  void clear_phone();
  static const int kPhoneFieldNumber = 4;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string original_link = 5;
  void clear_original_link();
  static const int kOriginalLinkFieldNumber = 5;
  const ::std::string& original_link() const;
  void set_original_link(const ::std::string& value);
  #if LANG_CXX11
  void set_original_link(::std::string&& value);
  #endif
  void set_original_link(const char* value);
  void set_original_link(const char* value, size_t size);
  ::std::string* mutable_original_link();
  ::std::string* release_original_link();
  void set_allocated_original_link(::std::string* original_link);

  // string thumbnail_link = 6;
  void clear_thumbnail_link();
  static const int kThumbnailLinkFieldNumber = 6;
  const ::std::string& thumbnail_link() const;
  void set_thumbnail_link(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_link(::std::string&& value);
  #endif
  void set_thumbnail_link(const char* value);
  void set_thumbnail_link(const char* value, size_t size);
  ::std::string* mutable_thumbnail_link();
  ::std::string* release_thumbnail_link();
  void set_allocated_thumbnail_link(::std::string* thumbnail_link);

  // string province = 9;
  void clear_province();
  static const int kProvinceFieldNumber = 9;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // string country = 10;
  void clear_country();
  static const int kCountryFieldNumber = 10;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // string sex = 11;
  void clear_sex();
  static const int kSexFieldNumber = 11;
  const ::std::string& sex() const;
  void set_sex(const ::std::string& value);
  #if LANG_CXX11
  void set_sex(::std::string&& value);
  #endif
  void set_sex(const char* value);
  void set_sex(const char* value, size_t size);
  ::std::string* mutable_sex();
  ::std::string* release_sex();
  void set_allocated_sex(::std::string* sex);

  // string fleet_uri = 13;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 13;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string nick_pinyin = 14;
  void clear_nick_pinyin();
  static const int kNickPinyinFieldNumber = 14;
  const ::std::string& nick_pinyin() const;
  void set_nick_pinyin(const ::std::string& value);
  #if LANG_CXX11
  void set_nick_pinyin(::std::string&& value);
  #endif
  void set_nick_pinyin(const char* value);
  void set_nick_pinyin(const char* value, size_t size);
  ::std::string* mutable_nick_pinyin();
  ::std::string* release_nick_pinyin();
  void set_allocated_nick_pinyin(::std::string* nick_pinyin);

  // string display = 15;
  void clear_display();
  static const int kDisplayFieldNumber = 15;
  const ::std::string& display() const;
  void set_display(const ::std::string& value);
  #if LANG_CXX11
  void set_display(::std::string&& value);
  #endif
  void set_display(const char* value);
  void set_display(const char* value, size_t size);
  ::std::string* mutable_display();
  ::std::string* release_display();
  void set_allocated_display(::std::string* display);

  // string display_pinyin = 16;
  void clear_display_pinyin();
  static const int kDisplayPinyinFieldNumber = 16;
  const ::std::string& display_pinyin() const;
  void set_display_pinyin(const ::std::string& value);
  #if LANG_CXX11
  void set_display_pinyin(::std::string&& value);
  #endif
  void set_display_pinyin(const char* value);
  void set_display_pinyin(const char* value, size_t size);
  ::std::string* mutable_display_pinyin();
  ::std::string* release_display_pinyin();
  void set_allocated_display_pinyin(::std::string* display_pinyin);

  // string nick_pinyin_blank = 17;
  void clear_nick_pinyin_blank();
  static const int kNickPinyinBlankFieldNumber = 17;
  const ::std::string& nick_pinyin_blank() const;
  void set_nick_pinyin_blank(const ::std::string& value);
  #if LANG_CXX11
  void set_nick_pinyin_blank(::std::string&& value);
  #endif
  void set_nick_pinyin_blank(const char* value);
  void set_nick_pinyin_blank(const char* value, size_t size);
  ::std::string* mutable_nick_pinyin_blank();
  ::std::string* release_nick_pinyin_blank();
  void set_allocated_nick_pinyin_blank(::std::string* nick_pinyin_blank);

  // string serial_name = 18;
  void clear_serial_name();
  static const int kSerialNameFieldNumber = 18;
  const ::std::string& serial_name() const;
  void set_serial_name(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_name(::std::string&& value);
  #endif
  void set_serial_name(const char* value);
  void set_serial_name(const char* value, size_t size);
  ::std::string* mutable_serial_name();
  ::std::string* release_serial_name();
  void set_allocated_serial_name(::std::string* serial_name);

  // uint64 created = 7;
  void clear_created();
  static const int kCreatedFieldNumber = 7;
  ::google::protobuf::uint64 created() const;
  void set_created(::google::protobuf::uint64 value);

  // uint64 modified = 8;
  void clear_modified();
  static const int kModifiedFieldNumber = 8;
  ::google::protobuf::uint64 modified() const;
  void set_modified(::google::protobuf::uint64 value);

  // bool join_fleet = 12;
  void clear_join_fleet();
  static const int kJoinFleetFieldNumber = 12;
  bool join_fleet() const;
  void set_join_fleet(bool value);

  // uint32 member_type = 19;
  void clear_member_type();
  static const int kMemberTypeFieldNumber = 19;
  ::google::protobuf::uint32 member_type() const;
  void set_member_type(::google::protobuf::uint32 value);

  // uint32 enable = 20;
  void clear_enable();
  static const int kEnableFieldNumber = 20;
  ::google::protobuf::uint32 enable() const;
  void set_enable(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.user.UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr original_link_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_link_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr sex_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr nick_pinyin_;
  ::google::protobuf::internal::ArenaStringPtr display_;
  ::google::protobuf::internal::ArenaStringPtr display_pinyin_;
  ::google::protobuf::internal::ArenaStringPtr nick_pinyin_blank_;
  ::google::protobuf::internal::ArenaStringPtr serial_name_;
  ::google::protobuf::uint64 created_;
  ::google::protobuf::uint64 modified_;
  bool join_fleet_;
  ::google::protobuf::uint32 member_type_;
  ::google::protobuf::uint32 enable_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsUserInfoImpl();
};
// -------------------------------------------------------------------

class UserLoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.UserLoginRequest) */ {
 public:
  UserLoginRequest();
  virtual ~UserLoginRequest();

  UserLoginRequest(const UserLoginRequest& from);

  inline UserLoginRequest& operator=(const UserLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLoginRequest(UserLoginRequest&& from) noexcept
    : UserLoginRequest() {
    *this = ::std::move(from);
  }

  inline UserLoginRequest& operator=(UserLoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginRequest* internal_default_instance() {
    return reinterpret_cast<const UserLoginRequest*>(
               &_UserLoginRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(UserLoginRequest* other);
  friend void swap(UserLoginRequest& a, UserLoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLoginRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UserLoginRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserLoginRequest& from);
  void MergeFrom(const UserLoginRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserLoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string appkey_password = 4;
  void clear_appkey_password();
  static const int kAppkeyPasswordFieldNumber = 4;
  const ::std::string& appkey_password() const;
  void set_appkey_password(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey_password(::std::string&& value);
  #endif
  void set_appkey_password(const char* value);
  void set_appkey_password(const char* value, size_t size);
  ::std::string* mutable_appkey_password();
  ::std::string* release_appkey_password();
  void set_allocated_appkey_password(::std::string* appkey_password);

  // string token = 8;
  void clear_token();
  static const int kTokenFieldNumber = 8;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // .common.base.MobileBase base_info = 6;
  bool has_base_info() const;
  void clear_base_info();
  static const int kBaseInfoFieldNumber = 6;
  const ::common::base::MobileBase& base_info() const;
  ::common::base::MobileBase* release_base_info();
  ::common::base::MobileBase* mutable_base_info();
  void set_allocated_base_info(::common::base::MobileBase* base_info);

  // bool SHA256 = 5;
  void clear_sha256();
  static const int kSHA256FieldNumber = 5;
  bool sha256() const;
  void set_sha256(bool value);

  // bool is_auto_login = 7;
  void clear_is_auto_login();
  static const int kIsAutoLoginFieldNumber = 7;
  bool is_auto_login() const;
  void set_is_auto_login(bool value);

  // .common.enumeration.ELoginMode login_mode = 9;
  void clear_login_mode();
  static const int kLoginModeFieldNumber = 9;
  ::common::enumeration::ELoginMode login_mode() const;
  void set_login_mode(::common::enumeration::ELoginMode value);

  // @@protoc_insertion_point(class_scope:outer.user.UserLoginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr appkey_password_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::common::base::MobileBase* base_info_;
  bool sha256_;
  bool is_auto_login_;
  int login_mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsUserLoginRequestImpl();
};
// -------------------------------------------------------------------

class UserLoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.UserLoginResponse) */ {
 public:
  UserLoginResponse();
  virtual ~UserLoginResponse();

  UserLoginResponse(const UserLoginResponse& from);

  inline UserLoginResponse& operator=(const UserLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLoginResponse(UserLoginResponse&& from) noexcept
    : UserLoginResponse() {
    *this = ::std::move(from);
  }

  inline UserLoginResponse& operator=(UserLoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLoginResponse* internal_default_instance() {
    return reinterpret_cast<const UserLoginResponse*>(
               &_UserLoginResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(UserLoginResponse* other);
  friend void swap(UserLoginResponse& a, UserLoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLoginResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UserLoginResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserLoginResponse& from);
  void MergeFrom(const UserLoginResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserLoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .outer.user.UserInfo user_infos = 2;
  bool has_user_infos() const;
  void clear_user_infos();
  static const int kUserInfosFieldNumber = 2;
  const ::outer::user::UserInfo& user_infos() const;
  ::outer::user::UserInfo* release_user_infos();
  ::outer::user::UserInfo* mutable_user_infos();
  void set_allocated_user_infos(::outer::user::UserInfo* user_infos);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.user.UserLoginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::outer::user::UserInfo* user_infos_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsUserLoginResponseImpl();
};
// -------------------------------------------------------------------

class UserRegisterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.UserRegisterRequest) */ {
 public:
  UserRegisterRequest();
  virtual ~UserRegisterRequest();

  UserRegisterRequest(const UserRegisterRequest& from);

  inline UserRegisterRequest& operator=(const UserRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRegisterRequest(UserRegisterRequest&& from) noexcept
    : UserRegisterRequest() {
    *this = ::std::move(from);
  }

  inline UserRegisterRequest& operator=(UserRegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const UserRegisterRequest*>(
               &_UserRegisterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(UserRegisterRequest* other);
  friend void swap(UserRegisterRequest& a, UserRegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRegisterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UserRegisterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserRegisterRequest& from);
  void MergeFrom(const UserRegisterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserRegisterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string nick = 4;
  void clear_nick();
  static const int kNickFieldNumber = 4;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // string phone = 5;
  void clear_phone();
  static const int kPhoneFieldNumber = 5;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string appkey_password = 6;
  void clear_appkey_password();
  static const int kAppkeyPasswordFieldNumber = 6;
  const ::std::string& appkey_password() const;
  void set_appkey_password(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey_password(::std::string&& value);
  #endif
  void set_appkey_password(const char* value);
  void set_appkey_password(const char* value, size_t size);
  ::std::string* mutable_appkey_password();
  ::std::string* release_appkey_password();
  void set_allocated_appkey_password(::std::string* appkey_password);

  // bool SHA256 = 7;
  void clear_sha256();
  static const int kSHA256FieldNumber = 7;
  bool sha256() const;
  void set_sha256(bool value);

  // @@protoc_insertion_point(class_scope:outer.user.UserRegisterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr appkey_password_;
  bool sha256_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsUserRegisterRequestImpl();
};
// -------------------------------------------------------------------

class UserRegisterResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.UserRegisterResponse) */ {
 public:
  UserRegisterResponse();
  virtual ~UserRegisterResponse();

  UserRegisterResponse(const UserRegisterResponse& from);

  inline UserRegisterResponse& operator=(const UserRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserRegisterResponse(UserRegisterResponse&& from) noexcept
    : UserRegisterResponse() {
    *this = ::std::move(from);
  }

  inline UserRegisterResponse& operator=(UserRegisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const UserRegisterResponse*>(
               &_UserRegisterResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(UserRegisterResponse* other);
  friend void swap(UserRegisterResponse& a, UserRegisterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserRegisterResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UserRegisterResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserRegisterResponse& from);
  void MergeFrom(const UserRegisterResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserRegisterResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.user.UserRegisterResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsUserRegisterResponseImpl();
};
// -------------------------------------------------------------------

class PasswordUpdateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.PasswordUpdateRequest) */ {
 public:
  PasswordUpdateRequest();
  virtual ~PasswordUpdateRequest();

  PasswordUpdateRequest(const PasswordUpdateRequest& from);

  inline PasswordUpdateRequest& operator=(const PasswordUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PasswordUpdateRequest(PasswordUpdateRequest&& from) noexcept
    : PasswordUpdateRequest() {
    *this = ::std::move(from);
  }

  inline PasswordUpdateRequest& operator=(PasswordUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PasswordUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PasswordUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const PasswordUpdateRequest*>(
               &_PasswordUpdateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PasswordUpdateRequest* other);
  friend void swap(PasswordUpdateRequest& a, PasswordUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PasswordUpdateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PasswordUpdateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PasswordUpdateRequest& from);
  void MergeFrom(const PasswordUpdateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PasswordUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // bool SHA256 = 4;
  void clear_sha256();
  static const int kSHA256FieldNumber = 4;
  bool sha256() const;
  void set_sha256(bool value);

  // @@protoc_insertion_point(class_scope:outer.user.PasswordUpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  bool sha256_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsPasswordUpdateRequestImpl();
};
// -------------------------------------------------------------------

class PasswordUpdateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.PasswordUpdateResponse) */ {
 public:
  PasswordUpdateResponse();
  virtual ~PasswordUpdateResponse();

  PasswordUpdateResponse(const PasswordUpdateResponse& from);

  inline PasswordUpdateResponse& operator=(const PasswordUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PasswordUpdateResponse(PasswordUpdateResponse&& from) noexcept
    : PasswordUpdateResponse() {
    *this = ::std::move(from);
  }

  inline PasswordUpdateResponse& operator=(PasswordUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PasswordUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PasswordUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const PasswordUpdateResponse*>(
               &_PasswordUpdateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PasswordUpdateResponse* other);
  friend void swap(PasswordUpdateResponse& a, PasswordUpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PasswordUpdateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PasswordUpdateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PasswordUpdateResponse& from);
  void MergeFrom(const PasswordUpdateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PasswordUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.user.PasswordUpdateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsPasswordUpdateResponseImpl();
};
// -------------------------------------------------------------------

class NickUpdateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.NickUpdateRequest) */ {
 public:
  NickUpdateRequest();
  virtual ~NickUpdateRequest();

  NickUpdateRequest(const NickUpdateRequest& from);

  inline NickUpdateRequest& operator=(const NickUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NickUpdateRequest(NickUpdateRequest&& from) noexcept
    : NickUpdateRequest() {
    *this = ::std::move(from);
  }

  inline NickUpdateRequest& operator=(NickUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NickUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NickUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const NickUpdateRequest*>(
               &_NickUpdateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(NickUpdateRequest* other);
  friend void swap(NickUpdateRequest& a, NickUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NickUpdateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  NickUpdateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NickUpdateRequest& from);
  void MergeFrom(const NickUpdateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NickUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string nick = 3;
  void clear_nick();
  static const int kNickFieldNumber = 3;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // .common.enumeration.EClientType fromClientType = 4;
  void clear_fromclienttype();
  static const int kFromClientTypeFieldNumber = 4;
  ::common::enumeration::EClientType fromclienttype() const;
  void set_fromclienttype(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:outer.user.NickUpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  int fromclienttype_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsNickUpdateRequestImpl();
};
// -------------------------------------------------------------------

class NickUpdateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.NickUpdateResponse) */ {
 public:
  NickUpdateResponse();
  virtual ~NickUpdateResponse();

  NickUpdateResponse(const NickUpdateResponse& from);

  inline NickUpdateResponse& operator=(const NickUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NickUpdateResponse(NickUpdateResponse&& from) noexcept
    : NickUpdateResponse() {
    *this = ::std::move(from);
  }

  inline NickUpdateResponse& operator=(NickUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NickUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NickUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const NickUpdateResponse*>(
               &_NickUpdateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(NickUpdateResponse* other);
  friend void swap(NickUpdateResponse& a, NickUpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NickUpdateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  NickUpdateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NickUpdateResponse& from);
  void MergeFrom(const NickUpdateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NickUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.user.NickUpdateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsNickUpdateResponseImpl();
};
// -------------------------------------------------------------------

class PhoneUpdateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.PhoneUpdateRequest) */ {
 public:
  PhoneUpdateRequest();
  virtual ~PhoneUpdateRequest();

  PhoneUpdateRequest(const PhoneUpdateRequest& from);

  inline PhoneUpdateRequest& operator=(const PhoneUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhoneUpdateRequest(PhoneUpdateRequest&& from) noexcept
    : PhoneUpdateRequest() {
    *this = ::std::move(from);
  }

  inline PhoneUpdateRequest& operator=(PhoneUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhoneUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const PhoneUpdateRequest*>(
               &_PhoneUpdateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(PhoneUpdateRequest* other);
  friend void swap(PhoneUpdateRequest& a, PhoneUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhoneUpdateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PhoneUpdateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PhoneUpdateRequest& from);
  void MergeFrom(const PhoneUpdateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PhoneUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string update_phone = 3;
  void clear_update_phone();
  static const int kUpdatePhoneFieldNumber = 3;
  const ::std::string& update_phone() const;
  void set_update_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_update_phone(::std::string&& value);
  #endif
  void set_update_phone(const char* value);
  void set_update_phone(const char* value, size_t size);
  ::std::string* mutable_update_phone();
  ::std::string* release_update_phone();
  void set_allocated_update_phone(::std::string* update_phone);

  // .common.enumeration.EClientType fromClientType = 4;
  void clear_fromclienttype();
  static const int kFromClientTypeFieldNumber = 4;
  ::common::enumeration::EClientType fromclienttype() const;
  void set_fromclienttype(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:outer.user.PhoneUpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr update_phone_;
  int fromclienttype_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsPhoneUpdateRequestImpl();
};
// -------------------------------------------------------------------

class PhoneUpdateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.PhoneUpdateResponse) */ {
 public:
  PhoneUpdateResponse();
  virtual ~PhoneUpdateResponse();

  PhoneUpdateResponse(const PhoneUpdateResponse& from);

  inline PhoneUpdateResponse& operator=(const PhoneUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhoneUpdateResponse(PhoneUpdateResponse&& from) noexcept
    : PhoneUpdateResponse() {
    *this = ::std::move(from);
  }

  inline PhoneUpdateResponse& operator=(PhoneUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhoneUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhoneUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const PhoneUpdateResponse*>(
               &_PhoneUpdateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(PhoneUpdateResponse* other);
  friend void swap(PhoneUpdateResponse& a, PhoneUpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhoneUpdateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PhoneUpdateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PhoneUpdateResponse& from);
  void MergeFrom(const PhoneUpdateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PhoneUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.user.PhoneUpdateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsPhoneUpdateResponseImpl();
};
// -------------------------------------------------------------------

class UserSearchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.UserSearchRequest) */ {
 public:
  UserSearchRequest();
  virtual ~UserSearchRequest();

  UserSearchRequest(const UserSearchRequest& from);

  inline UserSearchRequest& operator=(const UserSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSearchRequest(UserSearchRequest&& from) noexcept
    : UserSearchRequest() {
    *this = ::std::move(from);
  }

  inline UserSearchRequest& operator=(UserSearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSearchRequest* internal_default_instance() {
    return reinterpret_cast<const UserSearchRequest*>(
               &_UserSearchRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(UserSearchRequest* other);
  friend void swap(UserSearchRequest& a, UserSearchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSearchRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UserSearchRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserSearchRequest& from);
  void MergeFrom(const UserSearchRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserSearchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string search_key = 5;
  void clear_search_key();
  static const int kSearchKeyFieldNumber = 5;
  const ::std::string& search_key() const;
  void set_search_key(const ::std::string& value);
  #if LANG_CXX11
  void set_search_key(::std::string&& value);
  #endif
  void set_search_key(const char* value);
  void set_search_key(const char* value, size_t size);
  ::std::string* mutable_search_key();
  ::std::string* release_search_key();
  void set_allocated_search_key(::std::string* search_key);

  // uint32 start = 3;
  void clear_start();
  static const int kStartFieldNumber = 3;
  ::google::protobuf::uint32 start() const;
  void set_start(::google::protobuf::uint32 value);

  // uint32 range = 4;
  void clear_range();
  static const int kRangeFieldNumber = 4;
  ::google::protobuf::uint32 range() const;
  void set_range(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.user.UserSearchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr search_key_;
  ::google::protobuf::uint32 start_;
  ::google::protobuf::uint32 range_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsUserSearchRequestImpl();
};
// -------------------------------------------------------------------

class UserSearchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.UserSearchResponse) */ {
 public:
  UserSearchResponse();
  virtual ~UserSearchResponse();

  UserSearchResponse(const UserSearchResponse& from);

  inline UserSearchResponse& operator=(const UserSearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserSearchResponse(UserSearchResponse&& from) noexcept
    : UserSearchResponse() {
    *this = ::std::move(from);
  }

  inline UserSearchResponse& operator=(UserSearchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSearchResponse* internal_default_instance() {
    return reinterpret_cast<const UserSearchResponse*>(
               &_UserSearchResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(UserSearchResponse* other);
  friend void swap(UserSearchResponse& a, UserSearchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserSearchResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UserSearchResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserSearchResponse& from);
  void MergeFrom(const UserSearchResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserSearchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.user.UserInfo user_infos = 2;
  int user_infos_size() const;
  void clear_user_infos();
  static const int kUserInfosFieldNumber = 2;
  const ::outer::user::UserInfo& user_infos(int index) const;
  ::outer::user::UserInfo* mutable_user_infos(int index);
  ::outer::user::UserInfo* add_user_infos();
  ::google::protobuf::RepeatedPtrField< ::outer::user::UserInfo >*
      mutable_user_infos();
  const ::google::protobuf::RepeatedPtrField< ::outer::user::UserInfo >&
      user_infos() const;

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // uint32 totalcount = 3;
  void clear_totalcount();
  static const int kTotalcountFieldNumber = 3;
  ::google::protobuf::uint32 totalcount() const;
  void set_totalcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.user.UserSearchResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::user::UserInfo > user_infos_;
  int ret_;
  ::google::protobuf::uint32 totalcount_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsUserSearchResponseImpl();
};
// -------------------------------------------------------------------

class GetUserInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.GetUserInfoRequest) */ {
 public:
  GetUserInfoRequest();
  virtual ~GetUserInfoRequest();

  GetUserInfoRequest(const GetUserInfoRequest& from);

  inline GetUserInfoRequest& operator=(const GetUserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetUserInfoRequest(GetUserInfoRequest&& from) noexcept
    : GetUserInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetUserInfoRequest& operator=(GetUserInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetUserInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserInfoRequest*>(
               &_GetUserInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(GetUserInfoRequest* other);
  friend void swap(GetUserInfoRequest& a, GetUserInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetUserInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetUserInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetUserInfoRequest& from);
  void MergeFrom(const GetUserInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetUserInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // @@protoc_insertion_point(class_scope:outer.user.GetUserInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsGetUserInfoRequestImpl();
};
// -------------------------------------------------------------------

class GetUserInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.GetUserInfoResponse) */ {
 public:
  GetUserInfoResponse();
  virtual ~GetUserInfoResponse();

  GetUserInfoResponse(const GetUserInfoResponse& from);

  inline GetUserInfoResponse& operator=(const GetUserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetUserInfoResponse(GetUserInfoResponse&& from) noexcept
    : GetUserInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetUserInfoResponse& operator=(GetUserInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetUserInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserInfoResponse*>(
               &_GetUserInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(GetUserInfoResponse* other);
  friend void swap(GetUserInfoResponse& a, GetUserInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetUserInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetUserInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetUserInfoResponse& from);
  void MergeFrom(const GetUserInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetUserInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .outer.user.UserInfo user_infos = 2;
  bool has_user_infos() const;
  void clear_user_infos();
  static const int kUserInfosFieldNumber = 2;
  const ::outer::user::UserInfo& user_infos() const;
  ::outer::user::UserInfo* release_user_infos();
  ::outer::user::UserInfo* mutable_user_infos();
  void set_allocated_user_infos(::outer::user::UserInfo* user_infos);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.user.GetUserInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::outer::user::UserInfo* user_infos_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsGetUserInfoResponseImpl();
};
// -------------------------------------------------------------------

class BatchGetUserInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.BatchGetUserInfoRequest) */ {
 public:
  BatchGetUserInfoRequest();
  virtual ~BatchGetUserInfoRequest();

  BatchGetUserInfoRequest(const BatchGetUserInfoRequest& from);

  inline BatchGetUserInfoRequest& operator=(const BatchGetUserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchGetUserInfoRequest(BatchGetUserInfoRequest&& from) noexcept
    : BatchGetUserInfoRequest() {
    *this = ::std::move(from);
  }

  inline BatchGetUserInfoRequest& operator=(BatchGetUserInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchGetUserInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchGetUserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const BatchGetUserInfoRequest*>(
               &_BatchGetUserInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(BatchGetUserInfoRequest* other);
  friend void swap(BatchGetUserInfoRequest& a, BatchGetUserInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchGetUserInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchGetUserInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchGetUserInfoRequest& from);
  void MergeFrom(const BatchGetUserInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchGetUserInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string username = 2;
  int username_size() const;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username(int index) const;
  ::std::string* mutable_username(int index);
  void set_username(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_username(int index, ::std::string&& value);
  #endif
  void set_username(int index, const char* value);
  void set_username(int index, const char* value, size_t size);
  ::std::string* add_username();
  void add_username(const ::std::string& value);
  #if LANG_CXX11
  void add_username(::std::string&& value);
  #endif
  void add_username(const char* value);
  void add_username(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& username() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_username();

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // @@protoc_insertion_point(class_scope:outer.user.BatchGetUserInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsBatchGetUserInfoRequestImpl();
};
// -------------------------------------------------------------------

class BatchGetUserInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.BatchGetUserInfoResponse) */ {
 public:
  BatchGetUserInfoResponse();
  virtual ~BatchGetUserInfoResponse();

  BatchGetUserInfoResponse(const BatchGetUserInfoResponse& from);

  inline BatchGetUserInfoResponse& operator=(const BatchGetUserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchGetUserInfoResponse(BatchGetUserInfoResponse&& from) noexcept
    : BatchGetUserInfoResponse() {
    *this = ::std::move(from);
  }

  inline BatchGetUserInfoResponse& operator=(BatchGetUserInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchGetUserInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchGetUserInfoResponse* internal_default_instance() {
    return reinterpret_cast<const BatchGetUserInfoResponse*>(
               &_BatchGetUserInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(BatchGetUserInfoResponse* other);
  friend void swap(BatchGetUserInfoResponse& a, BatchGetUserInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchGetUserInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchGetUserInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchGetUserInfoResponse& from);
  void MergeFrom(const BatchGetUserInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchGetUserInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.user.UserInfo user_info = 2;
  int user_info_size() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 2;
  const ::outer::user::UserInfo& user_info(int index) const;
  ::outer::user::UserInfo* mutable_user_info(int index);
  ::outer::user::UserInfo* add_user_info();
  ::google::protobuf::RepeatedPtrField< ::outer::user::UserInfo >*
      mutable_user_info();
  const ::google::protobuf::RepeatedPtrField< ::outer::user::UserInfo >&
      user_info() const;

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.user.BatchGetUserInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::user::UserInfo > user_info_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsBatchGetUserInfoResponseImpl();
};
// -------------------------------------------------------------------

class CheckUserListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.CheckUserListRequest) */ {
 public:
  CheckUserListRequest();
  virtual ~CheckUserListRequest();

  CheckUserListRequest(const CheckUserListRequest& from);

  inline CheckUserListRequest& operator=(const CheckUserListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckUserListRequest(CheckUserListRequest&& from) noexcept
    : CheckUserListRequest() {
    *this = ::std::move(from);
  }

  inline CheckUserListRequest& operator=(CheckUserListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckUserListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckUserListRequest* internal_default_instance() {
    return reinterpret_cast<const CheckUserListRequest*>(
               &_CheckUserListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(CheckUserListRequest* other);
  friend void swap(CheckUserListRequest& a, CheckUserListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckUserListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckUserListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckUserListRequest& from);
  void MergeFrom(const CheckUserListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckUserListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string username = 2;
  int username_size() const;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username(int index) const;
  ::std::string* mutable_username(int index);
  void set_username(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_username(int index, ::std::string&& value);
  #endif
  void set_username(int index, const char* value);
  void set_username(int index, const char* value, size_t size);
  ::std::string* add_username();
  void add_username(const ::std::string& value);
  #if LANG_CXX11
  void add_username(::std::string&& value);
  #endif
  void add_username(const char* value);
  void add_username(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& username() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_username();

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // @@protoc_insertion_point(class_scope:outer.user.CheckUserListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsCheckUserListRequestImpl();
};
// -------------------------------------------------------------------

class CheckUserListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.CheckUserListResponse) */ {
 public:
  CheckUserListResponse();
  virtual ~CheckUserListResponse();

  CheckUserListResponse(const CheckUserListResponse& from);

  inline CheckUserListResponse& operator=(const CheckUserListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckUserListResponse(CheckUserListResponse&& from) noexcept
    : CheckUserListResponse() {
    *this = ::std::move(from);
  }

  inline CheckUserListResponse& operator=(CheckUserListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckUserListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckUserListResponse* internal_default_instance() {
    return reinterpret_cast<const CheckUserListResponse*>(
               &_CheckUserListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(CheckUserListResponse* other);
  friend void swap(CheckUserListResponse& a, CheckUserListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckUserListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckUserListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckUserListResponse& from);
  void MergeFrom(const CheckUserListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckUserListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string exist_users = 2;
  int exist_users_size() const;
  void clear_exist_users();
  static const int kExistUsersFieldNumber = 2;
  const ::std::string& exist_users(int index) const;
  ::std::string* mutable_exist_users(int index);
  void set_exist_users(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_exist_users(int index, ::std::string&& value);
  #endif
  void set_exist_users(int index, const char* value);
  void set_exist_users(int index, const char* value, size_t size);
  ::std::string* add_exist_users();
  void add_exist_users(const ::std::string& value);
  #if LANG_CXX11
  void add_exist_users(::std::string&& value);
  #endif
  void add_exist_users(const char* value);
  void add_exist_users(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& exist_users() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_exist_users();

  // repeated string unexist_users = 3;
  int unexist_users_size() const;
  void clear_unexist_users();
  static const int kUnexistUsersFieldNumber = 3;
  const ::std::string& unexist_users(int index) const;
  ::std::string* mutable_unexist_users(int index);
  void set_unexist_users(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_unexist_users(int index, ::std::string&& value);
  #endif
  void set_unexist_users(int index, const char* value);
  void set_unexist_users(int index, const char* value, size_t size);
  ::std::string* add_unexist_users();
  void add_unexist_users(const ::std::string& value);
  #if LANG_CXX11
  void add_unexist_users(::std::string&& value);
  #endif
  void add_unexist_users(const char* value);
  void add_unexist_users(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& unexist_users() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_unexist_users();

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.user.CheckUserListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> exist_users_;
  ::google::protobuf::RepeatedPtrField< ::std::string> unexist_users_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsCheckUserListResponseImpl();
};
// -------------------------------------------------------------------

class SetSilentStateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.SetSilentStateRequest) */ {
 public:
  SetSilentStateRequest();
  virtual ~SetSilentStateRequest();

  SetSilentStateRequest(const SetSilentStateRequest& from);

  inline SetSilentStateRequest& operator=(const SetSilentStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetSilentStateRequest(SetSilentStateRequest&& from) noexcept
    : SetSilentStateRequest() {
    *this = ::std::move(from);
  }

  inline SetSilentStateRequest& operator=(SetSilentStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetSilentStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSilentStateRequest* internal_default_instance() {
    return reinterpret_cast<const SetSilentStateRequest*>(
               &_SetSilentStateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(SetSilentStateRequest* other);
  friend void swap(SetSilentStateRequest& a, SetSilentStateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetSilentStateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetSilentStateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetSilentStateRequest& from);
  void MergeFrom(const SetSilentStateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetSilentStateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from = 1;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // string to = 2;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // .common.enumeration.ESilent silent = 4;
  void clear_silent();
  static const int kSilentFieldNumber = 4;
  ::common::enumeration::ESilent silent() const;
  void set_silent(::common::enumeration::ESilent value);

  // .common.enumeration.EClientType from_client_type = 5;
  void clear_from_client_type();
  static const int kFromClientTypeFieldNumber = 5;
  ::common::enumeration::EClientType from_client_type() const;
  void set_from_client_type(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:outer.user.SetSilentStateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  int silent_;
  int from_client_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsSetSilentStateRequestImpl();
};
// -------------------------------------------------------------------

class SetSilentStateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.SetSilentStateResponse) */ {
 public:
  SetSilentStateResponse();
  virtual ~SetSilentStateResponse();

  SetSilentStateResponse(const SetSilentStateResponse& from);

  inline SetSilentStateResponse& operator=(const SetSilentStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetSilentStateResponse(SetSilentStateResponse&& from) noexcept
    : SetSilentStateResponse() {
    *this = ::std::move(from);
  }

  inline SetSilentStateResponse& operator=(SetSilentStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetSilentStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSilentStateResponse* internal_default_instance() {
    return reinterpret_cast<const SetSilentStateResponse*>(
               &_SetSilentStateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(SetSilentStateResponse* other);
  friend void swap(SetSilentStateResponse& a, SetSilentStateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetSilentStateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SetSilentStateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetSilentStateResponse& from);
  void MergeFrom(const SetSilentStateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetSilentStateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.user.SetSilentStateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsSetSilentStateResponseImpl();
};
// -------------------------------------------------------------------

class UploadAvatarRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.UploadAvatarRequest) */ {
 public:
  UploadAvatarRequest();
  virtual ~UploadAvatarRequest();

  UploadAvatarRequest(const UploadAvatarRequest& from);

  inline UploadAvatarRequest& operator=(const UploadAvatarRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UploadAvatarRequest(UploadAvatarRequest&& from) noexcept
    : UploadAvatarRequest() {
    *this = ::std::move(from);
  }

  inline UploadAvatarRequest& operator=(UploadAvatarRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadAvatarRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadAvatarRequest* internal_default_instance() {
    return reinterpret_cast<const UploadAvatarRequest*>(
               &_UploadAvatarRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(UploadAvatarRequest* other);
  friend void swap(UploadAvatarRequest& a, UploadAvatarRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UploadAvatarRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadAvatarRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadAvatarRequest& from);
  void MergeFrom(const UploadAvatarRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadAvatarRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string original_link = 3;
  void clear_original_link();
  static const int kOriginalLinkFieldNumber = 3;
  const ::std::string& original_link() const;
  void set_original_link(const ::std::string& value);
  #if LANG_CXX11
  void set_original_link(::std::string&& value);
  #endif
  void set_original_link(const char* value);
  void set_original_link(const char* value, size_t size);
  ::std::string* mutable_original_link();
  ::std::string* release_original_link();
  void set_allocated_original_link(::std::string* original_link);

  // string thumbnail_link = 4;
  void clear_thumbnail_link();
  static const int kThumbnailLinkFieldNumber = 4;
  const ::std::string& thumbnail_link() const;
  void set_thumbnail_link(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_link(::std::string&& value);
  #endif
  void set_thumbnail_link(const char* value);
  void set_thumbnail_link(const char* value, size_t size);
  ::std::string* mutable_thumbnail_link();
  ::std::string* release_thumbnail_link();
  void set_allocated_thumbnail_link(::std::string* thumbnail_link);

  // .common.enumeration.EClientType fromClientType = 5;
  void clear_fromclienttype();
  static const int kFromClientTypeFieldNumber = 5;
  ::common::enumeration::EClientType fromclienttype() const;
  void set_fromclienttype(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:outer.user.UploadAvatarRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr original_link_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_link_;
  int fromclienttype_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsUploadAvatarRequestImpl();
};
// -------------------------------------------------------------------

class UploadAvatarResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.UploadAvatarResponse) */ {
 public:
  UploadAvatarResponse();
  virtual ~UploadAvatarResponse();

  UploadAvatarResponse(const UploadAvatarResponse& from);

  inline UploadAvatarResponse& operator=(const UploadAvatarResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UploadAvatarResponse(UploadAvatarResponse&& from) noexcept
    : UploadAvatarResponse() {
    *this = ::std::move(from);
  }

  inline UploadAvatarResponse& operator=(UploadAvatarResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadAvatarResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadAvatarResponse* internal_default_instance() {
    return reinterpret_cast<const UploadAvatarResponse*>(
               &_UploadAvatarResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(UploadAvatarResponse* other);
  friend void swap(UploadAvatarResponse& a, UploadAvatarResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UploadAvatarResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadAvatarResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadAvatarResponse& from);
  void MergeFrom(const UploadAvatarResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadAvatarResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.user.UploadAvatarResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsUploadAvatarResponseImpl();
};
// -------------------------------------------------------------------

class GetMyShieldingListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.GetMyShieldingListRequest) */ {
 public:
  GetMyShieldingListRequest();
  virtual ~GetMyShieldingListRequest();

  GetMyShieldingListRequest(const GetMyShieldingListRequest& from);

  inline GetMyShieldingListRequest& operator=(const GetMyShieldingListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMyShieldingListRequest(GetMyShieldingListRequest&& from) noexcept
    : GetMyShieldingListRequest() {
    *this = ::std::move(from);
  }

  inline GetMyShieldingListRequest& operator=(GetMyShieldingListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMyShieldingListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMyShieldingListRequest* internal_default_instance() {
    return reinterpret_cast<const GetMyShieldingListRequest*>(
               &_GetMyShieldingListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(GetMyShieldingListRequest* other);
  friend void swap(GetMyShieldingListRequest& a, GetMyShieldingListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMyShieldingListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMyShieldingListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMyShieldingListRequest& from);
  void MergeFrom(const GetMyShieldingListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMyShieldingListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:outer.user.GetMyShieldingListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsGetMyShieldingListRequestImpl();
};
// -------------------------------------------------------------------

class GetMyShieldingListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.GetMyShieldingListResponse) */ {
 public:
  GetMyShieldingListResponse();
  virtual ~GetMyShieldingListResponse();

  GetMyShieldingListResponse(const GetMyShieldingListResponse& from);

  inline GetMyShieldingListResponse& operator=(const GetMyShieldingListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMyShieldingListResponse(GetMyShieldingListResponse&& from) noexcept
    : GetMyShieldingListResponse() {
    *this = ::std::move(from);
  }

  inline GetMyShieldingListResponse& operator=(GetMyShieldingListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMyShieldingListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMyShieldingListResponse* internal_default_instance() {
    return reinterpret_cast<const GetMyShieldingListResponse*>(
               &_GetMyShieldingListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(GetMyShieldingListResponse* other);
  friend void swap(GetMyShieldingListResponse& a, GetMyShieldingListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMyShieldingListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMyShieldingListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMyShieldingListResponse& from);
  void MergeFrom(const GetMyShieldingListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMyShieldingListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string usernames = 2;
  int usernames_size() const;
  void clear_usernames();
  static const int kUsernamesFieldNumber = 2;
  const ::std::string& usernames(int index) const;
  ::std::string* mutable_usernames(int index);
  void set_usernames(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_usernames(int index, ::std::string&& value);
  #endif
  void set_usernames(int index, const char* value);
  void set_usernames(int index, const char* value, size_t size);
  ::std::string* add_usernames();
  void add_usernames(const ::std::string& value);
  #if LANG_CXX11
  void add_usernames(::std::string&& value);
  #endif
  void add_usernames(const char* value);
  void add_usernames(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& usernames() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_usernames();

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.user.GetMyShieldingListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> usernames_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsGetMyShieldingListResponseImpl();
};
// -------------------------------------------------------------------

class SetShieldingStateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.SetShieldingStateRequest) */ {
 public:
  SetShieldingStateRequest();
  virtual ~SetShieldingStateRequest();

  SetShieldingStateRequest(const SetShieldingStateRequest& from);

  inline SetShieldingStateRequest& operator=(const SetShieldingStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetShieldingStateRequest(SetShieldingStateRequest&& from) noexcept
    : SetShieldingStateRequest() {
    *this = ::std::move(from);
  }

  inline SetShieldingStateRequest& operator=(SetShieldingStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetShieldingStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetShieldingStateRequest* internal_default_instance() {
    return reinterpret_cast<const SetShieldingStateRequest*>(
               &_SetShieldingStateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(SetShieldingStateRequest* other);
  friend void swap(SetShieldingStateRequest& a, SetShieldingStateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetShieldingStateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetShieldingStateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetShieldingStateRequest& from);
  void MergeFrom(const SetShieldingStateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetShieldingStateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string other_username = 1;
  void clear_other_username();
  static const int kOtherUsernameFieldNumber = 1;
  const ::std::string& other_username() const;
  void set_other_username(const ::std::string& value);
  #if LANG_CXX11
  void set_other_username(::std::string&& value);
  #endif
  void set_other_username(const char* value);
  void set_other_username(const char* value, size_t size);
  ::std::string* mutable_other_username();
  ::std::string* release_other_username();
  void set_allocated_other_username(::std::string* other_username);

  // string myself_username = 2;
  void clear_myself_username();
  static const int kMyselfUsernameFieldNumber = 2;
  const ::std::string& myself_username() const;
  void set_myself_username(const ::std::string& value);
  #if LANG_CXX11
  void set_myself_username(::std::string&& value);
  #endif
  void set_myself_username(const char* value);
  void set_myself_username(const char* value, size_t size);
  ::std::string* mutable_myself_username();
  ::std::string* release_myself_username();
  void set_allocated_myself_username(::std::string* myself_username);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // bool is_shielding = 4;
  void clear_is_shielding();
  static const int kIsShieldingFieldNumber = 4;
  bool is_shielding() const;
  void set_is_shielding(bool value);

  // .common.enumeration.EClientType from_client_type = 5;
  void clear_from_client_type();
  static const int kFromClientTypeFieldNumber = 5;
  ::common::enumeration::EClientType from_client_type() const;
  void set_from_client_type(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:outer.user.SetShieldingStateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr other_username_;
  ::google::protobuf::internal::ArenaStringPtr myself_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  bool is_shielding_;
  int from_client_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsSetShieldingStateRequestImpl();
};
// -------------------------------------------------------------------

class SetShieldingStateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.SetShieldingStateResponse) */ {
 public:
  SetShieldingStateResponse();
  virtual ~SetShieldingStateResponse();

  SetShieldingStateResponse(const SetShieldingStateResponse& from);

  inline SetShieldingStateResponse& operator=(const SetShieldingStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetShieldingStateResponse(SetShieldingStateResponse&& from) noexcept
    : SetShieldingStateResponse() {
    *this = ::std::move(from);
  }

  inline SetShieldingStateResponse& operator=(SetShieldingStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetShieldingStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetShieldingStateResponse* internal_default_instance() {
    return reinterpret_cast<const SetShieldingStateResponse*>(
               &_SetShieldingStateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(SetShieldingStateResponse* other);
  friend void swap(SetShieldingStateResponse& a, SetShieldingStateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetShieldingStateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SetShieldingStateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetShieldingStateResponse& from);
  void MergeFrom(const SetShieldingStateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetShieldingStateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.user.SetShieldingStateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsSetShieldingStateResponseImpl();
};
// -------------------------------------------------------------------

class QueryUserOnlineStatusRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.QueryUserOnlineStatusRequest) */ {
 public:
  QueryUserOnlineStatusRequest();
  virtual ~QueryUserOnlineStatusRequest();

  QueryUserOnlineStatusRequest(const QueryUserOnlineStatusRequest& from);

  inline QueryUserOnlineStatusRequest& operator=(const QueryUserOnlineStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryUserOnlineStatusRequest(QueryUserOnlineStatusRequest&& from) noexcept
    : QueryUserOnlineStatusRequest() {
    *this = ::std::move(from);
  }

  inline QueryUserOnlineStatusRequest& operator=(QueryUserOnlineStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUserOnlineStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryUserOnlineStatusRequest* internal_default_instance() {
    return reinterpret_cast<const QueryUserOnlineStatusRequest*>(
               &_QueryUserOnlineStatusRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(QueryUserOnlineStatusRequest* other);
  friend void swap(QueryUserOnlineStatusRequest& a, QueryUserOnlineStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryUserOnlineStatusRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryUserOnlineStatusRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryUserOnlineStatusRequest& from);
  void MergeFrom(const QueryUserOnlineStatusRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryUserOnlineStatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // @@protoc_insertion_point(class_scope:outer.user.QueryUserOnlineStatusRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsQueryUserOnlineStatusRequestImpl();
};
// -------------------------------------------------------------------

class QueryUserOnlineStatusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.QueryUserOnlineStatusResponse) */ {
 public:
  QueryUserOnlineStatusResponse();
  virtual ~QueryUserOnlineStatusResponse();

  QueryUserOnlineStatusResponse(const QueryUserOnlineStatusResponse& from);

  inline QueryUserOnlineStatusResponse& operator=(const QueryUserOnlineStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryUserOnlineStatusResponse(QueryUserOnlineStatusResponse&& from) noexcept
    : QueryUserOnlineStatusResponse() {
    *this = ::std::move(from);
  }

  inline QueryUserOnlineStatusResponse& operator=(QueryUserOnlineStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUserOnlineStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryUserOnlineStatusResponse* internal_default_instance() {
    return reinterpret_cast<const QueryUserOnlineStatusResponse*>(
               &_QueryUserOnlineStatusResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(QueryUserOnlineStatusResponse* other);
  friend void swap(QueryUserOnlineStatusResponse& a, QueryUserOnlineStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryUserOnlineStatusResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryUserOnlineStatusResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryUserOnlineStatusResponse& from);
  void MergeFrom(const QueryUserOnlineStatusResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryUserOnlineStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // .common.enumeration.EUserOnlineStatus mobile_phone = 2;
  void clear_mobile_phone();
  static const int kMobilePhoneFieldNumber = 2;
  ::common::enumeration::EUserOnlineStatus mobile_phone() const;
  void set_mobile_phone(::common::enumeration::EUserOnlineStatus value);

  // .common.enumeration.EUserOnlineStatus car_machine = 3;
  void clear_car_machine();
  static const int kCarMachineFieldNumber = 3;
  ::common::enumeration::EUserOnlineStatus car_machine() const;
  void set_car_machine(::common::enumeration::EUserOnlineStatus value);

  // @@protoc_insertion_point(class_scope:outer.user.QueryUserOnlineStatusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  int mobile_phone_;
  int car_machine_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsQueryUserOnlineStatusResponseImpl();
};
// -------------------------------------------------------------------

class KickCarMachineRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.KickCarMachineRequest) */ {
 public:
  KickCarMachineRequest();
  virtual ~KickCarMachineRequest();

  KickCarMachineRequest(const KickCarMachineRequest& from);

  inline KickCarMachineRequest& operator=(const KickCarMachineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KickCarMachineRequest(KickCarMachineRequest&& from) noexcept
    : KickCarMachineRequest() {
    *this = ::std::move(from);
  }

  inline KickCarMachineRequest& operator=(KickCarMachineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KickCarMachineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickCarMachineRequest* internal_default_instance() {
    return reinterpret_cast<const KickCarMachineRequest*>(
               &_KickCarMachineRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(KickCarMachineRequest* other);
  friend void swap(KickCarMachineRequest& a, KickCarMachineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KickCarMachineRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  KickCarMachineRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KickCarMachineRequest& from);
  void MergeFrom(const KickCarMachineRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KickCarMachineRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .common.enumeration.EClientType Kick_client_type = 4;
  int kick_client_type_size() const;
  void clear_kick_client_type();
  static const int kKickClientTypeFieldNumber = 4;
  ::common::enumeration::EClientType kick_client_type(int index) const;
  void set_kick_client_type(int index, ::common::enumeration::EClientType value);
  void add_kick_client_type(::common::enumeration::EClientType value);
  const ::google::protobuf::RepeatedField<int>& kick_client_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_kick_client_type();

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string reason = 5;
  void clear_reason();
  static const int kReasonFieldNumber = 5;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .common.base.MobileBase base_info = 3;
  bool has_base_info() const;
  void clear_base_info();
  static const int kBaseInfoFieldNumber = 3;
  const ::common::base::MobileBase& base_info() const;
  ::common::base::MobileBase* release_base_info();
  ::common::base::MobileBase* mutable_base_info();
  void set_allocated_base_info(::common::base::MobileBase* base_info);

  // @@protoc_insertion_point(class_scope:outer.user.KickCarMachineRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> kick_client_type_;
  mutable int _kick_client_type_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::common::base::MobileBase* base_info_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsKickCarMachineRequestImpl();
};
// -------------------------------------------------------------------

class KickCarMachineResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.KickCarMachineResponse) */ {
 public:
  KickCarMachineResponse();
  virtual ~KickCarMachineResponse();

  KickCarMachineResponse(const KickCarMachineResponse& from);

  inline KickCarMachineResponse& operator=(const KickCarMachineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KickCarMachineResponse(KickCarMachineResponse&& from) noexcept
    : KickCarMachineResponse() {
    *this = ::std::move(from);
  }

  inline KickCarMachineResponse& operator=(KickCarMachineResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KickCarMachineResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickCarMachineResponse* internal_default_instance() {
    return reinterpret_cast<const KickCarMachineResponse*>(
               &_KickCarMachineResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(KickCarMachineResponse* other);
  friend void swap(KickCarMachineResponse& a, KickCarMachineResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KickCarMachineResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  KickCarMachineResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KickCarMachineResponse& from);
  void MergeFrom(const KickCarMachineResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KickCarMachineResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.user.KickCarMachineResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsKickCarMachineResponseImpl();
};
// -------------------------------------------------------------------

class DisplayUpdateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.DisplayUpdateRequest) */ {
 public:
  DisplayUpdateRequest();
  virtual ~DisplayUpdateRequest();

  DisplayUpdateRequest(const DisplayUpdateRequest& from);

  inline DisplayUpdateRequest& operator=(const DisplayUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisplayUpdateRequest(DisplayUpdateRequest&& from) noexcept
    : DisplayUpdateRequest() {
    *this = ::std::move(from);
  }

  inline DisplayUpdateRequest& operator=(DisplayUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisplayUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const DisplayUpdateRequest*>(
               &_DisplayUpdateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(DisplayUpdateRequest* other);
  friend void swap(DisplayUpdateRequest& a, DisplayUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisplayUpdateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DisplayUpdateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisplayUpdateRequest& from);
  void MergeFrom(const DisplayUpdateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisplayUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string display = 3;
  void clear_display();
  static const int kDisplayFieldNumber = 3;
  const ::std::string& display() const;
  void set_display(const ::std::string& value);
  #if LANG_CXX11
  void set_display(::std::string&& value);
  #endif
  void set_display(const char* value);
  void set_display(const char* value, size_t size);
  ::std::string* mutable_display();
  ::std::string* release_display();
  void set_allocated_display(::std::string* display);

  // .common.enumeration.EClientType fromClientType = 4;
  void clear_fromclienttype();
  static const int kFromClientTypeFieldNumber = 4;
  ::common::enumeration::EClientType fromclienttype() const;
  void set_fromclienttype(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:outer.user.DisplayUpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr display_;
  int fromclienttype_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsDisplayUpdateRequestImpl();
};
// -------------------------------------------------------------------

class DisplayUpdateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.user.DisplayUpdateResponse) */ {
 public:
  DisplayUpdateResponse();
  virtual ~DisplayUpdateResponse();

  DisplayUpdateResponse(const DisplayUpdateResponse& from);

  inline DisplayUpdateResponse& operator=(const DisplayUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisplayUpdateResponse(DisplayUpdateResponse&& from) noexcept
    : DisplayUpdateResponse() {
    *this = ::std::move(from);
  }

  inline DisplayUpdateResponse& operator=(DisplayUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisplayUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const DisplayUpdateResponse*>(
               &_DisplayUpdateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(DisplayUpdateResponse* other);
  friend void swap(DisplayUpdateResponse& a, DisplayUpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisplayUpdateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DisplayUpdateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisplayUpdateResponse& from);
  void MergeFrom(const DisplayUpdateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisplayUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.user.DisplayUpdateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fuser_2eproto::TableStruct;
  friend void ::protobuf_outer_2fuser_2eproto::InitDefaultsDisplayUpdateResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo

// string username = 1;
inline void UserInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::username() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.username)
  return username_.GetNoArena();
}
inline void UserInfo::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.username)
}
#if LANG_CXX11
inline void UserInfo::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserInfo.username)
}
#endif
inline void UserInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserInfo.username)
}
inline void UserInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserInfo.username)
}
inline ::std::string* UserInfo::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserInfo.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_username() {
  // @@protoc_insertion_point(field_release:outer.user.UserInfo.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserInfo.username)
}

// string appkey = 2;
inline void UserInfo::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.appkey)
  return appkey_.GetNoArena();
}
inline void UserInfo::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.appkey)
}
#if LANG_CXX11
inline void UserInfo::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserInfo.appkey)
}
#endif
inline void UserInfo::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserInfo.appkey)
}
inline void UserInfo::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserInfo.appkey)
}
inline ::std::string* UserInfo::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserInfo.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.UserInfo.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserInfo.appkey)
}

// string nick = 3;
inline void UserInfo::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::nick() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.nick)
  return nick_.GetNoArena();
}
inline void UserInfo::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.nick)
}
#if LANG_CXX11
inline void UserInfo::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserInfo.nick)
}
#endif
inline void UserInfo::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserInfo.nick)
}
inline void UserInfo::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserInfo.nick)
}
inline ::std::string* UserInfo::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserInfo.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_nick() {
  // @@protoc_insertion_point(field_release:outer.user.UserInfo.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserInfo.nick)
}

// string phone = 4;
inline void UserInfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::phone() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.phone)
  return phone_.GetNoArena();
}
inline void UserInfo::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.phone)
}
#if LANG_CXX11
inline void UserInfo::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserInfo.phone)
}
#endif
inline void UserInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserInfo.phone)
}
inline void UserInfo::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserInfo.phone)
}
inline ::std::string* UserInfo::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserInfo.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_phone() {
  // @@protoc_insertion_point(field_release:outer.user.UserInfo.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserInfo.phone)
}

// string original_link = 5;
inline void UserInfo::clear_original_link() {
  original_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::original_link() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.original_link)
  return original_link_.GetNoArena();
}
inline void UserInfo::set_original_link(const ::std::string& value) {
  
  original_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.original_link)
}
#if LANG_CXX11
inline void UserInfo::set_original_link(::std::string&& value) {
  
  original_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserInfo.original_link)
}
#endif
inline void UserInfo::set_original_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  original_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserInfo.original_link)
}
inline void UserInfo::set_original_link(const char* value, size_t size) {
  
  original_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserInfo.original_link)
}
inline ::std::string* UserInfo::mutable_original_link() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserInfo.original_link)
  return original_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_original_link() {
  // @@protoc_insertion_point(field_release:outer.user.UserInfo.original_link)
  
  return original_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_original_link(::std::string* original_link) {
  if (original_link != NULL) {
    
  } else {
    
  }
  original_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_link);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserInfo.original_link)
}

// string thumbnail_link = 6;
inline void UserInfo::clear_thumbnail_link() {
  thumbnail_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::thumbnail_link() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.thumbnail_link)
  return thumbnail_link_.GetNoArena();
}
inline void UserInfo::set_thumbnail_link(const ::std::string& value) {
  
  thumbnail_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.thumbnail_link)
}
#if LANG_CXX11
inline void UserInfo::set_thumbnail_link(::std::string&& value) {
  
  thumbnail_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserInfo.thumbnail_link)
}
#endif
inline void UserInfo::set_thumbnail_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserInfo.thumbnail_link)
}
inline void UserInfo::set_thumbnail_link(const char* value, size_t size) {
  
  thumbnail_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserInfo.thumbnail_link)
}
inline ::std::string* UserInfo::mutable_thumbnail_link() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserInfo.thumbnail_link)
  return thumbnail_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_thumbnail_link() {
  // @@protoc_insertion_point(field_release:outer.user.UserInfo.thumbnail_link)
  
  return thumbnail_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_thumbnail_link(::std::string* thumbnail_link) {
  if (thumbnail_link != NULL) {
    
  } else {
    
  }
  thumbnail_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_link);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserInfo.thumbnail_link)
}

// uint64 created = 7;
inline void UserInfo::clear_created() {
  created_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserInfo::created() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.created)
  return created_;
}
inline void UserInfo::set_created(::google::protobuf::uint64 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.created)
}

// uint64 modified = 8;
inline void UserInfo::clear_modified() {
  modified_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserInfo::modified() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.modified)
  return modified_;
}
inline void UserInfo::set_modified(::google::protobuf::uint64 value) {
  
  modified_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.modified)
}

// string province = 9;
inline void UserInfo::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::province() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.province)
  return province_.GetNoArena();
}
inline void UserInfo::set_province(const ::std::string& value) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.province)
}
#if LANG_CXX11
inline void UserInfo::set_province(::std::string&& value) {
  
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserInfo.province)
}
#endif
inline void UserInfo::set_province(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserInfo.province)
}
inline void UserInfo::set_province(const char* value, size_t size) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserInfo.province)
}
inline ::std::string* UserInfo::mutable_province() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserInfo.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_province() {
  // @@protoc_insertion_point(field_release:outer.user.UserInfo.province)
  
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    
  } else {
    
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserInfo.province)
}

// string country = 10;
inline void UserInfo::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::country() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.country)
  return country_.GetNoArena();
}
inline void UserInfo::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.country)
}
#if LANG_CXX11
inline void UserInfo::set_country(::std::string&& value) {
  
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserInfo.country)
}
#endif
inline void UserInfo::set_country(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserInfo.country)
}
inline void UserInfo::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserInfo.country)
}
inline ::std::string* UserInfo::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserInfo.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_country() {
  // @@protoc_insertion_point(field_release:outer.user.UserInfo.country)
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserInfo.country)
}

// string sex = 11;
inline void UserInfo::clear_sex() {
  sex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::sex() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.sex)
  return sex_.GetNoArena();
}
inline void UserInfo::set_sex(const ::std::string& value) {
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.sex)
}
#if LANG_CXX11
inline void UserInfo::set_sex(::std::string&& value) {
  
  sex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserInfo.sex)
}
#endif
inline void UserInfo::set_sex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserInfo.sex)
}
inline void UserInfo::set_sex(const char* value, size_t size) {
  
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserInfo.sex)
}
inline ::std::string* UserInfo::mutable_sex() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserInfo.sex)
  return sex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_sex() {
  // @@protoc_insertion_point(field_release:outer.user.UserInfo.sex)
  
  return sex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_sex(::std::string* sex) {
  if (sex != NULL) {
    
  } else {
    
  }
  sex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sex);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserInfo.sex)
}

// bool join_fleet = 12;
inline void UserInfo::clear_join_fleet() {
  join_fleet_ = false;
}
inline bool UserInfo::join_fleet() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.join_fleet)
  return join_fleet_;
}
inline void UserInfo::set_join_fleet(bool value) {
  
  join_fleet_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.join_fleet)
}

// string fleet_uri = 13;
inline void UserInfo::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void UserInfo::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.fleet_uri)
}
#if LANG_CXX11
inline void UserInfo::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserInfo.fleet_uri)
}
#endif
inline void UserInfo::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserInfo.fleet_uri)
}
inline void UserInfo::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserInfo.fleet_uri)
}
inline ::std::string* UserInfo::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserInfo.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.user.UserInfo.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserInfo.fleet_uri)
}

// string nick_pinyin = 14;
inline void UserInfo::clear_nick_pinyin() {
  nick_pinyin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::nick_pinyin() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.nick_pinyin)
  return nick_pinyin_.GetNoArena();
}
inline void UserInfo::set_nick_pinyin(const ::std::string& value) {
  
  nick_pinyin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.nick_pinyin)
}
#if LANG_CXX11
inline void UserInfo::set_nick_pinyin(::std::string&& value) {
  
  nick_pinyin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserInfo.nick_pinyin)
}
#endif
inline void UserInfo::set_nick_pinyin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_pinyin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserInfo.nick_pinyin)
}
inline void UserInfo::set_nick_pinyin(const char* value, size_t size) {
  
  nick_pinyin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserInfo.nick_pinyin)
}
inline ::std::string* UserInfo::mutable_nick_pinyin() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserInfo.nick_pinyin)
  return nick_pinyin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_nick_pinyin() {
  // @@protoc_insertion_point(field_release:outer.user.UserInfo.nick_pinyin)
  
  return nick_pinyin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_nick_pinyin(::std::string* nick_pinyin) {
  if (nick_pinyin != NULL) {
    
  } else {
    
  }
  nick_pinyin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_pinyin);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserInfo.nick_pinyin)
}

// string display = 15;
inline void UserInfo::clear_display() {
  display_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::display() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.display)
  return display_.GetNoArena();
}
inline void UserInfo::set_display(const ::std::string& value) {
  
  display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.display)
}
#if LANG_CXX11
inline void UserInfo::set_display(::std::string&& value) {
  
  display_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserInfo.display)
}
#endif
inline void UserInfo::set_display(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserInfo.display)
}
inline void UserInfo::set_display(const char* value, size_t size) {
  
  display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserInfo.display)
}
inline ::std::string* UserInfo::mutable_display() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserInfo.display)
  return display_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_display() {
  // @@protoc_insertion_point(field_release:outer.user.UserInfo.display)
  
  return display_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_display(::std::string* display) {
  if (display != NULL) {
    
  } else {
    
  }
  display_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserInfo.display)
}

// string display_pinyin = 16;
inline void UserInfo::clear_display_pinyin() {
  display_pinyin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::display_pinyin() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.display_pinyin)
  return display_pinyin_.GetNoArena();
}
inline void UserInfo::set_display_pinyin(const ::std::string& value) {
  
  display_pinyin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.display_pinyin)
}
#if LANG_CXX11
inline void UserInfo::set_display_pinyin(::std::string&& value) {
  
  display_pinyin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserInfo.display_pinyin)
}
#endif
inline void UserInfo::set_display_pinyin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_pinyin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserInfo.display_pinyin)
}
inline void UserInfo::set_display_pinyin(const char* value, size_t size) {
  
  display_pinyin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserInfo.display_pinyin)
}
inline ::std::string* UserInfo::mutable_display_pinyin() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserInfo.display_pinyin)
  return display_pinyin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_display_pinyin() {
  // @@protoc_insertion_point(field_release:outer.user.UserInfo.display_pinyin)
  
  return display_pinyin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_display_pinyin(::std::string* display_pinyin) {
  if (display_pinyin != NULL) {
    
  } else {
    
  }
  display_pinyin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_pinyin);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserInfo.display_pinyin)
}

// string nick_pinyin_blank = 17;
inline void UserInfo::clear_nick_pinyin_blank() {
  nick_pinyin_blank_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::nick_pinyin_blank() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.nick_pinyin_blank)
  return nick_pinyin_blank_.GetNoArena();
}
inline void UserInfo::set_nick_pinyin_blank(const ::std::string& value) {
  
  nick_pinyin_blank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.nick_pinyin_blank)
}
#if LANG_CXX11
inline void UserInfo::set_nick_pinyin_blank(::std::string&& value) {
  
  nick_pinyin_blank_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserInfo.nick_pinyin_blank)
}
#endif
inline void UserInfo::set_nick_pinyin_blank(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_pinyin_blank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserInfo.nick_pinyin_blank)
}
inline void UserInfo::set_nick_pinyin_blank(const char* value, size_t size) {
  
  nick_pinyin_blank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserInfo.nick_pinyin_blank)
}
inline ::std::string* UserInfo::mutable_nick_pinyin_blank() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserInfo.nick_pinyin_blank)
  return nick_pinyin_blank_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_nick_pinyin_blank() {
  // @@protoc_insertion_point(field_release:outer.user.UserInfo.nick_pinyin_blank)
  
  return nick_pinyin_blank_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_nick_pinyin_blank(::std::string* nick_pinyin_blank) {
  if (nick_pinyin_blank != NULL) {
    
  } else {
    
  }
  nick_pinyin_blank_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_pinyin_blank);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserInfo.nick_pinyin_blank)
}

// string serial_name = 18;
inline void UserInfo::clear_serial_name() {
  serial_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::serial_name() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.serial_name)
  return serial_name_.GetNoArena();
}
inline void UserInfo::set_serial_name(const ::std::string& value) {
  
  serial_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.serial_name)
}
#if LANG_CXX11
inline void UserInfo::set_serial_name(::std::string&& value) {
  
  serial_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserInfo.serial_name)
}
#endif
inline void UserInfo::set_serial_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserInfo.serial_name)
}
inline void UserInfo::set_serial_name(const char* value, size_t size) {
  
  serial_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserInfo.serial_name)
}
inline ::std::string* UserInfo::mutable_serial_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserInfo.serial_name)
  return serial_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_serial_name() {
  // @@protoc_insertion_point(field_release:outer.user.UserInfo.serial_name)
  
  return serial_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_serial_name(::std::string* serial_name) {
  if (serial_name != NULL) {
    
  } else {
    
  }
  serial_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_name);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserInfo.serial_name)
}

// uint32 member_type = 19;
inline void UserInfo::clear_member_type() {
  member_type_ = 0u;
}
inline ::google::protobuf::uint32 UserInfo::member_type() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.member_type)
  return member_type_;
}
inline void UserInfo::set_member_type(::google::protobuf::uint32 value) {
  
  member_type_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.member_type)
}

// uint32 enable = 20;
inline void UserInfo::clear_enable() {
  enable_ = 0u;
}
inline ::google::protobuf::uint32 UserInfo::enable() const {
  // @@protoc_insertion_point(field_get:outer.user.UserInfo.enable)
  return enable_;
}
inline void UserInfo::set_enable(::google::protobuf::uint32 value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UserInfo.enable)
}

// -------------------------------------------------------------------

// UserLoginRequest

// string username = 1;
inline void UserLoginRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.user.UserLoginRequest.username)
  return username_.GetNoArena();
}
inline void UserLoginRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserLoginRequest.username)
}
#if LANG_CXX11
inline void UserLoginRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserLoginRequest.username)
}
#endif
inline void UserLoginRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserLoginRequest.username)
}
inline void UserLoginRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserLoginRequest.username)
}
inline ::std::string* UserLoginRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserLoginRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.user.UserLoginRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserLoginRequest.username)
}

// string appkey = 2;
inline void UserLoginRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.UserLoginRequest.appkey)
  return appkey_.GetNoArena();
}
inline void UserLoginRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserLoginRequest.appkey)
}
#if LANG_CXX11
inline void UserLoginRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserLoginRequest.appkey)
}
#endif
inline void UserLoginRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserLoginRequest.appkey)
}
inline void UserLoginRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserLoginRequest.appkey)
}
inline ::std::string* UserLoginRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserLoginRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.UserLoginRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserLoginRequest.appkey)
}

// string password = 3;
inline void UserLoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginRequest::password() const {
  // @@protoc_insertion_point(field_get:outer.user.UserLoginRequest.password)
  return password_.GetNoArena();
}
inline void UserLoginRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserLoginRequest.password)
}
#if LANG_CXX11
inline void UserLoginRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserLoginRequest.password)
}
#endif
inline void UserLoginRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserLoginRequest.password)
}
inline void UserLoginRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserLoginRequest.password)
}
inline ::std::string* UserLoginRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserLoginRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:outer.user.UserLoginRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserLoginRequest.password)
}

// string appkey_password = 4;
inline void UserLoginRequest::clear_appkey_password() {
  appkey_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginRequest::appkey_password() const {
  // @@protoc_insertion_point(field_get:outer.user.UserLoginRequest.appkey_password)
  return appkey_password_.GetNoArena();
}
inline void UserLoginRequest::set_appkey_password(const ::std::string& value) {
  
  appkey_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserLoginRequest.appkey_password)
}
#if LANG_CXX11
inline void UserLoginRequest::set_appkey_password(::std::string&& value) {
  
  appkey_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserLoginRequest.appkey_password)
}
#endif
inline void UserLoginRequest::set_appkey_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserLoginRequest.appkey_password)
}
inline void UserLoginRequest::set_appkey_password(const char* value, size_t size) {
  
  appkey_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserLoginRequest.appkey_password)
}
inline ::std::string* UserLoginRequest::mutable_appkey_password() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserLoginRequest.appkey_password)
  return appkey_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginRequest::release_appkey_password() {
  // @@protoc_insertion_point(field_release:outer.user.UserLoginRequest.appkey_password)
  
  return appkey_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginRequest::set_allocated_appkey_password(::std::string* appkey_password) {
  if (appkey_password != NULL) {
    
  } else {
    
  }
  appkey_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey_password);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserLoginRequest.appkey_password)
}

// bool SHA256 = 5;
inline void UserLoginRequest::clear_sha256() {
  sha256_ = false;
}
inline bool UserLoginRequest::sha256() const {
  // @@protoc_insertion_point(field_get:outer.user.UserLoginRequest.SHA256)
  return sha256_;
}
inline void UserLoginRequest::set_sha256(bool value) {
  
  sha256_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UserLoginRequest.SHA256)
}

// .common.base.MobileBase base_info = 6;
inline bool UserLoginRequest::has_base_info() const {
  return this != internal_default_instance() && base_info_ != NULL;
}
inline const ::common::base::MobileBase& UserLoginRequest::base_info() const {
  const ::common::base::MobileBase* p = base_info_;
  // @@protoc_insertion_point(field_get:outer.user.UserLoginRequest.base_info)
  return p != NULL ? *p : *reinterpret_cast<const ::common::base::MobileBase*>(
      &::common::base::_MobileBase_default_instance_);
}
inline ::common::base::MobileBase* UserLoginRequest::release_base_info() {
  // @@protoc_insertion_point(field_release:outer.user.UserLoginRequest.base_info)
  
  ::common::base::MobileBase* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline ::common::base::MobileBase* UserLoginRequest::mutable_base_info() {
  
  if (base_info_ == NULL) {
    base_info_ = new ::common::base::MobileBase;
  }
  // @@protoc_insertion_point(field_mutable:outer.user.UserLoginRequest.base_info)
  return base_info_;
}
inline void UserLoginRequest::set_allocated_base_info(::common::base::MobileBase* base_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(base_info_);
  }
  if (base_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base_info, submessage_arena);
    }
    
  } else {
    
  }
  base_info_ = base_info;
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserLoginRequest.base_info)
}

// bool is_auto_login = 7;
inline void UserLoginRequest::clear_is_auto_login() {
  is_auto_login_ = false;
}
inline bool UserLoginRequest::is_auto_login() const {
  // @@protoc_insertion_point(field_get:outer.user.UserLoginRequest.is_auto_login)
  return is_auto_login_;
}
inline void UserLoginRequest::set_is_auto_login(bool value) {
  
  is_auto_login_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UserLoginRequest.is_auto_login)
}

// string token = 8;
inline void UserLoginRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginRequest::token() const {
  // @@protoc_insertion_point(field_get:outer.user.UserLoginRequest.token)
  return token_.GetNoArena();
}
inline void UserLoginRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserLoginRequest.token)
}
#if LANG_CXX11
inline void UserLoginRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserLoginRequest.token)
}
#endif
inline void UserLoginRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserLoginRequest.token)
}
inline void UserLoginRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserLoginRequest.token)
}
inline ::std::string* UserLoginRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserLoginRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginRequest::release_token() {
  // @@protoc_insertion_point(field_release:outer.user.UserLoginRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserLoginRequest.token)
}

// .common.enumeration.ELoginMode login_mode = 9;
inline void UserLoginRequest::clear_login_mode() {
  login_mode_ = 0;
}
inline ::common::enumeration::ELoginMode UserLoginRequest::login_mode() const {
  // @@protoc_insertion_point(field_get:outer.user.UserLoginRequest.login_mode)
  return static_cast< ::common::enumeration::ELoginMode >(login_mode_);
}
inline void UserLoginRequest::set_login_mode(::common::enumeration::ELoginMode value) {
  
  login_mode_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UserLoginRequest.login_mode)
}

// -------------------------------------------------------------------

// UserLoginResponse

// .common.errcode.EErrorCode ret = 1;
inline void UserLoginResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode UserLoginResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.user.UserLoginResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void UserLoginResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UserLoginResponse.ret)
}

// .outer.user.UserInfo user_infos = 2;
inline bool UserLoginResponse::has_user_infos() const {
  return this != internal_default_instance() && user_infos_ != NULL;
}
inline void UserLoginResponse::clear_user_infos() {
  if (GetArenaNoVirtual() == NULL && user_infos_ != NULL) {
    delete user_infos_;
  }
  user_infos_ = NULL;
}
inline const ::outer::user::UserInfo& UserLoginResponse::user_infos() const {
  const ::outer::user::UserInfo* p = user_infos_;
  // @@protoc_insertion_point(field_get:outer.user.UserLoginResponse.user_infos)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::user::UserInfo*>(
      &::outer::user::_UserInfo_default_instance_);
}
inline ::outer::user::UserInfo* UserLoginResponse::release_user_infos() {
  // @@protoc_insertion_point(field_release:outer.user.UserLoginResponse.user_infos)
  
  ::outer::user::UserInfo* temp = user_infos_;
  user_infos_ = NULL;
  return temp;
}
inline ::outer::user::UserInfo* UserLoginResponse::mutable_user_infos() {
  
  if (user_infos_ == NULL) {
    user_infos_ = new ::outer::user::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:outer.user.UserLoginResponse.user_infos)
  return user_infos_;
}
inline void UserLoginResponse::set_allocated_user_infos(::outer::user::UserInfo* user_infos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_infos_;
  }
  if (user_infos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_infos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_infos, submessage_arena);
    }
    
  } else {
    
  }
  user_infos_ = user_infos;
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserLoginResponse.user_infos)
}

// -------------------------------------------------------------------

// UserRegisterRequest

// string username = 1;
inline void UserRegisterRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.user.UserRegisterRequest.username)
  return username_.GetNoArena();
}
inline void UserRegisterRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserRegisterRequest.username)
}
#if LANG_CXX11
inline void UserRegisterRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserRegisterRequest.username)
}
#endif
inline void UserRegisterRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserRegisterRequest.username)
}
inline void UserRegisterRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserRegisterRequest.username)
}
inline ::std::string* UserRegisterRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserRegisterRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.user.UserRegisterRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserRegisterRequest.username)
}

// string appkey = 2;
inline void UserRegisterRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.UserRegisterRequest.appkey)
  return appkey_.GetNoArena();
}
inline void UserRegisterRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserRegisterRequest.appkey)
}
#if LANG_CXX11
inline void UserRegisterRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserRegisterRequest.appkey)
}
#endif
inline void UserRegisterRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserRegisterRequest.appkey)
}
inline void UserRegisterRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserRegisterRequest.appkey)
}
inline ::std::string* UserRegisterRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserRegisterRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.UserRegisterRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserRegisterRequest.appkey)
}

// string password = 3;
inline void UserRegisterRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterRequest::password() const {
  // @@protoc_insertion_point(field_get:outer.user.UserRegisterRequest.password)
  return password_.GetNoArena();
}
inline void UserRegisterRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserRegisterRequest.password)
}
#if LANG_CXX11
inline void UserRegisterRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserRegisterRequest.password)
}
#endif
inline void UserRegisterRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserRegisterRequest.password)
}
inline void UserRegisterRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserRegisterRequest.password)
}
inline ::std::string* UserRegisterRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserRegisterRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterRequest::release_password() {
  // @@protoc_insertion_point(field_release:outer.user.UserRegisterRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserRegisterRequest.password)
}

// string nick = 4;
inline void UserRegisterRequest::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterRequest::nick() const {
  // @@protoc_insertion_point(field_get:outer.user.UserRegisterRequest.nick)
  return nick_.GetNoArena();
}
inline void UserRegisterRequest::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserRegisterRequest.nick)
}
#if LANG_CXX11
inline void UserRegisterRequest::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserRegisterRequest.nick)
}
#endif
inline void UserRegisterRequest::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserRegisterRequest.nick)
}
inline void UserRegisterRequest::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserRegisterRequest.nick)
}
inline ::std::string* UserRegisterRequest::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserRegisterRequest.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterRequest::release_nick() {
  // @@protoc_insertion_point(field_release:outer.user.UserRegisterRequest.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterRequest::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserRegisterRequest.nick)
}

// string phone = 5;
inline void UserRegisterRequest::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterRequest::phone() const {
  // @@protoc_insertion_point(field_get:outer.user.UserRegisterRequest.phone)
  return phone_.GetNoArena();
}
inline void UserRegisterRequest::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserRegisterRequest.phone)
}
#if LANG_CXX11
inline void UserRegisterRequest::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserRegisterRequest.phone)
}
#endif
inline void UserRegisterRequest::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserRegisterRequest.phone)
}
inline void UserRegisterRequest::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserRegisterRequest.phone)
}
inline ::std::string* UserRegisterRequest::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserRegisterRequest.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterRequest::release_phone() {
  // @@protoc_insertion_point(field_release:outer.user.UserRegisterRequest.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterRequest::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserRegisterRequest.phone)
}

// string appkey_password = 6;
inline void UserRegisterRequest::clear_appkey_password() {
  appkey_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterRequest::appkey_password() const {
  // @@protoc_insertion_point(field_get:outer.user.UserRegisterRequest.appkey_password)
  return appkey_password_.GetNoArena();
}
inline void UserRegisterRequest::set_appkey_password(const ::std::string& value) {
  
  appkey_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserRegisterRequest.appkey_password)
}
#if LANG_CXX11
inline void UserRegisterRequest::set_appkey_password(::std::string&& value) {
  
  appkey_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserRegisterRequest.appkey_password)
}
#endif
inline void UserRegisterRequest::set_appkey_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserRegisterRequest.appkey_password)
}
inline void UserRegisterRequest::set_appkey_password(const char* value, size_t size) {
  
  appkey_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserRegisterRequest.appkey_password)
}
inline ::std::string* UserRegisterRequest::mutable_appkey_password() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserRegisterRequest.appkey_password)
  return appkey_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterRequest::release_appkey_password() {
  // @@protoc_insertion_point(field_release:outer.user.UserRegisterRequest.appkey_password)
  
  return appkey_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterRequest::set_allocated_appkey_password(::std::string* appkey_password) {
  if (appkey_password != NULL) {
    
  } else {
    
  }
  appkey_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey_password);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserRegisterRequest.appkey_password)
}

// bool SHA256 = 7;
inline void UserRegisterRequest::clear_sha256() {
  sha256_ = false;
}
inline bool UserRegisterRequest::sha256() const {
  // @@protoc_insertion_point(field_get:outer.user.UserRegisterRequest.SHA256)
  return sha256_;
}
inline void UserRegisterRequest::set_sha256(bool value) {
  
  sha256_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UserRegisterRequest.SHA256)
}

// -------------------------------------------------------------------

// UserRegisterResponse

// .common.errcode.EErrorCode ret = 1;
inline void UserRegisterResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode UserRegisterResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.user.UserRegisterResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void UserRegisterResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UserRegisterResponse.ret)
}

// string reason = 2;
inline void UserRegisterResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserRegisterResponse::reason() const {
  // @@protoc_insertion_point(field_get:outer.user.UserRegisterResponse.reason)
  return reason_.GetNoArena();
}
inline void UserRegisterResponse::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserRegisterResponse.reason)
}
#if LANG_CXX11
inline void UserRegisterResponse::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserRegisterResponse.reason)
}
#endif
inline void UserRegisterResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserRegisterResponse.reason)
}
inline void UserRegisterResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserRegisterResponse.reason)
}
inline ::std::string* UserRegisterResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserRegisterResponse.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserRegisterResponse::release_reason() {
  // @@protoc_insertion_point(field_release:outer.user.UserRegisterResponse.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserRegisterResponse::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserRegisterResponse.reason)
}

// -------------------------------------------------------------------

// PasswordUpdateRequest

// string username = 1;
inline void PasswordUpdateRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PasswordUpdateRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.user.PasswordUpdateRequest.username)
  return username_.GetNoArena();
}
inline void PasswordUpdateRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.PasswordUpdateRequest.username)
}
#if LANG_CXX11
inline void PasswordUpdateRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.PasswordUpdateRequest.username)
}
#endif
inline void PasswordUpdateRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.PasswordUpdateRequest.username)
}
inline void PasswordUpdateRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.PasswordUpdateRequest.username)
}
inline ::std::string* PasswordUpdateRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.PasswordUpdateRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PasswordUpdateRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.user.PasswordUpdateRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordUpdateRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.user.PasswordUpdateRequest.username)
}

// string appkey = 2;
inline void PasswordUpdateRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PasswordUpdateRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.PasswordUpdateRequest.appkey)
  return appkey_.GetNoArena();
}
inline void PasswordUpdateRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.PasswordUpdateRequest.appkey)
}
#if LANG_CXX11
inline void PasswordUpdateRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.PasswordUpdateRequest.appkey)
}
#endif
inline void PasswordUpdateRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.PasswordUpdateRequest.appkey)
}
inline void PasswordUpdateRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.PasswordUpdateRequest.appkey)
}
inline ::std::string* PasswordUpdateRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.PasswordUpdateRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PasswordUpdateRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.PasswordUpdateRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordUpdateRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.PasswordUpdateRequest.appkey)
}

// string password = 3;
inline void PasswordUpdateRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PasswordUpdateRequest::password() const {
  // @@protoc_insertion_point(field_get:outer.user.PasswordUpdateRequest.password)
  return password_.GetNoArena();
}
inline void PasswordUpdateRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.PasswordUpdateRequest.password)
}
#if LANG_CXX11
inline void PasswordUpdateRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.PasswordUpdateRequest.password)
}
#endif
inline void PasswordUpdateRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.PasswordUpdateRequest.password)
}
inline void PasswordUpdateRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.PasswordUpdateRequest.password)
}
inline ::std::string* PasswordUpdateRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.PasswordUpdateRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PasswordUpdateRequest::release_password() {
  // @@protoc_insertion_point(field_release:outer.user.PasswordUpdateRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordUpdateRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:outer.user.PasswordUpdateRequest.password)
}

// bool SHA256 = 4;
inline void PasswordUpdateRequest::clear_sha256() {
  sha256_ = false;
}
inline bool PasswordUpdateRequest::sha256() const {
  // @@protoc_insertion_point(field_get:outer.user.PasswordUpdateRequest.SHA256)
  return sha256_;
}
inline void PasswordUpdateRequest::set_sha256(bool value) {
  
  sha256_ = value;
  // @@protoc_insertion_point(field_set:outer.user.PasswordUpdateRequest.SHA256)
}

// -------------------------------------------------------------------

// PasswordUpdateResponse

// .common.errcode.EErrorCode ret = 1;
inline void PasswordUpdateResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode PasswordUpdateResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.user.PasswordUpdateResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void PasswordUpdateResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.user.PasswordUpdateResponse.ret)
}

// string reason = 2;
inline void PasswordUpdateResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PasswordUpdateResponse::reason() const {
  // @@protoc_insertion_point(field_get:outer.user.PasswordUpdateResponse.reason)
  return reason_.GetNoArena();
}
inline void PasswordUpdateResponse::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.PasswordUpdateResponse.reason)
}
#if LANG_CXX11
inline void PasswordUpdateResponse::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.PasswordUpdateResponse.reason)
}
#endif
inline void PasswordUpdateResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.PasswordUpdateResponse.reason)
}
inline void PasswordUpdateResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.PasswordUpdateResponse.reason)
}
inline ::std::string* PasswordUpdateResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.PasswordUpdateResponse.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PasswordUpdateResponse::release_reason() {
  // @@protoc_insertion_point(field_release:outer.user.PasswordUpdateResponse.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PasswordUpdateResponse::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:outer.user.PasswordUpdateResponse.reason)
}

// -------------------------------------------------------------------

// NickUpdateRequest

// string username = 1;
inline void NickUpdateRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NickUpdateRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.user.NickUpdateRequest.username)
  return username_.GetNoArena();
}
inline void NickUpdateRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.NickUpdateRequest.username)
}
#if LANG_CXX11
inline void NickUpdateRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.NickUpdateRequest.username)
}
#endif
inline void NickUpdateRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.NickUpdateRequest.username)
}
inline void NickUpdateRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.NickUpdateRequest.username)
}
inline ::std::string* NickUpdateRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.NickUpdateRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NickUpdateRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.user.NickUpdateRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NickUpdateRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.user.NickUpdateRequest.username)
}

// string appkey = 2;
inline void NickUpdateRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NickUpdateRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.NickUpdateRequest.appkey)
  return appkey_.GetNoArena();
}
inline void NickUpdateRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.NickUpdateRequest.appkey)
}
#if LANG_CXX11
inline void NickUpdateRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.NickUpdateRequest.appkey)
}
#endif
inline void NickUpdateRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.NickUpdateRequest.appkey)
}
inline void NickUpdateRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.NickUpdateRequest.appkey)
}
inline ::std::string* NickUpdateRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.NickUpdateRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NickUpdateRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.NickUpdateRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NickUpdateRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.NickUpdateRequest.appkey)
}

// string nick = 3;
inline void NickUpdateRequest::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NickUpdateRequest::nick() const {
  // @@protoc_insertion_point(field_get:outer.user.NickUpdateRequest.nick)
  return nick_.GetNoArena();
}
inline void NickUpdateRequest::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.NickUpdateRequest.nick)
}
#if LANG_CXX11
inline void NickUpdateRequest::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.NickUpdateRequest.nick)
}
#endif
inline void NickUpdateRequest::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.NickUpdateRequest.nick)
}
inline void NickUpdateRequest::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.NickUpdateRequest.nick)
}
inline ::std::string* NickUpdateRequest::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.NickUpdateRequest.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NickUpdateRequest::release_nick() {
  // @@protoc_insertion_point(field_release:outer.user.NickUpdateRequest.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NickUpdateRequest::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:outer.user.NickUpdateRequest.nick)
}

// .common.enumeration.EClientType fromClientType = 4;
inline void NickUpdateRequest::clear_fromclienttype() {
  fromclienttype_ = 0;
}
inline ::common::enumeration::EClientType NickUpdateRequest::fromclienttype() const {
  // @@protoc_insertion_point(field_get:outer.user.NickUpdateRequest.fromClientType)
  return static_cast< ::common::enumeration::EClientType >(fromclienttype_);
}
inline void NickUpdateRequest::set_fromclienttype(::common::enumeration::EClientType value) {
  
  fromclienttype_ = value;
  // @@protoc_insertion_point(field_set:outer.user.NickUpdateRequest.fromClientType)
}

// -------------------------------------------------------------------

// NickUpdateResponse

// .common.errcode.EErrorCode ret = 1;
inline void NickUpdateResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode NickUpdateResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.user.NickUpdateResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void NickUpdateResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.user.NickUpdateResponse.ret)
}

// string reason = 2;
inline void NickUpdateResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NickUpdateResponse::reason() const {
  // @@protoc_insertion_point(field_get:outer.user.NickUpdateResponse.reason)
  return reason_.GetNoArena();
}
inline void NickUpdateResponse::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.NickUpdateResponse.reason)
}
#if LANG_CXX11
inline void NickUpdateResponse::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.NickUpdateResponse.reason)
}
#endif
inline void NickUpdateResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.NickUpdateResponse.reason)
}
inline void NickUpdateResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.NickUpdateResponse.reason)
}
inline ::std::string* NickUpdateResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.NickUpdateResponse.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NickUpdateResponse::release_reason() {
  // @@protoc_insertion_point(field_release:outer.user.NickUpdateResponse.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NickUpdateResponse::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:outer.user.NickUpdateResponse.reason)
}

// -------------------------------------------------------------------

// PhoneUpdateRequest

// string username = 1;
inline void PhoneUpdateRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneUpdateRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.user.PhoneUpdateRequest.username)
  return username_.GetNoArena();
}
inline void PhoneUpdateRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.PhoneUpdateRequest.username)
}
#if LANG_CXX11
inline void PhoneUpdateRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.PhoneUpdateRequest.username)
}
#endif
inline void PhoneUpdateRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.PhoneUpdateRequest.username)
}
inline void PhoneUpdateRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.PhoneUpdateRequest.username)
}
inline ::std::string* PhoneUpdateRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.PhoneUpdateRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneUpdateRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.user.PhoneUpdateRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneUpdateRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.user.PhoneUpdateRequest.username)
}

// string appkey = 2;
inline void PhoneUpdateRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneUpdateRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.PhoneUpdateRequest.appkey)
  return appkey_.GetNoArena();
}
inline void PhoneUpdateRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.PhoneUpdateRequest.appkey)
}
#if LANG_CXX11
inline void PhoneUpdateRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.PhoneUpdateRequest.appkey)
}
#endif
inline void PhoneUpdateRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.PhoneUpdateRequest.appkey)
}
inline void PhoneUpdateRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.PhoneUpdateRequest.appkey)
}
inline ::std::string* PhoneUpdateRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.PhoneUpdateRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneUpdateRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.PhoneUpdateRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneUpdateRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.PhoneUpdateRequest.appkey)
}

// string update_phone = 3;
inline void PhoneUpdateRequest::clear_update_phone() {
  update_phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneUpdateRequest::update_phone() const {
  // @@protoc_insertion_point(field_get:outer.user.PhoneUpdateRequest.update_phone)
  return update_phone_.GetNoArena();
}
inline void PhoneUpdateRequest::set_update_phone(const ::std::string& value) {
  
  update_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.PhoneUpdateRequest.update_phone)
}
#if LANG_CXX11
inline void PhoneUpdateRequest::set_update_phone(::std::string&& value) {
  
  update_phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.PhoneUpdateRequest.update_phone)
}
#endif
inline void PhoneUpdateRequest::set_update_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  update_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.PhoneUpdateRequest.update_phone)
}
inline void PhoneUpdateRequest::set_update_phone(const char* value, size_t size) {
  
  update_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.PhoneUpdateRequest.update_phone)
}
inline ::std::string* PhoneUpdateRequest::mutable_update_phone() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.PhoneUpdateRequest.update_phone)
  return update_phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneUpdateRequest::release_update_phone() {
  // @@protoc_insertion_point(field_release:outer.user.PhoneUpdateRequest.update_phone)
  
  return update_phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneUpdateRequest::set_allocated_update_phone(::std::string* update_phone) {
  if (update_phone != NULL) {
    
  } else {
    
  }
  update_phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), update_phone);
  // @@protoc_insertion_point(field_set_allocated:outer.user.PhoneUpdateRequest.update_phone)
}

// .common.enumeration.EClientType fromClientType = 4;
inline void PhoneUpdateRequest::clear_fromclienttype() {
  fromclienttype_ = 0;
}
inline ::common::enumeration::EClientType PhoneUpdateRequest::fromclienttype() const {
  // @@protoc_insertion_point(field_get:outer.user.PhoneUpdateRequest.fromClientType)
  return static_cast< ::common::enumeration::EClientType >(fromclienttype_);
}
inline void PhoneUpdateRequest::set_fromclienttype(::common::enumeration::EClientType value) {
  
  fromclienttype_ = value;
  // @@protoc_insertion_point(field_set:outer.user.PhoneUpdateRequest.fromClientType)
}

// -------------------------------------------------------------------

// PhoneUpdateResponse

// .common.errcode.EErrorCode ret = 1;
inline void PhoneUpdateResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode PhoneUpdateResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.user.PhoneUpdateResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void PhoneUpdateResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.user.PhoneUpdateResponse.ret)
}

// string reason = 2;
inline void PhoneUpdateResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhoneUpdateResponse::reason() const {
  // @@protoc_insertion_point(field_get:outer.user.PhoneUpdateResponse.reason)
  return reason_.GetNoArena();
}
inline void PhoneUpdateResponse::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.PhoneUpdateResponse.reason)
}
#if LANG_CXX11
inline void PhoneUpdateResponse::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.PhoneUpdateResponse.reason)
}
#endif
inline void PhoneUpdateResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.PhoneUpdateResponse.reason)
}
inline void PhoneUpdateResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.PhoneUpdateResponse.reason)
}
inline ::std::string* PhoneUpdateResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.PhoneUpdateResponse.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhoneUpdateResponse::release_reason() {
  // @@protoc_insertion_point(field_release:outer.user.PhoneUpdateResponse.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhoneUpdateResponse::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:outer.user.PhoneUpdateResponse.reason)
}

// -------------------------------------------------------------------

// UserSearchRequest

// string username = 1;
inline void UserSearchRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserSearchRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.user.UserSearchRequest.username)
  return username_.GetNoArena();
}
inline void UserSearchRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserSearchRequest.username)
}
#if LANG_CXX11
inline void UserSearchRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserSearchRequest.username)
}
#endif
inline void UserSearchRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserSearchRequest.username)
}
inline void UserSearchRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserSearchRequest.username)
}
inline ::std::string* UserSearchRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserSearchRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserSearchRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.user.UserSearchRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserSearchRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserSearchRequest.username)
}

// string appkey = 2;
inline void UserSearchRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserSearchRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.UserSearchRequest.appkey)
  return appkey_.GetNoArena();
}
inline void UserSearchRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserSearchRequest.appkey)
}
#if LANG_CXX11
inline void UserSearchRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserSearchRequest.appkey)
}
#endif
inline void UserSearchRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserSearchRequest.appkey)
}
inline void UserSearchRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserSearchRequest.appkey)
}
inline ::std::string* UserSearchRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserSearchRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserSearchRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.UserSearchRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserSearchRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserSearchRequest.appkey)
}

// uint32 start = 3;
inline void UserSearchRequest::clear_start() {
  start_ = 0u;
}
inline ::google::protobuf::uint32 UserSearchRequest::start() const {
  // @@protoc_insertion_point(field_get:outer.user.UserSearchRequest.start)
  return start_;
}
inline void UserSearchRequest::set_start(::google::protobuf::uint32 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UserSearchRequest.start)
}

// uint32 range = 4;
inline void UserSearchRequest::clear_range() {
  range_ = 0u;
}
inline ::google::protobuf::uint32 UserSearchRequest::range() const {
  // @@protoc_insertion_point(field_get:outer.user.UserSearchRequest.range)
  return range_;
}
inline void UserSearchRequest::set_range(::google::protobuf::uint32 value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UserSearchRequest.range)
}

// string search_key = 5;
inline void UserSearchRequest::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserSearchRequest::search_key() const {
  // @@protoc_insertion_point(field_get:outer.user.UserSearchRequest.search_key)
  return search_key_.GetNoArena();
}
inline void UserSearchRequest::set_search_key(const ::std::string& value) {
  
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UserSearchRequest.search_key)
}
#if LANG_CXX11
inline void UserSearchRequest::set_search_key(::std::string&& value) {
  
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UserSearchRequest.search_key)
}
#endif
inline void UserSearchRequest::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UserSearchRequest.search_key)
}
inline void UserSearchRequest::set_search_key(const char* value, size_t size) {
  
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UserSearchRequest.search_key)
}
inline ::std::string* UserSearchRequest::mutable_search_key() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UserSearchRequest.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserSearchRequest::release_search_key() {
  // @@protoc_insertion_point(field_release:outer.user.UserSearchRequest.search_key)
  
  return search_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserSearchRequest::set_allocated_search_key(::std::string* search_key) {
  if (search_key != NULL) {
    
  } else {
    
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UserSearchRequest.search_key)
}

// -------------------------------------------------------------------

// UserSearchResponse

// .common.errcode.EErrorCode ret = 1;
inline void UserSearchResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode UserSearchResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.user.UserSearchResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void UserSearchResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UserSearchResponse.ret)
}

// repeated .outer.user.UserInfo user_infos = 2;
inline int UserSearchResponse::user_infos_size() const {
  return user_infos_.size();
}
inline void UserSearchResponse::clear_user_infos() {
  user_infos_.Clear();
}
inline const ::outer::user::UserInfo& UserSearchResponse::user_infos(int index) const {
  // @@protoc_insertion_point(field_get:outer.user.UserSearchResponse.user_infos)
  return user_infos_.Get(index);
}
inline ::outer::user::UserInfo* UserSearchResponse::mutable_user_infos(int index) {
  // @@protoc_insertion_point(field_mutable:outer.user.UserSearchResponse.user_infos)
  return user_infos_.Mutable(index);
}
inline ::outer::user::UserInfo* UserSearchResponse::add_user_infos() {
  // @@protoc_insertion_point(field_add:outer.user.UserSearchResponse.user_infos)
  return user_infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::user::UserInfo >*
UserSearchResponse::mutable_user_infos() {
  // @@protoc_insertion_point(field_mutable_list:outer.user.UserSearchResponse.user_infos)
  return &user_infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::user::UserInfo >&
UserSearchResponse::user_infos() const {
  // @@protoc_insertion_point(field_list:outer.user.UserSearchResponse.user_infos)
  return user_infos_;
}

// uint32 totalcount = 3;
inline void UserSearchResponse::clear_totalcount() {
  totalcount_ = 0u;
}
inline ::google::protobuf::uint32 UserSearchResponse::totalcount() const {
  // @@protoc_insertion_point(field_get:outer.user.UserSearchResponse.totalcount)
  return totalcount_;
}
inline void UserSearchResponse::set_totalcount(::google::protobuf::uint32 value) {
  
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UserSearchResponse.totalcount)
}

// -------------------------------------------------------------------

// GetUserInfoRequest

// string username = 1;
inline void GetUserInfoRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetUserInfoRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.user.GetUserInfoRequest.username)
  return username_.GetNoArena();
}
inline void GetUserInfoRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.GetUserInfoRequest.username)
}
#if LANG_CXX11
inline void GetUserInfoRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.GetUserInfoRequest.username)
}
#endif
inline void GetUserInfoRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.GetUserInfoRequest.username)
}
inline void GetUserInfoRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.GetUserInfoRequest.username)
}
inline ::std::string* GetUserInfoRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.GetUserInfoRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetUserInfoRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.user.GetUserInfoRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetUserInfoRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.user.GetUserInfoRequest.username)
}

// string appkey = 2;
inline void GetUserInfoRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetUserInfoRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.GetUserInfoRequest.appkey)
  return appkey_.GetNoArena();
}
inline void GetUserInfoRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.GetUserInfoRequest.appkey)
}
#if LANG_CXX11
inline void GetUserInfoRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.GetUserInfoRequest.appkey)
}
#endif
inline void GetUserInfoRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.GetUserInfoRequest.appkey)
}
inline void GetUserInfoRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.GetUserInfoRequest.appkey)
}
inline ::std::string* GetUserInfoRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.GetUserInfoRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetUserInfoRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.GetUserInfoRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetUserInfoRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.GetUserInfoRequest.appkey)
}

// -------------------------------------------------------------------

// GetUserInfoResponse

// .common.errcode.EErrorCode ret = 1;
inline void GetUserInfoResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode GetUserInfoResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.user.GetUserInfoResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void GetUserInfoResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.user.GetUserInfoResponse.ret)
}

// .outer.user.UserInfo user_infos = 2;
inline bool GetUserInfoResponse::has_user_infos() const {
  return this != internal_default_instance() && user_infos_ != NULL;
}
inline void GetUserInfoResponse::clear_user_infos() {
  if (GetArenaNoVirtual() == NULL && user_infos_ != NULL) {
    delete user_infos_;
  }
  user_infos_ = NULL;
}
inline const ::outer::user::UserInfo& GetUserInfoResponse::user_infos() const {
  const ::outer::user::UserInfo* p = user_infos_;
  // @@protoc_insertion_point(field_get:outer.user.GetUserInfoResponse.user_infos)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::user::UserInfo*>(
      &::outer::user::_UserInfo_default_instance_);
}
inline ::outer::user::UserInfo* GetUserInfoResponse::release_user_infos() {
  // @@protoc_insertion_point(field_release:outer.user.GetUserInfoResponse.user_infos)
  
  ::outer::user::UserInfo* temp = user_infos_;
  user_infos_ = NULL;
  return temp;
}
inline ::outer::user::UserInfo* GetUserInfoResponse::mutable_user_infos() {
  
  if (user_infos_ == NULL) {
    user_infos_ = new ::outer::user::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:outer.user.GetUserInfoResponse.user_infos)
  return user_infos_;
}
inline void GetUserInfoResponse::set_allocated_user_infos(::outer::user::UserInfo* user_infos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_infos_;
  }
  if (user_infos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_infos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_infos, submessage_arena);
    }
    
  } else {
    
  }
  user_infos_ = user_infos;
  // @@protoc_insertion_point(field_set_allocated:outer.user.GetUserInfoResponse.user_infos)
}

// -------------------------------------------------------------------

// BatchGetUserInfoRequest

// string appkey = 1;
inline void BatchGetUserInfoRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchGetUserInfoRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.BatchGetUserInfoRequest.appkey)
  return appkey_.GetNoArena();
}
inline void BatchGetUserInfoRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.BatchGetUserInfoRequest.appkey)
}
#if LANG_CXX11
inline void BatchGetUserInfoRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.BatchGetUserInfoRequest.appkey)
}
#endif
inline void BatchGetUserInfoRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.BatchGetUserInfoRequest.appkey)
}
inline void BatchGetUserInfoRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.BatchGetUserInfoRequest.appkey)
}
inline ::std::string* BatchGetUserInfoRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.BatchGetUserInfoRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchGetUserInfoRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.BatchGetUserInfoRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchGetUserInfoRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.BatchGetUserInfoRequest.appkey)
}

// repeated string username = 2;
inline int BatchGetUserInfoRequest::username_size() const {
  return username_.size();
}
inline void BatchGetUserInfoRequest::clear_username() {
  username_.Clear();
}
inline const ::std::string& BatchGetUserInfoRequest::username(int index) const {
  // @@protoc_insertion_point(field_get:outer.user.BatchGetUserInfoRequest.username)
  return username_.Get(index);
}
inline ::std::string* BatchGetUserInfoRequest::mutable_username(int index) {
  // @@protoc_insertion_point(field_mutable:outer.user.BatchGetUserInfoRequest.username)
  return username_.Mutable(index);
}
inline void BatchGetUserInfoRequest::set_username(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.user.BatchGetUserInfoRequest.username)
  username_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BatchGetUserInfoRequest::set_username(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.user.BatchGetUserInfoRequest.username)
  username_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BatchGetUserInfoRequest::set_username(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  username_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.user.BatchGetUserInfoRequest.username)
}
inline void BatchGetUserInfoRequest::set_username(int index, const char* value, size_t size) {
  username_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.user.BatchGetUserInfoRequest.username)
}
inline ::std::string* BatchGetUserInfoRequest::add_username() {
  // @@protoc_insertion_point(field_add_mutable:outer.user.BatchGetUserInfoRequest.username)
  return username_.Add();
}
inline void BatchGetUserInfoRequest::add_username(const ::std::string& value) {
  username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.user.BatchGetUserInfoRequest.username)
}
#if LANG_CXX11
inline void BatchGetUserInfoRequest::add_username(::std::string&& value) {
  username_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.user.BatchGetUserInfoRequest.username)
}
#endif
inline void BatchGetUserInfoRequest::add_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.user.BatchGetUserInfoRequest.username)
}
inline void BatchGetUserInfoRequest::add_username(const char* value, size_t size) {
  username_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.user.BatchGetUserInfoRequest.username)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchGetUserInfoRequest::username() const {
  // @@protoc_insertion_point(field_list:outer.user.BatchGetUserInfoRequest.username)
  return username_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BatchGetUserInfoRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable_list:outer.user.BatchGetUserInfoRequest.username)
  return &username_;
}

// -------------------------------------------------------------------

// BatchGetUserInfoResponse

// .common.errcode.EErrorCode ret = 1;
inline void BatchGetUserInfoResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode BatchGetUserInfoResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.user.BatchGetUserInfoResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void BatchGetUserInfoResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.user.BatchGetUserInfoResponse.ret)
}

// repeated .outer.user.UserInfo user_info = 2;
inline int BatchGetUserInfoResponse::user_info_size() const {
  return user_info_.size();
}
inline void BatchGetUserInfoResponse::clear_user_info() {
  user_info_.Clear();
}
inline const ::outer::user::UserInfo& BatchGetUserInfoResponse::user_info(int index) const {
  // @@protoc_insertion_point(field_get:outer.user.BatchGetUserInfoResponse.user_info)
  return user_info_.Get(index);
}
inline ::outer::user::UserInfo* BatchGetUserInfoResponse::mutable_user_info(int index) {
  // @@protoc_insertion_point(field_mutable:outer.user.BatchGetUserInfoResponse.user_info)
  return user_info_.Mutable(index);
}
inline ::outer::user::UserInfo* BatchGetUserInfoResponse::add_user_info() {
  // @@protoc_insertion_point(field_add:outer.user.BatchGetUserInfoResponse.user_info)
  return user_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::user::UserInfo >*
BatchGetUserInfoResponse::mutable_user_info() {
  // @@protoc_insertion_point(field_mutable_list:outer.user.BatchGetUserInfoResponse.user_info)
  return &user_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::user::UserInfo >&
BatchGetUserInfoResponse::user_info() const {
  // @@protoc_insertion_point(field_list:outer.user.BatchGetUserInfoResponse.user_info)
  return user_info_;
}

// -------------------------------------------------------------------

// CheckUserListRequest

// string appkey = 1;
inline void CheckUserListRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CheckUserListRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.CheckUserListRequest.appkey)
  return appkey_.GetNoArena();
}
inline void CheckUserListRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.CheckUserListRequest.appkey)
}
#if LANG_CXX11
inline void CheckUserListRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.CheckUserListRequest.appkey)
}
#endif
inline void CheckUserListRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.CheckUserListRequest.appkey)
}
inline void CheckUserListRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.CheckUserListRequest.appkey)
}
inline ::std::string* CheckUserListRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.CheckUserListRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckUserListRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.CheckUserListRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckUserListRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.CheckUserListRequest.appkey)
}

// repeated string username = 2;
inline int CheckUserListRequest::username_size() const {
  return username_.size();
}
inline void CheckUserListRequest::clear_username() {
  username_.Clear();
}
inline const ::std::string& CheckUserListRequest::username(int index) const {
  // @@protoc_insertion_point(field_get:outer.user.CheckUserListRequest.username)
  return username_.Get(index);
}
inline ::std::string* CheckUserListRequest::mutable_username(int index) {
  // @@protoc_insertion_point(field_mutable:outer.user.CheckUserListRequest.username)
  return username_.Mutable(index);
}
inline void CheckUserListRequest::set_username(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.user.CheckUserListRequest.username)
  username_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CheckUserListRequest::set_username(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.user.CheckUserListRequest.username)
  username_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CheckUserListRequest::set_username(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  username_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.user.CheckUserListRequest.username)
}
inline void CheckUserListRequest::set_username(int index, const char* value, size_t size) {
  username_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.user.CheckUserListRequest.username)
}
inline ::std::string* CheckUserListRequest::add_username() {
  // @@protoc_insertion_point(field_add_mutable:outer.user.CheckUserListRequest.username)
  return username_.Add();
}
inline void CheckUserListRequest::add_username(const ::std::string& value) {
  username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.user.CheckUserListRequest.username)
}
#if LANG_CXX11
inline void CheckUserListRequest::add_username(::std::string&& value) {
  username_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.user.CheckUserListRequest.username)
}
#endif
inline void CheckUserListRequest::add_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.user.CheckUserListRequest.username)
}
inline void CheckUserListRequest::add_username(const char* value, size_t size) {
  username_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.user.CheckUserListRequest.username)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CheckUserListRequest::username() const {
  // @@protoc_insertion_point(field_list:outer.user.CheckUserListRequest.username)
  return username_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CheckUserListRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable_list:outer.user.CheckUserListRequest.username)
  return &username_;
}

// -------------------------------------------------------------------

// CheckUserListResponse

// .common.errcode.EErrorCode ret = 1;
inline void CheckUserListResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode CheckUserListResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.user.CheckUserListResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void CheckUserListResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.user.CheckUserListResponse.ret)
}

// repeated string exist_users = 2;
inline int CheckUserListResponse::exist_users_size() const {
  return exist_users_.size();
}
inline void CheckUserListResponse::clear_exist_users() {
  exist_users_.Clear();
}
inline const ::std::string& CheckUserListResponse::exist_users(int index) const {
  // @@protoc_insertion_point(field_get:outer.user.CheckUserListResponse.exist_users)
  return exist_users_.Get(index);
}
inline ::std::string* CheckUserListResponse::mutable_exist_users(int index) {
  // @@protoc_insertion_point(field_mutable:outer.user.CheckUserListResponse.exist_users)
  return exist_users_.Mutable(index);
}
inline void CheckUserListResponse::set_exist_users(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.user.CheckUserListResponse.exist_users)
  exist_users_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CheckUserListResponse::set_exist_users(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.user.CheckUserListResponse.exist_users)
  exist_users_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CheckUserListResponse::set_exist_users(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  exist_users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.user.CheckUserListResponse.exist_users)
}
inline void CheckUserListResponse::set_exist_users(int index, const char* value, size_t size) {
  exist_users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.user.CheckUserListResponse.exist_users)
}
inline ::std::string* CheckUserListResponse::add_exist_users() {
  // @@protoc_insertion_point(field_add_mutable:outer.user.CheckUserListResponse.exist_users)
  return exist_users_.Add();
}
inline void CheckUserListResponse::add_exist_users(const ::std::string& value) {
  exist_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.user.CheckUserListResponse.exist_users)
}
#if LANG_CXX11
inline void CheckUserListResponse::add_exist_users(::std::string&& value) {
  exist_users_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.user.CheckUserListResponse.exist_users)
}
#endif
inline void CheckUserListResponse::add_exist_users(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  exist_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.user.CheckUserListResponse.exist_users)
}
inline void CheckUserListResponse::add_exist_users(const char* value, size_t size) {
  exist_users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.user.CheckUserListResponse.exist_users)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CheckUserListResponse::exist_users() const {
  // @@protoc_insertion_point(field_list:outer.user.CheckUserListResponse.exist_users)
  return exist_users_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CheckUserListResponse::mutable_exist_users() {
  // @@protoc_insertion_point(field_mutable_list:outer.user.CheckUserListResponse.exist_users)
  return &exist_users_;
}

// repeated string unexist_users = 3;
inline int CheckUserListResponse::unexist_users_size() const {
  return unexist_users_.size();
}
inline void CheckUserListResponse::clear_unexist_users() {
  unexist_users_.Clear();
}
inline const ::std::string& CheckUserListResponse::unexist_users(int index) const {
  // @@protoc_insertion_point(field_get:outer.user.CheckUserListResponse.unexist_users)
  return unexist_users_.Get(index);
}
inline ::std::string* CheckUserListResponse::mutable_unexist_users(int index) {
  // @@protoc_insertion_point(field_mutable:outer.user.CheckUserListResponse.unexist_users)
  return unexist_users_.Mutable(index);
}
inline void CheckUserListResponse::set_unexist_users(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.user.CheckUserListResponse.unexist_users)
  unexist_users_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CheckUserListResponse::set_unexist_users(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.user.CheckUserListResponse.unexist_users)
  unexist_users_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CheckUserListResponse::set_unexist_users(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  unexist_users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.user.CheckUserListResponse.unexist_users)
}
inline void CheckUserListResponse::set_unexist_users(int index, const char* value, size_t size) {
  unexist_users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.user.CheckUserListResponse.unexist_users)
}
inline ::std::string* CheckUserListResponse::add_unexist_users() {
  // @@protoc_insertion_point(field_add_mutable:outer.user.CheckUserListResponse.unexist_users)
  return unexist_users_.Add();
}
inline void CheckUserListResponse::add_unexist_users(const ::std::string& value) {
  unexist_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.user.CheckUserListResponse.unexist_users)
}
#if LANG_CXX11
inline void CheckUserListResponse::add_unexist_users(::std::string&& value) {
  unexist_users_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.user.CheckUserListResponse.unexist_users)
}
#endif
inline void CheckUserListResponse::add_unexist_users(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  unexist_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.user.CheckUserListResponse.unexist_users)
}
inline void CheckUserListResponse::add_unexist_users(const char* value, size_t size) {
  unexist_users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.user.CheckUserListResponse.unexist_users)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CheckUserListResponse::unexist_users() const {
  // @@protoc_insertion_point(field_list:outer.user.CheckUserListResponse.unexist_users)
  return unexist_users_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CheckUserListResponse::mutable_unexist_users() {
  // @@protoc_insertion_point(field_mutable_list:outer.user.CheckUserListResponse.unexist_users)
  return &unexist_users_;
}

// -------------------------------------------------------------------

// SetSilentStateRequest

// string from = 1;
inline void SetSilentStateRequest::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetSilentStateRequest::from() const {
  // @@protoc_insertion_point(field_get:outer.user.SetSilentStateRequest.from)
  return from_.GetNoArena();
}
inline void SetSilentStateRequest::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.SetSilentStateRequest.from)
}
#if LANG_CXX11
inline void SetSilentStateRequest::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.SetSilentStateRequest.from)
}
#endif
inline void SetSilentStateRequest::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.SetSilentStateRequest.from)
}
inline void SetSilentStateRequest::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.SetSilentStateRequest.from)
}
inline ::std::string* SetSilentStateRequest::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.SetSilentStateRequest.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetSilentStateRequest::release_from() {
  // @@protoc_insertion_point(field_release:outer.user.SetSilentStateRequest.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetSilentStateRequest::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:outer.user.SetSilentStateRequest.from)
}

// string to = 2;
inline void SetSilentStateRequest::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetSilentStateRequest::to() const {
  // @@protoc_insertion_point(field_get:outer.user.SetSilentStateRequest.to)
  return to_.GetNoArena();
}
inline void SetSilentStateRequest::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.SetSilentStateRequest.to)
}
#if LANG_CXX11
inline void SetSilentStateRequest::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.SetSilentStateRequest.to)
}
#endif
inline void SetSilentStateRequest::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.SetSilentStateRequest.to)
}
inline void SetSilentStateRequest::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.SetSilentStateRequest.to)
}
inline ::std::string* SetSilentStateRequest::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.SetSilentStateRequest.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetSilentStateRequest::release_to() {
  // @@protoc_insertion_point(field_release:outer.user.SetSilentStateRequest.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetSilentStateRequest::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:outer.user.SetSilentStateRequest.to)
}

// string appkey = 3;
inline void SetSilentStateRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetSilentStateRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.SetSilentStateRequest.appkey)
  return appkey_.GetNoArena();
}
inline void SetSilentStateRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.SetSilentStateRequest.appkey)
}
#if LANG_CXX11
inline void SetSilentStateRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.SetSilentStateRequest.appkey)
}
#endif
inline void SetSilentStateRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.SetSilentStateRequest.appkey)
}
inline void SetSilentStateRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.SetSilentStateRequest.appkey)
}
inline ::std::string* SetSilentStateRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.SetSilentStateRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetSilentStateRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.SetSilentStateRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetSilentStateRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.SetSilentStateRequest.appkey)
}

// .common.enumeration.ESilent silent = 4;
inline void SetSilentStateRequest::clear_silent() {
  silent_ = 0;
}
inline ::common::enumeration::ESilent SetSilentStateRequest::silent() const {
  // @@protoc_insertion_point(field_get:outer.user.SetSilentStateRequest.silent)
  return static_cast< ::common::enumeration::ESilent >(silent_);
}
inline void SetSilentStateRequest::set_silent(::common::enumeration::ESilent value) {
  
  silent_ = value;
  // @@protoc_insertion_point(field_set:outer.user.SetSilentStateRequest.silent)
}

// .common.enumeration.EClientType from_client_type = 5;
inline void SetSilentStateRequest::clear_from_client_type() {
  from_client_type_ = 0;
}
inline ::common::enumeration::EClientType SetSilentStateRequest::from_client_type() const {
  // @@protoc_insertion_point(field_get:outer.user.SetSilentStateRequest.from_client_type)
  return static_cast< ::common::enumeration::EClientType >(from_client_type_);
}
inline void SetSilentStateRequest::set_from_client_type(::common::enumeration::EClientType value) {
  
  from_client_type_ = value;
  // @@protoc_insertion_point(field_set:outer.user.SetSilentStateRequest.from_client_type)
}

// -------------------------------------------------------------------

// SetSilentStateResponse

// .common.errcode.EErrorCode ret = 1;
inline void SetSilentStateResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode SetSilentStateResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.user.SetSilentStateResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void SetSilentStateResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.user.SetSilentStateResponse.ret)
}

// -------------------------------------------------------------------

// UploadAvatarRequest

// string username = 1;
inline void UploadAvatarRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadAvatarRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.user.UploadAvatarRequest.username)
  return username_.GetNoArena();
}
inline void UploadAvatarRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UploadAvatarRequest.username)
}
#if LANG_CXX11
inline void UploadAvatarRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UploadAvatarRequest.username)
}
#endif
inline void UploadAvatarRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UploadAvatarRequest.username)
}
inline void UploadAvatarRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UploadAvatarRequest.username)
}
inline ::std::string* UploadAvatarRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UploadAvatarRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadAvatarRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.user.UploadAvatarRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadAvatarRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UploadAvatarRequest.username)
}

// string appkey = 2;
inline void UploadAvatarRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadAvatarRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.UploadAvatarRequest.appkey)
  return appkey_.GetNoArena();
}
inline void UploadAvatarRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UploadAvatarRequest.appkey)
}
#if LANG_CXX11
inline void UploadAvatarRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UploadAvatarRequest.appkey)
}
#endif
inline void UploadAvatarRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UploadAvatarRequest.appkey)
}
inline void UploadAvatarRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UploadAvatarRequest.appkey)
}
inline ::std::string* UploadAvatarRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UploadAvatarRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadAvatarRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.UploadAvatarRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadAvatarRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UploadAvatarRequest.appkey)
}

// string original_link = 3;
inline void UploadAvatarRequest::clear_original_link() {
  original_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadAvatarRequest::original_link() const {
  // @@protoc_insertion_point(field_get:outer.user.UploadAvatarRequest.original_link)
  return original_link_.GetNoArena();
}
inline void UploadAvatarRequest::set_original_link(const ::std::string& value) {
  
  original_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UploadAvatarRequest.original_link)
}
#if LANG_CXX11
inline void UploadAvatarRequest::set_original_link(::std::string&& value) {
  
  original_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UploadAvatarRequest.original_link)
}
#endif
inline void UploadAvatarRequest::set_original_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  original_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UploadAvatarRequest.original_link)
}
inline void UploadAvatarRequest::set_original_link(const char* value, size_t size) {
  
  original_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UploadAvatarRequest.original_link)
}
inline ::std::string* UploadAvatarRequest::mutable_original_link() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UploadAvatarRequest.original_link)
  return original_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadAvatarRequest::release_original_link() {
  // @@protoc_insertion_point(field_release:outer.user.UploadAvatarRequest.original_link)
  
  return original_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadAvatarRequest::set_allocated_original_link(::std::string* original_link) {
  if (original_link != NULL) {
    
  } else {
    
  }
  original_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_link);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UploadAvatarRequest.original_link)
}

// string thumbnail_link = 4;
inline void UploadAvatarRequest::clear_thumbnail_link() {
  thumbnail_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadAvatarRequest::thumbnail_link() const {
  // @@protoc_insertion_point(field_get:outer.user.UploadAvatarRequest.thumbnail_link)
  return thumbnail_link_.GetNoArena();
}
inline void UploadAvatarRequest::set_thumbnail_link(const ::std::string& value) {
  
  thumbnail_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UploadAvatarRequest.thumbnail_link)
}
#if LANG_CXX11
inline void UploadAvatarRequest::set_thumbnail_link(::std::string&& value) {
  
  thumbnail_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UploadAvatarRequest.thumbnail_link)
}
#endif
inline void UploadAvatarRequest::set_thumbnail_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UploadAvatarRequest.thumbnail_link)
}
inline void UploadAvatarRequest::set_thumbnail_link(const char* value, size_t size) {
  
  thumbnail_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UploadAvatarRequest.thumbnail_link)
}
inline ::std::string* UploadAvatarRequest::mutable_thumbnail_link() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UploadAvatarRequest.thumbnail_link)
  return thumbnail_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadAvatarRequest::release_thumbnail_link() {
  // @@protoc_insertion_point(field_release:outer.user.UploadAvatarRequest.thumbnail_link)
  
  return thumbnail_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadAvatarRequest::set_allocated_thumbnail_link(::std::string* thumbnail_link) {
  if (thumbnail_link != NULL) {
    
  } else {
    
  }
  thumbnail_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_link);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UploadAvatarRequest.thumbnail_link)
}

// .common.enumeration.EClientType fromClientType = 5;
inline void UploadAvatarRequest::clear_fromclienttype() {
  fromclienttype_ = 0;
}
inline ::common::enumeration::EClientType UploadAvatarRequest::fromclienttype() const {
  // @@protoc_insertion_point(field_get:outer.user.UploadAvatarRequest.fromClientType)
  return static_cast< ::common::enumeration::EClientType >(fromclienttype_);
}
inline void UploadAvatarRequest::set_fromclienttype(::common::enumeration::EClientType value) {
  
  fromclienttype_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UploadAvatarRequest.fromClientType)
}

// -------------------------------------------------------------------

// UploadAvatarResponse

// .common.errcode.EErrorCode ret = 1;
inline void UploadAvatarResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode UploadAvatarResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.user.UploadAvatarResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void UploadAvatarResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.user.UploadAvatarResponse.ret)
}

// string reason = 2;
inline void UploadAvatarResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadAvatarResponse::reason() const {
  // @@protoc_insertion_point(field_get:outer.user.UploadAvatarResponse.reason)
  return reason_.GetNoArena();
}
inline void UploadAvatarResponse::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.UploadAvatarResponse.reason)
}
#if LANG_CXX11
inline void UploadAvatarResponse::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.UploadAvatarResponse.reason)
}
#endif
inline void UploadAvatarResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.UploadAvatarResponse.reason)
}
inline void UploadAvatarResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.UploadAvatarResponse.reason)
}
inline ::std::string* UploadAvatarResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.UploadAvatarResponse.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadAvatarResponse::release_reason() {
  // @@protoc_insertion_point(field_release:outer.user.UploadAvatarResponse.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadAvatarResponse::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:outer.user.UploadAvatarResponse.reason)
}

// -------------------------------------------------------------------

// GetMyShieldingListRequest

// string appkey = 1;
inline void GetMyShieldingListRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMyShieldingListRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.GetMyShieldingListRequest.appkey)
  return appkey_.GetNoArena();
}
inline void GetMyShieldingListRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.GetMyShieldingListRequest.appkey)
}
#if LANG_CXX11
inline void GetMyShieldingListRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.GetMyShieldingListRequest.appkey)
}
#endif
inline void GetMyShieldingListRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.GetMyShieldingListRequest.appkey)
}
inline void GetMyShieldingListRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.GetMyShieldingListRequest.appkey)
}
inline ::std::string* GetMyShieldingListRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.GetMyShieldingListRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMyShieldingListRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.GetMyShieldingListRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMyShieldingListRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.GetMyShieldingListRequest.appkey)
}

// string username = 2;
inline void GetMyShieldingListRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMyShieldingListRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.user.GetMyShieldingListRequest.username)
  return username_.GetNoArena();
}
inline void GetMyShieldingListRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.GetMyShieldingListRequest.username)
}
#if LANG_CXX11
inline void GetMyShieldingListRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.GetMyShieldingListRequest.username)
}
#endif
inline void GetMyShieldingListRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.GetMyShieldingListRequest.username)
}
inline void GetMyShieldingListRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.GetMyShieldingListRequest.username)
}
inline ::std::string* GetMyShieldingListRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.GetMyShieldingListRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMyShieldingListRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.user.GetMyShieldingListRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMyShieldingListRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.user.GetMyShieldingListRequest.username)
}

// -------------------------------------------------------------------

// GetMyShieldingListResponse

// .common.errcode.EErrorCode ret = 1;
inline void GetMyShieldingListResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode GetMyShieldingListResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.user.GetMyShieldingListResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void GetMyShieldingListResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.user.GetMyShieldingListResponse.ret)
}

// repeated string usernames = 2;
inline int GetMyShieldingListResponse::usernames_size() const {
  return usernames_.size();
}
inline void GetMyShieldingListResponse::clear_usernames() {
  usernames_.Clear();
}
inline const ::std::string& GetMyShieldingListResponse::usernames(int index) const {
  // @@protoc_insertion_point(field_get:outer.user.GetMyShieldingListResponse.usernames)
  return usernames_.Get(index);
}
inline ::std::string* GetMyShieldingListResponse::mutable_usernames(int index) {
  // @@protoc_insertion_point(field_mutable:outer.user.GetMyShieldingListResponse.usernames)
  return usernames_.Mutable(index);
}
inline void GetMyShieldingListResponse::set_usernames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.user.GetMyShieldingListResponse.usernames)
  usernames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GetMyShieldingListResponse::set_usernames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.user.GetMyShieldingListResponse.usernames)
  usernames_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GetMyShieldingListResponse::set_usernames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  usernames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.user.GetMyShieldingListResponse.usernames)
}
inline void GetMyShieldingListResponse::set_usernames(int index, const char* value, size_t size) {
  usernames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.user.GetMyShieldingListResponse.usernames)
}
inline ::std::string* GetMyShieldingListResponse::add_usernames() {
  // @@protoc_insertion_point(field_add_mutable:outer.user.GetMyShieldingListResponse.usernames)
  return usernames_.Add();
}
inline void GetMyShieldingListResponse::add_usernames(const ::std::string& value) {
  usernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.user.GetMyShieldingListResponse.usernames)
}
#if LANG_CXX11
inline void GetMyShieldingListResponse::add_usernames(::std::string&& value) {
  usernames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.user.GetMyShieldingListResponse.usernames)
}
#endif
inline void GetMyShieldingListResponse::add_usernames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  usernames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.user.GetMyShieldingListResponse.usernames)
}
inline void GetMyShieldingListResponse::add_usernames(const char* value, size_t size) {
  usernames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.user.GetMyShieldingListResponse.usernames)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetMyShieldingListResponse::usernames() const {
  // @@protoc_insertion_point(field_list:outer.user.GetMyShieldingListResponse.usernames)
  return usernames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetMyShieldingListResponse::mutable_usernames() {
  // @@protoc_insertion_point(field_mutable_list:outer.user.GetMyShieldingListResponse.usernames)
  return &usernames_;
}

// -------------------------------------------------------------------

// SetShieldingStateRequest

// string other_username = 1;
inline void SetShieldingStateRequest::clear_other_username() {
  other_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetShieldingStateRequest::other_username() const {
  // @@protoc_insertion_point(field_get:outer.user.SetShieldingStateRequest.other_username)
  return other_username_.GetNoArena();
}
inline void SetShieldingStateRequest::set_other_username(const ::std::string& value) {
  
  other_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.SetShieldingStateRequest.other_username)
}
#if LANG_CXX11
inline void SetShieldingStateRequest::set_other_username(::std::string&& value) {
  
  other_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.SetShieldingStateRequest.other_username)
}
#endif
inline void SetShieldingStateRequest::set_other_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  other_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.SetShieldingStateRequest.other_username)
}
inline void SetShieldingStateRequest::set_other_username(const char* value, size_t size) {
  
  other_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.SetShieldingStateRequest.other_username)
}
inline ::std::string* SetShieldingStateRequest::mutable_other_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.SetShieldingStateRequest.other_username)
  return other_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetShieldingStateRequest::release_other_username() {
  // @@protoc_insertion_point(field_release:outer.user.SetShieldingStateRequest.other_username)
  
  return other_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetShieldingStateRequest::set_allocated_other_username(::std::string* other_username) {
  if (other_username != NULL) {
    
  } else {
    
  }
  other_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), other_username);
  // @@protoc_insertion_point(field_set_allocated:outer.user.SetShieldingStateRequest.other_username)
}

// string myself_username = 2;
inline void SetShieldingStateRequest::clear_myself_username() {
  myself_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetShieldingStateRequest::myself_username() const {
  // @@protoc_insertion_point(field_get:outer.user.SetShieldingStateRequest.myself_username)
  return myself_username_.GetNoArena();
}
inline void SetShieldingStateRequest::set_myself_username(const ::std::string& value) {
  
  myself_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.SetShieldingStateRequest.myself_username)
}
#if LANG_CXX11
inline void SetShieldingStateRequest::set_myself_username(::std::string&& value) {
  
  myself_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.SetShieldingStateRequest.myself_username)
}
#endif
inline void SetShieldingStateRequest::set_myself_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  myself_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.SetShieldingStateRequest.myself_username)
}
inline void SetShieldingStateRequest::set_myself_username(const char* value, size_t size) {
  
  myself_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.SetShieldingStateRequest.myself_username)
}
inline ::std::string* SetShieldingStateRequest::mutable_myself_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.SetShieldingStateRequest.myself_username)
  return myself_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetShieldingStateRequest::release_myself_username() {
  // @@protoc_insertion_point(field_release:outer.user.SetShieldingStateRequest.myself_username)
  
  return myself_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetShieldingStateRequest::set_allocated_myself_username(::std::string* myself_username) {
  if (myself_username != NULL) {
    
  } else {
    
  }
  myself_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), myself_username);
  // @@protoc_insertion_point(field_set_allocated:outer.user.SetShieldingStateRequest.myself_username)
}

// string appkey = 3;
inline void SetShieldingStateRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetShieldingStateRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.SetShieldingStateRequest.appkey)
  return appkey_.GetNoArena();
}
inline void SetShieldingStateRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.SetShieldingStateRequest.appkey)
}
#if LANG_CXX11
inline void SetShieldingStateRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.SetShieldingStateRequest.appkey)
}
#endif
inline void SetShieldingStateRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.SetShieldingStateRequest.appkey)
}
inline void SetShieldingStateRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.SetShieldingStateRequest.appkey)
}
inline ::std::string* SetShieldingStateRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.SetShieldingStateRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetShieldingStateRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.SetShieldingStateRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetShieldingStateRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.SetShieldingStateRequest.appkey)
}

// bool is_shielding = 4;
inline void SetShieldingStateRequest::clear_is_shielding() {
  is_shielding_ = false;
}
inline bool SetShieldingStateRequest::is_shielding() const {
  // @@protoc_insertion_point(field_get:outer.user.SetShieldingStateRequest.is_shielding)
  return is_shielding_;
}
inline void SetShieldingStateRequest::set_is_shielding(bool value) {
  
  is_shielding_ = value;
  // @@protoc_insertion_point(field_set:outer.user.SetShieldingStateRequest.is_shielding)
}

// .common.enumeration.EClientType from_client_type = 5;
inline void SetShieldingStateRequest::clear_from_client_type() {
  from_client_type_ = 0;
}
inline ::common::enumeration::EClientType SetShieldingStateRequest::from_client_type() const {
  // @@protoc_insertion_point(field_get:outer.user.SetShieldingStateRequest.from_client_type)
  return static_cast< ::common::enumeration::EClientType >(from_client_type_);
}
inline void SetShieldingStateRequest::set_from_client_type(::common::enumeration::EClientType value) {
  
  from_client_type_ = value;
  // @@protoc_insertion_point(field_set:outer.user.SetShieldingStateRequest.from_client_type)
}

// -------------------------------------------------------------------

// SetShieldingStateResponse

// .common.errcode.EErrorCode ret = 1;
inline void SetShieldingStateResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode SetShieldingStateResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.user.SetShieldingStateResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void SetShieldingStateResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.user.SetShieldingStateResponse.ret)
}

// -------------------------------------------------------------------

// QueryUserOnlineStatusRequest

// string username = 1;
inline void QueryUserOnlineStatusRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryUserOnlineStatusRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.user.QueryUserOnlineStatusRequest.username)
  return username_.GetNoArena();
}
inline void QueryUserOnlineStatusRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.QueryUserOnlineStatusRequest.username)
}
#if LANG_CXX11
inline void QueryUserOnlineStatusRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.QueryUserOnlineStatusRequest.username)
}
#endif
inline void QueryUserOnlineStatusRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.QueryUserOnlineStatusRequest.username)
}
inline void QueryUserOnlineStatusRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.QueryUserOnlineStatusRequest.username)
}
inline ::std::string* QueryUserOnlineStatusRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.QueryUserOnlineStatusRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryUserOnlineStatusRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.user.QueryUserOnlineStatusRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryUserOnlineStatusRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.user.QueryUserOnlineStatusRequest.username)
}

// string appkey = 2;
inline void QueryUserOnlineStatusRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryUserOnlineStatusRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.QueryUserOnlineStatusRequest.appkey)
  return appkey_.GetNoArena();
}
inline void QueryUserOnlineStatusRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.QueryUserOnlineStatusRequest.appkey)
}
#if LANG_CXX11
inline void QueryUserOnlineStatusRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.QueryUserOnlineStatusRequest.appkey)
}
#endif
inline void QueryUserOnlineStatusRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.QueryUserOnlineStatusRequest.appkey)
}
inline void QueryUserOnlineStatusRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.QueryUserOnlineStatusRequest.appkey)
}
inline ::std::string* QueryUserOnlineStatusRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.QueryUserOnlineStatusRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryUserOnlineStatusRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.QueryUserOnlineStatusRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryUserOnlineStatusRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.QueryUserOnlineStatusRequest.appkey)
}

// -------------------------------------------------------------------

// QueryUserOnlineStatusResponse

// .common.errcode.EErrorCode ret = 1;
inline void QueryUserOnlineStatusResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode QueryUserOnlineStatusResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.user.QueryUserOnlineStatusResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void QueryUserOnlineStatusResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.user.QueryUserOnlineStatusResponse.ret)
}

// .common.enumeration.EUserOnlineStatus mobile_phone = 2;
inline void QueryUserOnlineStatusResponse::clear_mobile_phone() {
  mobile_phone_ = 0;
}
inline ::common::enumeration::EUserOnlineStatus QueryUserOnlineStatusResponse::mobile_phone() const {
  // @@protoc_insertion_point(field_get:outer.user.QueryUserOnlineStatusResponse.mobile_phone)
  return static_cast< ::common::enumeration::EUserOnlineStatus >(mobile_phone_);
}
inline void QueryUserOnlineStatusResponse::set_mobile_phone(::common::enumeration::EUserOnlineStatus value) {
  
  mobile_phone_ = value;
  // @@protoc_insertion_point(field_set:outer.user.QueryUserOnlineStatusResponse.mobile_phone)
}

// .common.enumeration.EUserOnlineStatus car_machine = 3;
inline void QueryUserOnlineStatusResponse::clear_car_machine() {
  car_machine_ = 0;
}
inline ::common::enumeration::EUserOnlineStatus QueryUserOnlineStatusResponse::car_machine() const {
  // @@protoc_insertion_point(field_get:outer.user.QueryUserOnlineStatusResponse.car_machine)
  return static_cast< ::common::enumeration::EUserOnlineStatus >(car_machine_);
}
inline void QueryUserOnlineStatusResponse::set_car_machine(::common::enumeration::EUserOnlineStatus value) {
  
  car_machine_ = value;
  // @@protoc_insertion_point(field_set:outer.user.QueryUserOnlineStatusResponse.car_machine)
}

// -------------------------------------------------------------------

// KickCarMachineRequest

// string username = 1;
inline void KickCarMachineRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KickCarMachineRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.user.KickCarMachineRequest.username)
  return username_.GetNoArena();
}
inline void KickCarMachineRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.KickCarMachineRequest.username)
}
#if LANG_CXX11
inline void KickCarMachineRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.KickCarMachineRequest.username)
}
#endif
inline void KickCarMachineRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.KickCarMachineRequest.username)
}
inline void KickCarMachineRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.KickCarMachineRequest.username)
}
inline ::std::string* KickCarMachineRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.KickCarMachineRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KickCarMachineRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.user.KickCarMachineRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KickCarMachineRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.user.KickCarMachineRequest.username)
}

// string appkey = 2;
inline void KickCarMachineRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KickCarMachineRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.KickCarMachineRequest.appkey)
  return appkey_.GetNoArena();
}
inline void KickCarMachineRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.KickCarMachineRequest.appkey)
}
#if LANG_CXX11
inline void KickCarMachineRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.KickCarMachineRequest.appkey)
}
#endif
inline void KickCarMachineRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.KickCarMachineRequest.appkey)
}
inline void KickCarMachineRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.KickCarMachineRequest.appkey)
}
inline ::std::string* KickCarMachineRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.KickCarMachineRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KickCarMachineRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.KickCarMachineRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KickCarMachineRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.KickCarMachineRequest.appkey)
}

// .common.base.MobileBase base_info = 3;
inline bool KickCarMachineRequest::has_base_info() const {
  return this != internal_default_instance() && base_info_ != NULL;
}
inline const ::common::base::MobileBase& KickCarMachineRequest::base_info() const {
  const ::common::base::MobileBase* p = base_info_;
  // @@protoc_insertion_point(field_get:outer.user.KickCarMachineRequest.base_info)
  return p != NULL ? *p : *reinterpret_cast<const ::common::base::MobileBase*>(
      &::common::base::_MobileBase_default_instance_);
}
inline ::common::base::MobileBase* KickCarMachineRequest::release_base_info() {
  // @@protoc_insertion_point(field_release:outer.user.KickCarMachineRequest.base_info)
  
  ::common::base::MobileBase* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline ::common::base::MobileBase* KickCarMachineRequest::mutable_base_info() {
  
  if (base_info_ == NULL) {
    base_info_ = new ::common::base::MobileBase;
  }
  // @@protoc_insertion_point(field_mutable:outer.user.KickCarMachineRequest.base_info)
  return base_info_;
}
inline void KickCarMachineRequest::set_allocated_base_info(::common::base::MobileBase* base_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(base_info_);
  }
  if (base_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base_info, submessage_arena);
    }
    
  } else {
    
  }
  base_info_ = base_info;
  // @@protoc_insertion_point(field_set_allocated:outer.user.KickCarMachineRequest.base_info)
}

// repeated .common.enumeration.EClientType Kick_client_type = 4;
inline int KickCarMachineRequest::kick_client_type_size() const {
  return kick_client_type_.size();
}
inline void KickCarMachineRequest::clear_kick_client_type() {
  kick_client_type_.Clear();
}
inline ::common::enumeration::EClientType KickCarMachineRequest::kick_client_type(int index) const {
  // @@protoc_insertion_point(field_get:outer.user.KickCarMachineRequest.Kick_client_type)
  return static_cast< ::common::enumeration::EClientType >(kick_client_type_.Get(index));
}
inline void KickCarMachineRequest::set_kick_client_type(int index, ::common::enumeration::EClientType value) {
  kick_client_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:outer.user.KickCarMachineRequest.Kick_client_type)
}
inline void KickCarMachineRequest::add_kick_client_type(::common::enumeration::EClientType value) {
  kick_client_type_.Add(value);
  // @@protoc_insertion_point(field_add:outer.user.KickCarMachineRequest.Kick_client_type)
}
inline const ::google::protobuf::RepeatedField<int>&
KickCarMachineRequest::kick_client_type() const {
  // @@protoc_insertion_point(field_list:outer.user.KickCarMachineRequest.Kick_client_type)
  return kick_client_type_;
}
inline ::google::protobuf::RepeatedField<int>*
KickCarMachineRequest::mutable_kick_client_type() {
  // @@protoc_insertion_point(field_mutable_list:outer.user.KickCarMachineRequest.Kick_client_type)
  return &kick_client_type_;
}

// string reason = 5;
inline void KickCarMachineRequest::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KickCarMachineRequest::reason() const {
  // @@protoc_insertion_point(field_get:outer.user.KickCarMachineRequest.reason)
  return reason_.GetNoArena();
}
inline void KickCarMachineRequest::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.KickCarMachineRequest.reason)
}
#if LANG_CXX11
inline void KickCarMachineRequest::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.KickCarMachineRequest.reason)
}
#endif
inline void KickCarMachineRequest::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.KickCarMachineRequest.reason)
}
inline void KickCarMachineRequest::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.KickCarMachineRequest.reason)
}
inline ::std::string* KickCarMachineRequest::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.KickCarMachineRequest.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KickCarMachineRequest::release_reason() {
  // @@protoc_insertion_point(field_release:outer.user.KickCarMachineRequest.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KickCarMachineRequest::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:outer.user.KickCarMachineRequest.reason)
}

// -------------------------------------------------------------------

// KickCarMachineResponse

// .common.errcode.EErrorCode ret = 1;
inline void KickCarMachineResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode KickCarMachineResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.user.KickCarMachineResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void KickCarMachineResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.user.KickCarMachineResponse.ret)
}

// -------------------------------------------------------------------

// DisplayUpdateRequest

// string username = 1;
inline void DisplayUpdateRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisplayUpdateRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.user.DisplayUpdateRequest.username)
  return username_.GetNoArena();
}
inline void DisplayUpdateRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.DisplayUpdateRequest.username)
}
#if LANG_CXX11
inline void DisplayUpdateRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.DisplayUpdateRequest.username)
}
#endif
inline void DisplayUpdateRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.DisplayUpdateRequest.username)
}
inline void DisplayUpdateRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.DisplayUpdateRequest.username)
}
inline ::std::string* DisplayUpdateRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.DisplayUpdateRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisplayUpdateRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.user.DisplayUpdateRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayUpdateRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.user.DisplayUpdateRequest.username)
}

// string appkey = 2;
inline void DisplayUpdateRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisplayUpdateRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.user.DisplayUpdateRequest.appkey)
  return appkey_.GetNoArena();
}
inline void DisplayUpdateRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.DisplayUpdateRequest.appkey)
}
#if LANG_CXX11
inline void DisplayUpdateRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.DisplayUpdateRequest.appkey)
}
#endif
inline void DisplayUpdateRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.DisplayUpdateRequest.appkey)
}
inline void DisplayUpdateRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.DisplayUpdateRequest.appkey)
}
inline ::std::string* DisplayUpdateRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.DisplayUpdateRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisplayUpdateRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.user.DisplayUpdateRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayUpdateRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.user.DisplayUpdateRequest.appkey)
}

// string display = 3;
inline void DisplayUpdateRequest::clear_display() {
  display_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisplayUpdateRequest::display() const {
  // @@protoc_insertion_point(field_get:outer.user.DisplayUpdateRequest.display)
  return display_.GetNoArena();
}
inline void DisplayUpdateRequest::set_display(const ::std::string& value) {
  
  display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.DisplayUpdateRequest.display)
}
#if LANG_CXX11
inline void DisplayUpdateRequest::set_display(::std::string&& value) {
  
  display_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.DisplayUpdateRequest.display)
}
#endif
inline void DisplayUpdateRequest::set_display(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.DisplayUpdateRequest.display)
}
inline void DisplayUpdateRequest::set_display(const char* value, size_t size) {
  
  display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.DisplayUpdateRequest.display)
}
inline ::std::string* DisplayUpdateRequest::mutable_display() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.DisplayUpdateRequest.display)
  return display_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisplayUpdateRequest::release_display() {
  // @@protoc_insertion_point(field_release:outer.user.DisplayUpdateRequest.display)
  
  return display_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayUpdateRequest::set_allocated_display(::std::string* display) {
  if (display != NULL) {
    
  } else {
    
  }
  display_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display);
  // @@protoc_insertion_point(field_set_allocated:outer.user.DisplayUpdateRequest.display)
}

// .common.enumeration.EClientType fromClientType = 4;
inline void DisplayUpdateRequest::clear_fromclienttype() {
  fromclienttype_ = 0;
}
inline ::common::enumeration::EClientType DisplayUpdateRequest::fromclienttype() const {
  // @@protoc_insertion_point(field_get:outer.user.DisplayUpdateRequest.fromClientType)
  return static_cast< ::common::enumeration::EClientType >(fromclienttype_);
}
inline void DisplayUpdateRequest::set_fromclienttype(::common::enumeration::EClientType value) {
  
  fromclienttype_ = value;
  // @@protoc_insertion_point(field_set:outer.user.DisplayUpdateRequest.fromClientType)
}

// -------------------------------------------------------------------

// DisplayUpdateResponse

// .common.errcode.EErrorCode ret = 1;
inline void DisplayUpdateResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode DisplayUpdateResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.user.DisplayUpdateResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void DisplayUpdateResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.user.DisplayUpdateResponse.ret)
}

// string reason = 2;
inline void DisplayUpdateResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DisplayUpdateResponse::reason() const {
  // @@protoc_insertion_point(field_get:outer.user.DisplayUpdateResponse.reason)
  return reason_.GetNoArena();
}
inline void DisplayUpdateResponse::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.user.DisplayUpdateResponse.reason)
}
#if LANG_CXX11
inline void DisplayUpdateResponse::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.user.DisplayUpdateResponse.reason)
}
#endif
inline void DisplayUpdateResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.user.DisplayUpdateResponse.reason)
}
inline void DisplayUpdateResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.user.DisplayUpdateResponse.reason)
}
inline ::std::string* DisplayUpdateResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:outer.user.DisplayUpdateResponse.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DisplayUpdateResponse::release_reason() {
  // @@protoc_insertion_point(field_release:outer.user.DisplayUpdateResponse.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayUpdateResponse::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:outer.user.DisplayUpdateResponse.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace user
}  // namespace outer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_outer_2fuser_2eproto__INCLUDED
