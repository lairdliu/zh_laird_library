// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: outer/grpc.proto

#include "outer/grpc.pb.h"
#include "outer/grpc.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace outer {
namespace grpc {

static const char* ConnectorService_method_names[] = {
  "/outer.grpc.ConnectorService/SendUnaryRequest",
  "/outer.grpc.ConnectorService/SendSessionRequest",
  "/outer.grpc.ConnectorService/HealthCheck",
};

std::unique_ptr< ConnectorService::Stub> ConnectorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConnectorService::Stub> stub(new ConnectorService::Stub(channel));
  return stub;
}

ConnectorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendUnaryRequest_(ConnectorService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendSessionRequest_(ConnectorService_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_HealthCheck_(ConnectorService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ConnectorService::Stub::SendUnaryRequest(::grpc::ClientContext* context, const ::outer::connector::UnaryRequest& request, ::outer::connector::UnaryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendUnaryRequest_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::outer::connector::UnaryResponse>* ConnectorService::Stub::AsyncSendUnaryRequestRaw(::grpc::ClientContext* context, const ::outer::connector::UnaryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::outer::connector::UnaryResponse>::Create(channel_.get(), cq, rpcmethod_SendUnaryRequest_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::outer::connector::UnaryResponse>* ConnectorService::Stub::PrepareAsyncSendUnaryRequestRaw(::grpc::ClientContext* context, const ::outer::connector::UnaryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::outer::connector::UnaryResponse>::Create(channel_.get(), cq, rpcmethod_SendUnaryRequest_, context, request, false);
}

::grpc::ClientReaderWriter< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>* ConnectorService::Stub::SendSessionRequestRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>::Create(channel_.get(), rpcmethod_SendSessionRequest_, context);
}

::grpc::ClientAsyncReaderWriter< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>* ConnectorService::Stub::AsyncSendSessionRequestRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>::Create(channel_.get(), cq, rpcmethod_SendSessionRequest_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>* ConnectorService::Stub::PrepareAsyncSendSessionRequestRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>::Create(channel_.get(), cq, rpcmethod_SendSessionRequest_, context, false, nullptr);
}

::grpc::Status ConnectorService::Stub::HealthCheck(::grpc::ClientContext* context, const ::outer::connector::HealthCheckRequest& request, ::outer::connector::HealthCheckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HealthCheck_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::outer::connector::HealthCheckResponse>* ConnectorService::Stub::AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::outer::connector::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::outer::connector::HealthCheckResponse>::Create(channel_.get(), cq, rpcmethod_HealthCheck_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::outer::connector::HealthCheckResponse>* ConnectorService::Stub::PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::outer::connector::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::outer::connector::HealthCheckResponse>::Create(channel_.get(), cq, rpcmethod_HealthCheck_, context, request, false);
}

ConnectorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConnectorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConnectorService::Service, ::outer::connector::UnaryRequest, ::outer::connector::UnaryResponse>(
          std::mem_fn(&ConnectorService::Service::SendUnaryRequest), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConnectorService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< ConnectorService::Service, ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>(
          std::mem_fn(&ConnectorService::Service::SendSessionRequest), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConnectorService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConnectorService::Service, ::outer::connector::HealthCheckRequest, ::outer::connector::HealthCheckResponse>(
          std::mem_fn(&ConnectorService::Service::HealthCheck), this)));
}

ConnectorService::Service::~Service() {
}

::grpc::Status ConnectorService::Service::SendUnaryRequest(::grpc::ServerContext* context, const ::outer::connector::UnaryRequest* request, ::outer::connector::UnaryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConnectorService::Service::SendSessionRequest(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::outer::connector::SessionNotify, ::outer::connector::SessionRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConnectorService::Service::HealthCheck(::grpc::ServerContext* context, const ::outer::connector::HealthCheckRequest* request, ::outer::connector::HealthCheckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace outer
}  // namespace grpc

