// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: outer/push.proto

#ifndef PROTOBUF_outer_2fpush_2eproto__INCLUDED
#define PROTOBUF_outer_2fpush_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/errcode.pb.h"
#include "common/base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_outer_2fpush_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCommonResponseImpl();
void InitDefaultsCommonResponse();
void InitDefaultsSetTokenRequestImpl();
void InitDefaultsSetTokenRequest();
void InitDefaultsClearTokenRequestImpl();
void InitDefaultsClearTokenRequest();
void InitDefaultsCreateCertRequestImpl();
void InitDefaultsCreateCertRequest();
void InitDefaultsOperateCertRequestImpl();
void InitDefaultsOperateCertRequest();
void InitDefaultsQueryCertResponseImpl();
void InitDefaultsQueryCertResponse();
void InitDefaultsSetBadgeRequestImpl();
void InitDefaultsSetBadgeRequest();
inline void InitDefaults() {
  InitDefaultsCommonResponse();
  InitDefaultsSetTokenRequest();
  InitDefaultsClearTokenRequest();
  InitDefaultsCreateCertRequest();
  InitDefaultsOperateCertRequest();
  InitDefaultsQueryCertResponse();
  InitDefaultsSetBadgeRequest();
}
}  // namespace protobuf_outer_2fpush_2eproto
namespace outer {
namespace push {
class ClearTokenRequest;
class ClearTokenRequestDefaultTypeInternal;
extern ClearTokenRequestDefaultTypeInternal _ClearTokenRequest_default_instance_;
class CommonResponse;
class CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class CreateCertRequest;
class CreateCertRequestDefaultTypeInternal;
extern CreateCertRequestDefaultTypeInternal _CreateCertRequest_default_instance_;
class OperateCertRequest;
class OperateCertRequestDefaultTypeInternal;
extern OperateCertRequestDefaultTypeInternal _OperateCertRequest_default_instance_;
class QueryCertResponse;
class QueryCertResponseDefaultTypeInternal;
extern QueryCertResponseDefaultTypeInternal _QueryCertResponse_default_instance_;
class SetBadgeRequest;
class SetBadgeRequestDefaultTypeInternal;
extern SetBadgeRequestDefaultTypeInternal _SetBadgeRequest_default_instance_;
class SetTokenRequest;
class SetTokenRequestDefaultTypeInternal;
extern SetTokenRequestDefaultTypeInternal _SetTokenRequest_default_instance_;
}  // namespace push
}  // namespace outer
namespace outer {
namespace push {

enum EPushType {
  UNKNOWN = 0,
  IOS_DEVELOP = 4,
  IOS_PRODUCT = 1,
  XIAO_MI = 2,
  HUA_WEI = 3,
  EPushType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EPushType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EPushType_IsValid(int value);
const EPushType EPushType_MIN = UNKNOWN;
const EPushType EPushType_MAX = IOS_DEVELOP;
const int EPushType_ARRAYSIZE = EPushType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPushType_descriptor();
inline const ::std::string& EPushType_Name(EPushType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPushType_descriptor(), value);
}
inline bool EPushType_Parse(
    const ::std::string& name, EPushType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPushType>(
    EPushType_descriptor(), name, value);
}
// ===================================================================

class CommonResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.push.CommonResponse) */ {
 public:
  CommonResponse();
  virtual ~CommonResponse();

  CommonResponse(const CommonResponse& from);

  inline CommonResponse& operator=(const CommonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonResponse(CommonResponse&& from) noexcept
    : CommonResponse() {
    *this = ::std::move(from);
  }

  inline CommonResponse& operator=(CommonResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonResponse* internal_default_instance() {
    return reinterpret_cast<const CommonResponse*>(
               &_CommonResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CommonResponse* other);
  friend void swap(CommonResponse& a, CommonResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CommonResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommonResponse& from);
  void MergeFrom(const CommonResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommonResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.push.CommonResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fpush_2eproto::TableStruct;
  friend void ::protobuf_outer_2fpush_2eproto::InitDefaultsCommonResponseImpl();
};
// -------------------------------------------------------------------

class SetTokenRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.push.SetTokenRequest) */ {
 public:
  SetTokenRequest();
  virtual ~SetTokenRequest();

  SetTokenRequest(const SetTokenRequest& from);

  inline SetTokenRequest& operator=(const SetTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetTokenRequest(SetTokenRequest&& from) noexcept
    : SetTokenRequest() {
    *this = ::std::move(from);
  }

  inline SetTokenRequest& operator=(SetTokenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetTokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTokenRequest* internal_default_instance() {
    return reinterpret_cast<const SetTokenRequest*>(
               &_SetTokenRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SetTokenRequest* other);
  friend void swap(SetTokenRequest& a, SetTokenRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetTokenRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetTokenRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetTokenRequest& from);
  void MergeFrom(const SetTokenRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetTokenRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ios_token = 2;
  void clear_ios_token();
  static const int kIosTokenFieldNumber = 2;
  const ::std::string& ios_token() const;
  void set_ios_token(const ::std::string& value);
  #if LANG_CXX11
  void set_ios_token(::std::string&& value);
  #endif
  void set_ios_token(const char* value);
  void set_ios_token(const char* value, size_t size);
  ::std::string* mutable_ios_token();
  ::std::string* release_ios_token();
  void set_allocated_ios_token(::std::string* ios_token);

  // string uid = 3;
  void clear_uid();
  static const int kUidFieldNumber = 3;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // string android_token = 4;
  void clear_android_token();
  static const int kAndroidTokenFieldNumber = 4;
  const ::std::string& android_token() const;
  void set_android_token(const ::std::string& value);
  #if LANG_CXX11
  void set_android_token(::std::string&& value);
  #endif
  void set_android_token(const char* value);
  void set_android_token(const char* value, size_t size);
  ::std::string* mutable_android_token();
  ::std::string* release_android_token();
  void set_allocated_android_token(::std::string* android_token);

  // string android_appsecret = 5;
  void clear_android_appsecret();
  static const int kAndroidAppsecretFieldNumber = 5;
  const ::std::string& android_appsecret() const;
  void set_android_appsecret(const ::std::string& value);
  #if LANG_CXX11
  void set_android_appsecret(::std::string&& value);
  #endif
  void set_android_appsecret(const char* value);
  void set_android_appsecret(const char* value, size_t size);
  ::std::string* mutable_android_appsecret();
  ::std::string* release_android_appsecret();
  void set_allocated_android_appsecret(::std::string* android_appsecret);

  // string android_package_name = 6;
  void clear_android_package_name();
  static const int kAndroidPackageNameFieldNumber = 6;
  const ::std::string& android_package_name() const;
  void set_android_package_name(const ::std::string& value);
  #if LANG_CXX11
  void set_android_package_name(::std::string&& value);
  #endif
  void set_android_package_name(const char* value);
  void set_android_package_name(const char* value, size_t size);
  ::std::string* mutable_android_package_name();
  ::std::string* release_android_package_name();
  void set_allocated_android_package_name(::std::string* android_package_name);

  // .common.base.MobileBase base_info = 7;
  bool has_base_info() const;
  void clear_base_info();
  static const int kBaseInfoFieldNumber = 7;
  const ::common::base::MobileBase& base_info() const;
  ::common::base::MobileBase* release_base_info();
  ::common::base::MobileBase* mutable_base_info();
  void set_allocated_base_info(::common::base::MobileBase* base_info);

  // .outer.push.EPushType crt_type = 1;
  void clear_crt_type();
  static const int kCrtTypeFieldNumber = 1;
  ::outer::push::EPushType crt_type() const;
  void set_crt_type(::outer::push::EPushType value);

  // @@protoc_insertion_point(class_scope:outer.push.SetTokenRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ios_token_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr android_token_;
  ::google::protobuf::internal::ArenaStringPtr android_appsecret_;
  ::google::protobuf::internal::ArenaStringPtr android_package_name_;
  ::common::base::MobileBase* base_info_;
  int crt_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fpush_2eproto::TableStruct;
  friend void ::protobuf_outer_2fpush_2eproto::InitDefaultsSetTokenRequestImpl();
};
// -------------------------------------------------------------------

class ClearTokenRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.push.ClearTokenRequest) */ {
 public:
  ClearTokenRequest();
  virtual ~ClearTokenRequest();

  ClearTokenRequest(const ClearTokenRequest& from);

  inline ClearTokenRequest& operator=(const ClearTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClearTokenRequest(ClearTokenRequest&& from) noexcept
    : ClearTokenRequest() {
    *this = ::std::move(from);
  }

  inline ClearTokenRequest& operator=(ClearTokenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClearTokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearTokenRequest* internal_default_instance() {
    return reinterpret_cast<const ClearTokenRequest*>(
               &_ClearTokenRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ClearTokenRequest* other);
  friend void swap(ClearTokenRequest& a, ClearTokenRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClearTokenRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ClearTokenRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClearTokenRequest& from);
  void MergeFrom(const ClearTokenRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClearTokenRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // @@protoc_insertion_point(class_scope:outer.push.ClearTokenRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fpush_2eproto::TableStruct;
  friend void ::protobuf_outer_2fpush_2eproto::InitDefaultsClearTokenRequestImpl();
};
// -------------------------------------------------------------------

class CreateCertRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.push.CreateCertRequest) */ {
 public:
  CreateCertRequest();
  virtual ~CreateCertRequest();

  CreateCertRequest(const CreateCertRequest& from);

  inline CreateCertRequest& operator=(const CreateCertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateCertRequest(CreateCertRequest&& from) noexcept
    : CreateCertRequest() {
    *this = ::std::move(from);
  }

  inline CreateCertRequest& operator=(CreateCertRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateCertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCertRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCertRequest*>(
               &_CreateCertRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CreateCertRequest* other);
  friend void swap(CreateCertRequest& a, CreateCertRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateCertRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateCertRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateCertRequest& from);
  void MergeFrom(const CreateCertRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateCertRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ios_develop_crt_name = 1;
  void clear_ios_develop_crt_name();
  static const int kIosDevelopCrtNameFieldNumber = 1;
  const ::std::string& ios_develop_crt_name() const;
  void set_ios_develop_crt_name(const ::std::string& value);
  #if LANG_CXX11
  void set_ios_develop_crt_name(::std::string&& value);
  #endif
  void set_ios_develop_crt_name(const char* value);
  void set_ios_develop_crt_name(const char* value, size_t size);
  ::std::string* mutable_ios_develop_crt_name();
  ::std::string* release_ios_develop_crt_name();
  void set_allocated_ios_develop_crt_name(::std::string* ios_develop_crt_name);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // bytes ios_develop_crt = 3;
  void clear_ios_develop_crt();
  static const int kIosDevelopCrtFieldNumber = 3;
  const ::std::string& ios_develop_crt() const;
  void set_ios_develop_crt(const ::std::string& value);
  #if LANG_CXX11
  void set_ios_develop_crt(::std::string&& value);
  #endif
  void set_ios_develop_crt(const char* value);
  void set_ios_develop_crt(const void* value, size_t size);
  ::std::string* mutable_ios_develop_crt();
  ::std::string* release_ios_develop_crt();
  void set_allocated_ios_develop_crt(::std::string* ios_develop_crt);

  // string ios_develop_crt_pwd = 4;
  void clear_ios_develop_crt_pwd();
  static const int kIosDevelopCrtPwdFieldNumber = 4;
  const ::std::string& ios_develop_crt_pwd() const;
  void set_ios_develop_crt_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_ios_develop_crt_pwd(::std::string&& value);
  #endif
  void set_ios_develop_crt_pwd(const char* value);
  void set_ios_develop_crt_pwd(const char* value, size_t size);
  ::std::string* mutable_ios_develop_crt_pwd();
  ::std::string* release_ios_develop_crt_pwd();
  void set_allocated_ios_develop_crt_pwd(::std::string* ios_develop_crt_pwd);

  // string ios_product_crt_name = 5;
  void clear_ios_product_crt_name();
  static const int kIosProductCrtNameFieldNumber = 5;
  const ::std::string& ios_product_crt_name() const;
  void set_ios_product_crt_name(const ::std::string& value);
  #if LANG_CXX11
  void set_ios_product_crt_name(::std::string&& value);
  #endif
  void set_ios_product_crt_name(const char* value);
  void set_ios_product_crt_name(const char* value, size_t size);
  ::std::string* mutable_ios_product_crt_name();
  ::std::string* release_ios_product_crt_name();
  void set_allocated_ios_product_crt_name(::std::string* ios_product_crt_name);

  // bytes ios_product_crt = 6;
  void clear_ios_product_crt();
  static const int kIosProductCrtFieldNumber = 6;
  const ::std::string& ios_product_crt() const;
  void set_ios_product_crt(const ::std::string& value);
  #if LANG_CXX11
  void set_ios_product_crt(::std::string&& value);
  #endif
  void set_ios_product_crt(const char* value);
  void set_ios_product_crt(const void* value, size_t size);
  ::std::string* mutable_ios_product_crt();
  ::std::string* release_ios_product_crt();
  void set_allocated_ios_product_crt(::std::string* ios_product_crt);

  // string ios_product_crt_pwd = 7;
  void clear_ios_product_crt_pwd();
  static const int kIosProductCrtPwdFieldNumber = 7;
  const ::std::string& ios_product_crt_pwd() const;
  void set_ios_product_crt_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_ios_product_crt_pwd(::std::string&& value);
  #endif
  void set_ios_product_crt_pwd(const char* value);
  void set_ios_product_crt_pwd(const char* value, size_t size);
  ::std::string* mutable_ios_product_crt_pwd();
  ::std::string* release_ios_product_crt_pwd();
  void set_allocated_ios_product_crt_pwd(::std::string* ios_product_crt_pwd);

  // @@protoc_insertion_point(class_scope:outer.push.CreateCertRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ios_develop_crt_name_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr ios_develop_crt_;
  ::google::protobuf::internal::ArenaStringPtr ios_develop_crt_pwd_;
  ::google::protobuf::internal::ArenaStringPtr ios_product_crt_name_;
  ::google::protobuf::internal::ArenaStringPtr ios_product_crt_;
  ::google::protobuf::internal::ArenaStringPtr ios_product_crt_pwd_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fpush_2eproto::TableStruct;
  friend void ::protobuf_outer_2fpush_2eproto::InitDefaultsCreateCertRequestImpl();
};
// -------------------------------------------------------------------

class OperateCertRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.push.OperateCertRequest) */ {
 public:
  OperateCertRequest();
  virtual ~OperateCertRequest();

  OperateCertRequest(const OperateCertRequest& from);

  inline OperateCertRequest& operator=(const OperateCertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperateCertRequest(OperateCertRequest&& from) noexcept
    : OperateCertRequest() {
    *this = ::std::move(from);
  }

  inline OperateCertRequest& operator=(OperateCertRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OperateCertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperateCertRequest* internal_default_instance() {
    return reinterpret_cast<const OperateCertRequest*>(
               &_OperateCertRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(OperateCertRequest* other);
  friend void swap(OperateCertRequest& a, OperateCertRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperateCertRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  OperateCertRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OperateCertRequest& from);
  void MergeFrom(const OperateCertRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OperateCertRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // @@protoc_insertion_point(class_scope:outer.push.OperateCertRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fpush_2eproto::TableStruct;
  friend void ::protobuf_outer_2fpush_2eproto::InitDefaultsOperateCertRequestImpl();
};
// -------------------------------------------------------------------

class QueryCertResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.push.QueryCertResponse) */ {
 public:
  QueryCertResponse();
  virtual ~QueryCertResponse();

  QueryCertResponse(const QueryCertResponse& from);

  inline QueryCertResponse& operator=(const QueryCertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryCertResponse(QueryCertResponse&& from) noexcept
    : QueryCertResponse() {
    *this = ::std::move(from);
  }

  inline QueryCertResponse& operator=(QueryCertResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryCertResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryCertResponse* internal_default_instance() {
    return reinterpret_cast<const QueryCertResponse*>(
               &_QueryCertResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(QueryCertResponse* other);
  friend void swap(QueryCertResponse& a, QueryCertResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryCertResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryCertResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryCertResponse& from);
  void MergeFrom(const QueryCertResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryCertResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ios_develop_crt_name = 1;
  void clear_ios_develop_crt_name();
  static const int kIosDevelopCrtNameFieldNumber = 1;
  const ::std::string& ios_develop_crt_name() const;
  void set_ios_develop_crt_name(const ::std::string& value);
  #if LANG_CXX11
  void set_ios_develop_crt_name(::std::string&& value);
  #endif
  void set_ios_develop_crt_name(const char* value);
  void set_ios_develop_crt_name(const char* value, size_t size);
  ::std::string* mutable_ios_develop_crt_name();
  ::std::string* release_ios_develop_crt_name();
  void set_allocated_ios_develop_crt_name(::std::string* ios_develop_crt_name);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // bytes ios_develop_crt = 3;
  void clear_ios_develop_crt();
  static const int kIosDevelopCrtFieldNumber = 3;
  const ::std::string& ios_develop_crt() const;
  void set_ios_develop_crt(const ::std::string& value);
  #if LANG_CXX11
  void set_ios_develop_crt(::std::string&& value);
  #endif
  void set_ios_develop_crt(const char* value);
  void set_ios_develop_crt(const void* value, size_t size);
  ::std::string* mutable_ios_develop_crt();
  ::std::string* release_ios_develop_crt();
  void set_allocated_ios_develop_crt(::std::string* ios_develop_crt);

  // string ios_develop_crt_pwd = 4;
  void clear_ios_develop_crt_pwd();
  static const int kIosDevelopCrtPwdFieldNumber = 4;
  const ::std::string& ios_develop_crt_pwd() const;
  void set_ios_develop_crt_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_ios_develop_crt_pwd(::std::string&& value);
  #endif
  void set_ios_develop_crt_pwd(const char* value);
  void set_ios_develop_crt_pwd(const char* value, size_t size);
  ::std::string* mutable_ios_develop_crt_pwd();
  ::std::string* release_ios_develop_crt_pwd();
  void set_allocated_ios_develop_crt_pwd(::std::string* ios_develop_crt_pwd);

  // string ios_product_crt_name = 5;
  void clear_ios_product_crt_name();
  static const int kIosProductCrtNameFieldNumber = 5;
  const ::std::string& ios_product_crt_name() const;
  void set_ios_product_crt_name(const ::std::string& value);
  #if LANG_CXX11
  void set_ios_product_crt_name(::std::string&& value);
  #endif
  void set_ios_product_crt_name(const char* value);
  void set_ios_product_crt_name(const char* value, size_t size);
  ::std::string* mutable_ios_product_crt_name();
  ::std::string* release_ios_product_crt_name();
  void set_allocated_ios_product_crt_name(::std::string* ios_product_crt_name);

  // bytes ios_product_crt = 6;
  void clear_ios_product_crt();
  static const int kIosProductCrtFieldNumber = 6;
  const ::std::string& ios_product_crt() const;
  void set_ios_product_crt(const ::std::string& value);
  #if LANG_CXX11
  void set_ios_product_crt(::std::string&& value);
  #endif
  void set_ios_product_crt(const char* value);
  void set_ios_product_crt(const void* value, size_t size);
  ::std::string* mutable_ios_product_crt();
  ::std::string* release_ios_product_crt();
  void set_allocated_ios_product_crt(::std::string* ios_product_crt);

  // string ios_product_crt_pwd = 7;
  void clear_ios_product_crt_pwd();
  static const int kIosProductCrtPwdFieldNumber = 7;
  const ::std::string& ios_product_crt_pwd() const;
  void set_ios_product_crt_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_ios_product_crt_pwd(::std::string&& value);
  #endif
  void set_ios_product_crt_pwd(const char* value);
  void set_ios_product_crt_pwd(const char* value, size_t size);
  ::std::string* mutable_ios_product_crt_pwd();
  ::std::string* release_ios_product_crt_pwd();
  void set_allocated_ios_product_crt_pwd(::std::string* ios_product_crt_pwd);

  // string certid = 8;
  void clear_certid();
  static const int kCertidFieldNumber = 8;
  const ::std::string& certid() const;
  void set_certid(const ::std::string& value);
  #if LANG_CXX11
  void set_certid(::std::string&& value);
  #endif
  void set_certid(const char* value);
  void set_certid(const char* value, size_t size);
  ::std::string* mutable_certid();
  ::std::string* release_certid();
  void set_allocated_certid(::std::string* certid);

  // string pro_bundle_id = 9;
  void clear_pro_bundle_id();
  static const int kProBundleIdFieldNumber = 9;
  const ::std::string& pro_bundle_id() const;
  void set_pro_bundle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_pro_bundle_id(::std::string&& value);
  #endif
  void set_pro_bundle_id(const char* value);
  void set_pro_bundle_id(const char* value, size_t size);
  ::std::string* mutable_pro_bundle_id();
  ::std::string* release_pro_bundle_id();
  void set_allocated_pro_bundle_id(::std::string* pro_bundle_id);

  // string dev_bundle_id = 10;
  void clear_dev_bundle_id();
  static const int kDevBundleIdFieldNumber = 10;
  const ::std::string& dev_bundle_id() const;
  void set_dev_bundle_id(const ::std::string& value);
  #if LANG_CXX11
  void set_dev_bundle_id(::std::string&& value);
  #endif
  void set_dev_bundle_id(const char* value);
  void set_dev_bundle_id(const char* value, size_t size);
  ::std::string* mutable_dev_bundle_id();
  ::std::string* release_dev_bundle_id();
  void set_allocated_dev_bundle_id(::std::string* dev_bundle_id);

  // uint64 created = 11;
  void clear_created();
  static const int kCreatedFieldNumber = 11;
  ::google::protobuf::uint64 created() const;
  void set_created(::google::protobuf::uint64 value);

  // uint64 modified = 12;
  void clear_modified();
  static const int kModifiedFieldNumber = 12;
  ::google::protobuf::uint64 modified() const;
  void set_modified(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.push.QueryCertResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ios_develop_crt_name_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr ios_develop_crt_;
  ::google::protobuf::internal::ArenaStringPtr ios_develop_crt_pwd_;
  ::google::protobuf::internal::ArenaStringPtr ios_product_crt_name_;
  ::google::protobuf::internal::ArenaStringPtr ios_product_crt_;
  ::google::protobuf::internal::ArenaStringPtr ios_product_crt_pwd_;
  ::google::protobuf::internal::ArenaStringPtr certid_;
  ::google::protobuf::internal::ArenaStringPtr pro_bundle_id_;
  ::google::protobuf::internal::ArenaStringPtr dev_bundle_id_;
  ::google::protobuf::uint64 created_;
  ::google::protobuf::uint64 modified_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fpush_2eproto::TableStruct;
  friend void ::protobuf_outer_2fpush_2eproto::InitDefaultsQueryCertResponseImpl();
};
// -------------------------------------------------------------------

class SetBadgeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.push.SetBadgeRequest) */ {
 public:
  SetBadgeRequest();
  virtual ~SetBadgeRequest();

  SetBadgeRequest(const SetBadgeRequest& from);

  inline SetBadgeRequest& operator=(const SetBadgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetBadgeRequest(SetBadgeRequest&& from) noexcept
    : SetBadgeRequest() {
    *this = ::std::move(from);
  }

  inline SetBadgeRequest& operator=(SetBadgeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetBadgeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetBadgeRequest* internal_default_instance() {
    return reinterpret_cast<const SetBadgeRequest*>(
               &_SetBadgeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SetBadgeRequest* other);
  friend void swap(SetBadgeRequest& a, SetBadgeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetBadgeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetBadgeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetBadgeRequest& from);
  void MergeFrom(const SetBadgeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetBadgeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // uint32 badge = 2;
  void clear_badge();
  static const int kBadgeFieldNumber = 2;
  ::google::protobuf::uint32 badge() const;
  void set_badge(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.push.SetBadgeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::uint32 badge_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fpush_2eproto::TableStruct;
  friend void ::protobuf_outer_2fpush_2eproto::InitDefaultsSetBadgeRequestImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonResponse

// .common.errcode.EErrorCode ret = 1;
inline void CommonResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode CommonResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.push.CommonResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void CommonResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.push.CommonResponse.ret)
}

// -------------------------------------------------------------------

// SetTokenRequest

// .outer.push.EPushType crt_type = 1;
inline void SetTokenRequest::clear_crt_type() {
  crt_type_ = 0;
}
inline ::outer::push::EPushType SetTokenRequest::crt_type() const {
  // @@protoc_insertion_point(field_get:outer.push.SetTokenRequest.crt_type)
  return static_cast< ::outer::push::EPushType >(crt_type_);
}
inline void SetTokenRequest::set_crt_type(::outer::push::EPushType value) {
  
  crt_type_ = value;
  // @@protoc_insertion_point(field_set:outer.push.SetTokenRequest.crt_type)
}

// string ios_token = 2;
inline void SetTokenRequest::clear_ios_token() {
  ios_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetTokenRequest::ios_token() const {
  // @@protoc_insertion_point(field_get:outer.push.SetTokenRequest.ios_token)
  return ios_token_.GetNoArena();
}
inline void SetTokenRequest::set_ios_token(const ::std::string& value) {
  
  ios_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.SetTokenRequest.ios_token)
}
#if LANG_CXX11
inline void SetTokenRequest::set_ios_token(::std::string&& value) {
  
  ios_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.SetTokenRequest.ios_token)
}
#endif
inline void SetTokenRequest::set_ios_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ios_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.SetTokenRequest.ios_token)
}
inline void SetTokenRequest::set_ios_token(const char* value, size_t size) {
  
  ios_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.SetTokenRequest.ios_token)
}
inline ::std::string* SetTokenRequest::mutable_ios_token() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.SetTokenRequest.ios_token)
  return ios_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetTokenRequest::release_ios_token() {
  // @@protoc_insertion_point(field_release:outer.push.SetTokenRequest.ios_token)
  
  return ios_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetTokenRequest::set_allocated_ios_token(::std::string* ios_token) {
  if (ios_token != NULL) {
    
  } else {
    
  }
  ios_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ios_token);
  // @@protoc_insertion_point(field_set_allocated:outer.push.SetTokenRequest.ios_token)
}

// string uid = 3;
inline void SetTokenRequest::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetTokenRequest::uid() const {
  // @@protoc_insertion_point(field_get:outer.push.SetTokenRequest.uid)
  return uid_.GetNoArena();
}
inline void SetTokenRequest::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.SetTokenRequest.uid)
}
#if LANG_CXX11
inline void SetTokenRequest::set_uid(::std::string&& value) {
  
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.SetTokenRequest.uid)
}
#endif
inline void SetTokenRequest::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.SetTokenRequest.uid)
}
inline void SetTokenRequest::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.SetTokenRequest.uid)
}
inline ::std::string* SetTokenRequest::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.SetTokenRequest.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetTokenRequest::release_uid() {
  // @@protoc_insertion_point(field_release:outer.push.SetTokenRequest.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetTokenRequest::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:outer.push.SetTokenRequest.uid)
}

// string android_token = 4;
inline void SetTokenRequest::clear_android_token() {
  android_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetTokenRequest::android_token() const {
  // @@protoc_insertion_point(field_get:outer.push.SetTokenRequest.android_token)
  return android_token_.GetNoArena();
}
inline void SetTokenRequest::set_android_token(const ::std::string& value) {
  
  android_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.SetTokenRequest.android_token)
}
#if LANG_CXX11
inline void SetTokenRequest::set_android_token(::std::string&& value) {
  
  android_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.SetTokenRequest.android_token)
}
#endif
inline void SetTokenRequest::set_android_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  android_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.SetTokenRequest.android_token)
}
inline void SetTokenRequest::set_android_token(const char* value, size_t size) {
  
  android_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.SetTokenRequest.android_token)
}
inline ::std::string* SetTokenRequest::mutable_android_token() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.SetTokenRequest.android_token)
  return android_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetTokenRequest::release_android_token() {
  // @@protoc_insertion_point(field_release:outer.push.SetTokenRequest.android_token)
  
  return android_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetTokenRequest::set_allocated_android_token(::std::string* android_token) {
  if (android_token != NULL) {
    
  } else {
    
  }
  android_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), android_token);
  // @@protoc_insertion_point(field_set_allocated:outer.push.SetTokenRequest.android_token)
}

// string android_appsecret = 5;
inline void SetTokenRequest::clear_android_appsecret() {
  android_appsecret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetTokenRequest::android_appsecret() const {
  // @@protoc_insertion_point(field_get:outer.push.SetTokenRequest.android_appsecret)
  return android_appsecret_.GetNoArena();
}
inline void SetTokenRequest::set_android_appsecret(const ::std::string& value) {
  
  android_appsecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.SetTokenRequest.android_appsecret)
}
#if LANG_CXX11
inline void SetTokenRequest::set_android_appsecret(::std::string&& value) {
  
  android_appsecret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.SetTokenRequest.android_appsecret)
}
#endif
inline void SetTokenRequest::set_android_appsecret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  android_appsecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.SetTokenRequest.android_appsecret)
}
inline void SetTokenRequest::set_android_appsecret(const char* value, size_t size) {
  
  android_appsecret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.SetTokenRequest.android_appsecret)
}
inline ::std::string* SetTokenRequest::mutable_android_appsecret() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.SetTokenRequest.android_appsecret)
  return android_appsecret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetTokenRequest::release_android_appsecret() {
  // @@protoc_insertion_point(field_release:outer.push.SetTokenRequest.android_appsecret)
  
  return android_appsecret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetTokenRequest::set_allocated_android_appsecret(::std::string* android_appsecret) {
  if (android_appsecret != NULL) {
    
  } else {
    
  }
  android_appsecret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), android_appsecret);
  // @@protoc_insertion_point(field_set_allocated:outer.push.SetTokenRequest.android_appsecret)
}

// string android_package_name = 6;
inline void SetTokenRequest::clear_android_package_name() {
  android_package_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetTokenRequest::android_package_name() const {
  // @@protoc_insertion_point(field_get:outer.push.SetTokenRequest.android_package_name)
  return android_package_name_.GetNoArena();
}
inline void SetTokenRequest::set_android_package_name(const ::std::string& value) {
  
  android_package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.SetTokenRequest.android_package_name)
}
#if LANG_CXX11
inline void SetTokenRequest::set_android_package_name(::std::string&& value) {
  
  android_package_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.SetTokenRequest.android_package_name)
}
#endif
inline void SetTokenRequest::set_android_package_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  android_package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.SetTokenRequest.android_package_name)
}
inline void SetTokenRequest::set_android_package_name(const char* value, size_t size) {
  
  android_package_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.SetTokenRequest.android_package_name)
}
inline ::std::string* SetTokenRequest::mutable_android_package_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.SetTokenRequest.android_package_name)
  return android_package_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetTokenRequest::release_android_package_name() {
  // @@protoc_insertion_point(field_release:outer.push.SetTokenRequest.android_package_name)
  
  return android_package_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetTokenRequest::set_allocated_android_package_name(::std::string* android_package_name) {
  if (android_package_name != NULL) {
    
  } else {
    
  }
  android_package_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), android_package_name);
  // @@protoc_insertion_point(field_set_allocated:outer.push.SetTokenRequest.android_package_name)
}

// .common.base.MobileBase base_info = 7;
inline bool SetTokenRequest::has_base_info() const {
  return this != internal_default_instance() && base_info_ != NULL;
}
inline const ::common::base::MobileBase& SetTokenRequest::base_info() const {
  const ::common::base::MobileBase* p = base_info_;
  // @@protoc_insertion_point(field_get:outer.push.SetTokenRequest.base_info)
  return p != NULL ? *p : *reinterpret_cast<const ::common::base::MobileBase*>(
      &::common::base::_MobileBase_default_instance_);
}
inline ::common::base::MobileBase* SetTokenRequest::release_base_info() {
  // @@protoc_insertion_point(field_release:outer.push.SetTokenRequest.base_info)
  
  ::common::base::MobileBase* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline ::common::base::MobileBase* SetTokenRequest::mutable_base_info() {
  
  if (base_info_ == NULL) {
    base_info_ = new ::common::base::MobileBase;
  }
  // @@protoc_insertion_point(field_mutable:outer.push.SetTokenRequest.base_info)
  return base_info_;
}
inline void SetTokenRequest::set_allocated_base_info(::common::base::MobileBase* base_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(base_info_);
  }
  if (base_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base_info, submessage_arena);
    }
    
  } else {
    
  }
  base_info_ = base_info;
  // @@protoc_insertion_point(field_set_allocated:outer.push.SetTokenRequest.base_info)
}

// -------------------------------------------------------------------

// ClearTokenRequest

// string uid = 1;
inline void ClearTokenRequest::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClearTokenRequest::uid() const {
  // @@protoc_insertion_point(field_get:outer.push.ClearTokenRequest.uid)
  return uid_.GetNoArena();
}
inline void ClearTokenRequest::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.ClearTokenRequest.uid)
}
#if LANG_CXX11
inline void ClearTokenRequest::set_uid(::std::string&& value) {
  
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.ClearTokenRequest.uid)
}
#endif
inline void ClearTokenRequest::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.ClearTokenRequest.uid)
}
inline void ClearTokenRequest::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.ClearTokenRequest.uid)
}
inline ::std::string* ClearTokenRequest::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.ClearTokenRequest.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClearTokenRequest::release_uid() {
  // @@protoc_insertion_point(field_release:outer.push.ClearTokenRequest.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClearTokenRequest::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:outer.push.ClearTokenRequest.uid)
}

// -------------------------------------------------------------------

// CreateCertRequest

// string ios_develop_crt_name = 1;
inline void CreateCertRequest::clear_ios_develop_crt_name() {
  ios_develop_crt_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateCertRequest::ios_develop_crt_name() const {
  // @@protoc_insertion_point(field_get:outer.push.CreateCertRequest.ios_develop_crt_name)
  return ios_develop_crt_name_.GetNoArena();
}
inline void CreateCertRequest::set_ios_develop_crt_name(const ::std::string& value) {
  
  ios_develop_crt_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.CreateCertRequest.ios_develop_crt_name)
}
#if LANG_CXX11
inline void CreateCertRequest::set_ios_develop_crt_name(::std::string&& value) {
  
  ios_develop_crt_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.CreateCertRequest.ios_develop_crt_name)
}
#endif
inline void CreateCertRequest::set_ios_develop_crt_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ios_develop_crt_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.CreateCertRequest.ios_develop_crt_name)
}
inline void CreateCertRequest::set_ios_develop_crt_name(const char* value, size_t size) {
  
  ios_develop_crt_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.CreateCertRequest.ios_develop_crt_name)
}
inline ::std::string* CreateCertRequest::mutable_ios_develop_crt_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.CreateCertRequest.ios_develop_crt_name)
  return ios_develop_crt_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateCertRequest::release_ios_develop_crt_name() {
  // @@protoc_insertion_point(field_release:outer.push.CreateCertRequest.ios_develop_crt_name)
  
  return ios_develop_crt_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCertRequest::set_allocated_ios_develop_crt_name(::std::string* ios_develop_crt_name) {
  if (ios_develop_crt_name != NULL) {
    
  } else {
    
  }
  ios_develop_crt_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ios_develop_crt_name);
  // @@protoc_insertion_point(field_set_allocated:outer.push.CreateCertRequest.ios_develop_crt_name)
}

// string appkey = 2;
inline void CreateCertRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateCertRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.push.CreateCertRequest.appkey)
  return appkey_.GetNoArena();
}
inline void CreateCertRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.CreateCertRequest.appkey)
}
#if LANG_CXX11
inline void CreateCertRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.CreateCertRequest.appkey)
}
#endif
inline void CreateCertRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.CreateCertRequest.appkey)
}
inline void CreateCertRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.CreateCertRequest.appkey)
}
inline ::std::string* CreateCertRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.CreateCertRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateCertRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.push.CreateCertRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCertRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.push.CreateCertRequest.appkey)
}

// bytes ios_develop_crt = 3;
inline void CreateCertRequest::clear_ios_develop_crt() {
  ios_develop_crt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateCertRequest::ios_develop_crt() const {
  // @@protoc_insertion_point(field_get:outer.push.CreateCertRequest.ios_develop_crt)
  return ios_develop_crt_.GetNoArena();
}
inline void CreateCertRequest::set_ios_develop_crt(const ::std::string& value) {
  
  ios_develop_crt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.CreateCertRequest.ios_develop_crt)
}
#if LANG_CXX11
inline void CreateCertRequest::set_ios_develop_crt(::std::string&& value) {
  
  ios_develop_crt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.CreateCertRequest.ios_develop_crt)
}
#endif
inline void CreateCertRequest::set_ios_develop_crt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ios_develop_crt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.CreateCertRequest.ios_develop_crt)
}
inline void CreateCertRequest::set_ios_develop_crt(const void* value, size_t size) {
  
  ios_develop_crt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.CreateCertRequest.ios_develop_crt)
}
inline ::std::string* CreateCertRequest::mutable_ios_develop_crt() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.CreateCertRequest.ios_develop_crt)
  return ios_develop_crt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateCertRequest::release_ios_develop_crt() {
  // @@protoc_insertion_point(field_release:outer.push.CreateCertRequest.ios_develop_crt)
  
  return ios_develop_crt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCertRequest::set_allocated_ios_develop_crt(::std::string* ios_develop_crt) {
  if (ios_develop_crt != NULL) {
    
  } else {
    
  }
  ios_develop_crt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ios_develop_crt);
  // @@protoc_insertion_point(field_set_allocated:outer.push.CreateCertRequest.ios_develop_crt)
}

// string ios_develop_crt_pwd = 4;
inline void CreateCertRequest::clear_ios_develop_crt_pwd() {
  ios_develop_crt_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateCertRequest::ios_develop_crt_pwd() const {
  // @@protoc_insertion_point(field_get:outer.push.CreateCertRequest.ios_develop_crt_pwd)
  return ios_develop_crt_pwd_.GetNoArena();
}
inline void CreateCertRequest::set_ios_develop_crt_pwd(const ::std::string& value) {
  
  ios_develop_crt_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.CreateCertRequest.ios_develop_crt_pwd)
}
#if LANG_CXX11
inline void CreateCertRequest::set_ios_develop_crt_pwd(::std::string&& value) {
  
  ios_develop_crt_pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.CreateCertRequest.ios_develop_crt_pwd)
}
#endif
inline void CreateCertRequest::set_ios_develop_crt_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ios_develop_crt_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.CreateCertRequest.ios_develop_crt_pwd)
}
inline void CreateCertRequest::set_ios_develop_crt_pwd(const char* value, size_t size) {
  
  ios_develop_crt_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.CreateCertRequest.ios_develop_crt_pwd)
}
inline ::std::string* CreateCertRequest::mutable_ios_develop_crt_pwd() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.CreateCertRequest.ios_develop_crt_pwd)
  return ios_develop_crt_pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateCertRequest::release_ios_develop_crt_pwd() {
  // @@protoc_insertion_point(field_release:outer.push.CreateCertRequest.ios_develop_crt_pwd)
  
  return ios_develop_crt_pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCertRequest::set_allocated_ios_develop_crt_pwd(::std::string* ios_develop_crt_pwd) {
  if (ios_develop_crt_pwd != NULL) {
    
  } else {
    
  }
  ios_develop_crt_pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ios_develop_crt_pwd);
  // @@protoc_insertion_point(field_set_allocated:outer.push.CreateCertRequest.ios_develop_crt_pwd)
}

// string ios_product_crt_name = 5;
inline void CreateCertRequest::clear_ios_product_crt_name() {
  ios_product_crt_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateCertRequest::ios_product_crt_name() const {
  // @@protoc_insertion_point(field_get:outer.push.CreateCertRequest.ios_product_crt_name)
  return ios_product_crt_name_.GetNoArena();
}
inline void CreateCertRequest::set_ios_product_crt_name(const ::std::string& value) {
  
  ios_product_crt_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.CreateCertRequest.ios_product_crt_name)
}
#if LANG_CXX11
inline void CreateCertRequest::set_ios_product_crt_name(::std::string&& value) {
  
  ios_product_crt_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.CreateCertRequest.ios_product_crt_name)
}
#endif
inline void CreateCertRequest::set_ios_product_crt_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ios_product_crt_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.CreateCertRequest.ios_product_crt_name)
}
inline void CreateCertRequest::set_ios_product_crt_name(const char* value, size_t size) {
  
  ios_product_crt_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.CreateCertRequest.ios_product_crt_name)
}
inline ::std::string* CreateCertRequest::mutable_ios_product_crt_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.CreateCertRequest.ios_product_crt_name)
  return ios_product_crt_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateCertRequest::release_ios_product_crt_name() {
  // @@protoc_insertion_point(field_release:outer.push.CreateCertRequest.ios_product_crt_name)
  
  return ios_product_crt_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCertRequest::set_allocated_ios_product_crt_name(::std::string* ios_product_crt_name) {
  if (ios_product_crt_name != NULL) {
    
  } else {
    
  }
  ios_product_crt_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ios_product_crt_name);
  // @@protoc_insertion_point(field_set_allocated:outer.push.CreateCertRequest.ios_product_crt_name)
}

// bytes ios_product_crt = 6;
inline void CreateCertRequest::clear_ios_product_crt() {
  ios_product_crt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateCertRequest::ios_product_crt() const {
  // @@protoc_insertion_point(field_get:outer.push.CreateCertRequest.ios_product_crt)
  return ios_product_crt_.GetNoArena();
}
inline void CreateCertRequest::set_ios_product_crt(const ::std::string& value) {
  
  ios_product_crt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.CreateCertRequest.ios_product_crt)
}
#if LANG_CXX11
inline void CreateCertRequest::set_ios_product_crt(::std::string&& value) {
  
  ios_product_crt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.CreateCertRequest.ios_product_crt)
}
#endif
inline void CreateCertRequest::set_ios_product_crt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ios_product_crt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.CreateCertRequest.ios_product_crt)
}
inline void CreateCertRequest::set_ios_product_crt(const void* value, size_t size) {
  
  ios_product_crt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.CreateCertRequest.ios_product_crt)
}
inline ::std::string* CreateCertRequest::mutable_ios_product_crt() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.CreateCertRequest.ios_product_crt)
  return ios_product_crt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateCertRequest::release_ios_product_crt() {
  // @@protoc_insertion_point(field_release:outer.push.CreateCertRequest.ios_product_crt)
  
  return ios_product_crt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCertRequest::set_allocated_ios_product_crt(::std::string* ios_product_crt) {
  if (ios_product_crt != NULL) {
    
  } else {
    
  }
  ios_product_crt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ios_product_crt);
  // @@protoc_insertion_point(field_set_allocated:outer.push.CreateCertRequest.ios_product_crt)
}

// string ios_product_crt_pwd = 7;
inline void CreateCertRequest::clear_ios_product_crt_pwd() {
  ios_product_crt_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateCertRequest::ios_product_crt_pwd() const {
  // @@protoc_insertion_point(field_get:outer.push.CreateCertRequest.ios_product_crt_pwd)
  return ios_product_crt_pwd_.GetNoArena();
}
inline void CreateCertRequest::set_ios_product_crt_pwd(const ::std::string& value) {
  
  ios_product_crt_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.CreateCertRequest.ios_product_crt_pwd)
}
#if LANG_CXX11
inline void CreateCertRequest::set_ios_product_crt_pwd(::std::string&& value) {
  
  ios_product_crt_pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.CreateCertRequest.ios_product_crt_pwd)
}
#endif
inline void CreateCertRequest::set_ios_product_crt_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ios_product_crt_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.CreateCertRequest.ios_product_crt_pwd)
}
inline void CreateCertRequest::set_ios_product_crt_pwd(const char* value, size_t size) {
  
  ios_product_crt_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.CreateCertRequest.ios_product_crt_pwd)
}
inline ::std::string* CreateCertRequest::mutable_ios_product_crt_pwd() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.CreateCertRequest.ios_product_crt_pwd)
  return ios_product_crt_pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateCertRequest::release_ios_product_crt_pwd() {
  // @@protoc_insertion_point(field_release:outer.push.CreateCertRequest.ios_product_crt_pwd)
  
  return ios_product_crt_pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateCertRequest::set_allocated_ios_product_crt_pwd(::std::string* ios_product_crt_pwd) {
  if (ios_product_crt_pwd != NULL) {
    
  } else {
    
  }
  ios_product_crt_pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ios_product_crt_pwd);
  // @@protoc_insertion_point(field_set_allocated:outer.push.CreateCertRequest.ios_product_crt_pwd)
}

// -------------------------------------------------------------------

// OperateCertRequest

// string appkey = 1;
inline void OperateCertRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperateCertRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.push.OperateCertRequest.appkey)
  return appkey_.GetNoArena();
}
inline void OperateCertRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.OperateCertRequest.appkey)
}
#if LANG_CXX11
inline void OperateCertRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.OperateCertRequest.appkey)
}
#endif
inline void OperateCertRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.OperateCertRequest.appkey)
}
inline void OperateCertRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.OperateCertRequest.appkey)
}
inline ::std::string* OperateCertRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.OperateCertRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperateCertRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.push.OperateCertRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperateCertRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.push.OperateCertRequest.appkey)
}

// -------------------------------------------------------------------

// QueryCertResponse

// string ios_develop_crt_name = 1;
inline void QueryCertResponse::clear_ios_develop_crt_name() {
  ios_develop_crt_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryCertResponse::ios_develop_crt_name() const {
  // @@protoc_insertion_point(field_get:outer.push.QueryCertResponse.ios_develop_crt_name)
  return ios_develop_crt_name_.GetNoArena();
}
inline void QueryCertResponse::set_ios_develop_crt_name(const ::std::string& value) {
  
  ios_develop_crt_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.QueryCertResponse.ios_develop_crt_name)
}
#if LANG_CXX11
inline void QueryCertResponse::set_ios_develop_crt_name(::std::string&& value) {
  
  ios_develop_crt_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.QueryCertResponse.ios_develop_crt_name)
}
#endif
inline void QueryCertResponse::set_ios_develop_crt_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ios_develop_crt_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.QueryCertResponse.ios_develop_crt_name)
}
inline void QueryCertResponse::set_ios_develop_crt_name(const char* value, size_t size) {
  
  ios_develop_crt_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.QueryCertResponse.ios_develop_crt_name)
}
inline ::std::string* QueryCertResponse::mutable_ios_develop_crt_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.QueryCertResponse.ios_develop_crt_name)
  return ios_develop_crt_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryCertResponse::release_ios_develop_crt_name() {
  // @@protoc_insertion_point(field_release:outer.push.QueryCertResponse.ios_develop_crt_name)
  
  return ios_develop_crt_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryCertResponse::set_allocated_ios_develop_crt_name(::std::string* ios_develop_crt_name) {
  if (ios_develop_crt_name != NULL) {
    
  } else {
    
  }
  ios_develop_crt_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ios_develop_crt_name);
  // @@protoc_insertion_point(field_set_allocated:outer.push.QueryCertResponse.ios_develop_crt_name)
}

// string appkey = 2;
inline void QueryCertResponse::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryCertResponse::appkey() const {
  // @@protoc_insertion_point(field_get:outer.push.QueryCertResponse.appkey)
  return appkey_.GetNoArena();
}
inline void QueryCertResponse::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.QueryCertResponse.appkey)
}
#if LANG_CXX11
inline void QueryCertResponse::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.QueryCertResponse.appkey)
}
#endif
inline void QueryCertResponse::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.QueryCertResponse.appkey)
}
inline void QueryCertResponse::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.QueryCertResponse.appkey)
}
inline ::std::string* QueryCertResponse::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.QueryCertResponse.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryCertResponse::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.push.QueryCertResponse.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryCertResponse::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.push.QueryCertResponse.appkey)
}

// bytes ios_develop_crt = 3;
inline void QueryCertResponse::clear_ios_develop_crt() {
  ios_develop_crt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryCertResponse::ios_develop_crt() const {
  // @@protoc_insertion_point(field_get:outer.push.QueryCertResponse.ios_develop_crt)
  return ios_develop_crt_.GetNoArena();
}
inline void QueryCertResponse::set_ios_develop_crt(const ::std::string& value) {
  
  ios_develop_crt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.QueryCertResponse.ios_develop_crt)
}
#if LANG_CXX11
inline void QueryCertResponse::set_ios_develop_crt(::std::string&& value) {
  
  ios_develop_crt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.QueryCertResponse.ios_develop_crt)
}
#endif
inline void QueryCertResponse::set_ios_develop_crt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ios_develop_crt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.QueryCertResponse.ios_develop_crt)
}
inline void QueryCertResponse::set_ios_develop_crt(const void* value, size_t size) {
  
  ios_develop_crt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.QueryCertResponse.ios_develop_crt)
}
inline ::std::string* QueryCertResponse::mutable_ios_develop_crt() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.QueryCertResponse.ios_develop_crt)
  return ios_develop_crt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryCertResponse::release_ios_develop_crt() {
  // @@protoc_insertion_point(field_release:outer.push.QueryCertResponse.ios_develop_crt)
  
  return ios_develop_crt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryCertResponse::set_allocated_ios_develop_crt(::std::string* ios_develop_crt) {
  if (ios_develop_crt != NULL) {
    
  } else {
    
  }
  ios_develop_crt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ios_develop_crt);
  // @@protoc_insertion_point(field_set_allocated:outer.push.QueryCertResponse.ios_develop_crt)
}

// string ios_develop_crt_pwd = 4;
inline void QueryCertResponse::clear_ios_develop_crt_pwd() {
  ios_develop_crt_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryCertResponse::ios_develop_crt_pwd() const {
  // @@protoc_insertion_point(field_get:outer.push.QueryCertResponse.ios_develop_crt_pwd)
  return ios_develop_crt_pwd_.GetNoArena();
}
inline void QueryCertResponse::set_ios_develop_crt_pwd(const ::std::string& value) {
  
  ios_develop_crt_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.QueryCertResponse.ios_develop_crt_pwd)
}
#if LANG_CXX11
inline void QueryCertResponse::set_ios_develop_crt_pwd(::std::string&& value) {
  
  ios_develop_crt_pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.QueryCertResponse.ios_develop_crt_pwd)
}
#endif
inline void QueryCertResponse::set_ios_develop_crt_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ios_develop_crt_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.QueryCertResponse.ios_develop_crt_pwd)
}
inline void QueryCertResponse::set_ios_develop_crt_pwd(const char* value, size_t size) {
  
  ios_develop_crt_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.QueryCertResponse.ios_develop_crt_pwd)
}
inline ::std::string* QueryCertResponse::mutable_ios_develop_crt_pwd() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.QueryCertResponse.ios_develop_crt_pwd)
  return ios_develop_crt_pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryCertResponse::release_ios_develop_crt_pwd() {
  // @@protoc_insertion_point(field_release:outer.push.QueryCertResponse.ios_develop_crt_pwd)
  
  return ios_develop_crt_pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryCertResponse::set_allocated_ios_develop_crt_pwd(::std::string* ios_develop_crt_pwd) {
  if (ios_develop_crt_pwd != NULL) {
    
  } else {
    
  }
  ios_develop_crt_pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ios_develop_crt_pwd);
  // @@protoc_insertion_point(field_set_allocated:outer.push.QueryCertResponse.ios_develop_crt_pwd)
}

// string ios_product_crt_name = 5;
inline void QueryCertResponse::clear_ios_product_crt_name() {
  ios_product_crt_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryCertResponse::ios_product_crt_name() const {
  // @@protoc_insertion_point(field_get:outer.push.QueryCertResponse.ios_product_crt_name)
  return ios_product_crt_name_.GetNoArena();
}
inline void QueryCertResponse::set_ios_product_crt_name(const ::std::string& value) {
  
  ios_product_crt_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.QueryCertResponse.ios_product_crt_name)
}
#if LANG_CXX11
inline void QueryCertResponse::set_ios_product_crt_name(::std::string&& value) {
  
  ios_product_crt_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.QueryCertResponse.ios_product_crt_name)
}
#endif
inline void QueryCertResponse::set_ios_product_crt_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ios_product_crt_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.QueryCertResponse.ios_product_crt_name)
}
inline void QueryCertResponse::set_ios_product_crt_name(const char* value, size_t size) {
  
  ios_product_crt_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.QueryCertResponse.ios_product_crt_name)
}
inline ::std::string* QueryCertResponse::mutable_ios_product_crt_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.QueryCertResponse.ios_product_crt_name)
  return ios_product_crt_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryCertResponse::release_ios_product_crt_name() {
  // @@protoc_insertion_point(field_release:outer.push.QueryCertResponse.ios_product_crt_name)
  
  return ios_product_crt_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryCertResponse::set_allocated_ios_product_crt_name(::std::string* ios_product_crt_name) {
  if (ios_product_crt_name != NULL) {
    
  } else {
    
  }
  ios_product_crt_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ios_product_crt_name);
  // @@protoc_insertion_point(field_set_allocated:outer.push.QueryCertResponse.ios_product_crt_name)
}

// bytes ios_product_crt = 6;
inline void QueryCertResponse::clear_ios_product_crt() {
  ios_product_crt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryCertResponse::ios_product_crt() const {
  // @@protoc_insertion_point(field_get:outer.push.QueryCertResponse.ios_product_crt)
  return ios_product_crt_.GetNoArena();
}
inline void QueryCertResponse::set_ios_product_crt(const ::std::string& value) {
  
  ios_product_crt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.QueryCertResponse.ios_product_crt)
}
#if LANG_CXX11
inline void QueryCertResponse::set_ios_product_crt(::std::string&& value) {
  
  ios_product_crt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.QueryCertResponse.ios_product_crt)
}
#endif
inline void QueryCertResponse::set_ios_product_crt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ios_product_crt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.QueryCertResponse.ios_product_crt)
}
inline void QueryCertResponse::set_ios_product_crt(const void* value, size_t size) {
  
  ios_product_crt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.QueryCertResponse.ios_product_crt)
}
inline ::std::string* QueryCertResponse::mutable_ios_product_crt() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.QueryCertResponse.ios_product_crt)
  return ios_product_crt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryCertResponse::release_ios_product_crt() {
  // @@protoc_insertion_point(field_release:outer.push.QueryCertResponse.ios_product_crt)
  
  return ios_product_crt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryCertResponse::set_allocated_ios_product_crt(::std::string* ios_product_crt) {
  if (ios_product_crt != NULL) {
    
  } else {
    
  }
  ios_product_crt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ios_product_crt);
  // @@protoc_insertion_point(field_set_allocated:outer.push.QueryCertResponse.ios_product_crt)
}

// string ios_product_crt_pwd = 7;
inline void QueryCertResponse::clear_ios_product_crt_pwd() {
  ios_product_crt_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryCertResponse::ios_product_crt_pwd() const {
  // @@protoc_insertion_point(field_get:outer.push.QueryCertResponse.ios_product_crt_pwd)
  return ios_product_crt_pwd_.GetNoArena();
}
inline void QueryCertResponse::set_ios_product_crt_pwd(const ::std::string& value) {
  
  ios_product_crt_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.QueryCertResponse.ios_product_crt_pwd)
}
#if LANG_CXX11
inline void QueryCertResponse::set_ios_product_crt_pwd(::std::string&& value) {
  
  ios_product_crt_pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.QueryCertResponse.ios_product_crt_pwd)
}
#endif
inline void QueryCertResponse::set_ios_product_crt_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ios_product_crt_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.QueryCertResponse.ios_product_crt_pwd)
}
inline void QueryCertResponse::set_ios_product_crt_pwd(const char* value, size_t size) {
  
  ios_product_crt_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.QueryCertResponse.ios_product_crt_pwd)
}
inline ::std::string* QueryCertResponse::mutable_ios_product_crt_pwd() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.QueryCertResponse.ios_product_crt_pwd)
  return ios_product_crt_pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryCertResponse::release_ios_product_crt_pwd() {
  // @@protoc_insertion_point(field_release:outer.push.QueryCertResponse.ios_product_crt_pwd)
  
  return ios_product_crt_pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryCertResponse::set_allocated_ios_product_crt_pwd(::std::string* ios_product_crt_pwd) {
  if (ios_product_crt_pwd != NULL) {
    
  } else {
    
  }
  ios_product_crt_pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ios_product_crt_pwd);
  // @@protoc_insertion_point(field_set_allocated:outer.push.QueryCertResponse.ios_product_crt_pwd)
}

// string certid = 8;
inline void QueryCertResponse::clear_certid() {
  certid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryCertResponse::certid() const {
  // @@protoc_insertion_point(field_get:outer.push.QueryCertResponse.certid)
  return certid_.GetNoArena();
}
inline void QueryCertResponse::set_certid(const ::std::string& value) {
  
  certid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.QueryCertResponse.certid)
}
#if LANG_CXX11
inline void QueryCertResponse::set_certid(::std::string&& value) {
  
  certid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.QueryCertResponse.certid)
}
#endif
inline void QueryCertResponse::set_certid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  certid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.QueryCertResponse.certid)
}
inline void QueryCertResponse::set_certid(const char* value, size_t size) {
  
  certid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.QueryCertResponse.certid)
}
inline ::std::string* QueryCertResponse::mutable_certid() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.QueryCertResponse.certid)
  return certid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryCertResponse::release_certid() {
  // @@protoc_insertion_point(field_release:outer.push.QueryCertResponse.certid)
  
  return certid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryCertResponse::set_allocated_certid(::std::string* certid) {
  if (certid != NULL) {
    
  } else {
    
  }
  certid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certid);
  // @@protoc_insertion_point(field_set_allocated:outer.push.QueryCertResponse.certid)
}

// string pro_bundle_id = 9;
inline void QueryCertResponse::clear_pro_bundle_id() {
  pro_bundle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryCertResponse::pro_bundle_id() const {
  // @@protoc_insertion_point(field_get:outer.push.QueryCertResponse.pro_bundle_id)
  return pro_bundle_id_.GetNoArena();
}
inline void QueryCertResponse::set_pro_bundle_id(const ::std::string& value) {
  
  pro_bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.QueryCertResponse.pro_bundle_id)
}
#if LANG_CXX11
inline void QueryCertResponse::set_pro_bundle_id(::std::string&& value) {
  
  pro_bundle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.QueryCertResponse.pro_bundle_id)
}
#endif
inline void QueryCertResponse::set_pro_bundle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pro_bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.QueryCertResponse.pro_bundle_id)
}
inline void QueryCertResponse::set_pro_bundle_id(const char* value, size_t size) {
  
  pro_bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.QueryCertResponse.pro_bundle_id)
}
inline ::std::string* QueryCertResponse::mutable_pro_bundle_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.QueryCertResponse.pro_bundle_id)
  return pro_bundle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryCertResponse::release_pro_bundle_id() {
  // @@protoc_insertion_point(field_release:outer.push.QueryCertResponse.pro_bundle_id)
  
  return pro_bundle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryCertResponse::set_allocated_pro_bundle_id(::std::string* pro_bundle_id) {
  if (pro_bundle_id != NULL) {
    
  } else {
    
  }
  pro_bundle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pro_bundle_id);
  // @@protoc_insertion_point(field_set_allocated:outer.push.QueryCertResponse.pro_bundle_id)
}

// string dev_bundle_id = 10;
inline void QueryCertResponse::clear_dev_bundle_id() {
  dev_bundle_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryCertResponse::dev_bundle_id() const {
  // @@protoc_insertion_point(field_get:outer.push.QueryCertResponse.dev_bundle_id)
  return dev_bundle_id_.GetNoArena();
}
inline void QueryCertResponse::set_dev_bundle_id(const ::std::string& value) {
  
  dev_bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.QueryCertResponse.dev_bundle_id)
}
#if LANG_CXX11
inline void QueryCertResponse::set_dev_bundle_id(::std::string&& value) {
  
  dev_bundle_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.QueryCertResponse.dev_bundle_id)
}
#endif
inline void QueryCertResponse::set_dev_bundle_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dev_bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.QueryCertResponse.dev_bundle_id)
}
inline void QueryCertResponse::set_dev_bundle_id(const char* value, size_t size) {
  
  dev_bundle_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.QueryCertResponse.dev_bundle_id)
}
inline ::std::string* QueryCertResponse::mutable_dev_bundle_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.QueryCertResponse.dev_bundle_id)
  return dev_bundle_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryCertResponse::release_dev_bundle_id() {
  // @@protoc_insertion_point(field_release:outer.push.QueryCertResponse.dev_bundle_id)
  
  return dev_bundle_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryCertResponse::set_allocated_dev_bundle_id(::std::string* dev_bundle_id) {
  if (dev_bundle_id != NULL) {
    
  } else {
    
  }
  dev_bundle_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev_bundle_id);
  // @@protoc_insertion_point(field_set_allocated:outer.push.QueryCertResponse.dev_bundle_id)
}

// uint64 created = 11;
inline void QueryCertResponse::clear_created() {
  created_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QueryCertResponse::created() const {
  // @@protoc_insertion_point(field_get:outer.push.QueryCertResponse.created)
  return created_;
}
inline void QueryCertResponse::set_created(::google::protobuf::uint64 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:outer.push.QueryCertResponse.created)
}

// uint64 modified = 12;
inline void QueryCertResponse::clear_modified() {
  modified_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 QueryCertResponse::modified() const {
  // @@protoc_insertion_point(field_get:outer.push.QueryCertResponse.modified)
  return modified_;
}
inline void QueryCertResponse::set_modified(::google::protobuf::uint64 value) {
  
  modified_ = value;
  // @@protoc_insertion_point(field_set:outer.push.QueryCertResponse.modified)
}

// -------------------------------------------------------------------

// SetBadgeRequest

// string uid = 1;
inline void SetBadgeRequest::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetBadgeRequest::uid() const {
  // @@protoc_insertion_point(field_get:outer.push.SetBadgeRequest.uid)
  return uid_.GetNoArena();
}
inline void SetBadgeRequest::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.push.SetBadgeRequest.uid)
}
#if LANG_CXX11
inline void SetBadgeRequest::set_uid(::std::string&& value) {
  
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.push.SetBadgeRequest.uid)
}
#endif
inline void SetBadgeRequest::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.push.SetBadgeRequest.uid)
}
inline void SetBadgeRequest::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.push.SetBadgeRequest.uid)
}
inline ::std::string* SetBadgeRequest::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:outer.push.SetBadgeRequest.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetBadgeRequest::release_uid() {
  // @@protoc_insertion_point(field_release:outer.push.SetBadgeRequest.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetBadgeRequest::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:outer.push.SetBadgeRequest.uid)
}

// uint32 badge = 2;
inline void SetBadgeRequest::clear_badge() {
  badge_ = 0u;
}
inline ::google::protobuf::uint32 SetBadgeRequest::badge() const {
  // @@protoc_insertion_point(field_get:outer.push.SetBadgeRequest.badge)
  return badge_;
}
inline void SetBadgeRequest::set_badge(::google::protobuf::uint32 value) {
  
  badge_ = value;
  // @@protoc_insertion_point(field_set:outer.push.SetBadgeRequest.badge)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace push
}  // namespace outer

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::outer::push::EPushType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::outer::push::EPushType>() {
  return ::outer::push::EPushType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_outer_2fpush_2eproto__INCLUDED
