// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: outer/friends.proto

#ifndef PROTOBUF_outer_2ffriends_2eproto__INCLUDED
#define PROTOBUF_outer_2ffriends_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/errcode.pb.h"
#include "common/enumeration.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_outer_2ffriends_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[32];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFriendInfoImpl();
void InitDefaultsFriendInfo();
void InitDefaultsFriendRequestImpl();
void InitDefaultsFriendRequest();
void InitDefaultsFriendSignalImpl();
void InitDefaultsFriendSignal();
void InitDefaultsApplyFriendRequestImpl();
void InitDefaultsApplyFriendRequest();
void InitDefaultsApplyFriendResponseImpl();
void InitDefaultsApplyFriendResponse();
void InitDefaultsAgreeFriendRequestImpl();
void InitDefaultsAgreeFriendRequest();
void InitDefaultsAgreeFriendResponseImpl();
void InitDefaultsAgreeFriendResponse();
void InitDefaultsRefuseFriendRequestImpl();
void InitDefaultsRefuseFriendRequest();
void InitDefaultsRefuseFriendResponseImpl();
void InitDefaultsRefuseFriendResponse();
void InitDefaultsRemoveFriendRequestImpl();
void InitDefaultsRemoveFriendRequest();
void InitDefaultsRemoveFriendResponseImpl();
void InitDefaultsRemoveFriendResponse();
void InitDefaultsSyncFriendRequestImpl();
void InitDefaultsSyncFriendRequest();
void InitDefaultsSyncFriendResponseImpl();
void InitDefaultsSyncFriendResponse();
void InitDefaultsUpdateFriendInfoRequestImpl();
void InitDefaultsUpdateFriendInfoRequest();
void InitDefaultsUpdateFriendInfoResponseImpl();
void InitDefaultsUpdateFriendInfoResponse();
void InitDefaultsUpdateSilentRequestImpl();
void InitDefaultsUpdateSilentRequest();
void InitDefaultsUpdateSilentResponeImpl();
void InitDefaultsUpdateSilentRespone();
void InitDefaultsGetFriendListRequestImpl();
void InitDefaultsGetFriendListRequest();
void InitDefaultsGetFriendListResponseImpl();
void InitDefaultsGetFriendListResponse();
void InitDefaultsHasReadFriendRequestImpl();
void InitDefaultsHasReadFriendRequest();
void InitDefaultsHasReadFriendResponseImpl();
void InitDefaultsHasReadFriendResponse();
void InitDefaultsHasIgnoreFriendRequestImpl();
void InitDefaultsHasIgnoreFriendRequest();
void InitDefaultsHasIgnoreFriendResponseImpl();
void InitDefaultsHasIgnoreFriendResponse();
void InitDefaultsBatchApplyFriendRequestImpl();
void InitDefaultsBatchApplyFriendRequest();
void InitDefaultsBatchApplyFriendResponse_ResultEntry_DoNotUseImpl();
void InitDefaultsBatchApplyFriendResponse_ResultEntry_DoNotUse();
void InitDefaultsBatchApplyFriendResponseImpl();
void InitDefaultsBatchApplyFriendResponse();
void InitDefaultsBatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUseImpl();
void InitDefaultsBatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUse();
void InitDefaultsBatchApplyFriendByFromUsersRequestImpl();
void InitDefaultsBatchApplyFriendByFromUsersRequest();
void InitDefaultsBatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUseImpl();
void InitDefaultsBatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUse();
void InitDefaultsBatchApplyFriendByFromUsersResponseImpl();
void InitDefaultsBatchApplyFriendByFromUsersResponse();
void InitDefaultsGetFriendDisplayRequestImpl();
void InitDefaultsGetFriendDisplayRequest();
void InitDefaultsGetFriendDisplayResponseImpl();
void InitDefaultsGetFriendDisplayResponse();
inline void InitDefaults() {
  InitDefaultsFriendInfo();
  InitDefaultsFriendRequest();
  InitDefaultsFriendSignal();
  InitDefaultsApplyFriendRequest();
  InitDefaultsApplyFriendResponse();
  InitDefaultsAgreeFriendRequest();
  InitDefaultsAgreeFriendResponse();
  InitDefaultsRefuseFriendRequest();
  InitDefaultsRefuseFriendResponse();
  InitDefaultsRemoveFriendRequest();
  InitDefaultsRemoveFriendResponse();
  InitDefaultsSyncFriendRequest();
  InitDefaultsSyncFriendResponse();
  InitDefaultsUpdateFriendInfoRequest();
  InitDefaultsUpdateFriendInfoResponse();
  InitDefaultsUpdateSilentRequest();
  InitDefaultsUpdateSilentRespone();
  InitDefaultsGetFriendListRequest();
  InitDefaultsGetFriendListResponse();
  InitDefaultsHasReadFriendRequest();
  InitDefaultsHasReadFriendResponse();
  InitDefaultsHasIgnoreFriendRequest();
  InitDefaultsHasIgnoreFriendResponse();
  InitDefaultsBatchApplyFriendRequest();
  InitDefaultsBatchApplyFriendResponse_ResultEntry_DoNotUse();
  InitDefaultsBatchApplyFriendResponse();
  InitDefaultsBatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUse();
  InitDefaultsBatchApplyFriendByFromUsersRequest();
  InitDefaultsBatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUse();
  InitDefaultsBatchApplyFriendByFromUsersResponse();
  InitDefaultsGetFriendDisplayRequest();
  InitDefaultsGetFriendDisplayResponse();
}
}  // namespace protobuf_outer_2ffriends_2eproto
namespace outer {
namespace friends {
class AgreeFriendRequest;
class AgreeFriendRequestDefaultTypeInternal;
extern AgreeFriendRequestDefaultTypeInternal _AgreeFriendRequest_default_instance_;
class AgreeFriendResponse;
class AgreeFriendResponseDefaultTypeInternal;
extern AgreeFriendResponseDefaultTypeInternal _AgreeFriendResponse_default_instance_;
class ApplyFriendRequest;
class ApplyFriendRequestDefaultTypeInternal;
extern ApplyFriendRequestDefaultTypeInternal _ApplyFriendRequest_default_instance_;
class ApplyFriendResponse;
class ApplyFriendResponseDefaultTypeInternal;
extern ApplyFriendResponseDefaultTypeInternal _ApplyFriendResponse_default_instance_;
class BatchApplyFriendByFromUsersRequest;
class BatchApplyFriendByFromUsersRequestDefaultTypeInternal;
extern BatchApplyFriendByFromUsersRequestDefaultTypeInternal _BatchApplyFriendByFromUsersRequest_default_instance_;
class BatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUse;
class BatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUseDefaultTypeInternal;
extern BatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUseDefaultTypeInternal _BatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUse_default_instance_;
class BatchApplyFriendByFromUsersResponse;
class BatchApplyFriendByFromUsersResponseDefaultTypeInternal;
extern BatchApplyFriendByFromUsersResponseDefaultTypeInternal _BatchApplyFriendByFromUsersResponse_default_instance_;
class BatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUse;
class BatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUseDefaultTypeInternal;
extern BatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUseDefaultTypeInternal _BatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUse_default_instance_;
class BatchApplyFriendRequest;
class BatchApplyFriendRequestDefaultTypeInternal;
extern BatchApplyFriendRequestDefaultTypeInternal _BatchApplyFriendRequest_default_instance_;
class BatchApplyFriendResponse;
class BatchApplyFriendResponseDefaultTypeInternal;
extern BatchApplyFriendResponseDefaultTypeInternal _BatchApplyFriendResponse_default_instance_;
class BatchApplyFriendResponse_ResultEntry_DoNotUse;
class BatchApplyFriendResponse_ResultEntry_DoNotUseDefaultTypeInternal;
extern BatchApplyFriendResponse_ResultEntry_DoNotUseDefaultTypeInternal _BatchApplyFriendResponse_ResultEntry_DoNotUse_default_instance_;
class FriendInfo;
class FriendInfoDefaultTypeInternal;
extern FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
class FriendRequest;
class FriendRequestDefaultTypeInternal;
extern FriendRequestDefaultTypeInternal _FriendRequest_default_instance_;
class FriendSignal;
class FriendSignalDefaultTypeInternal;
extern FriendSignalDefaultTypeInternal _FriendSignal_default_instance_;
class GetFriendDisplayRequest;
class GetFriendDisplayRequestDefaultTypeInternal;
extern GetFriendDisplayRequestDefaultTypeInternal _GetFriendDisplayRequest_default_instance_;
class GetFriendDisplayResponse;
class GetFriendDisplayResponseDefaultTypeInternal;
extern GetFriendDisplayResponseDefaultTypeInternal _GetFriendDisplayResponse_default_instance_;
class GetFriendListRequest;
class GetFriendListRequestDefaultTypeInternal;
extern GetFriendListRequestDefaultTypeInternal _GetFriendListRequest_default_instance_;
class GetFriendListResponse;
class GetFriendListResponseDefaultTypeInternal;
extern GetFriendListResponseDefaultTypeInternal _GetFriendListResponse_default_instance_;
class HasIgnoreFriendRequest;
class HasIgnoreFriendRequestDefaultTypeInternal;
extern HasIgnoreFriendRequestDefaultTypeInternal _HasIgnoreFriendRequest_default_instance_;
class HasIgnoreFriendResponse;
class HasIgnoreFriendResponseDefaultTypeInternal;
extern HasIgnoreFriendResponseDefaultTypeInternal _HasIgnoreFriendResponse_default_instance_;
class HasReadFriendRequest;
class HasReadFriendRequestDefaultTypeInternal;
extern HasReadFriendRequestDefaultTypeInternal _HasReadFriendRequest_default_instance_;
class HasReadFriendResponse;
class HasReadFriendResponseDefaultTypeInternal;
extern HasReadFriendResponseDefaultTypeInternal _HasReadFriendResponse_default_instance_;
class RefuseFriendRequest;
class RefuseFriendRequestDefaultTypeInternal;
extern RefuseFriendRequestDefaultTypeInternal _RefuseFriendRequest_default_instance_;
class RefuseFriendResponse;
class RefuseFriendResponseDefaultTypeInternal;
extern RefuseFriendResponseDefaultTypeInternal _RefuseFriendResponse_default_instance_;
class RemoveFriendRequest;
class RemoveFriendRequestDefaultTypeInternal;
extern RemoveFriendRequestDefaultTypeInternal _RemoveFriendRequest_default_instance_;
class RemoveFriendResponse;
class RemoveFriendResponseDefaultTypeInternal;
extern RemoveFriendResponseDefaultTypeInternal _RemoveFriendResponse_default_instance_;
class SyncFriendRequest;
class SyncFriendRequestDefaultTypeInternal;
extern SyncFriendRequestDefaultTypeInternal _SyncFriendRequest_default_instance_;
class SyncFriendResponse;
class SyncFriendResponseDefaultTypeInternal;
extern SyncFriendResponseDefaultTypeInternal _SyncFriendResponse_default_instance_;
class UpdateFriendInfoRequest;
class UpdateFriendInfoRequestDefaultTypeInternal;
extern UpdateFriendInfoRequestDefaultTypeInternal _UpdateFriendInfoRequest_default_instance_;
class UpdateFriendInfoResponse;
class UpdateFriendInfoResponseDefaultTypeInternal;
extern UpdateFriendInfoResponseDefaultTypeInternal _UpdateFriendInfoResponse_default_instance_;
class UpdateSilentRequest;
class UpdateSilentRequestDefaultTypeInternal;
extern UpdateSilentRequestDefaultTypeInternal _UpdateSilentRequest_default_instance_;
class UpdateSilentRespone;
class UpdateSilentResponeDefaultTypeInternal;
extern UpdateSilentResponeDefaultTypeInternal _UpdateSilentRespone_default_instance_;
}  // namespace friends
}  // namespace outer
namespace outer {
namespace friends {

enum EFriendRequestType {
  APPLY_FRIEND_REQUEST = 0,
  EFriendRequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EFriendRequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EFriendRequestType_IsValid(int value);
const EFriendRequestType EFriendRequestType_MIN = APPLY_FRIEND_REQUEST;
const EFriendRequestType EFriendRequestType_MAX = APPLY_FRIEND_REQUEST;
const int EFriendRequestType_ARRAYSIZE = EFriendRequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EFriendRequestType_descriptor();
inline const ::std::string& EFriendRequestType_Name(EFriendRequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EFriendRequestType_descriptor(), value);
}
inline bool EFriendRequestType_Parse(
    const ::std::string& name, EFriendRequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EFriendRequestType>(
    EFriendRequestType_descriptor(), name, value);
}
enum EFriendSignalType {
  AGREE = 0,
  REFUSE = 1,
  REMOVE = 2,
  EFriendSignalType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EFriendSignalType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EFriendSignalType_IsValid(int value);
const EFriendSignalType EFriendSignalType_MIN = AGREE;
const EFriendSignalType EFriendSignalType_MAX = REMOVE;
const int EFriendSignalType_ARRAYSIZE = EFriendSignalType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EFriendSignalType_descriptor();
inline const ::std::string& EFriendSignalType_Name(EFriendSignalType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EFriendSignalType_descriptor(), value);
}
inline bool EFriendSignalType_Parse(
    const ::std::string& name, EFriendSignalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EFriendSignalType>(
    EFriendSignalType_descriptor(), name, value);
}
// ===================================================================

class FriendInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.FriendInfo) */ {
 public:
  FriendInfo();
  virtual ~FriendInfo();

  FriendInfo(const FriendInfo& from);

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendInfo(FriendInfo&& from) noexcept
    : FriendInfo() {
    *this = ::std::move(from);
  }

  inline FriendInfo& operator=(FriendInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendInfo* internal_default_instance() {
    return reinterpret_cast<const FriendInfo*>(
               &_FriendInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FriendInfo* other);
  friend void swap(FriendInfo& a, FriendInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendInfo& from);
  void MergeFrom(const FriendInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string friend_username = 2;
  void clear_friend_username();
  static const int kFriendUsernameFieldNumber = 2;
  const ::std::string& friend_username() const;
  void set_friend_username(const ::std::string& value);
  #if LANG_CXX11
  void set_friend_username(::std::string&& value);
  #endif
  void set_friend_username(const char* value);
  void set_friend_username(const char* value, size_t size);
  ::std::string* mutable_friend_username();
  ::std::string* release_friend_username();
  void set_allocated_friend_username(::std::string* friend_username);

  // string friend_nick = 3;
  void clear_friend_nick();
  static const int kFriendNickFieldNumber = 3;
  const ::std::string& friend_nick() const;
  void set_friend_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_friend_nick(::std::string&& value);
  #endif
  void set_friend_nick(const char* value);
  void set_friend_nick(const char* value, size_t size);
  ::std::string* mutable_friend_nick();
  ::std::string* release_friend_nick();
  void set_allocated_friend_nick(::std::string* friend_nick);

  // string friend_display = 4;
  void clear_friend_display();
  static const int kFriendDisplayFieldNumber = 4;
  const ::std::string& friend_display() const;
  void set_friend_display(const ::std::string& value);
  #if LANG_CXX11
  void set_friend_display(::std::string&& value);
  #endif
  void set_friend_display(const char* value);
  void set_friend_display(const char* value, size_t size);
  ::std::string* mutable_friend_display();
  ::std::string* release_friend_display();
  void set_allocated_friend_display(::std::string* friend_display);

  // string original_link = 5;
  void clear_original_link();
  static const int kOriginalLinkFieldNumber = 5;
  const ::std::string& original_link() const;
  void set_original_link(const ::std::string& value);
  #if LANG_CXX11
  void set_original_link(::std::string&& value);
  #endif
  void set_original_link(const char* value);
  void set_original_link(const char* value, size_t size);
  ::std::string* mutable_original_link();
  ::std::string* release_original_link();
  void set_allocated_original_link(::std::string* original_link);

  // string thumbnail_link = 6;
  void clear_thumbnail_link();
  static const int kThumbnailLinkFieldNumber = 6;
  const ::std::string& thumbnail_link() const;
  void set_thumbnail_link(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_link(::std::string&& value);
  #endif
  void set_thumbnail_link(const char* value);
  void set_thumbnail_link(const char* value, size_t size);
  ::std::string* mutable_thumbnail_link();
  ::std::string* release_thumbnail_link();
  void set_allocated_thumbnail_link(::std::string* thumbnail_link);

  // string phone = 10;
  void clear_phone();
  static const int kPhoneFieldNumber = 10;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // string friend_nick_pinyin = 12;
  void clear_friend_nick_pinyin();
  static const int kFriendNickPinyinFieldNumber = 12;
  const ::std::string& friend_nick_pinyin() const;
  void set_friend_nick_pinyin(const ::std::string& value);
  #if LANG_CXX11
  void set_friend_nick_pinyin(::std::string&& value);
  #endif
  void set_friend_nick_pinyin(const char* value);
  void set_friend_nick_pinyin(const char* value, size_t size);
  ::std::string* mutable_friend_nick_pinyin();
  ::std::string* release_friend_nick_pinyin();
  void set_allocated_friend_nick_pinyin(::std::string* friend_nick_pinyin);

  // string friend_display_pinyin = 13;
  void clear_friend_display_pinyin();
  static const int kFriendDisplayPinyinFieldNumber = 13;
  const ::std::string& friend_display_pinyin() const;
  void set_friend_display_pinyin(const ::std::string& value);
  #if LANG_CXX11
  void set_friend_display_pinyin(::std::string&& value);
  #endif
  void set_friend_display_pinyin(const char* value);
  void set_friend_display_pinyin(const char* value, size_t size);
  ::std::string* mutable_friend_display_pinyin();
  ::std::string* release_friend_display_pinyin();
  void set_allocated_friend_display_pinyin(::std::string* friend_display_pinyin);

  // string friend_display_pinyin_blank = 14;
  void clear_friend_display_pinyin_blank();
  static const int kFriendDisplayPinyinBlankFieldNumber = 14;
  const ::std::string& friend_display_pinyin_blank() const;
  void set_friend_display_pinyin_blank(const ::std::string& value);
  #if LANG_CXX11
  void set_friend_display_pinyin_blank(::std::string&& value);
  #endif
  void set_friend_display_pinyin_blank(const char* value);
  void set_friend_display_pinyin_blank(const char* value, size_t size);
  ::std::string* mutable_friend_display_pinyin_blank();
  ::std::string* release_friend_display_pinyin_blank();
  void set_allocated_friend_display_pinyin_blank(::std::string* friend_display_pinyin_blank);

  // string friend_nick_pinyin_blank = 15;
  void clear_friend_nick_pinyin_blank();
  static const int kFriendNickPinyinBlankFieldNumber = 15;
  const ::std::string& friend_nick_pinyin_blank() const;
  void set_friend_nick_pinyin_blank(const ::std::string& value);
  #if LANG_CXX11
  void set_friend_nick_pinyin_blank(::std::string&& value);
  #endif
  void set_friend_nick_pinyin_blank(const char* value);
  void set_friend_nick_pinyin_blank(const char* value, size_t size);
  ::std::string* mutable_friend_nick_pinyin_blank();
  ::std::string* release_friend_nick_pinyin_blank();
  void set_allocated_friend_nick_pinyin_blank(::std::string* friend_nick_pinyin_blank);

  // string serial_name = 16;
  void clear_serial_name();
  static const int kSerialNameFieldNumber = 16;
  const ::std::string& serial_name() const;
  void set_serial_name(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_name(::std::string&& value);
  #endif
  void set_serial_name(const char* value);
  void set_serial_name(const char* value, size_t size);
  ::std::string* mutable_serial_name();
  ::std::string* release_serial_name();
  void set_allocated_serial_name(::std::string* serial_name);

  // uint64 modified = 8;
  void clear_modified();
  static const int kModifiedFieldNumber = 8;
  ::google::protobuf::uint64 modified() const;
  void set_modified(::google::protobuf::uint64 value);

  // .common.enumeration.EEnable enable = 7;
  void clear_enable();
  static const int kEnableFieldNumber = 7;
  ::common::enumeration::EEnable enable() const;
  void set_enable(::common::enumeration::EEnable value);

  // .common.enumeration.ESilent silent = 9;
  void clear_silent();
  static const int kSilentFieldNumber = 9;
  ::common::enumeration::ESilent silent() const;
  void set_silent(::common::enumeration::ESilent value);

  // bool join_fleet = 11;
  void clear_join_fleet();
  static const int kJoinFleetFieldNumber = 11;
  bool join_fleet() const;
  void set_join_fleet(bool value);

  // uint32 member_type = 17;
  void clear_member_type();
  static const int kMemberTypeFieldNumber = 17;
  ::google::protobuf::uint32 member_type() const;
  void set_member_type(::google::protobuf::uint32 value);

  // uint32 user_enable = 18;
  void clear_user_enable();
  static const int kUserEnableFieldNumber = 18;
  ::google::protobuf::uint32 user_enable() const;
  void set_user_enable(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.friends.FriendInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr friend_username_;
  ::google::protobuf::internal::ArenaStringPtr friend_nick_;
  ::google::protobuf::internal::ArenaStringPtr friend_display_;
  ::google::protobuf::internal::ArenaStringPtr original_link_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_link_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr friend_nick_pinyin_;
  ::google::protobuf::internal::ArenaStringPtr friend_display_pinyin_;
  ::google::protobuf::internal::ArenaStringPtr friend_display_pinyin_blank_;
  ::google::protobuf::internal::ArenaStringPtr friend_nick_pinyin_blank_;
  ::google::protobuf::internal::ArenaStringPtr serial_name_;
  ::google::protobuf::uint64 modified_;
  int enable_;
  int silent_;
  bool join_fleet_;
  ::google::protobuf::uint32 member_type_;
  ::google::protobuf::uint32 user_enable_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsFriendInfoImpl();
};
// -------------------------------------------------------------------

class FriendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.FriendRequest) */ {
 public:
  FriendRequest();
  virtual ~FriendRequest();

  FriendRequest(const FriendRequest& from);

  inline FriendRequest& operator=(const FriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendRequest(FriendRequest&& from) noexcept
    : FriendRequest() {
    *this = ::std::move(from);
  }

  inline FriendRequest& operator=(FriendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendRequest* internal_default_instance() {
    return reinterpret_cast<const FriendRequest*>(
               &_FriendRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FriendRequest* other);
  friend void swap(FriendRequest& a, FriendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendRequest& from);
  void MergeFrom(const FriendRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string req_id = 1;
  void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  const ::std::string& req_id() const;
  void set_req_id(const ::std::string& value);
  #if LANG_CXX11
  void set_req_id(::std::string&& value);
  #endif
  void set_req_id(const char* value);
  void set_req_id(const char* value, size_t size);
  ::std::string* mutable_req_id();
  ::std::string* release_req_id();
  void set_allocated_req_id(::std::string* req_id);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 3;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 3;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string from_nick = 4;
  void clear_from_nick();
  static const int kFromNickFieldNumber = 4;
  const ::std::string& from_nick() const;
  void set_from_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_from_nick(::std::string&& value);
  #endif
  void set_from_nick(const char* value);
  void set_from_nick(const char* value, size_t size);
  ::std::string* mutable_from_nick();
  ::std::string* release_from_nick();
  void set_allocated_from_nick(::std::string* from_nick);

  // string remark = 6;
  void clear_remark();
  static const int kRemarkFieldNumber = 6;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // string original_link = 8;
  void clear_original_link();
  static const int kOriginalLinkFieldNumber = 8;
  const ::std::string& original_link() const;
  void set_original_link(const ::std::string& value);
  #if LANG_CXX11
  void set_original_link(::std::string&& value);
  #endif
  void set_original_link(const char* value);
  void set_original_link(const char* value, size_t size);
  ::std::string* mutable_original_link();
  ::std::string* release_original_link();
  void set_allocated_original_link(::std::string* original_link);

  // string thumbnail_link = 9;
  void clear_thumbnail_link();
  static const int kThumbnailLinkFieldNumber = 9;
  const ::std::string& thumbnail_link() const;
  void set_thumbnail_link(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_link(::std::string&& value);
  #endif
  void set_thumbnail_link(const char* value);
  void set_thumbnail_link(const char* value, size_t size);
  ::std::string* mutable_thumbnail_link();
  ::std::string* release_thumbnail_link();
  void set_allocated_thumbnail_link(::std::string* thumbnail_link);

  // uint64 modified = 7;
  void clear_modified();
  static const int kModifiedFieldNumber = 7;
  ::google::protobuf::uint64 modified() const;
  void set_modified(::google::protobuf::uint64 value);

  // .outer.friends.EFriendRequestType req_type = 5;
  void clear_req_type();
  static const int kReqTypeFieldNumber = 5;
  ::outer::friends::EFriendRequestType req_type() const;
  void set_req_type(::outer::friends::EFriendRequestType value);

  // uint32 state = 11;
  void clear_state();
  static const int kStateFieldNumber = 11;
  ::google::protobuf::uint32 state() const;
  void set_state(::google::protobuf::uint32 value);

  // uint64 created = 10;
  void clear_created();
  static const int kCreatedFieldNumber = 10;
  ::google::protobuf::uint64 created() const;
  void set_created(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.friends.FriendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr req_id_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr from_nick_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::google::protobuf::internal::ArenaStringPtr original_link_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_link_;
  ::google::protobuf::uint64 modified_;
  int req_type_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint64 created_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsFriendRequestImpl();
};
// -------------------------------------------------------------------

class FriendSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.FriendSignal) */ {
 public:
  FriendSignal();
  virtual ~FriendSignal();

  FriendSignal(const FriendSignal& from);

  inline FriendSignal& operator=(const FriendSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendSignal(FriendSignal&& from) noexcept
    : FriendSignal() {
    *this = ::std::move(from);
  }

  inline FriendSignal& operator=(FriendSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendSignal* internal_default_instance() {
    return reinterpret_cast<const FriendSignal*>(
               &_FriendSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(FriendSignal* other);
  friend void swap(FriendSignal& a, FriendSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  FriendSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FriendSignal& from);
  void MergeFrom(const FriendSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FriendSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 2;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 2;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string from_nick = 3;
  void clear_from_nick();
  static const int kFromNickFieldNumber = 3;
  const ::std::string& from_nick() const;
  void set_from_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_from_nick(::std::string&& value);
  #endif
  void set_from_nick(const char* value);
  void set_from_nick(const char* value, size_t size);
  ::std::string* mutable_from_nick();
  ::std::string* release_from_nick();
  void set_allocated_from_nick(::std::string* from_nick);

  // string remark = 5;
  void clear_remark();
  static const int kRemarkFieldNumber = 5;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // uint64 created = 6;
  void clear_created();
  static const int kCreatedFieldNumber = 6;
  ::google::protobuf::uint64 created() const;
  void set_created(::google::protobuf::uint64 value);

  // uint64 modified = 7;
  void clear_modified();
  static const int kModifiedFieldNumber = 7;
  ::google::protobuf::uint64 modified() const;
  void set_modified(::google::protobuf::uint64 value);

  // .outer.friends.EFriendSignalType friend_signal_type = 4;
  void clear_friend_signal_type();
  static const int kFriendSignalTypeFieldNumber = 4;
  ::outer::friends::EFriendSignalType friend_signal_type() const;
  void set_friend_signal_type(::outer::friends::EFriendSignalType value);

  // @@protoc_insertion_point(class_scope:outer.friends.FriendSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr from_nick_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::google::protobuf::uint64 created_;
  ::google::protobuf::uint64 modified_;
  int friend_signal_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsFriendSignalImpl();
};
// -------------------------------------------------------------------

class ApplyFriendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.ApplyFriendRequest) */ {
 public:
  ApplyFriendRequest();
  virtual ~ApplyFriendRequest();

  ApplyFriendRequest(const ApplyFriendRequest& from);

  inline ApplyFriendRequest& operator=(const ApplyFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ApplyFriendRequest(ApplyFriendRequest&& from) noexcept
    : ApplyFriendRequest() {
    *this = ::std::move(from);
  }

  inline ApplyFriendRequest& operator=(ApplyFriendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyFriendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyFriendRequest* internal_default_instance() {
    return reinterpret_cast<const ApplyFriendRequest*>(
               &_ApplyFriendRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ApplyFriendRequest* other);
  friend void swap(ApplyFriendRequest& a, ApplyFriendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ApplyFriendRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ApplyFriendRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ApplyFriendRequest& from);
  void MergeFrom(const ApplyFriendRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ApplyFriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string to_username = 3;
  void clear_to_username();
  static const int kToUsernameFieldNumber = 3;
  const ::std::string& to_username() const;
  void set_to_username(const ::std::string& value);
  #if LANG_CXX11
  void set_to_username(::std::string&& value);
  #endif
  void set_to_username(const char* value);
  void set_to_username(const char* value, size_t size);
  ::std::string* mutable_to_username();
  ::std::string* release_to_username();
  void set_allocated_to_username(::std::string* to_username);

  // string remark = 4;
  void clear_remark();
  static const int kRemarkFieldNumber = 4;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.enumeration.EClientType from_client_type = 6;
  void clear_from_client_type();
  static const int kFromClientTypeFieldNumber = 6;
  ::common::enumeration::EClientType from_client_type() const;
  void set_from_client_type(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:outer.friends.ApplyFriendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr to_username_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int from_client_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsApplyFriendRequestImpl();
};
// -------------------------------------------------------------------

class ApplyFriendResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.ApplyFriendResponse) */ {
 public:
  ApplyFriendResponse();
  virtual ~ApplyFriendResponse();

  ApplyFriendResponse(const ApplyFriendResponse& from);

  inline ApplyFriendResponse& operator=(const ApplyFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ApplyFriendResponse(ApplyFriendResponse&& from) noexcept
    : ApplyFriendResponse() {
    *this = ::std::move(from);
  }

  inline ApplyFriendResponse& operator=(ApplyFriendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ApplyFriendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyFriendResponse* internal_default_instance() {
    return reinterpret_cast<const ApplyFriendResponse*>(
               &_ApplyFriendResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ApplyFriendResponse* other);
  friend void swap(ApplyFriendResponse& a, ApplyFriendResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ApplyFriendResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ApplyFriendResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ApplyFriendResponse& from);
  void MergeFrom(const ApplyFriendResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ApplyFriendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.friends.ApplyFriendResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsApplyFriendResponseImpl();
};
// -------------------------------------------------------------------

class AgreeFriendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.AgreeFriendRequest) */ {
 public:
  AgreeFriendRequest();
  virtual ~AgreeFriendRequest();

  AgreeFriendRequest(const AgreeFriendRequest& from);

  inline AgreeFriendRequest& operator=(const AgreeFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AgreeFriendRequest(AgreeFriendRequest&& from) noexcept
    : AgreeFriendRequest() {
    *this = ::std::move(from);
  }

  inline AgreeFriendRequest& operator=(AgreeFriendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AgreeFriendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgreeFriendRequest* internal_default_instance() {
    return reinterpret_cast<const AgreeFriendRequest*>(
               &_AgreeFriendRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(AgreeFriendRequest* other);
  friend void swap(AgreeFriendRequest& a, AgreeFriendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AgreeFriendRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AgreeFriendRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AgreeFriendRequest& from);
  void MergeFrom(const AgreeFriendRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AgreeFriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string req_id = 1;
  void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  const ::std::string& req_id() const;
  void set_req_id(const ::std::string& value);
  #if LANG_CXX11
  void set_req_id(::std::string&& value);
  #endif
  void set_req_id(const char* value);
  void set_req_id(const char* value, size_t size);
  ::std::string* mutable_req_id();
  ::std::string* release_req_id();
  void set_allocated_req_id(::std::string* req_id);

  // string from_username = 2;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 2;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string msg_id = 4;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 4;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.enumeration.EClientType from_client_type = 6;
  void clear_from_client_type();
  static const int kFromClientTypeFieldNumber = 6;
  ::common::enumeration::EClientType from_client_type() const;
  void set_from_client_type(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:outer.friends.AgreeFriendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr req_id_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int from_client_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsAgreeFriendRequestImpl();
};
// -------------------------------------------------------------------

class AgreeFriendResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.AgreeFriendResponse) */ {
 public:
  AgreeFriendResponse();
  virtual ~AgreeFriendResponse();

  AgreeFriendResponse(const AgreeFriendResponse& from);

  inline AgreeFriendResponse& operator=(const AgreeFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AgreeFriendResponse(AgreeFriendResponse&& from) noexcept
    : AgreeFriendResponse() {
    *this = ::std::move(from);
  }

  inline AgreeFriendResponse& operator=(AgreeFriendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AgreeFriendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgreeFriendResponse* internal_default_instance() {
    return reinterpret_cast<const AgreeFriendResponse*>(
               &_AgreeFriendResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(AgreeFriendResponse* other);
  friend void swap(AgreeFriendResponse& a, AgreeFriendResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AgreeFriendResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AgreeFriendResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AgreeFriendResponse& from);
  void MergeFrom(const AgreeFriendResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AgreeFriendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.friends.AgreeFriendResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsAgreeFriendResponseImpl();
};
// -------------------------------------------------------------------

class RefuseFriendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.RefuseFriendRequest) */ {
 public:
  RefuseFriendRequest();
  virtual ~RefuseFriendRequest();

  RefuseFriendRequest(const RefuseFriendRequest& from);

  inline RefuseFriendRequest& operator=(const RefuseFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RefuseFriendRequest(RefuseFriendRequest&& from) noexcept
    : RefuseFriendRequest() {
    *this = ::std::move(from);
  }

  inline RefuseFriendRequest& operator=(RefuseFriendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RefuseFriendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefuseFriendRequest* internal_default_instance() {
    return reinterpret_cast<const RefuseFriendRequest*>(
               &_RefuseFriendRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(RefuseFriendRequest* other);
  friend void swap(RefuseFriendRequest& a, RefuseFriendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RefuseFriendRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RefuseFriendRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RefuseFriendRequest& from);
  void MergeFrom(const RefuseFriendRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RefuseFriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string req_id = 1;
  void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  const ::std::string& req_id() const;
  void set_req_id(const ::std::string& value);
  #if LANG_CXX11
  void set_req_id(::std::string&& value);
  #endif
  void set_req_id(const char* value);
  void set_req_id(const char* value, size_t size);
  ::std::string* mutable_req_id();
  ::std::string* release_req_id();
  void set_allocated_req_id(::std::string* req_id);

  // string from_username = 2;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 2;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string msg_id = 4;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 4;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // string remark = 5;
  void clear_remark();
  static const int kRemarkFieldNumber = 5;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // .common.enumeration.EClientType from_client_type = 6;
  void clear_from_client_type();
  static const int kFromClientTypeFieldNumber = 6;
  ::common::enumeration::EClientType from_client_type() const;
  void set_from_client_type(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:outer.friends.RefuseFriendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr req_id_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  int from_client_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsRefuseFriendRequestImpl();
};
// -------------------------------------------------------------------

class RefuseFriendResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.RefuseFriendResponse) */ {
 public:
  RefuseFriendResponse();
  virtual ~RefuseFriendResponse();

  RefuseFriendResponse(const RefuseFriendResponse& from);

  inline RefuseFriendResponse& operator=(const RefuseFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RefuseFriendResponse(RefuseFriendResponse&& from) noexcept
    : RefuseFriendResponse() {
    *this = ::std::move(from);
  }

  inline RefuseFriendResponse& operator=(RefuseFriendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RefuseFriendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefuseFriendResponse* internal_default_instance() {
    return reinterpret_cast<const RefuseFriendResponse*>(
               &_RefuseFriendResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(RefuseFriendResponse* other);
  friend void swap(RefuseFriendResponse& a, RefuseFriendResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RefuseFriendResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RefuseFriendResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RefuseFriendResponse& from);
  void MergeFrom(const RefuseFriendResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RefuseFriendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.friends.RefuseFriendResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsRefuseFriendResponseImpl();
};
// -------------------------------------------------------------------

class RemoveFriendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.RemoveFriendRequest) */ {
 public:
  RemoveFriendRequest();
  virtual ~RemoveFriendRequest();

  RemoveFriendRequest(const RemoveFriendRequest& from);

  inline RemoveFriendRequest& operator=(const RemoveFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveFriendRequest(RemoveFriendRequest&& from) noexcept
    : RemoveFriendRequest() {
    *this = ::std::move(from);
  }

  inline RemoveFriendRequest& operator=(RemoveFriendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveFriendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveFriendRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveFriendRequest*>(
               &_RemoveFriendRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(RemoveFriendRequest* other);
  friend void swap(RemoveFriendRequest& a, RemoveFriendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveFriendRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoveFriendRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoveFriendRequest& from);
  void MergeFrom(const RemoveFriendRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoveFriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string to_username = 3;
  void clear_to_username();
  static const int kToUsernameFieldNumber = 3;
  const ::std::string& to_username() const;
  void set_to_username(const ::std::string& value);
  #if LANG_CXX11
  void set_to_username(::std::string&& value);
  #endif
  void set_to_username(const char* value);
  void set_to_username(const char* value, size_t size);
  ::std::string* mutable_to_username();
  ::std::string* release_to_username();
  void set_allocated_to_username(::std::string* to_username);

  // string msg_id = 4;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 4;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.enumeration.EClientType from_client_type = 6;
  void clear_from_client_type();
  static const int kFromClientTypeFieldNumber = 6;
  ::common::enumeration::EClientType from_client_type() const;
  void set_from_client_type(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:outer.friends.RemoveFriendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr to_username_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int from_client_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsRemoveFriendRequestImpl();
};
// -------------------------------------------------------------------

class RemoveFriendResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.RemoveFriendResponse) */ {
 public:
  RemoveFriendResponse();
  virtual ~RemoveFriendResponse();

  RemoveFriendResponse(const RemoveFriendResponse& from);

  inline RemoveFriendResponse& operator=(const RemoveFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveFriendResponse(RemoveFriendResponse&& from) noexcept
    : RemoveFriendResponse() {
    *this = ::std::move(from);
  }

  inline RemoveFriendResponse& operator=(RemoveFriendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveFriendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveFriendResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveFriendResponse*>(
               &_RemoveFriendResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(RemoveFriendResponse* other);
  friend void swap(RemoveFriendResponse& a, RemoveFriendResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveFriendResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoveFriendResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoveFriendResponse& from);
  void MergeFrom(const RemoveFriendResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoveFriendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.friends.RemoveFriendResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsRemoveFriendResponseImpl();
};
// -------------------------------------------------------------------

class SyncFriendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.SyncFriendRequest) */ {
 public:
  SyncFriendRequest();
  virtual ~SyncFriendRequest();

  SyncFriendRequest(const SyncFriendRequest& from);

  inline SyncFriendRequest& operator=(const SyncFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncFriendRequest(SyncFriendRequest&& from) noexcept
    : SyncFriendRequest() {
    *this = ::std::move(from);
  }

  inline SyncFriendRequest& operator=(SyncFriendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncFriendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncFriendRequest* internal_default_instance() {
    return reinterpret_cast<const SyncFriendRequest*>(
               &_SyncFriendRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(SyncFriendRequest* other);
  friend void swap(SyncFriendRequest& a, SyncFriendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncFriendRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SyncFriendRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SyncFriendRequest& from);
  void MergeFrom(const SyncFriendRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SyncFriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // uint64 friend_modified = 3;
  void clear_friend_modified();
  static const int kFriendModifiedFieldNumber = 3;
  ::google::protobuf::uint64 friend_modified() const;
  void set_friend_modified(::google::protobuf::uint64 value);

  // uint64 friend_req_modified = 4;
  void clear_friend_req_modified();
  static const int kFriendReqModifiedFieldNumber = 4;
  ::google::protobuf::uint64 friend_req_modified() const;
  void set_friend_req_modified(::google::protobuf::uint64 value);

  // uint64 friend_signal_modified = 6;
  void clear_friend_signal_modified();
  static const int kFriendSignalModifiedFieldNumber = 6;
  ::google::protobuf::uint64 friend_signal_modified() const;
  void set_friend_signal_modified(::google::protobuf::uint64 value);

  // bool first_sync = 7;
  void clear_first_sync();
  static const int kFirstSyncFieldNumber = 7;
  bool first_sync() const;
  void set_first_sync(bool value);

  // @@protoc_insertion_point(class_scope:outer.friends.SyncFriendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::uint64 friend_modified_;
  ::google::protobuf::uint64 friend_req_modified_;
  ::google::protobuf::uint64 friend_signal_modified_;
  bool first_sync_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsSyncFriendRequestImpl();
};
// -------------------------------------------------------------------

class SyncFriendResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.SyncFriendResponse) */ {
 public:
  SyncFriendResponse();
  virtual ~SyncFriendResponse();

  SyncFriendResponse(const SyncFriendResponse& from);

  inline SyncFriendResponse& operator=(const SyncFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncFriendResponse(SyncFriendResponse&& from) noexcept
    : SyncFriendResponse() {
    *this = ::std::move(from);
  }

  inline SyncFriendResponse& operator=(SyncFriendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncFriendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncFriendResponse* internal_default_instance() {
    return reinterpret_cast<const SyncFriendResponse*>(
               &_SyncFriendResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(SyncFriendResponse* other);
  friend void swap(SyncFriendResponse& a, SyncFriendResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncFriendResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SyncFriendResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SyncFriendResponse& from);
  void MergeFrom(const SyncFriendResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SyncFriendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.friends.FriendInfo friend_info = 2;
  int friend_info_size() const;
  void clear_friend_info();
  static const int kFriendInfoFieldNumber = 2;
  const ::outer::friends::FriendInfo& friend_info(int index) const;
  ::outer::friends::FriendInfo* mutable_friend_info(int index);
  ::outer::friends::FriendInfo* add_friend_info();
  ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendInfo >*
      mutable_friend_info();
  const ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendInfo >&
      friend_info() const;

  // repeated .outer.friends.FriendRequest friend_request = 3;
  int friend_request_size() const;
  void clear_friend_request();
  static const int kFriendRequestFieldNumber = 3;
  const ::outer::friends::FriendRequest& friend_request(int index) const;
  ::outer::friends::FriendRequest* mutable_friend_request(int index);
  ::outer::friends::FriendRequest* add_friend_request();
  ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendRequest >*
      mutable_friend_request();
  const ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendRequest >&
      friend_request() const;

  // repeated .outer.friends.FriendSignal friend_signal = 4;
  int friend_signal_size() const;
  void clear_friend_signal();
  static const int kFriendSignalFieldNumber = 4;
  const ::outer::friends::FriendSignal& friend_signal(int index) const;
  ::outer::friends::FriendSignal* mutable_friend_signal(int index);
  ::outer::friends::FriendSignal* add_friend_signal();
  ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendSignal >*
      mutable_friend_signal();
  const ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendSignal >&
      friend_signal() const;

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.friends.SyncFriendResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendInfo > friend_info_;
  ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendRequest > friend_request_;
  ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendSignal > friend_signal_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsSyncFriendResponseImpl();
};
// -------------------------------------------------------------------

class UpdateFriendInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.UpdateFriendInfoRequest) */ {
 public:
  UpdateFriendInfoRequest();
  virtual ~UpdateFriendInfoRequest();

  UpdateFriendInfoRequest(const UpdateFriendInfoRequest& from);

  inline UpdateFriendInfoRequest& operator=(const UpdateFriendInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateFriendInfoRequest(UpdateFriendInfoRequest&& from) noexcept
    : UpdateFriendInfoRequest() {
    *this = ::std::move(from);
  }

  inline UpdateFriendInfoRequest& operator=(UpdateFriendInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFriendInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateFriendInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateFriendInfoRequest*>(
               &_UpdateFriendInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(UpdateFriendInfoRequest* other);
  friend void swap(UpdateFriendInfoRequest& a, UpdateFriendInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateFriendInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateFriendInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateFriendInfoRequest& from);
  void MergeFrom(const UpdateFriendInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateFriendInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 2;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 2;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string friend_username = 3;
  void clear_friend_username();
  static const int kFriendUsernameFieldNumber = 3;
  const ::std::string& friend_username() const;
  void set_friend_username(const ::std::string& value);
  #if LANG_CXX11
  void set_friend_username(::std::string&& value);
  #endif
  void set_friend_username(const char* value);
  void set_friend_username(const char* value, size_t size);
  ::std::string* mutable_friend_username();
  ::std::string* release_friend_username();
  void set_allocated_friend_username(::std::string* friend_username);

  // string friend_display = 4;
  void clear_friend_display();
  static const int kFriendDisplayFieldNumber = 4;
  const ::std::string& friend_display() const;
  void set_friend_display(const ::std::string& value);
  #if LANG_CXX11
  void set_friend_display(::std::string&& value);
  #endif
  void set_friend_display(const char* value);
  void set_friend_display(const char* value, size_t size);
  ::std::string* mutable_friend_display();
  ::std::string* release_friend_display();
  void set_allocated_friend_display(::std::string* friend_display);

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.enumeration.EClientType from_client_type = 6;
  void clear_from_client_type();
  static const int kFromClientTypeFieldNumber = 6;
  ::common::enumeration::EClientType from_client_type() const;
  void set_from_client_type(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:outer.friends.UpdateFriendInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr friend_username_;
  ::google::protobuf::internal::ArenaStringPtr friend_display_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int from_client_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsUpdateFriendInfoRequestImpl();
};
// -------------------------------------------------------------------

class UpdateFriendInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.UpdateFriendInfoResponse) */ {
 public:
  UpdateFriendInfoResponse();
  virtual ~UpdateFriendInfoResponse();

  UpdateFriendInfoResponse(const UpdateFriendInfoResponse& from);

  inline UpdateFriendInfoResponse& operator=(const UpdateFriendInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateFriendInfoResponse(UpdateFriendInfoResponse&& from) noexcept
    : UpdateFriendInfoResponse() {
    *this = ::std::move(from);
  }

  inline UpdateFriendInfoResponse& operator=(UpdateFriendInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateFriendInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateFriendInfoResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateFriendInfoResponse*>(
               &_UpdateFriendInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(UpdateFriendInfoResponse* other);
  friend void swap(UpdateFriendInfoResponse& a, UpdateFriendInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateFriendInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateFriendInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateFriendInfoResponse& from);
  void MergeFrom(const UpdateFriendInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateFriendInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.friends.UpdateFriendInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsUpdateFriendInfoResponseImpl();
};
// -------------------------------------------------------------------

class UpdateSilentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.UpdateSilentRequest) */ {
 public:
  UpdateSilentRequest();
  virtual ~UpdateSilentRequest();

  UpdateSilentRequest(const UpdateSilentRequest& from);

  inline UpdateSilentRequest& operator=(const UpdateSilentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateSilentRequest(UpdateSilentRequest&& from) noexcept
    : UpdateSilentRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSilentRequest& operator=(UpdateSilentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSilentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSilentRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSilentRequest*>(
               &_UpdateSilentRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(UpdateSilentRequest* other);
  friend void swap(UpdateSilentRequest& a, UpdateSilentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateSilentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateSilentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateSilentRequest& from);
  void MergeFrom(const UpdateSilentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateSilentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 2;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 2;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string friend_username = 3;
  void clear_friend_username();
  static const int kFriendUsernameFieldNumber = 3;
  const ::std::string& friend_username() const;
  void set_friend_username(const ::std::string& value);
  #if LANG_CXX11
  void set_friend_username(::std::string&& value);
  #endif
  void set_friend_username(const char* value);
  void set_friend_username(const char* value, size_t size);
  ::std::string* mutable_friend_username();
  ::std::string* release_friend_username();
  void set_allocated_friend_username(::std::string* friend_username);

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.enumeration.ESilent friend_silent = 4;
  void clear_friend_silent();
  static const int kFriendSilentFieldNumber = 4;
  ::common::enumeration::ESilent friend_silent() const;
  void set_friend_silent(::common::enumeration::ESilent value);

  // .common.enumeration.EClientType from_client_type = 6;
  void clear_from_client_type();
  static const int kFromClientTypeFieldNumber = 6;
  ::common::enumeration::EClientType from_client_type() const;
  void set_from_client_type(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:outer.friends.UpdateSilentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr friend_username_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int friend_silent_;
  int from_client_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsUpdateSilentRequestImpl();
};
// -------------------------------------------------------------------

class UpdateSilentRespone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.UpdateSilentRespone) */ {
 public:
  UpdateSilentRespone();
  virtual ~UpdateSilentRespone();

  UpdateSilentRespone(const UpdateSilentRespone& from);

  inline UpdateSilentRespone& operator=(const UpdateSilentRespone& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateSilentRespone(UpdateSilentRespone&& from) noexcept
    : UpdateSilentRespone() {
    *this = ::std::move(from);
  }

  inline UpdateSilentRespone& operator=(UpdateSilentRespone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSilentRespone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSilentRespone* internal_default_instance() {
    return reinterpret_cast<const UpdateSilentRespone*>(
               &_UpdateSilentRespone_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(UpdateSilentRespone* other);
  friend void swap(UpdateSilentRespone& a, UpdateSilentRespone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateSilentRespone* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateSilentRespone* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateSilentRespone& from);
  void MergeFrom(const UpdateSilentRespone& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateSilentRespone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.friends.UpdateSilentRespone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsUpdateSilentResponeImpl();
};
// -------------------------------------------------------------------

class GetFriendListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.GetFriendListRequest) */ {
 public:
  GetFriendListRequest();
  virtual ~GetFriendListRequest();

  GetFriendListRequest(const GetFriendListRequest& from);

  inline GetFriendListRequest& operator=(const GetFriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFriendListRequest(GetFriendListRequest&& from) noexcept
    : GetFriendListRequest() {
    *this = ::std::move(from);
  }

  inline GetFriendListRequest& operator=(GetFriendListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFriendListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendListRequest* internal_default_instance() {
    return reinterpret_cast<const GetFriendListRequest*>(
               &_GetFriendListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(GetFriendListRequest* other);
  friend void swap(GetFriendListRequest& a, GetFriendListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFriendListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetFriendListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetFriendListRequest& from);
  void MergeFrom(const GetFriendListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetFriendListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // int32 page_index = 3;
  void clear_page_index();
  static const int kPageIndexFieldNumber = 3;
  ::google::protobuf::int32 page_index() const;
  void set_page_index(::google::protobuf::int32 value);

  // int32 page_size = 4;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 4;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:outer.friends.GetFriendListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::int32 page_index_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsGetFriendListRequestImpl();
};
// -------------------------------------------------------------------

class GetFriendListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.GetFriendListResponse) */ {
 public:
  GetFriendListResponse();
  virtual ~GetFriendListResponse();

  GetFriendListResponse(const GetFriendListResponse& from);

  inline GetFriendListResponse& operator=(const GetFriendListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFriendListResponse(GetFriendListResponse&& from) noexcept
    : GetFriendListResponse() {
    *this = ::std::move(from);
  }

  inline GetFriendListResponse& operator=(GetFriendListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFriendListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendListResponse* internal_default_instance() {
    return reinterpret_cast<const GetFriendListResponse*>(
               &_GetFriendListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(GetFriendListResponse* other);
  friend void swap(GetFriendListResponse& a, GetFriendListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFriendListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetFriendListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetFriendListResponse& from);
  void MergeFrom(const GetFriendListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetFriendListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.friends.FriendInfo friend_info = 2;
  int friend_info_size() const;
  void clear_friend_info();
  static const int kFriendInfoFieldNumber = 2;
  const ::outer::friends::FriendInfo& friend_info(int index) const;
  ::outer::friends::FriendInfo* mutable_friend_info(int index);
  ::outer::friends::FriendInfo* add_friend_info();
  ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendInfo >*
      mutable_friend_info();
  const ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendInfo >&
      friend_info() const;

  // int64 total = 3;
  void clear_total();
  static const int kTotalFieldNumber = 3;
  ::google::protobuf::int64 total() const;
  void set_total(::google::protobuf::int64 value);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.friends.GetFriendListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendInfo > friend_info_;
  ::google::protobuf::int64 total_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsGetFriendListResponseImpl();
};
// -------------------------------------------------------------------

class HasReadFriendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.HasReadFriendRequest) */ {
 public:
  HasReadFriendRequest();
  virtual ~HasReadFriendRequest();

  HasReadFriendRequest(const HasReadFriendRequest& from);

  inline HasReadFriendRequest& operator=(const HasReadFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HasReadFriendRequest(HasReadFriendRequest&& from) noexcept
    : HasReadFriendRequest() {
    *this = ::std::move(from);
  }

  inline HasReadFriendRequest& operator=(HasReadFriendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HasReadFriendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HasReadFriendRequest* internal_default_instance() {
    return reinterpret_cast<const HasReadFriendRequest*>(
               &_HasReadFriendRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(HasReadFriendRequest* other);
  friend void swap(HasReadFriendRequest& a, HasReadFriendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HasReadFriendRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  HasReadFriendRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HasReadFriendRequest& from);
  void MergeFrom(const HasReadFriendRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HasReadFriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string req_id = 1;
  int req_id_size() const;
  void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  const ::std::string& req_id(int index) const;
  ::std::string* mutable_req_id(int index);
  void set_req_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_req_id(int index, ::std::string&& value);
  #endif
  void set_req_id(int index, const char* value);
  void set_req_id(int index, const char* value, size_t size);
  ::std::string* add_req_id();
  void add_req_id(const ::std::string& value);
  #if LANG_CXX11
  void add_req_id(::std::string&& value);
  #endif
  void add_req_id(const char* value);
  void add_req_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& req_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_req_id();

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string msg_id = 4;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 4;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.enumeration.EClientType from_client_type = 5;
  void clear_from_client_type();
  static const int kFromClientTypeFieldNumber = 5;
  ::common::enumeration::EClientType from_client_type() const;
  void set_from_client_type(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:outer.friends.HasReadFriendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> req_id_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int from_client_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsHasReadFriendRequestImpl();
};
// -------------------------------------------------------------------

class HasReadFriendResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.HasReadFriendResponse) */ {
 public:
  HasReadFriendResponse();
  virtual ~HasReadFriendResponse();

  HasReadFriendResponse(const HasReadFriendResponse& from);

  inline HasReadFriendResponse& operator=(const HasReadFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HasReadFriendResponse(HasReadFriendResponse&& from) noexcept
    : HasReadFriendResponse() {
    *this = ::std::move(from);
  }

  inline HasReadFriendResponse& operator=(HasReadFriendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HasReadFriendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HasReadFriendResponse* internal_default_instance() {
    return reinterpret_cast<const HasReadFriendResponse*>(
               &_HasReadFriendResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(HasReadFriendResponse* other);
  friend void swap(HasReadFriendResponse& a, HasReadFriendResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HasReadFriendResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  HasReadFriendResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HasReadFriendResponse& from);
  void MergeFrom(const HasReadFriendResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HasReadFriendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.friends.HasReadFriendResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsHasReadFriendResponseImpl();
};
// -------------------------------------------------------------------

class HasIgnoreFriendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.HasIgnoreFriendRequest) */ {
 public:
  HasIgnoreFriendRequest();
  virtual ~HasIgnoreFriendRequest();

  HasIgnoreFriendRequest(const HasIgnoreFriendRequest& from);

  inline HasIgnoreFriendRequest& operator=(const HasIgnoreFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HasIgnoreFriendRequest(HasIgnoreFriendRequest&& from) noexcept
    : HasIgnoreFriendRequest() {
    *this = ::std::move(from);
  }

  inline HasIgnoreFriendRequest& operator=(HasIgnoreFriendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HasIgnoreFriendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HasIgnoreFriendRequest* internal_default_instance() {
    return reinterpret_cast<const HasIgnoreFriendRequest*>(
               &_HasIgnoreFriendRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(HasIgnoreFriendRequest* other);
  friend void swap(HasIgnoreFriendRequest& a, HasIgnoreFriendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HasIgnoreFriendRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  HasIgnoreFriendRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HasIgnoreFriendRequest& from);
  void MergeFrom(const HasIgnoreFriendRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HasIgnoreFriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string req_id = 1;
  int req_id_size() const;
  void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  const ::std::string& req_id(int index) const;
  ::std::string* mutable_req_id(int index);
  void set_req_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_req_id(int index, ::std::string&& value);
  #endif
  void set_req_id(int index, const char* value);
  void set_req_id(int index, const char* value, size_t size);
  ::std::string* add_req_id();
  void add_req_id(const ::std::string& value);
  #if LANG_CXX11
  void add_req_id(::std::string&& value);
  #endif
  void add_req_id(const char* value);
  void add_req_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& req_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_req_id();

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string msg_id = 4;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 4;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.enumeration.EClientType from_client_type = 5;
  void clear_from_client_type();
  static const int kFromClientTypeFieldNumber = 5;
  ::common::enumeration::EClientType from_client_type() const;
  void set_from_client_type(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:outer.friends.HasIgnoreFriendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> req_id_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int from_client_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsHasIgnoreFriendRequestImpl();
};
// -------------------------------------------------------------------

class HasIgnoreFriendResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.HasIgnoreFriendResponse) */ {
 public:
  HasIgnoreFriendResponse();
  virtual ~HasIgnoreFriendResponse();

  HasIgnoreFriendResponse(const HasIgnoreFriendResponse& from);

  inline HasIgnoreFriendResponse& operator=(const HasIgnoreFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HasIgnoreFriendResponse(HasIgnoreFriendResponse&& from) noexcept
    : HasIgnoreFriendResponse() {
    *this = ::std::move(from);
  }

  inline HasIgnoreFriendResponse& operator=(HasIgnoreFriendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HasIgnoreFriendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HasIgnoreFriendResponse* internal_default_instance() {
    return reinterpret_cast<const HasIgnoreFriendResponse*>(
               &_HasIgnoreFriendResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(HasIgnoreFriendResponse* other);
  friend void swap(HasIgnoreFriendResponse& a, HasIgnoreFriendResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HasIgnoreFriendResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  HasIgnoreFriendResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HasIgnoreFriendResponse& from);
  void MergeFrom(const HasIgnoreFriendResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HasIgnoreFriendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.friends.HasIgnoreFriendResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsHasIgnoreFriendResponseImpl();
};
// -------------------------------------------------------------------

class BatchApplyFriendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.BatchApplyFriendRequest) */ {
 public:
  BatchApplyFriendRequest();
  virtual ~BatchApplyFriendRequest();

  BatchApplyFriendRequest(const BatchApplyFriendRequest& from);

  inline BatchApplyFriendRequest& operator=(const BatchApplyFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchApplyFriendRequest(BatchApplyFriendRequest&& from) noexcept
    : BatchApplyFriendRequest() {
    *this = ::std::move(from);
  }

  inline BatchApplyFriendRequest& operator=(BatchApplyFriendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchApplyFriendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchApplyFriendRequest* internal_default_instance() {
    return reinterpret_cast<const BatchApplyFriendRequest*>(
               &_BatchApplyFriendRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(BatchApplyFriendRequest* other);
  friend void swap(BatchApplyFriendRequest& a, BatchApplyFriendRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchApplyFriendRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchApplyFriendRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchApplyFriendRequest& from);
  void MergeFrom(const BatchApplyFriendRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchApplyFriendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string to_username = 3;
  int to_username_size() const;
  void clear_to_username();
  static const int kToUsernameFieldNumber = 3;
  const ::std::string& to_username(int index) const;
  ::std::string* mutable_to_username(int index);
  void set_to_username(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_to_username(int index, ::std::string&& value);
  #endif
  void set_to_username(int index, const char* value);
  void set_to_username(int index, const char* value, size_t size);
  ::std::string* add_to_username();
  void add_to_username(const ::std::string& value);
  #if LANG_CXX11
  void add_to_username(::std::string&& value);
  #endif
  void add_to_username(const char* value);
  void add_to_username(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& to_username() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_to_username();

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string remark = 4;
  void clear_remark();
  static const int kRemarkFieldNumber = 4;
  const ::std::string& remark() const;
  void set_remark(const ::std::string& value);
  #if LANG_CXX11
  void set_remark(::std::string&& value);
  #endif
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  ::std::string* mutable_remark();
  ::std::string* release_remark();
  void set_allocated_remark(::std::string* remark);

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.enumeration.EClientType from_client_type = 6;
  void clear_from_client_type();
  static const int kFromClientTypeFieldNumber = 6;
  ::common::enumeration::EClientType from_client_type() const;
  void set_from_client_type(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:outer.friends.BatchApplyFriendRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> to_username_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr remark_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int from_client_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsBatchApplyFriendRequestImpl();
};
// -------------------------------------------------------------------

class BatchApplyFriendResponse_ResultEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<BatchApplyFriendResponse_ResultEntry_DoNotUse, 
    ::std::string, ::common::errcode::EErrorCode,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<BatchApplyFriendResponse_ResultEntry_DoNotUse, 
    ::std::string, ::common::errcode::EErrorCode,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
    0 > SuperType;
  BatchApplyFriendResponse_ResultEntry_DoNotUse();
  BatchApplyFriendResponse_ResultEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const BatchApplyFriendResponse_ResultEntry_DoNotUse& other);
  static const BatchApplyFriendResponse_ResultEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BatchApplyFriendResponse_ResultEntry_DoNotUse*>(&_BatchApplyFriendResponse_ResultEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class BatchApplyFriendResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.BatchApplyFriendResponse) */ {
 public:
  BatchApplyFriendResponse();
  virtual ~BatchApplyFriendResponse();

  BatchApplyFriendResponse(const BatchApplyFriendResponse& from);

  inline BatchApplyFriendResponse& operator=(const BatchApplyFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchApplyFriendResponse(BatchApplyFriendResponse&& from) noexcept
    : BatchApplyFriendResponse() {
    *this = ::std::move(from);
  }

  inline BatchApplyFriendResponse& operator=(BatchApplyFriendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchApplyFriendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchApplyFriendResponse* internal_default_instance() {
    return reinterpret_cast<const BatchApplyFriendResponse*>(
               &_BatchApplyFriendResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(BatchApplyFriendResponse* other);
  friend void swap(BatchApplyFriendResponse& a, BatchApplyFriendResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchApplyFriendResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchApplyFriendResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchApplyFriendResponse& from);
  void MergeFrom(const BatchApplyFriendResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchApplyFriendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .common.errcode.EErrorCode> result = 3;
  int result_size() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::common::errcode::EErrorCode >&
      result() const;
  ::google::protobuf::Map< ::std::string, ::common::errcode::EErrorCode >*
      mutable_result();

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.friends.BatchApplyFriendResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      BatchApplyFriendResponse_ResultEntry_DoNotUse,
      ::std::string, ::common::errcode::EErrorCode,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
      0 > result_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsBatchApplyFriendResponseImpl();
};
// -------------------------------------------------------------------

class BatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<BatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<BatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  BatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUse();
  BatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const BatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUse& other);
  static const BatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUse*>(&_BatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class BatchApplyFriendByFromUsersRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.BatchApplyFriendByFromUsersRequest) */ {
 public:
  BatchApplyFriendByFromUsersRequest();
  virtual ~BatchApplyFriendByFromUsersRequest();

  BatchApplyFriendByFromUsersRequest(const BatchApplyFriendByFromUsersRequest& from);

  inline BatchApplyFriendByFromUsersRequest& operator=(const BatchApplyFriendByFromUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchApplyFriendByFromUsersRequest(BatchApplyFriendByFromUsersRequest&& from) noexcept
    : BatchApplyFriendByFromUsersRequest() {
    *this = ::std::move(from);
  }

  inline BatchApplyFriendByFromUsersRequest& operator=(BatchApplyFriendByFromUsersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchApplyFriendByFromUsersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchApplyFriendByFromUsersRequest* internal_default_instance() {
    return reinterpret_cast<const BatchApplyFriendByFromUsersRequest*>(
               &_BatchApplyFriendByFromUsersRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(BatchApplyFriendByFromUsersRequest* other);
  friend void swap(BatchApplyFriendByFromUsersRequest& a, BatchApplyFriendByFromUsersRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchApplyFriendByFromUsersRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchApplyFriendByFromUsersRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchApplyFriendByFromUsersRequest& from);
  void MergeFrom(const BatchApplyFriendByFromUsersRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchApplyFriendByFromUsersRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string from_username = 1;
  int from_username_size() const;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username(int index) const;
  ::std::string* mutable_from_username(int index);
  void set_from_username(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(int index, ::std::string&& value);
  #endif
  void set_from_username(int index, const char* value);
  void set_from_username(int index, const char* value, size_t size);
  ::std::string* add_from_username();
  void add_from_username(const ::std::string& value);
  #if LANG_CXX11
  void add_from_username(::std::string&& value);
  #endif
  void add_from_username(const char* value);
  void add_from_username(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& from_username() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_from_username();

  // map<string, string> remark = 4;
  int remark_size() const;
  void clear_remark();
  static const int kRemarkFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      remark() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_remark();

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string to_username = 3;
  void clear_to_username();
  static const int kToUsernameFieldNumber = 3;
  const ::std::string& to_username() const;
  void set_to_username(const ::std::string& value);
  #if LANG_CXX11
  void set_to_username(::std::string&& value);
  #endif
  void set_to_username(const char* value);
  void set_to_username(const char* value, size_t size);
  ::std::string* mutable_to_username();
  ::std::string* release_to_username();
  void set_allocated_to_username(::std::string* to_username);

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.enumeration.EClientType from_client_type = 6;
  void clear_from_client_type();
  static const int kFromClientTypeFieldNumber = 6;
  ::common::enumeration::EClientType from_client_type() const;
  void set_from_client_type(::common::enumeration::EClientType value);

  // @@protoc_insertion_point(class_scope:outer.friends.BatchApplyFriendByFromUsersRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> from_username_;
  ::google::protobuf::internal::MapField<
      BatchApplyFriendByFromUsersRequest_RemarkEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > remark_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr to_username_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int from_client_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsBatchApplyFriendByFromUsersRequestImpl();
};
// -------------------------------------------------------------------

class BatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<BatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUse, 
    ::std::string, ::common::errcode::EErrorCode,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<BatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUse, 
    ::std::string, ::common::errcode::EErrorCode,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
    0 > SuperType;
  BatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUse();
  BatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const BatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUse& other);
  static const BatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUse*>(&_BatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class BatchApplyFriendByFromUsersResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.BatchApplyFriendByFromUsersResponse) */ {
 public:
  BatchApplyFriendByFromUsersResponse();
  virtual ~BatchApplyFriendByFromUsersResponse();

  BatchApplyFriendByFromUsersResponse(const BatchApplyFriendByFromUsersResponse& from);

  inline BatchApplyFriendByFromUsersResponse& operator=(const BatchApplyFriendByFromUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchApplyFriendByFromUsersResponse(BatchApplyFriendByFromUsersResponse&& from) noexcept
    : BatchApplyFriendByFromUsersResponse() {
    *this = ::std::move(from);
  }

  inline BatchApplyFriendByFromUsersResponse& operator=(BatchApplyFriendByFromUsersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchApplyFriendByFromUsersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchApplyFriendByFromUsersResponse* internal_default_instance() {
    return reinterpret_cast<const BatchApplyFriendByFromUsersResponse*>(
               &_BatchApplyFriendByFromUsersResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(BatchApplyFriendByFromUsersResponse* other);
  friend void swap(BatchApplyFriendByFromUsersResponse& a, BatchApplyFriendByFromUsersResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchApplyFriendByFromUsersResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchApplyFriendByFromUsersResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchApplyFriendByFromUsersResponse& from);
  void MergeFrom(const BatchApplyFriendByFromUsersResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchApplyFriendByFromUsersResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .common.errcode.EErrorCode> result = 3;
  int result_size() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::common::errcode::EErrorCode >&
      result() const;
  ::google::protobuf::Map< ::std::string, ::common::errcode::EErrorCode >*
      mutable_result();

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.friends.BatchApplyFriendByFromUsersResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      BatchApplyFriendByFromUsersResponse_ResultEntry_DoNotUse,
      ::std::string, ::common::errcode::EErrorCode,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
      0 > result_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsBatchApplyFriendByFromUsersResponseImpl();
};
// -------------------------------------------------------------------

class GetFriendDisplayRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.GetFriendDisplayRequest) */ {
 public:
  GetFriendDisplayRequest();
  virtual ~GetFriendDisplayRequest();

  GetFriendDisplayRequest(const GetFriendDisplayRequest& from);

  inline GetFriendDisplayRequest& operator=(const GetFriendDisplayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFriendDisplayRequest(GetFriendDisplayRequest&& from) noexcept
    : GetFriendDisplayRequest() {
    *this = ::std::move(from);
  }

  inline GetFriendDisplayRequest& operator=(GetFriendDisplayRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFriendDisplayRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendDisplayRequest* internal_default_instance() {
    return reinterpret_cast<const GetFriendDisplayRequest*>(
               &_GetFriendDisplayRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(GetFriendDisplayRequest* other);
  friend void swap(GetFriendDisplayRequest& a, GetFriendDisplayRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFriendDisplayRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetFriendDisplayRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetFriendDisplayRequest& from);
  void MergeFrom(const GetFriendDisplayRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetFriendDisplayRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string owner_username = 2;
  void clear_owner_username();
  static const int kOwnerUsernameFieldNumber = 2;
  const ::std::string& owner_username() const;
  void set_owner_username(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_username(::std::string&& value);
  #endif
  void set_owner_username(const char* value);
  void set_owner_username(const char* value, size_t size);
  ::std::string* mutable_owner_username();
  ::std::string* release_owner_username();
  void set_allocated_owner_username(::std::string* owner_username);

  // string friend_username = 3;
  void clear_friend_username();
  static const int kFriendUsernameFieldNumber = 3;
  const ::std::string& friend_username() const;
  void set_friend_username(const ::std::string& value);
  #if LANG_CXX11
  void set_friend_username(::std::string&& value);
  #endif
  void set_friend_username(const char* value);
  void set_friend_username(const char* value, size_t size);
  ::std::string* mutable_friend_username();
  ::std::string* release_friend_username();
  void set_allocated_friend_username(::std::string* friend_username);

  // @@protoc_insertion_point(class_scope:outer.friends.GetFriendDisplayRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr owner_username_;
  ::google::protobuf::internal::ArenaStringPtr friend_username_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsGetFriendDisplayRequestImpl();
};
// -------------------------------------------------------------------

class GetFriendDisplayResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.friends.GetFriendDisplayResponse) */ {
 public:
  GetFriendDisplayResponse();
  virtual ~GetFriendDisplayResponse();

  GetFriendDisplayResponse(const GetFriendDisplayResponse& from);

  inline GetFriendDisplayResponse& operator=(const GetFriendDisplayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFriendDisplayResponse(GetFriendDisplayResponse&& from) noexcept
    : GetFriendDisplayResponse() {
    *this = ::std::move(from);
  }

  inline GetFriendDisplayResponse& operator=(GetFriendDisplayResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFriendDisplayResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFriendDisplayResponse* internal_default_instance() {
    return reinterpret_cast<const GetFriendDisplayResponse*>(
               &_GetFriendDisplayResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(GetFriendDisplayResponse* other);
  friend void swap(GetFriendDisplayResponse& a, GetFriendDisplayResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFriendDisplayResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetFriendDisplayResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetFriendDisplayResponse& from);
  void MergeFrom(const GetFriendDisplayResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetFriendDisplayResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string friend_display = 2;
  void clear_friend_display();
  static const int kFriendDisplayFieldNumber = 2;
  const ::std::string& friend_display() const;
  void set_friend_display(const ::std::string& value);
  #if LANG_CXX11
  void set_friend_display(::std::string&& value);
  #endif
  void set_friend_display(const char* value);
  void set_friend_display(const char* value, size_t size);
  ::std::string* mutable_friend_display();
  ::std::string* release_friend_display();
  void set_allocated_friend_display(::std::string* friend_display);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.friends.GetFriendDisplayResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr friend_display_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffriends_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffriends_2eproto::InitDefaultsGetFriendDisplayResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FriendInfo

// string appkey = 1;
inline void FriendInfo::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendInfo::appkey() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.appkey)
  return appkey_.GetNoArena();
}
inline void FriendInfo::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.appkey)
}
#if LANG_CXX11
inline void FriendInfo::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendInfo.appkey)
}
#endif
inline void FriendInfo::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendInfo.appkey)
}
inline void FriendInfo::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendInfo.appkey)
}
inline ::std::string* FriendInfo::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendInfo.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendInfo.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendInfo.appkey)
}

// string friend_username = 2;
inline void FriendInfo::clear_friend_username() {
  friend_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendInfo::friend_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.friend_username)
  return friend_username_.GetNoArena();
}
inline void FriendInfo::set_friend_username(const ::std::string& value) {
  
  friend_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.friend_username)
}
#if LANG_CXX11
inline void FriendInfo::set_friend_username(::std::string&& value) {
  
  friend_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendInfo.friend_username)
}
#endif
inline void FriendInfo::set_friend_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friend_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendInfo.friend_username)
}
inline void FriendInfo::set_friend_username(const char* value, size_t size) {
  
  friend_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendInfo.friend_username)
}
inline ::std::string* FriendInfo::mutable_friend_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendInfo.friend_username)
  return friend_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_friend_username() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendInfo.friend_username)
  
  return friend_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_friend_username(::std::string* friend_username) {
  if (friend_username != NULL) {
    
  } else {
    
  }
  friend_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendInfo.friend_username)
}

// string friend_nick = 3;
inline void FriendInfo::clear_friend_nick() {
  friend_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendInfo::friend_nick() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.friend_nick)
  return friend_nick_.GetNoArena();
}
inline void FriendInfo::set_friend_nick(const ::std::string& value) {
  
  friend_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.friend_nick)
}
#if LANG_CXX11
inline void FriendInfo::set_friend_nick(::std::string&& value) {
  
  friend_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendInfo.friend_nick)
}
#endif
inline void FriendInfo::set_friend_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friend_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendInfo.friend_nick)
}
inline void FriendInfo::set_friend_nick(const char* value, size_t size) {
  
  friend_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendInfo.friend_nick)
}
inline ::std::string* FriendInfo::mutable_friend_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendInfo.friend_nick)
  return friend_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_friend_nick() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendInfo.friend_nick)
  
  return friend_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_friend_nick(::std::string* friend_nick) {
  if (friend_nick != NULL) {
    
  } else {
    
  }
  friend_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_nick);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendInfo.friend_nick)
}

// string friend_display = 4;
inline void FriendInfo::clear_friend_display() {
  friend_display_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendInfo::friend_display() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.friend_display)
  return friend_display_.GetNoArena();
}
inline void FriendInfo::set_friend_display(const ::std::string& value) {
  
  friend_display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.friend_display)
}
#if LANG_CXX11
inline void FriendInfo::set_friend_display(::std::string&& value) {
  
  friend_display_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendInfo.friend_display)
}
#endif
inline void FriendInfo::set_friend_display(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friend_display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendInfo.friend_display)
}
inline void FriendInfo::set_friend_display(const char* value, size_t size) {
  
  friend_display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendInfo.friend_display)
}
inline ::std::string* FriendInfo::mutable_friend_display() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendInfo.friend_display)
  return friend_display_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_friend_display() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendInfo.friend_display)
  
  return friend_display_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_friend_display(::std::string* friend_display) {
  if (friend_display != NULL) {
    
  } else {
    
  }
  friend_display_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_display);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendInfo.friend_display)
}

// string original_link = 5;
inline void FriendInfo::clear_original_link() {
  original_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendInfo::original_link() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.original_link)
  return original_link_.GetNoArena();
}
inline void FriendInfo::set_original_link(const ::std::string& value) {
  
  original_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.original_link)
}
#if LANG_CXX11
inline void FriendInfo::set_original_link(::std::string&& value) {
  
  original_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendInfo.original_link)
}
#endif
inline void FriendInfo::set_original_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  original_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendInfo.original_link)
}
inline void FriendInfo::set_original_link(const char* value, size_t size) {
  
  original_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendInfo.original_link)
}
inline ::std::string* FriendInfo::mutable_original_link() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendInfo.original_link)
  return original_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_original_link() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendInfo.original_link)
  
  return original_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_original_link(::std::string* original_link) {
  if (original_link != NULL) {
    
  } else {
    
  }
  original_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_link);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendInfo.original_link)
}

// string thumbnail_link = 6;
inline void FriendInfo::clear_thumbnail_link() {
  thumbnail_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendInfo::thumbnail_link() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.thumbnail_link)
  return thumbnail_link_.GetNoArena();
}
inline void FriendInfo::set_thumbnail_link(const ::std::string& value) {
  
  thumbnail_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.thumbnail_link)
}
#if LANG_CXX11
inline void FriendInfo::set_thumbnail_link(::std::string&& value) {
  
  thumbnail_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendInfo.thumbnail_link)
}
#endif
inline void FriendInfo::set_thumbnail_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendInfo.thumbnail_link)
}
inline void FriendInfo::set_thumbnail_link(const char* value, size_t size) {
  
  thumbnail_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendInfo.thumbnail_link)
}
inline ::std::string* FriendInfo::mutable_thumbnail_link() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendInfo.thumbnail_link)
  return thumbnail_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_thumbnail_link() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendInfo.thumbnail_link)
  
  return thumbnail_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_thumbnail_link(::std::string* thumbnail_link) {
  if (thumbnail_link != NULL) {
    
  } else {
    
  }
  thumbnail_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_link);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendInfo.thumbnail_link)
}

// .common.enumeration.EEnable enable = 7;
inline void FriendInfo::clear_enable() {
  enable_ = 0;
}
inline ::common::enumeration::EEnable FriendInfo::enable() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.enable)
  return static_cast< ::common::enumeration::EEnable >(enable_);
}
inline void FriendInfo::set_enable(::common::enumeration::EEnable value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.enable)
}

// uint64 modified = 8;
inline void FriendInfo::clear_modified() {
  modified_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FriendInfo::modified() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.modified)
  return modified_;
}
inline void FriendInfo::set_modified(::google::protobuf::uint64 value) {
  
  modified_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.modified)
}

// .common.enumeration.ESilent silent = 9;
inline void FriendInfo::clear_silent() {
  silent_ = 0;
}
inline ::common::enumeration::ESilent FriendInfo::silent() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.silent)
  return static_cast< ::common::enumeration::ESilent >(silent_);
}
inline void FriendInfo::set_silent(::common::enumeration::ESilent value) {
  
  silent_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.silent)
}

// string phone = 10;
inline void FriendInfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendInfo::phone() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.phone)
  return phone_.GetNoArena();
}
inline void FriendInfo::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.phone)
}
#if LANG_CXX11
inline void FriendInfo::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendInfo.phone)
}
#endif
inline void FriendInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendInfo.phone)
}
inline void FriendInfo::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendInfo.phone)
}
inline ::std::string* FriendInfo::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendInfo.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_phone() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendInfo.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendInfo.phone)
}

// bool join_fleet = 11;
inline void FriendInfo::clear_join_fleet() {
  join_fleet_ = false;
}
inline bool FriendInfo::join_fleet() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.join_fleet)
  return join_fleet_;
}
inline void FriendInfo::set_join_fleet(bool value) {
  
  join_fleet_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.join_fleet)
}

// string friend_nick_pinyin = 12;
inline void FriendInfo::clear_friend_nick_pinyin() {
  friend_nick_pinyin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendInfo::friend_nick_pinyin() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.friend_nick_pinyin)
  return friend_nick_pinyin_.GetNoArena();
}
inline void FriendInfo::set_friend_nick_pinyin(const ::std::string& value) {
  
  friend_nick_pinyin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.friend_nick_pinyin)
}
#if LANG_CXX11
inline void FriendInfo::set_friend_nick_pinyin(::std::string&& value) {
  
  friend_nick_pinyin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendInfo.friend_nick_pinyin)
}
#endif
inline void FriendInfo::set_friend_nick_pinyin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friend_nick_pinyin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendInfo.friend_nick_pinyin)
}
inline void FriendInfo::set_friend_nick_pinyin(const char* value, size_t size) {
  
  friend_nick_pinyin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendInfo.friend_nick_pinyin)
}
inline ::std::string* FriendInfo::mutable_friend_nick_pinyin() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendInfo.friend_nick_pinyin)
  return friend_nick_pinyin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_friend_nick_pinyin() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendInfo.friend_nick_pinyin)
  
  return friend_nick_pinyin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_friend_nick_pinyin(::std::string* friend_nick_pinyin) {
  if (friend_nick_pinyin != NULL) {
    
  } else {
    
  }
  friend_nick_pinyin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_nick_pinyin);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendInfo.friend_nick_pinyin)
}

// string friend_display_pinyin = 13;
inline void FriendInfo::clear_friend_display_pinyin() {
  friend_display_pinyin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendInfo::friend_display_pinyin() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.friend_display_pinyin)
  return friend_display_pinyin_.GetNoArena();
}
inline void FriendInfo::set_friend_display_pinyin(const ::std::string& value) {
  
  friend_display_pinyin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.friend_display_pinyin)
}
#if LANG_CXX11
inline void FriendInfo::set_friend_display_pinyin(::std::string&& value) {
  
  friend_display_pinyin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendInfo.friend_display_pinyin)
}
#endif
inline void FriendInfo::set_friend_display_pinyin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friend_display_pinyin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendInfo.friend_display_pinyin)
}
inline void FriendInfo::set_friend_display_pinyin(const char* value, size_t size) {
  
  friend_display_pinyin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendInfo.friend_display_pinyin)
}
inline ::std::string* FriendInfo::mutable_friend_display_pinyin() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendInfo.friend_display_pinyin)
  return friend_display_pinyin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_friend_display_pinyin() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendInfo.friend_display_pinyin)
  
  return friend_display_pinyin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_friend_display_pinyin(::std::string* friend_display_pinyin) {
  if (friend_display_pinyin != NULL) {
    
  } else {
    
  }
  friend_display_pinyin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_display_pinyin);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendInfo.friend_display_pinyin)
}

// string friend_display_pinyin_blank = 14;
inline void FriendInfo::clear_friend_display_pinyin_blank() {
  friend_display_pinyin_blank_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendInfo::friend_display_pinyin_blank() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.friend_display_pinyin_blank)
  return friend_display_pinyin_blank_.GetNoArena();
}
inline void FriendInfo::set_friend_display_pinyin_blank(const ::std::string& value) {
  
  friend_display_pinyin_blank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.friend_display_pinyin_blank)
}
#if LANG_CXX11
inline void FriendInfo::set_friend_display_pinyin_blank(::std::string&& value) {
  
  friend_display_pinyin_blank_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendInfo.friend_display_pinyin_blank)
}
#endif
inline void FriendInfo::set_friend_display_pinyin_blank(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friend_display_pinyin_blank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendInfo.friend_display_pinyin_blank)
}
inline void FriendInfo::set_friend_display_pinyin_blank(const char* value, size_t size) {
  
  friend_display_pinyin_blank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendInfo.friend_display_pinyin_blank)
}
inline ::std::string* FriendInfo::mutable_friend_display_pinyin_blank() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendInfo.friend_display_pinyin_blank)
  return friend_display_pinyin_blank_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_friend_display_pinyin_blank() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendInfo.friend_display_pinyin_blank)
  
  return friend_display_pinyin_blank_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_friend_display_pinyin_blank(::std::string* friend_display_pinyin_blank) {
  if (friend_display_pinyin_blank != NULL) {
    
  } else {
    
  }
  friend_display_pinyin_blank_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_display_pinyin_blank);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendInfo.friend_display_pinyin_blank)
}

// string friend_nick_pinyin_blank = 15;
inline void FriendInfo::clear_friend_nick_pinyin_blank() {
  friend_nick_pinyin_blank_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendInfo::friend_nick_pinyin_blank() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.friend_nick_pinyin_blank)
  return friend_nick_pinyin_blank_.GetNoArena();
}
inline void FriendInfo::set_friend_nick_pinyin_blank(const ::std::string& value) {
  
  friend_nick_pinyin_blank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.friend_nick_pinyin_blank)
}
#if LANG_CXX11
inline void FriendInfo::set_friend_nick_pinyin_blank(::std::string&& value) {
  
  friend_nick_pinyin_blank_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendInfo.friend_nick_pinyin_blank)
}
#endif
inline void FriendInfo::set_friend_nick_pinyin_blank(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friend_nick_pinyin_blank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendInfo.friend_nick_pinyin_blank)
}
inline void FriendInfo::set_friend_nick_pinyin_blank(const char* value, size_t size) {
  
  friend_nick_pinyin_blank_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendInfo.friend_nick_pinyin_blank)
}
inline ::std::string* FriendInfo::mutable_friend_nick_pinyin_blank() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendInfo.friend_nick_pinyin_blank)
  return friend_nick_pinyin_blank_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_friend_nick_pinyin_blank() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendInfo.friend_nick_pinyin_blank)
  
  return friend_nick_pinyin_blank_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_friend_nick_pinyin_blank(::std::string* friend_nick_pinyin_blank) {
  if (friend_nick_pinyin_blank != NULL) {
    
  } else {
    
  }
  friend_nick_pinyin_blank_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_nick_pinyin_blank);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendInfo.friend_nick_pinyin_blank)
}

// string serial_name = 16;
inline void FriendInfo::clear_serial_name() {
  serial_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendInfo::serial_name() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.serial_name)
  return serial_name_.GetNoArena();
}
inline void FriendInfo::set_serial_name(const ::std::string& value) {
  
  serial_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.serial_name)
}
#if LANG_CXX11
inline void FriendInfo::set_serial_name(::std::string&& value) {
  
  serial_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendInfo.serial_name)
}
#endif
inline void FriendInfo::set_serial_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendInfo.serial_name)
}
inline void FriendInfo::set_serial_name(const char* value, size_t size) {
  
  serial_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendInfo.serial_name)
}
inline ::std::string* FriendInfo::mutable_serial_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendInfo.serial_name)
  return serial_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendInfo::release_serial_name() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendInfo.serial_name)
  
  return serial_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendInfo::set_allocated_serial_name(::std::string* serial_name) {
  if (serial_name != NULL) {
    
  } else {
    
  }
  serial_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_name);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendInfo.serial_name)
}

// uint32 member_type = 17;
inline void FriendInfo::clear_member_type() {
  member_type_ = 0u;
}
inline ::google::protobuf::uint32 FriendInfo::member_type() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.member_type)
  return member_type_;
}
inline void FriendInfo::set_member_type(::google::protobuf::uint32 value) {
  
  member_type_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.member_type)
}

// uint32 user_enable = 18;
inline void FriendInfo::clear_user_enable() {
  user_enable_ = 0u;
}
inline ::google::protobuf::uint32 FriendInfo::user_enable() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendInfo.user_enable)
  return user_enable_;
}
inline void FriendInfo::set_user_enable(::google::protobuf::uint32 value) {
  
  user_enable_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.FriendInfo.user_enable)
}

// -------------------------------------------------------------------

// FriendRequest

// string req_id = 1;
inline void FriendRequest::clear_req_id() {
  req_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRequest::req_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendRequest.req_id)
  return req_id_.GetNoArena();
}
inline void FriendRequest::set_req_id(const ::std::string& value) {
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendRequest.req_id)
}
#if LANG_CXX11
inline void FriendRequest::set_req_id(::std::string&& value) {
  
  req_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendRequest.req_id)
}
#endif
inline void FriendRequest::set_req_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendRequest.req_id)
}
inline void FriendRequest::set_req_id(const char* value, size_t size) {
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendRequest.req_id)
}
inline ::std::string* FriendRequest::mutable_req_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendRequest.req_id)
  return req_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRequest::release_req_id() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendRequest.req_id)
  
  return req_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRequest::set_allocated_req_id(::std::string* req_id) {
  if (req_id != NULL) {
    
  } else {
    
  }
  req_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), req_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendRequest.req_id)
}

// string appkey = 2;
inline void FriendRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendRequest.appkey)
  return appkey_.GetNoArena();
}
inline void FriendRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendRequest.appkey)
}
#if LANG_CXX11
inline void FriendRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendRequest.appkey)
}
#endif
inline void FriendRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendRequest.appkey)
}
inline void FriendRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendRequest.appkey)
}
inline ::std::string* FriendRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendRequest.appkey)
}

// string from_username = 3;
inline void FriendRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendRequest.from_username)
  return from_username_.GetNoArena();
}
inline void FriendRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendRequest.from_username)
}
#if LANG_CXX11
inline void FriendRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendRequest.from_username)
}
#endif
inline void FriendRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendRequest.from_username)
}
inline void FriendRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendRequest.from_username)
}
inline ::std::string* FriendRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendRequest.from_username)
}

// string from_nick = 4;
inline void FriendRequest::clear_from_nick() {
  from_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRequest::from_nick() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendRequest.from_nick)
  return from_nick_.GetNoArena();
}
inline void FriendRequest::set_from_nick(const ::std::string& value) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendRequest.from_nick)
}
#if LANG_CXX11
inline void FriendRequest::set_from_nick(::std::string&& value) {
  
  from_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendRequest.from_nick)
}
#endif
inline void FriendRequest::set_from_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendRequest.from_nick)
}
inline void FriendRequest::set_from_nick(const char* value, size_t size) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendRequest.from_nick)
}
inline ::std::string* FriendRequest::mutable_from_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendRequest.from_nick)
  return from_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRequest::release_from_nick() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendRequest.from_nick)
  
  return from_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRequest::set_allocated_from_nick(::std::string* from_nick) {
  if (from_nick != NULL) {
    
  } else {
    
  }
  from_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_nick);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendRequest.from_nick)
}

// .outer.friends.EFriendRequestType req_type = 5;
inline void FriendRequest::clear_req_type() {
  req_type_ = 0;
}
inline ::outer::friends::EFriendRequestType FriendRequest::req_type() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendRequest.req_type)
  return static_cast< ::outer::friends::EFriendRequestType >(req_type_);
}
inline void FriendRequest::set_req_type(::outer::friends::EFriendRequestType value) {
  
  req_type_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.FriendRequest.req_type)
}

// string remark = 6;
inline void FriendRequest::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRequest::remark() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendRequest.remark)
  return remark_.GetNoArena();
}
inline void FriendRequest::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendRequest.remark)
}
#if LANG_CXX11
inline void FriendRequest::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendRequest.remark)
}
#endif
inline void FriendRequest::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendRequest.remark)
}
inline void FriendRequest::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendRequest.remark)
}
inline ::std::string* FriendRequest::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendRequest.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRequest::release_remark() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendRequest.remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRequest::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendRequest.remark)
}

// uint64 modified = 7;
inline void FriendRequest::clear_modified() {
  modified_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FriendRequest::modified() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendRequest.modified)
  return modified_;
}
inline void FriendRequest::set_modified(::google::protobuf::uint64 value) {
  
  modified_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.FriendRequest.modified)
}

// string original_link = 8;
inline void FriendRequest::clear_original_link() {
  original_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRequest::original_link() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendRequest.original_link)
  return original_link_.GetNoArena();
}
inline void FriendRequest::set_original_link(const ::std::string& value) {
  
  original_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendRequest.original_link)
}
#if LANG_CXX11
inline void FriendRequest::set_original_link(::std::string&& value) {
  
  original_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendRequest.original_link)
}
#endif
inline void FriendRequest::set_original_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  original_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendRequest.original_link)
}
inline void FriendRequest::set_original_link(const char* value, size_t size) {
  
  original_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendRequest.original_link)
}
inline ::std::string* FriendRequest::mutable_original_link() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendRequest.original_link)
  return original_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRequest::release_original_link() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendRequest.original_link)
  
  return original_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRequest::set_allocated_original_link(::std::string* original_link) {
  if (original_link != NULL) {
    
  } else {
    
  }
  original_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), original_link);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendRequest.original_link)
}

// string thumbnail_link = 9;
inline void FriendRequest::clear_thumbnail_link() {
  thumbnail_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendRequest::thumbnail_link() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendRequest.thumbnail_link)
  return thumbnail_link_.GetNoArena();
}
inline void FriendRequest::set_thumbnail_link(const ::std::string& value) {
  
  thumbnail_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendRequest.thumbnail_link)
}
#if LANG_CXX11
inline void FriendRequest::set_thumbnail_link(::std::string&& value) {
  
  thumbnail_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendRequest.thumbnail_link)
}
#endif
inline void FriendRequest::set_thumbnail_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendRequest.thumbnail_link)
}
inline void FriendRequest::set_thumbnail_link(const char* value, size_t size) {
  
  thumbnail_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendRequest.thumbnail_link)
}
inline ::std::string* FriendRequest::mutable_thumbnail_link() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendRequest.thumbnail_link)
  return thumbnail_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendRequest::release_thumbnail_link() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendRequest.thumbnail_link)
  
  return thumbnail_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendRequest::set_allocated_thumbnail_link(::std::string* thumbnail_link) {
  if (thumbnail_link != NULL) {
    
  } else {
    
  }
  thumbnail_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_link);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendRequest.thumbnail_link)
}

// uint64 created = 10;
inline void FriendRequest::clear_created() {
  created_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FriendRequest::created() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendRequest.created)
  return created_;
}
inline void FriendRequest::set_created(::google::protobuf::uint64 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.FriendRequest.created)
}

// uint32 state = 11;
inline void FriendRequest::clear_state() {
  state_ = 0u;
}
inline ::google::protobuf::uint32 FriendRequest::state() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendRequest.state)
  return state_;
}
inline void FriendRequest::set_state(::google::protobuf::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.FriendRequest.state)
}

// -------------------------------------------------------------------

// FriendSignal

// string appkey = 1;
inline void FriendSignal::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendSignal::appkey() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendSignal.appkey)
  return appkey_.GetNoArena();
}
inline void FriendSignal::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendSignal.appkey)
}
#if LANG_CXX11
inline void FriendSignal::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendSignal.appkey)
}
#endif
inline void FriendSignal::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendSignal.appkey)
}
inline void FriendSignal::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendSignal.appkey)
}
inline ::std::string* FriendSignal::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendSignal.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendSignal::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendSignal.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendSignal::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendSignal.appkey)
}

// string from_username = 2;
inline void FriendSignal::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendSignal::from_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendSignal.from_username)
  return from_username_.GetNoArena();
}
inline void FriendSignal::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendSignal.from_username)
}
#if LANG_CXX11
inline void FriendSignal::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendSignal.from_username)
}
#endif
inline void FriendSignal::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendSignal.from_username)
}
inline void FriendSignal::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendSignal.from_username)
}
inline ::std::string* FriendSignal::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendSignal.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendSignal::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendSignal.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendSignal::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendSignal.from_username)
}

// string from_nick = 3;
inline void FriendSignal::clear_from_nick() {
  from_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendSignal::from_nick() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendSignal.from_nick)
  return from_nick_.GetNoArena();
}
inline void FriendSignal::set_from_nick(const ::std::string& value) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendSignal.from_nick)
}
#if LANG_CXX11
inline void FriendSignal::set_from_nick(::std::string&& value) {
  
  from_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendSignal.from_nick)
}
#endif
inline void FriendSignal::set_from_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendSignal.from_nick)
}
inline void FriendSignal::set_from_nick(const char* value, size_t size) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendSignal.from_nick)
}
inline ::std::string* FriendSignal::mutable_from_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendSignal.from_nick)
  return from_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendSignal::release_from_nick() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendSignal.from_nick)
  
  return from_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendSignal::set_allocated_from_nick(::std::string* from_nick) {
  if (from_nick != NULL) {
    
  } else {
    
  }
  from_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_nick);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendSignal.from_nick)
}

// .outer.friends.EFriendSignalType friend_signal_type = 4;
inline void FriendSignal::clear_friend_signal_type() {
  friend_signal_type_ = 0;
}
inline ::outer::friends::EFriendSignalType FriendSignal::friend_signal_type() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendSignal.friend_signal_type)
  return static_cast< ::outer::friends::EFriendSignalType >(friend_signal_type_);
}
inline void FriendSignal::set_friend_signal_type(::outer::friends::EFriendSignalType value) {
  
  friend_signal_type_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.FriendSignal.friend_signal_type)
}

// string remark = 5;
inline void FriendSignal::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FriendSignal::remark() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendSignal.remark)
  return remark_.GetNoArena();
}
inline void FriendSignal::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.FriendSignal.remark)
}
#if LANG_CXX11
inline void FriendSignal::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.FriendSignal.remark)
}
#endif
inline void FriendSignal::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.FriendSignal.remark)
}
inline void FriendSignal::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.FriendSignal.remark)
}
inline ::std::string* FriendSignal::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.FriendSignal.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FriendSignal::release_remark() {
  // @@protoc_insertion_point(field_release:outer.friends.FriendSignal.remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FriendSignal::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.FriendSignal.remark)
}

// uint64 created = 6;
inline void FriendSignal::clear_created() {
  created_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FriendSignal::created() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendSignal.created)
  return created_;
}
inline void FriendSignal::set_created(::google::protobuf::uint64 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.FriendSignal.created)
}

// uint64 modified = 7;
inline void FriendSignal::clear_modified() {
  modified_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FriendSignal::modified() const {
  // @@protoc_insertion_point(field_get:outer.friends.FriendSignal.modified)
  return modified_;
}
inline void FriendSignal::set_modified(::google::protobuf::uint64 value) {
  
  modified_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.FriendSignal.modified)
}

// -------------------------------------------------------------------

// ApplyFriendRequest

// string from_username = 1;
inline void ApplyFriendRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ApplyFriendRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.ApplyFriendRequest.from_username)
  return from_username_.GetNoArena();
}
inline void ApplyFriendRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.ApplyFriendRequest.from_username)
}
#if LANG_CXX11
inline void ApplyFriendRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.ApplyFriendRequest.from_username)
}
#endif
inline void ApplyFriendRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.ApplyFriendRequest.from_username)
}
inline void ApplyFriendRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.ApplyFriendRequest.from_username)
}
inline ::std::string* ApplyFriendRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.ApplyFriendRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ApplyFriendRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.friends.ApplyFriendRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApplyFriendRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.ApplyFriendRequest.from_username)
}

// string appkey = 2;
inline void ApplyFriendRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ApplyFriendRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.friends.ApplyFriendRequest.appkey)
  return appkey_.GetNoArena();
}
inline void ApplyFriendRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.ApplyFriendRequest.appkey)
}
#if LANG_CXX11
inline void ApplyFriendRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.ApplyFriendRequest.appkey)
}
#endif
inline void ApplyFriendRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.ApplyFriendRequest.appkey)
}
inline void ApplyFriendRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.ApplyFriendRequest.appkey)
}
inline ::std::string* ApplyFriendRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.ApplyFriendRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ApplyFriendRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.friends.ApplyFriendRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApplyFriendRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.ApplyFriendRequest.appkey)
}

// string to_username = 3;
inline void ApplyFriendRequest::clear_to_username() {
  to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ApplyFriendRequest::to_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.ApplyFriendRequest.to_username)
  return to_username_.GetNoArena();
}
inline void ApplyFriendRequest::set_to_username(const ::std::string& value) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.ApplyFriendRequest.to_username)
}
#if LANG_CXX11
inline void ApplyFriendRequest::set_to_username(::std::string&& value) {
  
  to_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.ApplyFriendRequest.to_username)
}
#endif
inline void ApplyFriendRequest::set_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.ApplyFriendRequest.to_username)
}
inline void ApplyFriendRequest::set_to_username(const char* value, size_t size) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.ApplyFriendRequest.to_username)
}
inline ::std::string* ApplyFriendRequest::mutable_to_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.ApplyFriendRequest.to_username)
  return to_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ApplyFriendRequest::release_to_username() {
  // @@protoc_insertion_point(field_release:outer.friends.ApplyFriendRequest.to_username)
  
  return to_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApplyFriendRequest::set_allocated_to_username(::std::string* to_username) {
  if (to_username != NULL) {
    
  } else {
    
  }
  to_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.ApplyFriendRequest.to_username)
}

// string remark = 4;
inline void ApplyFriendRequest::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ApplyFriendRequest::remark() const {
  // @@protoc_insertion_point(field_get:outer.friends.ApplyFriendRequest.remark)
  return remark_.GetNoArena();
}
inline void ApplyFriendRequest::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.ApplyFriendRequest.remark)
}
#if LANG_CXX11
inline void ApplyFriendRequest::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.ApplyFriendRequest.remark)
}
#endif
inline void ApplyFriendRequest::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.ApplyFriendRequest.remark)
}
inline void ApplyFriendRequest::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.ApplyFriendRequest.remark)
}
inline ::std::string* ApplyFriendRequest::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.ApplyFriendRequest.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ApplyFriendRequest::release_remark() {
  // @@protoc_insertion_point(field_release:outer.friends.ApplyFriendRequest.remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApplyFriendRequest::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.ApplyFriendRequest.remark)
}

// string msg_id = 5;
inline void ApplyFriendRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ApplyFriendRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.ApplyFriendRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void ApplyFriendRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.ApplyFriendRequest.msg_id)
}
#if LANG_CXX11
inline void ApplyFriendRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.ApplyFriendRequest.msg_id)
}
#endif
inline void ApplyFriendRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.ApplyFriendRequest.msg_id)
}
inline void ApplyFriendRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.ApplyFriendRequest.msg_id)
}
inline ::std::string* ApplyFriendRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.ApplyFriendRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ApplyFriendRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.ApplyFriendRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApplyFriendRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.ApplyFriendRequest.msg_id)
}

// .common.enumeration.EClientType from_client_type = 6;
inline void ApplyFriendRequest::clear_from_client_type() {
  from_client_type_ = 0;
}
inline ::common::enumeration::EClientType ApplyFriendRequest::from_client_type() const {
  // @@protoc_insertion_point(field_get:outer.friends.ApplyFriendRequest.from_client_type)
  return static_cast< ::common::enumeration::EClientType >(from_client_type_);
}
inline void ApplyFriendRequest::set_from_client_type(::common::enumeration::EClientType value) {
  
  from_client_type_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.ApplyFriendRequest.from_client_type)
}

// -------------------------------------------------------------------

// ApplyFriendResponse

// .common.errcode.EErrorCode ret = 1;
inline void ApplyFriendResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode ApplyFriendResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.friends.ApplyFriendResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void ApplyFriendResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.ApplyFriendResponse.ret)
}

// string msg_id = 2;
inline void ApplyFriendResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ApplyFriendResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.ApplyFriendResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void ApplyFriendResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.ApplyFriendResponse.msg_id)
}
#if LANG_CXX11
inline void ApplyFriendResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.ApplyFriendResponse.msg_id)
}
#endif
inline void ApplyFriendResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.ApplyFriendResponse.msg_id)
}
inline void ApplyFriendResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.ApplyFriendResponse.msg_id)
}
inline ::std::string* ApplyFriendResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.ApplyFriendResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ApplyFriendResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.ApplyFriendResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ApplyFriendResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.ApplyFriendResponse.msg_id)
}

// -------------------------------------------------------------------

// AgreeFriendRequest

// string req_id = 1;
inline void AgreeFriendRequest::clear_req_id() {
  req_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AgreeFriendRequest::req_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.AgreeFriendRequest.req_id)
  return req_id_.GetNoArena();
}
inline void AgreeFriendRequest::set_req_id(const ::std::string& value) {
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.AgreeFriendRequest.req_id)
}
#if LANG_CXX11
inline void AgreeFriendRequest::set_req_id(::std::string&& value) {
  
  req_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.AgreeFriendRequest.req_id)
}
#endif
inline void AgreeFriendRequest::set_req_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.AgreeFriendRequest.req_id)
}
inline void AgreeFriendRequest::set_req_id(const char* value, size_t size) {
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.AgreeFriendRequest.req_id)
}
inline ::std::string* AgreeFriendRequest::mutable_req_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.AgreeFriendRequest.req_id)
  return req_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgreeFriendRequest::release_req_id() {
  // @@protoc_insertion_point(field_release:outer.friends.AgreeFriendRequest.req_id)
  
  return req_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgreeFriendRequest::set_allocated_req_id(::std::string* req_id) {
  if (req_id != NULL) {
    
  } else {
    
  }
  req_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), req_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.AgreeFriendRequest.req_id)
}

// string from_username = 2;
inline void AgreeFriendRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AgreeFriendRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.AgreeFriendRequest.from_username)
  return from_username_.GetNoArena();
}
inline void AgreeFriendRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.AgreeFriendRequest.from_username)
}
#if LANG_CXX11
inline void AgreeFriendRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.AgreeFriendRequest.from_username)
}
#endif
inline void AgreeFriendRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.AgreeFriendRequest.from_username)
}
inline void AgreeFriendRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.AgreeFriendRequest.from_username)
}
inline ::std::string* AgreeFriendRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.AgreeFriendRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgreeFriendRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.friends.AgreeFriendRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgreeFriendRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.AgreeFriendRequest.from_username)
}

// string appkey = 3;
inline void AgreeFriendRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AgreeFriendRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.friends.AgreeFriendRequest.appkey)
  return appkey_.GetNoArena();
}
inline void AgreeFriendRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.AgreeFriendRequest.appkey)
}
#if LANG_CXX11
inline void AgreeFriendRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.AgreeFriendRequest.appkey)
}
#endif
inline void AgreeFriendRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.AgreeFriendRequest.appkey)
}
inline void AgreeFriendRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.AgreeFriendRequest.appkey)
}
inline ::std::string* AgreeFriendRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.AgreeFriendRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgreeFriendRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.friends.AgreeFriendRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgreeFriendRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.AgreeFriendRequest.appkey)
}

// string msg_id = 4;
inline void AgreeFriendRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AgreeFriendRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.AgreeFriendRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void AgreeFriendRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.AgreeFriendRequest.msg_id)
}
#if LANG_CXX11
inline void AgreeFriendRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.AgreeFriendRequest.msg_id)
}
#endif
inline void AgreeFriendRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.AgreeFriendRequest.msg_id)
}
inline void AgreeFriendRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.AgreeFriendRequest.msg_id)
}
inline ::std::string* AgreeFriendRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.AgreeFriendRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgreeFriendRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.AgreeFriendRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgreeFriendRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.AgreeFriendRequest.msg_id)
}

// .common.enumeration.EClientType from_client_type = 6;
inline void AgreeFriendRequest::clear_from_client_type() {
  from_client_type_ = 0;
}
inline ::common::enumeration::EClientType AgreeFriendRequest::from_client_type() const {
  // @@protoc_insertion_point(field_get:outer.friends.AgreeFriendRequest.from_client_type)
  return static_cast< ::common::enumeration::EClientType >(from_client_type_);
}
inline void AgreeFriendRequest::set_from_client_type(::common::enumeration::EClientType value) {
  
  from_client_type_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.AgreeFriendRequest.from_client_type)
}

// -------------------------------------------------------------------

// AgreeFriendResponse

// .common.errcode.EErrorCode ret = 1;
inline void AgreeFriendResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode AgreeFriendResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.friends.AgreeFriendResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void AgreeFriendResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.AgreeFriendResponse.ret)
}

// string msg_id = 2;
inline void AgreeFriendResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AgreeFriendResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.AgreeFriendResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void AgreeFriendResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.AgreeFriendResponse.msg_id)
}
#if LANG_CXX11
inline void AgreeFriendResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.AgreeFriendResponse.msg_id)
}
#endif
inline void AgreeFriendResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.AgreeFriendResponse.msg_id)
}
inline void AgreeFriendResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.AgreeFriendResponse.msg_id)
}
inline ::std::string* AgreeFriendResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.AgreeFriendResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgreeFriendResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.AgreeFriendResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgreeFriendResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.AgreeFriendResponse.msg_id)
}

// -------------------------------------------------------------------

// RefuseFriendRequest

// string req_id = 1;
inline void RefuseFriendRequest::clear_req_id() {
  req_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefuseFriendRequest::req_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.RefuseFriendRequest.req_id)
  return req_id_.GetNoArena();
}
inline void RefuseFriendRequest::set_req_id(const ::std::string& value) {
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.RefuseFriendRequest.req_id)
}
#if LANG_CXX11
inline void RefuseFriendRequest::set_req_id(::std::string&& value) {
  
  req_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.RefuseFriendRequest.req_id)
}
#endif
inline void RefuseFriendRequest::set_req_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.RefuseFriendRequest.req_id)
}
inline void RefuseFriendRequest::set_req_id(const char* value, size_t size) {
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.RefuseFriendRequest.req_id)
}
inline ::std::string* RefuseFriendRequest::mutable_req_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.RefuseFriendRequest.req_id)
  return req_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefuseFriendRequest::release_req_id() {
  // @@protoc_insertion_point(field_release:outer.friends.RefuseFriendRequest.req_id)
  
  return req_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefuseFriendRequest::set_allocated_req_id(::std::string* req_id) {
  if (req_id != NULL) {
    
  } else {
    
  }
  req_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), req_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.RefuseFriendRequest.req_id)
}

// string from_username = 2;
inline void RefuseFriendRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefuseFriendRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.RefuseFriendRequest.from_username)
  return from_username_.GetNoArena();
}
inline void RefuseFriendRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.RefuseFriendRequest.from_username)
}
#if LANG_CXX11
inline void RefuseFriendRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.RefuseFriendRequest.from_username)
}
#endif
inline void RefuseFriendRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.RefuseFriendRequest.from_username)
}
inline void RefuseFriendRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.RefuseFriendRequest.from_username)
}
inline ::std::string* RefuseFriendRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.RefuseFriendRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefuseFriendRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.friends.RefuseFriendRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefuseFriendRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.RefuseFriendRequest.from_username)
}

// string appkey = 3;
inline void RefuseFriendRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefuseFriendRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.friends.RefuseFriendRequest.appkey)
  return appkey_.GetNoArena();
}
inline void RefuseFriendRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.RefuseFriendRequest.appkey)
}
#if LANG_CXX11
inline void RefuseFriendRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.RefuseFriendRequest.appkey)
}
#endif
inline void RefuseFriendRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.RefuseFriendRequest.appkey)
}
inline void RefuseFriendRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.RefuseFriendRequest.appkey)
}
inline ::std::string* RefuseFriendRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.RefuseFriendRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefuseFriendRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.friends.RefuseFriendRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefuseFriendRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.RefuseFriendRequest.appkey)
}

// string msg_id = 4;
inline void RefuseFriendRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefuseFriendRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.RefuseFriendRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void RefuseFriendRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.RefuseFriendRequest.msg_id)
}
#if LANG_CXX11
inline void RefuseFriendRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.RefuseFriendRequest.msg_id)
}
#endif
inline void RefuseFriendRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.RefuseFriendRequest.msg_id)
}
inline void RefuseFriendRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.RefuseFriendRequest.msg_id)
}
inline ::std::string* RefuseFriendRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.RefuseFriendRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefuseFriendRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.RefuseFriendRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefuseFriendRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.RefuseFriendRequest.msg_id)
}

// string remark = 5;
inline void RefuseFriendRequest::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefuseFriendRequest::remark() const {
  // @@protoc_insertion_point(field_get:outer.friends.RefuseFriendRequest.remark)
  return remark_.GetNoArena();
}
inline void RefuseFriendRequest::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.RefuseFriendRequest.remark)
}
#if LANG_CXX11
inline void RefuseFriendRequest::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.RefuseFriendRequest.remark)
}
#endif
inline void RefuseFriendRequest::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.RefuseFriendRequest.remark)
}
inline void RefuseFriendRequest::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.RefuseFriendRequest.remark)
}
inline ::std::string* RefuseFriendRequest::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.RefuseFriendRequest.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefuseFriendRequest::release_remark() {
  // @@protoc_insertion_point(field_release:outer.friends.RefuseFriendRequest.remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefuseFriendRequest::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.RefuseFriendRequest.remark)
}

// .common.enumeration.EClientType from_client_type = 6;
inline void RefuseFriendRequest::clear_from_client_type() {
  from_client_type_ = 0;
}
inline ::common::enumeration::EClientType RefuseFriendRequest::from_client_type() const {
  // @@protoc_insertion_point(field_get:outer.friends.RefuseFriendRequest.from_client_type)
  return static_cast< ::common::enumeration::EClientType >(from_client_type_);
}
inline void RefuseFriendRequest::set_from_client_type(::common::enumeration::EClientType value) {
  
  from_client_type_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.RefuseFriendRequest.from_client_type)
}

// -------------------------------------------------------------------

// RefuseFriendResponse

// .common.errcode.EErrorCode ret = 1;
inline void RefuseFriendResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode RefuseFriendResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.friends.RefuseFriendResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void RefuseFriendResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.RefuseFriendResponse.ret)
}

// string msg_id = 2;
inline void RefuseFriendResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefuseFriendResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.RefuseFriendResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void RefuseFriendResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.RefuseFriendResponse.msg_id)
}
#if LANG_CXX11
inline void RefuseFriendResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.RefuseFriendResponse.msg_id)
}
#endif
inline void RefuseFriendResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.RefuseFriendResponse.msg_id)
}
inline void RefuseFriendResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.RefuseFriendResponse.msg_id)
}
inline ::std::string* RefuseFriendResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.RefuseFriendResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefuseFriendResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.RefuseFriendResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefuseFriendResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.RefuseFriendResponse.msg_id)
}

// -------------------------------------------------------------------

// RemoveFriendRequest

// string from_username = 1;
inline void RemoveFriendRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveFriendRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.RemoveFriendRequest.from_username)
  return from_username_.GetNoArena();
}
inline void RemoveFriendRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.RemoveFriendRequest.from_username)
}
#if LANG_CXX11
inline void RemoveFriendRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.RemoveFriendRequest.from_username)
}
#endif
inline void RemoveFriendRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.RemoveFriendRequest.from_username)
}
inline void RemoveFriendRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.RemoveFriendRequest.from_username)
}
inline ::std::string* RemoveFriendRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.RemoveFriendRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveFriendRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.friends.RemoveFriendRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveFriendRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.RemoveFriendRequest.from_username)
}

// string appkey = 2;
inline void RemoveFriendRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveFriendRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.friends.RemoveFriendRequest.appkey)
  return appkey_.GetNoArena();
}
inline void RemoveFriendRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.RemoveFriendRequest.appkey)
}
#if LANG_CXX11
inline void RemoveFriendRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.RemoveFriendRequest.appkey)
}
#endif
inline void RemoveFriendRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.RemoveFriendRequest.appkey)
}
inline void RemoveFriendRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.RemoveFriendRequest.appkey)
}
inline ::std::string* RemoveFriendRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.RemoveFriendRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveFriendRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.friends.RemoveFriendRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveFriendRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.RemoveFriendRequest.appkey)
}

// string to_username = 3;
inline void RemoveFriendRequest::clear_to_username() {
  to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveFriendRequest::to_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.RemoveFriendRequest.to_username)
  return to_username_.GetNoArena();
}
inline void RemoveFriendRequest::set_to_username(const ::std::string& value) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.RemoveFriendRequest.to_username)
}
#if LANG_CXX11
inline void RemoveFriendRequest::set_to_username(::std::string&& value) {
  
  to_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.RemoveFriendRequest.to_username)
}
#endif
inline void RemoveFriendRequest::set_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.RemoveFriendRequest.to_username)
}
inline void RemoveFriendRequest::set_to_username(const char* value, size_t size) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.RemoveFriendRequest.to_username)
}
inline ::std::string* RemoveFriendRequest::mutable_to_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.RemoveFriendRequest.to_username)
  return to_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveFriendRequest::release_to_username() {
  // @@protoc_insertion_point(field_release:outer.friends.RemoveFriendRequest.to_username)
  
  return to_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveFriendRequest::set_allocated_to_username(::std::string* to_username) {
  if (to_username != NULL) {
    
  } else {
    
  }
  to_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.RemoveFriendRequest.to_username)
}

// string msg_id = 4;
inline void RemoveFriendRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveFriendRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.RemoveFriendRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void RemoveFriendRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.RemoveFriendRequest.msg_id)
}
#if LANG_CXX11
inline void RemoveFriendRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.RemoveFriendRequest.msg_id)
}
#endif
inline void RemoveFriendRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.RemoveFriendRequest.msg_id)
}
inline void RemoveFriendRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.RemoveFriendRequest.msg_id)
}
inline ::std::string* RemoveFriendRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.RemoveFriendRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveFriendRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.RemoveFriendRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveFriendRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.RemoveFriendRequest.msg_id)
}

// .common.enumeration.EClientType from_client_type = 6;
inline void RemoveFriendRequest::clear_from_client_type() {
  from_client_type_ = 0;
}
inline ::common::enumeration::EClientType RemoveFriendRequest::from_client_type() const {
  // @@protoc_insertion_point(field_get:outer.friends.RemoveFriendRequest.from_client_type)
  return static_cast< ::common::enumeration::EClientType >(from_client_type_);
}
inline void RemoveFriendRequest::set_from_client_type(::common::enumeration::EClientType value) {
  
  from_client_type_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.RemoveFriendRequest.from_client_type)
}

// -------------------------------------------------------------------

// RemoveFriendResponse

// .common.errcode.EErrorCode ret = 1;
inline void RemoveFriendResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode RemoveFriendResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.friends.RemoveFriendResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void RemoveFriendResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.RemoveFriendResponse.ret)
}

// string msg_id = 2;
inline void RemoveFriendResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveFriendResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.RemoveFriendResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void RemoveFriendResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.RemoveFriendResponse.msg_id)
}
#if LANG_CXX11
inline void RemoveFriendResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.RemoveFriendResponse.msg_id)
}
#endif
inline void RemoveFriendResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.RemoveFriendResponse.msg_id)
}
inline void RemoveFriendResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.RemoveFriendResponse.msg_id)
}
inline ::std::string* RemoveFriendResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.RemoveFriendResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveFriendResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.RemoveFriendResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveFriendResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.RemoveFriendResponse.msg_id)
}

// -------------------------------------------------------------------

// SyncFriendRequest

// string username = 1;
inline void SyncFriendRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncFriendRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.friends.SyncFriendRequest.username)
  return username_.GetNoArena();
}
inline void SyncFriendRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.SyncFriendRequest.username)
}
#if LANG_CXX11
inline void SyncFriendRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.SyncFriendRequest.username)
}
#endif
inline void SyncFriendRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.SyncFriendRequest.username)
}
inline void SyncFriendRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.SyncFriendRequest.username)
}
inline ::std::string* SyncFriendRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.SyncFriendRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncFriendRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.friends.SyncFriendRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncFriendRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.SyncFriendRequest.username)
}

// string appkey = 2;
inline void SyncFriendRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncFriendRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.friends.SyncFriendRequest.appkey)
  return appkey_.GetNoArena();
}
inline void SyncFriendRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.SyncFriendRequest.appkey)
}
#if LANG_CXX11
inline void SyncFriendRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.SyncFriendRequest.appkey)
}
#endif
inline void SyncFriendRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.SyncFriendRequest.appkey)
}
inline void SyncFriendRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.SyncFriendRequest.appkey)
}
inline ::std::string* SyncFriendRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.SyncFriendRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncFriendRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.friends.SyncFriendRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncFriendRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.SyncFriendRequest.appkey)
}

// uint64 friend_modified = 3;
inline void SyncFriendRequest::clear_friend_modified() {
  friend_modified_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SyncFriendRequest::friend_modified() const {
  // @@protoc_insertion_point(field_get:outer.friends.SyncFriendRequest.friend_modified)
  return friend_modified_;
}
inline void SyncFriendRequest::set_friend_modified(::google::protobuf::uint64 value) {
  
  friend_modified_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.SyncFriendRequest.friend_modified)
}

// uint64 friend_req_modified = 4;
inline void SyncFriendRequest::clear_friend_req_modified() {
  friend_req_modified_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SyncFriendRequest::friend_req_modified() const {
  // @@protoc_insertion_point(field_get:outer.friends.SyncFriendRequest.friend_req_modified)
  return friend_req_modified_;
}
inline void SyncFriendRequest::set_friend_req_modified(::google::protobuf::uint64 value) {
  
  friend_req_modified_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.SyncFriendRequest.friend_req_modified)
}

// uint64 friend_signal_modified = 6;
inline void SyncFriendRequest::clear_friend_signal_modified() {
  friend_signal_modified_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SyncFriendRequest::friend_signal_modified() const {
  // @@protoc_insertion_point(field_get:outer.friends.SyncFriendRequest.friend_signal_modified)
  return friend_signal_modified_;
}
inline void SyncFriendRequest::set_friend_signal_modified(::google::protobuf::uint64 value) {
  
  friend_signal_modified_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.SyncFriendRequest.friend_signal_modified)
}

// string msg_id = 5;
inline void SyncFriendRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncFriendRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.SyncFriendRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void SyncFriendRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.SyncFriendRequest.msg_id)
}
#if LANG_CXX11
inline void SyncFriendRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.SyncFriendRequest.msg_id)
}
#endif
inline void SyncFriendRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.SyncFriendRequest.msg_id)
}
inline void SyncFriendRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.SyncFriendRequest.msg_id)
}
inline ::std::string* SyncFriendRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.SyncFriendRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncFriendRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.SyncFriendRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncFriendRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.SyncFriendRequest.msg_id)
}

// bool first_sync = 7;
inline void SyncFriendRequest::clear_first_sync() {
  first_sync_ = false;
}
inline bool SyncFriendRequest::first_sync() const {
  // @@protoc_insertion_point(field_get:outer.friends.SyncFriendRequest.first_sync)
  return first_sync_;
}
inline void SyncFriendRequest::set_first_sync(bool value) {
  
  first_sync_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.SyncFriendRequest.first_sync)
}

// -------------------------------------------------------------------

// SyncFriendResponse

// .common.errcode.EErrorCode ret = 1;
inline void SyncFriendResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode SyncFriendResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.friends.SyncFriendResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void SyncFriendResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.SyncFriendResponse.ret)
}

// repeated .outer.friends.FriendInfo friend_info = 2;
inline int SyncFriendResponse::friend_info_size() const {
  return friend_info_.size();
}
inline void SyncFriendResponse::clear_friend_info() {
  friend_info_.Clear();
}
inline const ::outer::friends::FriendInfo& SyncFriendResponse::friend_info(int index) const {
  // @@protoc_insertion_point(field_get:outer.friends.SyncFriendResponse.friend_info)
  return friend_info_.Get(index);
}
inline ::outer::friends::FriendInfo* SyncFriendResponse::mutable_friend_info(int index) {
  // @@protoc_insertion_point(field_mutable:outer.friends.SyncFriendResponse.friend_info)
  return friend_info_.Mutable(index);
}
inline ::outer::friends::FriendInfo* SyncFriendResponse::add_friend_info() {
  // @@protoc_insertion_point(field_add:outer.friends.SyncFriendResponse.friend_info)
  return friend_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendInfo >*
SyncFriendResponse::mutable_friend_info() {
  // @@protoc_insertion_point(field_mutable_list:outer.friends.SyncFriendResponse.friend_info)
  return &friend_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendInfo >&
SyncFriendResponse::friend_info() const {
  // @@protoc_insertion_point(field_list:outer.friends.SyncFriendResponse.friend_info)
  return friend_info_;
}

// repeated .outer.friends.FriendRequest friend_request = 3;
inline int SyncFriendResponse::friend_request_size() const {
  return friend_request_.size();
}
inline void SyncFriendResponse::clear_friend_request() {
  friend_request_.Clear();
}
inline const ::outer::friends::FriendRequest& SyncFriendResponse::friend_request(int index) const {
  // @@protoc_insertion_point(field_get:outer.friends.SyncFriendResponse.friend_request)
  return friend_request_.Get(index);
}
inline ::outer::friends::FriendRequest* SyncFriendResponse::mutable_friend_request(int index) {
  // @@protoc_insertion_point(field_mutable:outer.friends.SyncFriendResponse.friend_request)
  return friend_request_.Mutable(index);
}
inline ::outer::friends::FriendRequest* SyncFriendResponse::add_friend_request() {
  // @@protoc_insertion_point(field_add:outer.friends.SyncFriendResponse.friend_request)
  return friend_request_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendRequest >*
SyncFriendResponse::mutable_friend_request() {
  // @@protoc_insertion_point(field_mutable_list:outer.friends.SyncFriendResponse.friend_request)
  return &friend_request_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendRequest >&
SyncFriendResponse::friend_request() const {
  // @@protoc_insertion_point(field_list:outer.friends.SyncFriendResponse.friend_request)
  return friend_request_;
}

// repeated .outer.friends.FriendSignal friend_signal = 4;
inline int SyncFriendResponse::friend_signal_size() const {
  return friend_signal_.size();
}
inline void SyncFriendResponse::clear_friend_signal() {
  friend_signal_.Clear();
}
inline const ::outer::friends::FriendSignal& SyncFriendResponse::friend_signal(int index) const {
  // @@protoc_insertion_point(field_get:outer.friends.SyncFriendResponse.friend_signal)
  return friend_signal_.Get(index);
}
inline ::outer::friends::FriendSignal* SyncFriendResponse::mutable_friend_signal(int index) {
  // @@protoc_insertion_point(field_mutable:outer.friends.SyncFriendResponse.friend_signal)
  return friend_signal_.Mutable(index);
}
inline ::outer::friends::FriendSignal* SyncFriendResponse::add_friend_signal() {
  // @@protoc_insertion_point(field_add:outer.friends.SyncFriendResponse.friend_signal)
  return friend_signal_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendSignal >*
SyncFriendResponse::mutable_friend_signal() {
  // @@protoc_insertion_point(field_mutable_list:outer.friends.SyncFriendResponse.friend_signal)
  return &friend_signal_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendSignal >&
SyncFriendResponse::friend_signal() const {
  // @@protoc_insertion_point(field_list:outer.friends.SyncFriendResponse.friend_signal)
  return friend_signal_;
}

// string msg_id = 5;
inline void SyncFriendResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncFriendResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.SyncFriendResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void SyncFriendResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.SyncFriendResponse.msg_id)
}
#if LANG_CXX11
inline void SyncFriendResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.SyncFriendResponse.msg_id)
}
#endif
inline void SyncFriendResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.SyncFriendResponse.msg_id)
}
inline void SyncFriendResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.SyncFriendResponse.msg_id)
}
inline ::std::string* SyncFriendResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.SyncFriendResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncFriendResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.SyncFriendResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncFriendResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.SyncFriendResponse.msg_id)
}

// -------------------------------------------------------------------

// UpdateFriendInfoRequest

// string appkey = 1;
inline void UpdateFriendInfoRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateFriendInfoRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.friends.UpdateFriendInfoRequest.appkey)
  return appkey_.GetNoArena();
}
inline void UpdateFriendInfoRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.UpdateFriendInfoRequest.appkey)
}
#if LANG_CXX11
inline void UpdateFriendInfoRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.UpdateFriendInfoRequest.appkey)
}
#endif
inline void UpdateFriendInfoRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.UpdateFriendInfoRequest.appkey)
}
inline void UpdateFriendInfoRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.UpdateFriendInfoRequest.appkey)
}
inline ::std::string* UpdateFriendInfoRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.UpdateFriendInfoRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateFriendInfoRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.friends.UpdateFriendInfoRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateFriendInfoRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.UpdateFriendInfoRequest.appkey)
}

// string from_username = 2;
inline void UpdateFriendInfoRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateFriendInfoRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.UpdateFriendInfoRequest.from_username)
  return from_username_.GetNoArena();
}
inline void UpdateFriendInfoRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.UpdateFriendInfoRequest.from_username)
}
#if LANG_CXX11
inline void UpdateFriendInfoRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.UpdateFriendInfoRequest.from_username)
}
#endif
inline void UpdateFriendInfoRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.UpdateFriendInfoRequest.from_username)
}
inline void UpdateFriendInfoRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.UpdateFriendInfoRequest.from_username)
}
inline ::std::string* UpdateFriendInfoRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.UpdateFriendInfoRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateFriendInfoRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.friends.UpdateFriendInfoRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateFriendInfoRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.UpdateFriendInfoRequest.from_username)
}

// string friend_username = 3;
inline void UpdateFriendInfoRequest::clear_friend_username() {
  friend_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateFriendInfoRequest::friend_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.UpdateFriendInfoRequest.friend_username)
  return friend_username_.GetNoArena();
}
inline void UpdateFriendInfoRequest::set_friend_username(const ::std::string& value) {
  
  friend_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.UpdateFriendInfoRequest.friend_username)
}
#if LANG_CXX11
inline void UpdateFriendInfoRequest::set_friend_username(::std::string&& value) {
  
  friend_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.UpdateFriendInfoRequest.friend_username)
}
#endif
inline void UpdateFriendInfoRequest::set_friend_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friend_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.UpdateFriendInfoRequest.friend_username)
}
inline void UpdateFriendInfoRequest::set_friend_username(const char* value, size_t size) {
  
  friend_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.UpdateFriendInfoRequest.friend_username)
}
inline ::std::string* UpdateFriendInfoRequest::mutable_friend_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.UpdateFriendInfoRequest.friend_username)
  return friend_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateFriendInfoRequest::release_friend_username() {
  // @@protoc_insertion_point(field_release:outer.friends.UpdateFriendInfoRequest.friend_username)
  
  return friend_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateFriendInfoRequest::set_allocated_friend_username(::std::string* friend_username) {
  if (friend_username != NULL) {
    
  } else {
    
  }
  friend_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.UpdateFriendInfoRequest.friend_username)
}

// string friend_display = 4;
inline void UpdateFriendInfoRequest::clear_friend_display() {
  friend_display_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateFriendInfoRequest::friend_display() const {
  // @@protoc_insertion_point(field_get:outer.friends.UpdateFriendInfoRequest.friend_display)
  return friend_display_.GetNoArena();
}
inline void UpdateFriendInfoRequest::set_friend_display(const ::std::string& value) {
  
  friend_display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.UpdateFriendInfoRequest.friend_display)
}
#if LANG_CXX11
inline void UpdateFriendInfoRequest::set_friend_display(::std::string&& value) {
  
  friend_display_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.UpdateFriendInfoRequest.friend_display)
}
#endif
inline void UpdateFriendInfoRequest::set_friend_display(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friend_display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.UpdateFriendInfoRequest.friend_display)
}
inline void UpdateFriendInfoRequest::set_friend_display(const char* value, size_t size) {
  
  friend_display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.UpdateFriendInfoRequest.friend_display)
}
inline ::std::string* UpdateFriendInfoRequest::mutable_friend_display() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.UpdateFriendInfoRequest.friend_display)
  return friend_display_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateFriendInfoRequest::release_friend_display() {
  // @@protoc_insertion_point(field_release:outer.friends.UpdateFriendInfoRequest.friend_display)
  
  return friend_display_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateFriendInfoRequest::set_allocated_friend_display(::std::string* friend_display) {
  if (friend_display != NULL) {
    
  } else {
    
  }
  friend_display_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_display);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.UpdateFriendInfoRequest.friend_display)
}

// string msg_id = 5;
inline void UpdateFriendInfoRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateFriendInfoRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.UpdateFriendInfoRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void UpdateFriendInfoRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.UpdateFriendInfoRequest.msg_id)
}
#if LANG_CXX11
inline void UpdateFriendInfoRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.UpdateFriendInfoRequest.msg_id)
}
#endif
inline void UpdateFriendInfoRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.UpdateFriendInfoRequest.msg_id)
}
inline void UpdateFriendInfoRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.UpdateFriendInfoRequest.msg_id)
}
inline ::std::string* UpdateFriendInfoRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.UpdateFriendInfoRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateFriendInfoRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.UpdateFriendInfoRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateFriendInfoRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.UpdateFriendInfoRequest.msg_id)
}

// .common.enumeration.EClientType from_client_type = 6;
inline void UpdateFriendInfoRequest::clear_from_client_type() {
  from_client_type_ = 0;
}
inline ::common::enumeration::EClientType UpdateFriendInfoRequest::from_client_type() const {
  // @@protoc_insertion_point(field_get:outer.friends.UpdateFriendInfoRequest.from_client_type)
  return static_cast< ::common::enumeration::EClientType >(from_client_type_);
}
inline void UpdateFriendInfoRequest::set_from_client_type(::common::enumeration::EClientType value) {
  
  from_client_type_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.UpdateFriendInfoRequest.from_client_type)
}

// -------------------------------------------------------------------

// UpdateFriendInfoResponse

// .common.errcode.EErrorCode ret = 1;
inline void UpdateFriendInfoResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode UpdateFriendInfoResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.friends.UpdateFriendInfoResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void UpdateFriendInfoResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.UpdateFriendInfoResponse.ret)
}

// string msg_id = 2;
inline void UpdateFriendInfoResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateFriendInfoResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.UpdateFriendInfoResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void UpdateFriendInfoResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.UpdateFriendInfoResponse.msg_id)
}
#if LANG_CXX11
inline void UpdateFriendInfoResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.UpdateFriendInfoResponse.msg_id)
}
#endif
inline void UpdateFriendInfoResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.UpdateFriendInfoResponse.msg_id)
}
inline void UpdateFriendInfoResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.UpdateFriendInfoResponse.msg_id)
}
inline ::std::string* UpdateFriendInfoResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.UpdateFriendInfoResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateFriendInfoResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.UpdateFriendInfoResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateFriendInfoResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.UpdateFriendInfoResponse.msg_id)
}

// -------------------------------------------------------------------

// UpdateSilentRequest

// string appkey = 1;
inline void UpdateSilentRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateSilentRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.friends.UpdateSilentRequest.appkey)
  return appkey_.GetNoArena();
}
inline void UpdateSilentRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.UpdateSilentRequest.appkey)
}
#if LANG_CXX11
inline void UpdateSilentRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.UpdateSilentRequest.appkey)
}
#endif
inline void UpdateSilentRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.UpdateSilentRequest.appkey)
}
inline void UpdateSilentRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.UpdateSilentRequest.appkey)
}
inline ::std::string* UpdateSilentRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.UpdateSilentRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateSilentRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.friends.UpdateSilentRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateSilentRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.UpdateSilentRequest.appkey)
}

// string from_username = 2;
inline void UpdateSilentRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateSilentRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.UpdateSilentRequest.from_username)
  return from_username_.GetNoArena();
}
inline void UpdateSilentRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.UpdateSilentRequest.from_username)
}
#if LANG_CXX11
inline void UpdateSilentRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.UpdateSilentRequest.from_username)
}
#endif
inline void UpdateSilentRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.UpdateSilentRequest.from_username)
}
inline void UpdateSilentRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.UpdateSilentRequest.from_username)
}
inline ::std::string* UpdateSilentRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.UpdateSilentRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateSilentRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.friends.UpdateSilentRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateSilentRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.UpdateSilentRequest.from_username)
}

// string friend_username = 3;
inline void UpdateSilentRequest::clear_friend_username() {
  friend_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateSilentRequest::friend_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.UpdateSilentRequest.friend_username)
  return friend_username_.GetNoArena();
}
inline void UpdateSilentRequest::set_friend_username(const ::std::string& value) {
  
  friend_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.UpdateSilentRequest.friend_username)
}
#if LANG_CXX11
inline void UpdateSilentRequest::set_friend_username(::std::string&& value) {
  
  friend_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.UpdateSilentRequest.friend_username)
}
#endif
inline void UpdateSilentRequest::set_friend_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friend_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.UpdateSilentRequest.friend_username)
}
inline void UpdateSilentRequest::set_friend_username(const char* value, size_t size) {
  
  friend_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.UpdateSilentRequest.friend_username)
}
inline ::std::string* UpdateSilentRequest::mutable_friend_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.UpdateSilentRequest.friend_username)
  return friend_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateSilentRequest::release_friend_username() {
  // @@protoc_insertion_point(field_release:outer.friends.UpdateSilentRequest.friend_username)
  
  return friend_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateSilentRequest::set_allocated_friend_username(::std::string* friend_username) {
  if (friend_username != NULL) {
    
  } else {
    
  }
  friend_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.UpdateSilentRequest.friend_username)
}

// .common.enumeration.ESilent friend_silent = 4;
inline void UpdateSilentRequest::clear_friend_silent() {
  friend_silent_ = 0;
}
inline ::common::enumeration::ESilent UpdateSilentRequest::friend_silent() const {
  // @@protoc_insertion_point(field_get:outer.friends.UpdateSilentRequest.friend_silent)
  return static_cast< ::common::enumeration::ESilent >(friend_silent_);
}
inline void UpdateSilentRequest::set_friend_silent(::common::enumeration::ESilent value) {
  
  friend_silent_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.UpdateSilentRequest.friend_silent)
}

// string msg_id = 5;
inline void UpdateSilentRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateSilentRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.UpdateSilentRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void UpdateSilentRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.UpdateSilentRequest.msg_id)
}
#if LANG_CXX11
inline void UpdateSilentRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.UpdateSilentRequest.msg_id)
}
#endif
inline void UpdateSilentRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.UpdateSilentRequest.msg_id)
}
inline void UpdateSilentRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.UpdateSilentRequest.msg_id)
}
inline ::std::string* UpdateSilentRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.UpdateSilentRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateSilentRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.UpdateSilentRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateSilentRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.UpdateSilentRequest.msg_id)
}

// .common.enumeration.EClientType from_client_type = 6;
inline void UpdateSilentRequest::clear_from_client_type() {
  from_client_type_ = 0;
}
inline ::common::enumeration::EClientType UpdateSilentRequest::from_client_type() const {
  // @@protoc_insertion_point(field_get:outer.friends.UpdateSilentRequest.from_client_type)
  return static_cast< ::common::enumeration::EClientType >(from_client_type_);
}
inline void UpdateSilentRequest::set_from_client_type(::common::enumeration::EClientType value) {
  
  from_client_type_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.UpdateSilentRequest.from_client_type)
}

// -------------------------------------------------------------------

// UpdateSilentRespone

// .common.errcode.EErrorCode ret = 1;
inline void UpdateSilentRespone::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode UpdateSilentRespone::ret() const {
  // @@protoc_insertion_point(field_get:outer.friends.UpdateSilentRespone.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void UpdateSilentRespone::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.UpdateSilentRespone.ret)
}

// string msg_id = 2;
inline void UpdateSilentRespone::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateSilentRespone::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.UpdateSilentRespone.msg_id)
  return msg_id_.GetNoArena();
}
inline void UpdateSilentRespone::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.UpdateSilentRespone.msg_id)
}
#if LANG_CXX11
inline void UpdateSilentRespone::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.UpdateSilentRespone.msg_id)
}
#endif
inline void UpdateSilentRespone::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.UpdateSilentRespone.msg_id)
}
inline void UpdateSilentRespone::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.UpdateSilentRespone.msg_id)
}
inline ::std::string* UpdateSilentRespone::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.UpdateSilentRespone.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateSilentRespone::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.UpdateSilentRespone.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateSilentRespone::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.UpdateSilentRespone.msg_id)
}

// -------------------------------------------------------------------

// GetFriendListRequest

// string appkey = 1;
inline void GetFriendListRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFriendListRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.friends.GetFriendListRequest.appkey)
  return appkey_.GetNoArena();
}
inline void GetFriendListRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.GetFriendListRequest.appkey)
}
#if LANG_CXX11
inline void GetFriendListRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.GetFriendListRequest.appkey)
}
#endif
inline void GetFriendListRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.GetFriendListRequest.appkey)
}
inline void GetFriendListRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.GetFriendListRequest.appkey)
}
inline ::std::string* GetFriendListRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.GetFriendListRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFriendListRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.friends.GetFriendListRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFriendListRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.GetFriendListRequest.appkey)
}

// string username = 2;
inline void GetFriendListRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFriendListRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.friends.GetFriendListRequest.username)
  return username_.GetNoArena();
}
inline void GetFriendListRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.GetFriendListRequest.username)
}
#if LANG_CXX11
inline void GetFriendListRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.GetFriendListRequest.username)
}
#endif
inline void GetFriendListRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.GetFriendListRequest.username)
}
inline void GetFriendListRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.GetFriendListRequest.username)
}
inline ::std::string* GetFriendListRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.GetFriendListRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFriendListRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.friends.GetFriendListRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFriendListRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.GetFriendListRequest.username)
}

// int32 page_index = 3;
inline void GetFriendListRequest::clear_page_index() {
  page_index_ = 0;
}
inline ::google::protobuf::int32 GetFriendListRequest::page_index() const {
  // @@protoc_insertion_point(field_get:outer.friends.GetFriendListRequest.page_index)
  return page_index_;
}
inline void GetFriendListRequest::set_page_index(::google::protobuf::int32 value) {
  
  page_index_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.GetFriendListRequest.page_index)
}

// int32 page_size = 4;
inline void GetFriendListRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 GetFriendListRequest::page_size() const {
  // @@protoc_insertion_point(field_get:outer.friends.GetFriendListRequest.page_size)
  return page_size_;
}
inline void GetFriendListRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.GetFriendListRequest.page_size)
}

// -------------------------------------------------------------------

// GetFriendListResponse

// .common.errcode.EErrorCode ret = 1;
inline void GetFriendListResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode GetFriendListResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.friends.GetFriendListResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void GetFriendListResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.GetFriendListResponse.ret)
}

// repeated .outer.friends.FriendInfo friend_info = 2;
inline int GetFriendListResponse::friend_info_size() const {
  return friend_info_.size();
}
inline void GetFriendListResponse::clear_friend_info() {
  friend_info_.Clear();
}
inline const ::outer::friends::FriendInfo& GetFriendListResponse::friend_info(int index) const {
  // @@protoc_insertion_point(field_get:outer.friends.GetFriendListResponse.friend_info)
  return friend_info_.Get(index);
}
inline ::outer::friends::FriendInfo* GetFriendListResponse::mutable_friend_info(int index) {
  // @@protoc_insertion_point(field_mutable:outer.friends.GetFriendListResponse.friend_info)
  return friend_info_.Mutable(index);
}
inline ::outer::friends::FriendInfo* GetFriendListResponse::add_friend_info() {
  // @@protoc_insertion_point(field_add:outer.friends.GetFriendListResponse.friend_info)
  return friend_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendInfo >*
GetFriendListResponse::mutable_friend_info() {
  // @@protoc_insertion_point(field_mutable_list:outer.friends.GetFriendListResponse.friend_info)
  return &friend_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::friends::FriendInfo >&
GetFriendListResponse::friend_info() const {
  // @@protoc_insertion_point(field_list:outer.friends.GetFriendListResponse.friend_info)
  return friend_info_;
}

// int64 total = 3;
inline void GetFriendListResponse::clear_total() {
  total_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetFriendListResponse::total() const {
  // @@protoc_insertion_point(field_get:outer.friends.GetFriendListResponse.total)
  return total_;
}
inline void GetFriendListResponse::set_total(::google::protobuf::int64 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.GetFriendListResponse.total)
}

// -------------------------------------------------------------------

// HasReadFriendRequest

// repeated string req_id = 1;
inline int HasReadFriendRequest::req_id_size() const {
  return req_id_.size();
}
inline void HasReadFriendRequest::clear_req_id() {
  req_id_.Clear();
}
inline const ::std::string& HasReadFriendRequest::req_id(int index) const {
  // @@protoc_insertion_point(field_get:outer.friends.HasReadFriendRequest.req_id)
  return req_id_.Get(index);
}
inline ::std::string* HasReadFriendRequest::mutable_req_id(int index) {
  // @@protoc_insertion_point(field_mutable:outer.friends.HasReadFriendRequest.req_id)
  return req_id_.Mutable(index);
}
inline void HasReadFriendRequest::set_req_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.friends.HasReadFriendRequest.req_id)
  req_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HasReadFriendRequest::set_req_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.friends.HasReadFriendRequest.req_id)
  req_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HasReadFriendRequest::set_req_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  req_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.friends.HasReadFriendRequest.req_id)
}
inline void HasReadFriendRequest::set_req_id(int index, const char* value, size_t size) {
  req_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.friends.HasReadFriendRequest.req_id)
}
inline ::std::string* HasReadFriendRequest::add_req_id() {
  // @@protoc_insertion_point(field_add_mutable:outer.friends.HasReadFriendRequest.req_id)
  return req_id_.Add();
}
inline void HasReadFriendRequest::add_req_id(const ::std::string& value) {
  req_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.friends.HasReadFriendRequest.req_id)
}
#if LANG_CXX11
inline void HasReadFriendRequest::add_req_id(::std::string&& value) {
  req_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.friends.HasReadFriendRequest.req_id)
}
#endif
inline void HasReadFriendRequest::add_req_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  req_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.friends.HasReadFriendRequest.req_id)
}
inline void HasReadFriendRequest::add_req_id(const char* value, size_t size) {
  req_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.friends.HasReadFriendRequest.req_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HasReadFriendRequest::req_id() const {
  // @@protoc_insertion_point(field_list:outer.friends.HasReadFriendRequest.req_id)
  return req_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HasReadFriendRequest::mutable_req_id() {
  // @@protoc_insertion_point(field_mutable_list:outer.friends.HasReadFriendRequest.req_id)
  return &req_id_;
}

// string appkey = 2;
inline void HasReadFriendRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HasReadFriendRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.friends.HasReadFriendRequest.appkey)
  return appkey_.GetNoArena();
}
inline void HasReadFriendRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.HasReadFriendRequest.appkey)
}
#if LANG_CXX11
inline void HasReadFriendRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.HasReadFriendRequest.appkey)
}
#endif
inline void HasReadFriendRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.HasReadFriendRequest.appkey)
}
inline void HasReadFriendRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.HasReadFriendRequest.appkey)
}
inline ::std::string* HasReadFriendRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.HasReadFriendRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HasReadFriendRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.friends.HasReadFriendRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HasReadFriendRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.HasReadFriendRequest.appkey)
}

// string username = 3;
inline void HasReadFriendRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HasReadFriendRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.friends.HasReadFriendRequest.username)
  return username_.GetNoArena();
}
inline void HasReadFriendRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.HasReadFriendRequest.username)
}
#if LANG_CXX11
inline void HasReadFriendRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.HasReadFriendRequest.username)
}
#endif
inline void HasReadFriendRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.HasReadFriendRequest.username)
}
inline void HasReadFriendRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.HasReadFriendRequest.username)
}
inline ::std::string* HasReadFriendRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.HasReadFriendRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HasReadFriendRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.friends.HasReadFriendRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HasReadFriendRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.HasReadFriendRequest.username)
}

// string msg_id = 4;
inline void HasReadFriendRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HasReadFriendRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.HasReadFriendRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void HasReadFriendRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.HasReadFriendRequest.msg_id)
}
#if LANG_CXX11
inline void HasReadFriendRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.HasReadFriendRequest.msg_id)
}
#endif
inline void HasReadFriendRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.HasReadFriendRequest.msg_id)
}
inline void HasReadFriendRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.HasReadFriendRequest.msg_id)
}
inline ::std::string* HasReadFriendRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.HasReadFriendRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HasReadFriendRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.HasReadFriendRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HasReadFriendRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.HasReadFriendRequest.msg_id)
}

// .common.enumeration.EClientType from_client_type = 5;
inline void HasReadFriendRequest::clear_from_client_type() {
  from_client_type_ = 0;
}
inline ::common::enumeration::EClientType HasReadFriendRequest::from_client_type() const {
  // @@protoc_insertion_point(field_get:outer.friends.HasReadFriendRequest.from_client_type)
  return static_cast< ::common::enumeration::EClientType >(from_client_type_);
}
inline void HasReadFriendRequest::set_from_client_type(::common::enumeration::EClientType value) {
  
  from_client_type_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.HasReadFriendRequest.from_client_type)
}

// -------------------------------------------------------------------

// HasReadFriendResponse

// .common.errcode.EErrorCode ret = 1;
inline void HasReadFriendResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode HasReadFriendResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.friends.HasReadFriendResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void HasReadFriendResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.HasReadFriendResponse.ret)
}

// string msg_id = 2;
inline void HasReadFriendResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HasReadFriendResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.HasReadFriendResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void HasReadFriendResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.HasReadFriendResponse.msg_id)
}
#if LANG_CXX11
inline void HasReadFriendResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.HasReadFriendResponse.msg_id)
}
#endif
inline void HasReadFriendResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.HasReadFriendResponse.msg_id)
}
inline void HasReadFriendResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.HasReadFriendResponse.msg_id)
}
inline ::std::string* HasReadFriendResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.HasReadFriendResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HasReadFriendResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.HasReadFriendResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HasReadFriendResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.HasReadFriendResponse.msg_id)
}

// -------------------------------------------------------------------

// HasIgnoreFriendRequest

// repeated string req_id = 1;
inline int HasIgnoreFriendRequest::req_id_size() const {
  return req_id_.size();
}
inline void HasIgnoreFriendRequest::clear_req_id() {
  req_id_.Clear();
}
inline const ::std::string& HasIgnoreFriendRequest::req_id(int index) const {
  // @@protoc_insertion_point(field_get:outer.friends.HasIgnoreFriendRequest.req_id)
  return req_id_.Get(index);
}
inline ::std::string* HasIgnoreFriendRequest::mutable_req_id(int index) {
  // @@protoc_insertion_point(field_mutable:outer.friends.HasIgnoreFriendRequest.req_id)
  return req_id_.Mutable(index);
}
inline void HasIgnoreFriendRequest::set_req_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.friends.HasIgnoreFriendRequest.req_id)
  req_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HasIgnoreFriendRequest::set_req_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.friends.HasIgnoreFriendRequest.req_id)
  req_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HasIgnoreFriendRequest::set_req_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  req_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.friends.HasIgnoreFriendRequest.req_id)
}
inline void HasIgnoreFriendRequest::set_req_id(int index, const char* value, size_t size) {
  req_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.friends.HasIgnoreFriendRequest.req_id)
}
inline ::std::string* HasIgnoreFriendRequest::add_req_id() {
  // @@protoc_insertion_point(field_add_mutable:outer.friends.HasIgnoreFriendRequest.req_id)
  return req_id_.Add();
}
inline void HasIgnoreFriendRequest::add_req_id(const ::std::string& value) {
  req_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.friends.HasIgnoreFriendRequest.req_id)
}
#if LANG_CXX11
inline void HasIgnoreFriendRequest::add_req_id(::std::string&& value) {
  req_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.friends.HasIgnoreFriendRequest.req_id)
}
#endif
inline void HasIgnoreFriendRequest::add_req_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  req_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.friends.HasIgnoreFriendRequest.req_id)
}
inline void HasIgnoreFriendRequest::add_req_id(const char* value, size_t size) {
  req_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.friends.HasIgnoreFriendRequest.req_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HasIgnoreFriendRequest::req_id() const {
  // @@protoc_insertion_point(field_list:outer.friends.HasIgnoreFriendRequest.req_id)
  return req_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HasIgnoreFriendRequest::mutable_req_id() {
  // @@protoc_insertion_point(field_mutable_list:outer.friends.HasIgnoreFriendRequest.req_id)
  return &req_id_;
}

// string appkey = 2;
inline void HasIgnoreFriendRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HasIgnoreFriendRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.friends.HasIgnoreFriendRequest.appkey)
  return appkey_.GetNoArena();
}
inline void HasIgnoreFriendRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.HasIgnoreFriendRequest.appkey)
}
#if LANG_CXX11
inline void HasIgnoreFriendRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.HasIgnoreFriendRequest.appkey)
}
#endif
inline void HasIgnoreFriendRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.HasIgnoreFriendRequest.appkey)
}
inline void HasIgnoreFriendRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.HasIgnoreFriendRequest.appkey)
}
inline ::std::string* HasIgnoreFriendRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.HasIgnoreFriendRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HasIgnoreFriendRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.friends.HasIgnoreFriendRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HasIgnoreFriendRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.HasIgnoreFriendRequest.appkey)
}

// string username = 3;
inline void HasIgnoreFriendRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HasIgnoreFriendRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.friends.HasIgnoreFriendRequest.username)
  return username_.GetNoArena();
}
inline void HasIgnoreFriendRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.HasIgnoreFriendRequest.username)
}
#if LANG_CXX11
inline void HasIgnoreFriendRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.HasIgnoreFriendRequest.username)
}
#endif
inline void HasIgnoreFriendRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.HasIgnoreFriendRequest.username)
}
inline void HasIgnoreFriendRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.HasIgnoreFriendRequest.username)
}
inline ::std::string* HasIgnoreFriendRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.HasIgnoreFriendRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HasIgnoreFriendRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.friends.HasIgnoreFriendRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HasIgnoreFriendRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.HasIgnoreFriendRequest.username)
}

// string msg_id = 4;
inline void HasIgnoreFriendRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HasIgnoreFriendRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.HasIgnoreFriendRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void HasIgnoreFriendRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.HasIgnoreFriendRequest.msg_id)
}
#if LANG_CXX11
inline void HasIgnoreFriendRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.HasIgnoreFriendRequest.msg_id)
}
#endif
inline void HasIgnoreFriendRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.HasIgnoreFriendRequest.msg_id)
}
inline void HasIgnoreFriendRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.HasIgnoreFriendRequest.msg_id)
}
inline ::std::string* HasIgnoreFriendRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.HasIgnoreFriendRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HasIgnoreFriendRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.HasIgnoreFriendRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HasIgnoreFriendRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.HasIgnoreFriendRequest.msg_id)
}

// .common.enumeration.EClientType from_client_type = 5;
inline void HasIgnoreFriendRequest::clear_from_client_type() {
  from_client_type_ = 0;
}
inline ::common::enumeration::EClientType HasIgnoreFriendRequest::from_client_type() const {
  // @@protoc_insertion_point(field_get:outer.friends.HasIgnoreFriendRequest.from_client_type)
  return static_cast< ::common::enumeration::EClientType >(from_client_type_);
}
inline void HasIgnoreFriendRequest::set_from_client_type(::common::enumeration::EClientType value) {
  
  from_client_type_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.HasIgnoreFriendRequest.from_client_type)
}

// -------------------------------------------------------------------

// HasIgnoreFriendResponse

// .common.errcode.EErrorCode ret = 1;
inline void HasIgnoreFriendResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode HasIgnoreFriendResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.friends.HasIgnoreFriendResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void HasIgnoreFriendResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.HasIgnoreFriendResponse.ret)
}

// string msg_id = 2;
inline void HasIgnoreFriendResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HasIgnoreFriendResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.HasIgnoreFriendResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void HasIgnoreFriendResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.HasIgnoreFriendResponse.msg_id)
}
#if LANG_CXX11
inline void HasIgnoreFriendResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.HasIgnoreFriendResponse.msg_id)
}
#endif
inline void HasIgnoreFriendResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.HasIgnoreFriendResponse.msg_id)
}
inline void HasIgnoreFriendResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.HasIgnoreFriendResponse.msg_id)
}
inline ::std::string* HasIgnoreFriendResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.HasIgnoreFriendResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HasIgnoreFriendResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.HasIgnoreFriendResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HasIgnoreFriendResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.HasIgnoreFriendResponse.msg_id)
}

// -------------------------------------------------------------------

// BatchApplyFriendRequest

// string from_username = 1;
inline void BatchApplyFriendRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchApplyFriendRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.BatchApplyFriendRequest.from_username)
  return from_username_.GetNoArena();
}
inline void BatchApplyFriendRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendRequest.from_username)
}
#if LANG_CXX11
inline void BatchApplyFriendRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.BatchApplyFriendRequest.from_username)
}
#endif
inline void BatchApplyFriendRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.BatchApplyFriendRequest.from_username)
}
inline void BatchApplyFriendRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.BatchApplyFriendRequest.from_username)
}
inline ::std::string* BatchApplyFriendRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.BatchApplyFriendRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchApplyFriendRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.friends.BatchApplyFriendRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchApplyFriendRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.BatchApplyFriendRequest.from_username)
}

// string appkey = 2;
inline void BatchApplyFriendRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchApplyFriendRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.friends.BatchApplyFriendRequest.appkey)
  return appkey_.GetNoArena();
}
inline void BatchApplyFriendRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendRequest.appkey)
}
#if LANG_CXX11
inline void BatchApplyFriendRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.BatchApplyFriendRequest.appkey)
}
#endif
inline void BatchApplyFriendRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.BatchApplyFriendRequest.appkey)
}
inline void BatchApplyFriendRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.BatchApplyFriendRequest.appkey)
}
inline ::std::string* BatchApplyFriendRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.BatchApplyFriendRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchApplyFriendRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.friends.BatchApplyFriendRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchApplyFriendRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.BatchApplyFriendRequest.appkey)
}

// repeated string to_username = 3;
inline int BatchApplyFriendRequest::to_username_size() const {
  return to_username_.size();
}
inline void BatchApplyFriendRequest::clear_to_username() {
  to_username_.Clear();
}
inline const ::std::string& BatchApplyFriendRequest::to_username(int index) const {
  // @@protoc_insertion_point(field_get:outer.friends.BatchApplyFriendRequest.to_username)
  return to_username_.Get(index);
}
inline ::std::string* BatchApplyFriendRequest::mutable_to_username(int index) {
  // @@protoc_insertion_point(field_mutable:outer.friends.BatchApplyFriendRequest.to_username)
  return to_username_.Mutable(index);
}
inline void BatchApplyFriendRequest::set_to_username(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendRequest.to_username)
  to_username_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BatchApplyFriendRequest::set_to_username(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendRequest.to_username)
  to_username_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BatchApplyFriendRequest::set_to_username(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  to_username_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.friends.BatchApplyFriendRequest.to_username)
}
inline void BatchApplyFriendRequest::set_to_username(int index, const char* value, size_t size) {
  to_username_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.friends.BatchApplyFriendRequest.to_username)
}
inline ::std::string* BatchApplyFriendRequest::add_to_username() {
  // @@protoc_insertion_point(field_add_mutable:outer.friends.BatchApplyFriendRequest.to_username)
  return to_username_.Add();
}
inline void BatchApplyFriendRequest::add_to_username(const ::std::string& value) {
  to_username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.friends.BatchApplyFriendRequest.to_username)
}
#if LANG_CXX11
inline void BatchApplyFriendRequest::add_to_username(::std::string&& value) {
  to_username_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.friends.BatchApplyFriendRequest.to_username)
}
#endif
inline void BatchApplyFriendRequest::add_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  to_username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.friends.BatchApplyFriendRequest.to_username)
}
inline void BatchApplyFriendRequest::add_to_username(const char* value, size_t size) {
  to_username_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.friends.BatchApplyFriendRequest.to_username)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchApplyFriendRequest::to_username() const {
  // @@protoc_insertion_point(field_list:outer.friends.BatchApplyFriendRequest.to_username)
  return to_username_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BatchApplyFriendRequest::mutable_to_username() {
  // @@protoc_insertion_point(field_mutable_list:outer.friends.BatchApplyFriendRequest.to_username)
  return &to_username_;
}

// string remark = 4;
inline void BatchApplyFriendRequest::clear_remark() {
  remark_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchApplyFriendRequest::remark() const {
  // @@protoc_insertion_point(field_get:outer.friends.BatchApplyFriendRequest.remark)
  return remark_.GetNoArena();
}
inline void BatchApplyFriendRequest::set_remark(const ::std::string& value) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendRequest.remark)
}
#if LANG_CXX11
inline void BatchApplyFriendRequest::set_remark(::std::string&& value) {
  
  remark_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.BatchApplyFriendRequest.remark)
}
#endif
inline void BatchApplyFriendRequest::set_remark(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.BatchApplyFriendRequest.remark)
}
inline void BatchApplyFriendRequest::set_remark(const char* value, size_t size) {
  
  remark_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.BatchApplyFriendRequest.remark)
}
inline ::std::string* BatchApplyFriendRequest::mutable_remark() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.BatchApplyFriendRequest.remark)
  return remark_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchApplyFriendRequest::release_remark() {
  // @@protoc_insertion_point(field_release:outer.friends.BatchApplyFriendRequest.remark)
  
  return remark_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchApplyFriendRequest::set_allocated_remark(::std::string* remark) {
  if (remark != NULL) {
    
  } else {
    
  }
  remark_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remark);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.BatchApplyFriendRequest.remark)
}

// string msg_id = 5;
inline void BatchApplyFriendRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchApplyFriendRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.BatchApplyFriendRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void BatchApplyFriendRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendRequest.msg_id)
}
#if LANG_CXX11
inline void BatchApplyFriendRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.BatchApplyFriendRequest.msg_id)
}
#endif
inline void BatchApplyFriendRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.BatchApplyFriendRequest.msg_id)
}
inline void BatchApplyFriendRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.BatchApplyFriendRequest.msg_id)
}
inline ::std::string* BatchApplyFriendRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.BatchApplyFriendRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchApplyFriendRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.BatchApplyFriendRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchApplyFriendRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.BatchApplyFriendRequest.msg_id)
}

// .common.enumeration.EClientType from_client_type = 6;
inline void BatchApplyFriendRequest::clear_from_client_type() {
  from_client_type_ = 0;
}
inline ::common::enumeration::EClientType BatchApplyFriendRequest::from_client_type() const {
  // @@protoc_insertion_point(field_get:outer.friends.BatchApplyFriendRequest.from_client_type)
  return static_cast< ::common::enumeration::EClientType >(from_client_type_);
}
inline void BatchApplyFriendRequest::set_from_client_type(::common::enumeration::EClientType value) {
  
  from_client_type_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendRequest.from_client_type)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BatchApplyFriendResponse

// .common.errcode.EErrorCode ret = 1;
inline void BatchApplyFriendResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode BatchApplyFriendResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.friends.BatchApplyFriendResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void BatchApplyFriendResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendResponse.ret)
}

// string msg_id = 2;
inline void BatchApplyFriendResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchApplyFriendResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.BatchApplyFriendResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void BatchApplyFriendResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendResponse.msg_id)
}
#if LANG_CXX11
inline void BatchApplyFriendResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.BatchApplyFriendResponse.msg_id)
}
#endif
inline void BatchApplyFriendResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.BatchApplyFriendResponse.msg_id)
}
inline void BatchApplyFriendResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.BatchApplyFriendResponse.msg_id)
}
inline ::std::string* BatchApplyFriendResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.BatchApplyFriendResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchApplyFriendResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.BatchApplyFriendResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchApplyFriendResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.BatchApplyFriendResponse.msg_id)
}

// map<string, .common.errcode.EErrorCode> result = 3;
inline int BatchApplyFriendResponse::result_size() const {
  return result_.size();
}
inline void BatchApplyFriendResponse::clear_result() {
  result_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::common::errcode::EErrorCode >&
BatchApplyFriendResponse::result() const {
  // @@protoc_insertion_point(field_map:outer.friends.BatchApplyFriendResponse.result)
  return result_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::common::errcode::EErrorCode >*
BatchApplyFriendResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_map:outer.friends.BatchApplyFriendResponse.result)
  return result_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BatchApplyFriendByFromUsersRequest

// repeated string from_username = 1;
inline int BatchApplyFriendByFromUsersRequest::from_username_size() const {
  return from_username_.size();
}
inline void BatchApplyFriendByFromUsersRequest::clear_from_username() {
  from_username_.Clear();
}
inline const ::std::string& BatchApplyFriendByFromUsersRequest::from_username(int index) const {
  // @@protoc_insertion_point(field_get:outer.friends.BatchApplyFriendByFromUsersRequest.from_username)
  return from_username_.Get(index);
}
inline ::std::string* BatchApplyFriendByFromUsersRequest::mutable_from_username(int index) {
  // @@protoc_insertion_point(field_mutable:outer.friends.BatchApplyFriendByFromUsersRequest.from_username)
  return from_username_.Mutable(index);
}
inline void BatchApplyFriendByFromUsersRequest::set_from_username(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendByFromUsersRequest.from_username)
  from_username_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BatchApplyFriendByFromUsersRequest::set_from_username(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendByFromUsersRequest.from_username)
  from_username_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BatchApplyFriendByFromUsersRequest::set_from_username(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  from_username_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.friends.BatchApplyFriendByFromUsersRequest.from_username)
}
inline void BatchApplyFriendByFromUsersRequest::set_from_username(int index, const char* value, size_t size) {
  from_username_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.friends.BatchApplyFriendByFromUsersRequest.from_username)
}
inline ::std::string* BatchApplyFriendByFromUsersRequest::add_from_username() {
  // @@protoc_insertion_point(field_add_mutable:outer.friends.BatchApplyFriendByFromUsersRequest.from_username)
  return from_username_.Add();
}
inline void BatchApplyFriendByFromUsersRequest::add_from_username(const ::std::string& value) {
  from_username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.friends.BatchApplyFriendByFromUsersRequest.from_username)
}
#if LANG_CXX11
inline void BatchApplyFriendByFromUsersRequest::add_from_username(::std::string&& value) {
  from_username_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.friends.BatchApplyFriendByFromUsersRequest.from_username)
}
#endif
inline void BatchApplyFriendByFromUsersRequest::add_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  from_username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.friends.BatchApplyFriendByFromUsersRequest.from_username)
}
inline void BatchApplyFriendByFromUsersRequest::add_from_username(const char* value, size_t size) {
  from_username_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.friends.BatchApplyFriendByFromUsersRequest.from_username)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchApplyFriendByFromUsersRequest::from_username() const {
  // @@protoc_insertion_point(field_list:outer.friends.BatchApplyFriendByFromUsersRequest.from_username)
  return from_username_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BatchApplyFriendByFromUsersRequest::mutable_from_username() {
  // @@protoc_insertion_point(field_mutable_list:outer.friends.BatchApplyFriendByFromUsersRequest.from_username)
  return &from_username_;
}

// string appkey = 2;
inline void BatchApplyFriendByFromUsersRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchApplyFriendByFromUsersRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.friends.BatchApplyFriendByFromUsersRequest.appkey)
  return appkey_.GetNoArena();
}
inline void BatchApplyFriendByFromUsersRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendByFromUsersRequest.appkey)
}
#if LANG_CXX11
inline void BatchApplyFriendByFromUsersRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.BatchApplyFriendByFromUsersRequest.appkey)
}
#endif
inline void BatchApplyFriendByFromUsersRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.BatchApplyFriendByFromUsersRequest.appkey)
}
inline void BatchApplyFriendByFromUsersRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.BatchApplyFriendByFromUsersRequest.appkey)
}
inline ::std::string* BatchApplyFriendByFromUsersRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.BatchApplyFriendByFromUsersRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchApplyFriendByFromUsersRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.friends.BatchApplyFriendByFromUsersRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchApplyFriendByFromUsersRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.BatchApplyFriendByFromUsersRequest.appkey)
}

// string to_username = 3;
inline void BatchApplyFriendByFromUsersRequest::clear_to_username() {
  to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchApplyFriendByFromUsersRequest::to_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.BatchApplyFriendByFromUsersRequest.to_username)
  return to_username_.GetNoArena();
}
inline void BatchApplyFriendByFromUsersRequest::set_to_username(const ::std::string& value) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendByFromUsersRequest.to_username)
}
#if LANG_CXX11
inline void BatchApplyFriendByFromUsersRequest::set_to_username(::std::string&& value) {
  
  to_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.BatchApplyFriendByFromUsersRequest.to_username)
}
#endif
inline void BatchApplyFriendByFromUsersRequest::set_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.BatchApplyFriendByFromUsersRequest.to_username)
}
inline void BatchApplyFriendByFromUsersRequest::set_to_username(const char* value, size_t size) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.BatchApplyFriendByFromUsersRequest.to_username)
}
inline ::std::string* BatchApplyFriendByFromUsersRequest::mutable_to_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.BatchApplyFriendByFromUsersRequest.to_username)
  return to_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchApplyFriendByFromUsersRequest::release_to_username() {
  // @@protoc_insertion_point(field_release:outer.friends.BatchApplyFriendByFromUsersRequest.to_username)
  
  return to_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchApplyFriendByFromUsersRequest::set_allocated_to_username(::std::string* to_username) {
  if (to_username != NULL) {
    
  } else {
    
  }
  to_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.BatchApplyFriendByFromUsersRequest.to_username)
}

// map<string, string> remark = 4;
inline int BatchApplyFriendByFromUsersRequest::remark_size() const {
  return remark_.size();
}
inline void BatchApplyFriendByFromUsersRequest::clear_remark() {
  remark_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
BatchApplyFriendByFromUsersRequest::remark() const {
  // @@protoc_insertion_point(field_map:outer.friends.BatchApplyFriendByFromUsersRequest.remark)
  return remark_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
BatchApplyFriendByFromUsersRequest::mutable_remark() {
  // @@protoc_insertion_point(field_mutable_map:outer.friends.BatchApplyFriendByFromUsersRequest.remark)
  return remark_.MutableMap();
}

// string msg_id = 5;
inline void BatchApplyFriendByFromUsersRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchApplyFriendByFromUsersRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.BatchApplyFriendByFromUsersRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void BatchApplyFriendByFromUsersRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendByFromUsersRequest.msg_id)
}
#if LANG_CXX11
inline void BatchApplyFriendByFromUsersRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.BatchApplyFriendByFromUsersRequest.msg_id)
}
#endif
inline void BatchApplyFriendByFromUsersRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.BatchApplyFriendByFromUsersRequest.msg_id)
}
inline void BatchApplyFriendByFromUsersRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.BatchApplyFriendByFromUsersRequest.msg_id)
}
inline ::std::string* BatchApplyFriendByFromUsersRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.BatchApplyFriendByFromUsersRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchApplyFriendByFromUsersRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.BatchApplyFriendByFromUsersRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchApplyFriendByFromUsersRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.BatchApplyFriendByFromUsersRequest.msg_id)
}

// .common.enumeration.EClientType from_client_type = 6;
inline void BatchApplyFriendByFromUsersRequest::clear_from_client_type() {
  from_client_type_ = 0;
}
inline ::common::enumeration::EClientType BatchApplyFriendByFromUsersRequest::from_client_type() const {
  // @@protoc_insertion_point(field_get:outer.friends.BatchApplyFriendByFromUsersRequest.from_client_type)
  return static_cast< ::common::enumeration::EClientType >(from_client_type_);
}
inline void BatchApplyFriendByFromUsersRequest::set_from_client_type(::common::enumeration::EClientType value) {
  
  from_client_type_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendByFromUsersRequest.from_client_type)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BatchApplyFriendByFromUsersResponse

// .common.errcode.EErrorCode ret = 1;
inline void BatchApplyFriendByFromUsersResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode BatchApplyFriendByFromUsersResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.friends.BatchApplyFriendByFromUsersResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void BatchApplyFriendByFromUsersResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendByFromUsersResponse.ret)
}

// string msg_id = 2;
inline void BatchApplyFriendByFromUsersResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchApplyFriendByFromUsersResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.friends.BatchApplyFriendByFromUsersResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void BatchApplyFriendByFromUsersResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.BatchApplyFriendByFromUsersResponse.msg_id)
}
#if LANG_CXX11
inline void BatchApplyFriendByFromUsersResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.BatchApplyFriendByFromUsersResponse.msg_id)
}
#endif
inline void BatchApplyFriendByFromUsersResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.BatchApplyFriendByFromUsersResponse.msg_id)
}
inline void BatchApplyFriendByFromUsersResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.BatchApplyFriendByFromUsersResponse.msg_id)
}
inline ::std::string* BatchApplyFriendByFromUsersResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.BatchApplyFriendByFromUsersResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchApplyFriendByFromUsersResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.friends.BatchApplyFriendByFromUsersResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchApplyFriendByFromUsersResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.BatchApplyFriendByFromUsersResponse.msg_id)
}

// map<string, .common.errcode.EErrorCode> result = 3;
inline int BatchApplyFriendByFromUsersResponse::result_size() const {
  return result_.size();
}
inline void BatchApplyFriendByFromUsersResponse::clear_result() {
  result_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::common::errcode::EErrorCode >&
BatchApplyFriendByFromUsersResponse::result() const {
  // @@protoc_insertion_point(field_map:outer.friends.BatchApplyFriendByFromUsersResponse.result)
  return result_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::common::errcode::EErrorCode >*
BatchApplyFriendByFromUsersResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_map:outer.friends.BatchApplyFriendByFromUsersResponse.result)
  return result_.MutableMap();
}

// -------------------------------------------------------------------

// GetFriendDisplayRequest

// string appkey = 1;
inline void GetFriendDisplayRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFriendDisplayRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.friends.GetFriendDisplayRequest.appkey)
  return appkey_.GetNoArena();
}
inline void GetFriendDisplayRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.GetFriendDisplayRequest.appkey)
}
#if LANG_CXX11
inline void GetFriendDisplayRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.GetFriendDisplayRequest.appkey)
}
#endif
inline void GetFriendDisplayRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.GetFriendDisplayRequest.appkey)
}
inline void GetFriendDisplayRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.GetFriendDisplayRequest.appkey)
}
inline ::std::string* GetFriendDisplayRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.GetFriendDisplayRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFriendDisplayRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.friends.GetFriendDisplayRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFriendDisplayRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.GetFriendDisplayRequest.appkey)
}

// string owner_username = 2;
inline void GetFriendDisplayRequest::clear_owner_username() {
  owner_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFriendDisplayRequest::owner_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.GetFriendDisplayRequest.owner_username)
  return owner_username_.GetNoArena();
}
inline void GetFriendDisplayRequest::set_owner_username(const ::std::string& value) {
  
  owner_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.GetFriendDisplayRequest.owner_username)
}
#if LANG_CXX11
inline void GetFriendDisplayRequest::set_owner_username(::std::string&& value) {
  
  owner_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.GetFriendDisplayRequest.owner_username)
}
#endif
inline void GetFriendDisplayRequest::set_owner_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  owner_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.GetFriendDisplayRequest.owner_username)
}
inline void GetFriendDisplayRequest::set_owner_username(const char* value, size_t size) {
  
  owner_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.GetFriendDisplayRequest.owner_username)
}
inline ::std::string* GetFriendDisplayRequest::mutable_owner_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.GetFriendDisplayRequest.owner_username)
  return owner_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFriendDisplayRequest::release_owner_username() {
  // @@protoc_insertion_point(field_release:outer.friends.GetFriendDisplayRequest.owner_username)
  
  return owner_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFriendDisplayRequest::set_allocated_owner_username(::std::string* owner_username) {
  if (owner_username != NULL) {
    
  } else {
    
  }
  owner_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.GetFriendDisplayRequest.owner_username)
}

// string friend_username = 3;
inline void GetFriendDisplayRequest::clear_friend_username() {
  friend_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFriendDisplayRequest::friend_username() const {
  // @@protoc_insertion_point(field_get:outer.friends.GetFriendDisplayRequest.friend_username)
  return friend_username_.GetNoArena();
}
inline void GetFriendDisplayRequest::set_friend_username(const ::std::string& value) {
  
  friend_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.GetFriendDisplayRequest.friend_username)
}
#if LANG_CXX11
inline void GetFriendDisplayRequest::set_friend_username(::std::string&& value) {
  
  friend_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.GetFriendDisplayRequest.friend_username)
}
#endif
inline void GetFriendDisplayRequest::set_friend_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friend_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.GetFriendDisplayRequest.friend_username)
}
inline void GetFriendDisplayRequest::set_friend_username(const char* value, size_t size) {
  
  friend_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.GetFriendDisplayRequest.friend_username)
}
inline ::std::string* GetFriendDisplayRequest::mutable_friend_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.GetFriendDisplayRequest.friend_username)
  return friend_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFriendDisplayRequest::release_friend_username() {
  // @@protoc_insertion_point(field_release:outer.friends.GetFriendDisplayRequest.friend_username)
  
  return friend_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFriendDisplayRequest::set_allocated_friend_username(::std::string* friend_username) {
  if (friend_username != NULL) {
    
  } else {
    
  }
  friend_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_username);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.GetFriendDisplayRequest.friend_username)
}

// -------------------------------------------------------------------

// GetFriendDisplayResponse

// .common.errcode.EErrorCode ret = 1;
inline void GetFriendDisplayResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode GetFriendDisplayResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.friends.GetFriendDisplayResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void GetFriendDisplayResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.friends.GetFriendDisplayResponse.ret)
}

// string friend_display = 2;
inline void GetFriendDisplayResponse::clear_friend_display() {
  friend_display_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFriendDisplayResponse::friend_display() const {
  // @@protoc_insertion_point(field_get:outer.friends.GetFriendDisplayResponse.friend_display)
  return friend_display_.GetNoArena();
}
inline void GetFriendDisplayResponse::set_friend_display(const ::std::string& value) {
  
  friend_display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.friends.GetFriendDisplayResponse.friend_display)
}
#if LANG_CXX11
inline void GetFriendDisplayResponse::set_friend_display(::std::string&& value) {
  
  friend_display_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.friends.GetFriendDisplayResponse.friend_display)
}
#endif
inline void GetFriendDisplayResponse::set_friend_display(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  friend_display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.friends.GetFriendDisplayResponse.friend_display)
}
inline void GetFriendDisplayResponse::set_friend_display(const char* value, size_t size) {
  
  friend_display_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.friends.GetFriendDisplayResponse.friend_display)
}
inline ::std::string* GetFriendDisplayResponse::mutable_friend_display() {
  
  // @@protoc_insertion_point(field_mutable:outer.friends.GetFriendDisplayResponse.friend_display)
  return friend_display_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFriendDisplayResponse::release_friend_display() {
  // @@protoc_insertion_point(field_release:outer.friends.GetFriendDisplayResponse.friend_display)
  
  return friend_display_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFriendDisplayResponse::set_allocated_friend_display(::std::string* friend_display) {
  if (friend_display != NULL) {
    
  } else {
    
  }
  friend_display_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friend_display);
  // @@protoc_insertion_point(field_set_allocated:outer.friends.GetFriendDisplayResponse.friend_display)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace friends
}  // namespace outer

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::outer::friends::EFriendRequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::outer::friends::EFriendRequestType>() {
  return ::outer::friends::EFriendRequestType_descriptor();
}
template <> struct is_proto_enum< ::outer::friends::EFriendSignalType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::outer::friends::EFriendSignalType>() {
  return ::outer::friends::EFriendSignalType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_outer_2ffriends_2eproto__INCLUDED
