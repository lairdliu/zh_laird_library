// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: outer/robot.proto

#ifndef PROTOBUF_outer_2frobot_2eproto__INCLUDED
#define PROTOBUF_outer_2frobot_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/errcode.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_outer_2frobot_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsClassTextDataImpl();
void InitDefaultsClassTextData();
void InitDefaultsClassLinkDataImpl();
void InitDefaultsClassLinkData();
void InitDefaultsArticleImpl();
void InitDefaultsArticle();
void InitDefaultsClassNewsDataImpl();
void InitDefaultsClassNewsData();
void InitDefaultsCookBookImpl();
void InitDefaultsCookBook();
void InitDefaultsClassCookBookDataImpl();
void InitDefaultsClassCookBookData();
void InitDefaultsAutoReplyRequestImpl();
void InitDefaultsAutoReplyRequest();
void InitDefaultsAutoReplyResponseImpl();
void InitDefaultsAutoReplyResponse();
inline void InitDefaults() {
  InitDefaultsClassTextData();
  InitDefaultsClassLinkData();
  InitDefaultsArticle();
  InitDefaultsClassNewsData();
  InitDefaultsCookBook();
  InitDefaultsClassCookBookData();
  InitDefaultsAutoReplyRequest();
  InitDefaultsAutoReplyResponse();
}
}  // namespace protobuf_outer_2frobot_2eproto
namespace outer {
namespace robot {
class Article;
class ArticleDefaultTypeInternal;
extern ArticleDefaultTypeInternal _Article_default_instance_;
class AutoReplyRequest;
class AutoReplyRequestDefaultTypeInternal;
extern AutoReplyRequestDefaultTypeInternal _AutoReplyRequest_default_instance_;
class AutoReplyResponse;
class AutoReplyResponseDefaultTypeInternal;
extern AutoReplyResponseDefaultTypeInternal _AutoReplyResponse_default_instance_;
class ClassCookBookData;
class ClassCookBookDataDefaultTypeInternal;
extern ClassCookBookDataDefaultTypeInternal _ClassCookBookData_default_instance_;
class ClassLinkData;
class ClassLinkDataDefaultTypeInternal;
extern ClassLinkDataDefaultTypeInternal _ClassLinkData_default_instance_;
class ClassNewsData;
class ClassNewsDataDefaultTypeInternal;
extern ClassNewsDataDefaultTypeInternal _ClassNewsData_default_instance_;
class ClassTextData;
class ClassTextDataDefaultTypeInternal;
extern ClassTextDataDefaultTypeInternal _ClassTextData_default_instance_;
class CookBook;
class CookBookDefaultTypeInternal;
extern CookBookDefaultTypeInternal _CookBook_default_instance_;
}  // namespace robot
}  // namespace outer
namespace outer {
namespace robot {

enum ETulingErrorCode {
  UNKNOWN = 0,
  TULING_ERROR_CODE_DEFAULT = 1,
  ERROR_KEY_ERROR = 40001,
  ERROR_INFO_EMPTY = 40002,
  ERROR_REACH_DAY_COUNT_LIMIT = 40003,
  ERROR_DATA_FORMAT_ERROR = 40004,
  ETulingErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ETulingErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ETulingErrorCode_IsValid(int value);
const ETulingErrorCode ETulingErrorCode_MIN = UNKNOWN;
const ETulingErrorCode ETulingErrorCode_MAX = ERROR_DATA_FORMAT_ERROR;
const int ETulingErrorCode_ARRAYSIZE = ETulingErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETulingErrorCode_descriptor();
inline const ::std::string& ETulingErrorCode_Name(ETulingErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETulingErrorCode_descriptor(), value);
}
inline bool ETulingErrorCode_Parse(
    const ::std::string& name, ETulingErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETulingErrorCode>(
    ETulingErrorCode_descriptor(), name, value);
}
enum ERobotClass {
  UNKNOWNCLASS = 0,
  ROBOT_CLASS_DEFAULT = 1,
  CLASS_TEXT = 100000,
  CLASS_LINK = 200000,
  CLASS_NEWS = 302000,
  CLASS_COOK_BOOK = 308000,
  CLASS_CHILD_SONG = 313000,
  CLASS_CHILD_POETRY = 314000,
  ERobotClass_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ERobotClass_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ERobotClass_IsValid(int value);
const ERobotClass ERobotClass_MIN = UNKNOWNCLASS;
const ERobotClass ERobotClass_MAX = CLASS_CHILD_POETRY;
const int ERobotClass_ARRAYSIZE = ERobotClass_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERobotClass_descriptor();
inline const ::std::string& ERobotClass_Name(ERobotClass value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERobotClass_descriptor(), value);
}
inline bool ERobotClass_Parse(
    const ::std::string& name, ERobotClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERobotClass>(
    ERobotClass_descriptor(), name, value);
}
// ===================================================================

class ClassTextData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.robot.ClassTextData) */ {
 public:
  ClassTextData();
  virtual ~ClassTextData();

  ClassTextData(const ClassTextData& from);

  inline ClassTextData& operator=(const ClassTextData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClassTextData(ClassTextData&& from) noexcept
    : ClassTextData() {
    *this = ::std::move(from);
  }

  inline ClassTextData& operator=(ClassTextData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassTextData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassTextData* internal_default_instance() {
    return reinterpret_cast<const ClassTextData*>(
               &_ClassTextData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ClassTextData* other);
  friend void swap(ClassTextData& a, ClassTextData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClassTextData* New() const PROTOBUF_FINAL { return New(NULL); }

  ClassTextData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClassTextData& from);
  void MergeFrom(const ClassTextData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClassTextData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:outer.robot.ClassTextData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2frobot_2eproto::TableStruct;
  friend void ::protobuf_outer_2frobot_2eproto::InitDefaultsClassTextDataImpl();
};
// -------------------------------------------------------------------

class ClassLinkData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.robot.ClassLinkData) */ {
 public:
  ClassLinkData();
  virtual ~ClassLinkData();

  ClassLinkData(const ClassLinkData& from);

  inline ClassLinkData& operator=(const ClassLinkData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClassLinkData(ClassLinkData&& from) noexcept
    : ClassLinkData() {
    *this = ::std::move(from);
  }

  inline ClassLinkData& operator=(ClassLinkData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassLinkData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassLinkData* internal_default_instance() {
    return reinterpret_cast<const ClassLinkData*>(
               &_ClassLinkData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ClassLinkData* other);
  friend void swap(ClassLinkData& a, ClassLinkData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClassLinkData* New() const PROTOBUF_FINAL { return New(NULL); }

  ClassLinkData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClassLinkData& from);
  void MergeFrom(const ClassLinkData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClassLinkData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string url = 2;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:outer.robot.ClassLinkData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2frobot_2eproto::TableStruct;
  friend void ::protobuf_outer_2frobot_2eproto::InitDefaultsClassLinkDataImpl();
};
// -------------------------------------------------------------------

class Article : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.robot.Article) */ {
 public:
  Article();
  virtual ~Article();

  Article(const Article& from);

  inline Article& operator=(const Article& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Article(Article&& from) noexcept
    : Article() {
    *this = ::std::move(from);
  }

  inline Article& operator=(Article&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Article& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Article* internal_default_instance() {
    return reinterpret_cast<const Article*>(
               &_Article_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Article* other);
  friend void swap(Article& a, Article& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Article* New() const PROTOBUF_FINAL { return New(NULL); }

  Article* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Article& from);
  void MergeFrom(const Article& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Article* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string article = 1;
  void clear_article();
  static const int kArticleFieldNumber = 1;
  const ::std::string& article() const;
  void set_article(const ::std::string& value);
  #if LANG_CXX11
  void set_article(::std::string&& value);
  #endif
  void set_article(const char* value);
  void set_article(const char* value, size_t size);
  ::std::string* mutable_article();
  ::std::string* release_article();
  void set_allocated_article(::std::string* article);

  // string source = 2;
  void clear_source();
  static const int kSourceFieldNumber = 2;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // string icon = 3;
  void clear_icon();
  static const int kIconFieldNumber = 3;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // string detailurl = 4;
  void clear_detailurl();
  static const int kDetailurlFieldNumber = 4;
  const ::std::string& detailurl() const;
  void set_detailurl(const ::std::string& value);
  #if LANG_CXX11
  void set_detailurl(::std::string&& value);
  #endif
  void set_detailurl(const char* value);
  void set_detailurl(const char* value, size_t size);
  ::std::string* mutable_detailurl();
  ::std::string* release_detailurl();
  void set_allocated_detailurl(::std::string* detailurl);

  // @@protoc_insertion_point(class_scope:outer.robot.Article)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr article_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::internal::ArenaStringPtr detailurl_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2frobot_2eproto::TableStruct;
  friend void ::protobuf_outer_2frobot_2eproto::InitDefaultsArticleImpl();
};
// -------------------------------------------------------------------

class ClassNewsData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.robot.ClassNewsData) */ {
 public:
  ClassNewsData();
  virtual ~ClassNewsData();

  ClassNewsData(const ClassNewsData& from);

  inline ClassNewsData& operator=(const ClassNewsData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClassNewsData(ClassNewsData&& from) noexcept
    : ClassNewsData() {
    *this = ::std::move(from);
  }

  inline ClassNewsData& operator=(ClassNewsData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassNewsData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassNewsData* internal_default_instance() {
    return reinterpret_cast<const ClassNewsData*>(
               &_ClassNewsData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ClassNewsData* other);
  friend void swap(ClassNewsData& a, ClassNewsData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClassNewsData* New() const PROTOBUF_FINAL { return New(NULL); }

  ClassNewsData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClassNewsData& from);
  void MergeFrom(const ClassNewsData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClassNewsData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.robot.Article article = 2;
  int article_size() const;
  void clear_article();
  static const int kArticleFieldNumber = 2;
  const ::outer::robot::Article& article(int index) const;
  ::outer::robot::Article* mutable_article(int index);
  ::outer::robot::Article* add_article();
  ::google::protobuf::RepeatedPtrField< ::outer::robot::Article >*
      mutable_article();
  const ::google::protobuf::RepeatedPtrField< ::outer::robot::Article >&
      article() const;

  // string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:outer.robot.ClassNewsData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::robot::Article > article_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2frobot_2eproto::TableStruct;
  friend void ::protobuf_outer_2frobot_2eproto::InitDefaultsClassNewsDataImpl();
};
// -------------------------------------------------------------------

class CookBook : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.robot.CookBook) */ {
 public:
  CookBook();
  virtual ~CookBook();

  CookBook(const CookBook& from);

  inline CookBook& operator=(const CookBook& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CookBook(CookBook&& from) noexcept
    : CookBook() {
    *this = ::std::move(from);
  }

  inline CookBook& operator=(CookBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CookBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CookBook* internal_default_instance() {
    return reinterpret_cast<const CookBook*>(
               &_CookBook_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CookBook* other);
  friend void swap(CookBook& a, CookBook& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CookBook* New() const PROTOBUF_FINAL { return New(NULL); }

  CookBook* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CookBook& from);
  void MergeFrom(const CookBook& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CookBook* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string info = 2;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::std::string& info() const;
  void set_info(const ::std::string& value);
  #if LANG_CXX11
  void set_info(::std::string&& value);
  #endif
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  ::std::string* mutable_info();
  ::std::string* release_info();
  void set_allocated_info(::std::string* info);

  // string detailurl = 3;
  void clear_detailurl();
  static const int kDetailurlFieldNumber = 3;
  const ::std::string& detailurl() const;
  void set_detailurl(const ::std::string& value);
  #if LANG_CXX11
  void set_detailurl(::std::string&& value);
  #endif
  void set_detailurl(const char* value);
  void set_detailurl(const char* value, size_t size);
  ::std::string* mutable_detailurl();
  ::std::string* release_detailurl();
  void set_allocated_detailurl(::std::string* detailurl);

  // string icon = 4;
  void clear_icon();
  static const int kIconFieldNumber = 4;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  #if LANG_CXX11
  void set_icon(::std::string&& value);
  #endif
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // @@protoc_insertion_point(class_scope:outer.robot.CookBook)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr info_;
  ::google::protobuf::internal::ArenaStringPtr detailurl_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2frobot_2eproto::TableStruct;
  friend void ::protobuf_outer_2frobot_2eproto::InitDefaultsCookBookImpl();
};
// -------------------------------------------------------------------

class ClassCookBookData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.robot.ClassCookBookData) */ {
 public:
  ClassCookBookData();
  virtual ~ClassCookBookData();

  ClassCookBookData(const ClassCookBookData& from);

  inline ClassCookBookData& operator=(const ClassCookBookData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClassCookBookData(ClassCookBookData&& from) noexcept
    : ClassCookBookData() {
    *this = ::std::move(from);
  }

  inline ClassCookBookData& operator=(ClassCookBookData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassCookBookData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClassCookBookData* internal_default_instance() {
    return reinterpret_cast<const ClassCookBookData*>(
               &_ClassCookBookData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ClassCookBookData* other);
  friend void swap(ClassCookBookData& a, ClassCookBookData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClassCookBookData* New() const PROTOBUF_FINAL { return New(NULL); }

  ClassCookBookData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClassCookBookData& from);
  void MergeFrom(const ClassCookBookData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClassCookBookData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.robot.CookBook article = 2;
  int article_size() const;
  void clear_article();
  static const int kArticleFieldNumber = 2;
  const ::outer::robot::CookBook& article(int index) const;
  ::outer::robot::CookBook* mutable_article(int index);
  ::outer::robot::CookBook* add_article();
  ::google::protobuf::RepeatedPtrField< ::outer::robot::CookBook >*
      mutable_article();
  const ::google::protobuf::RepeatedPtrField< ::outer::robot::CookBook >&
      article() const;

  // string text = 1;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:outer.robot.ClassCookBookData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::robot::CookBook > article_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2frobot_2eproto::TableStruct;
  friend void ::protobuf_outer_2frobot_2eproto::InitDefaultsClassCookBookDataImpl();
};
// -------------------------------------------------------------------

class AutoReplyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.robot.AutoReplyRequest) */ {
 public:
  AutoReplyRequest();
  virtual ~AutoReplyRequest();

  AutoReplyRequest(const AutoReplyRequest& from);

  inline AutoReplyRequest& operator=(const AutoReplyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AutoReplyRequest(AutoReplyRequest&& from) noexcept
    : AutoReplyRequest() {
    *this = ::std::move(from);
  }

  inline AutoReplyRequest& operator=(AutoReplyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoReplyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoReplyRequest* internal_default_instance() {
    return reinterpret_cast<const AutoReplyRequest*>(
               &_AutoReplyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(AutoReplyRequest* other);
  friend void swap(AutoReplyRequest& a, AutoReplyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AutoReplyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AutoReplyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AutoReplyRequest& from);
  void MergeFrom(const AutoReplyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AutoReplyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:outer.robot.AutoReplyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2frobot_2eproto::TableStruct;
  friend void ::protobuf_outer_2frobot_2eproto::InitDefaultsAutoReplyRequestImpl();
};
// -------------------------------------------------------------------

class AutoReplyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.robot.AutoReplyResponse) */ {
 public:
  AutoReplyResponse();
  virtual ~AutoReplyResponse();

  AutoReplyResponse(const AutoReplyResponse& from);

  inline AutoReplyResponse& operator=(const AutoReplyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AutoReplyResponse(AutoReplyResponse&& from) noexcept
    : AutoReplyResponse() {
    *this = ::std::move(from);
  }

  inline AutoReplyResponse& operator=(AutoReplyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoReplyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoReplyResponse* internal_default_instance() {
    return reinterpret_cast<const AutoReplyResponse*>(
               &_AutoReplyResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(AutoReplyResponse* other);
  friend void swap(AutoReplyResponse& a, AutoReplyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AutoReplyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AutoReplyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AutoReplyResponse& from);
  void MergeFrom(const AutoReplyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AutoReplyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // .outer.robot.ERobotClass robot_class = 2;
  void clear_robot_class();
  static const int kRobotClassFieldNumber = 2;
  ::outer::robot::ERobotClass robot_class() const;
  void set_robot_class(::outer::robot::ERobotClass value);

  // @@protoc_insertion_point(class_scope:outer.robot.AutoReplyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int ret_;
  int robot_class_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2frobot_2eproto::TableStruct;
  friend void ::protobuf_outer_2frobot_2eproto::InitDefaultsAutoReplyResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClassTextData

// string text = 1;
inline void ClassTextData::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClassTextData::text() const {
  // @@protoc_insertion_point(field_get:outer.robot.ClassTextData.text)
  return text_.GetNoArena();
}
inline void ClassTextData::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.ClassTextData.text)
}
#if LANG_CXX11
inline void ClassTextData::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.ClassTextData.text)
}
#endif
inline void ClassTextData::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.ClassTextData.text)
}
inline void ClassTextData::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.ClassTextData.text)
}
inline ::std::string* ClassTextData::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.ClassTextData.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClassTextData::release_text() {
  // @@protoc_insertion_point(field_release:outer.robot.ClassTextData.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClassTextData::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.ClassTextData.text)
}

// -------------------------------------------------------------------

// ClassLinkData

// string text = 1;
inline void ClassLinkData::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClassLinkData::text() const {
  // @@protoc_insertion_point(field_get:outer.robot.ClassLinkData.text)
  return text_.GetNoArena();
}
inline void ClassLinkData::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.ClassLinkData.text)
}
#if LANG_CXX11
inline void ClassLinkData::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.ClassLinkData.text)
}
#endif
inline void ClassLinkData::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.ClassLinkData.text)
}
inline void ClassLinkData::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.ClassLinkData.text)
}
inline ::std::string* ClassLinkData::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.ClassLinkData.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClassLinkData::release_text() {
  // @@protoc_insertion_point(field_release:outer.robot.ClassLinkData.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClassLinkData::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.ClassLinkData.text)
}

// string url = 2;
inline void ClassLinkData::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClassLinkData::url() const {
  // @@protoc_insertion_point(field_get:outer.robot.ClassLinkData.url)
  return url_.GetNoArena();
}
inline void ClassLinkData::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.ClassLinkData.url)
}
#if LANG_CXX11
inline void ClassLinkData::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.ClassLinkData.url)
}
#endif
inline void ClassLinkData::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.ClassLinkData.url)
}
inline void ClassLinkData::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.ClassLinkData.url)
}
inline ::std::string* ClassLinkData::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.ClassLinkData.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClassLinkData::release_url() {
  // @@protoc_insertion_point(field_release:outer.robot.ClassLinkData.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClassLinkData::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.ClassLinkData.url)
}

// -------------------------------------------------------------------

// Article

// string article = 1;
inline void Article::clear_article() {
  article_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Article::article() const {
  // @@protoc_insertion_point(field_get:outer.robot.Article.article)
  return article_.GetNoArena();
}
inline void Article::set_article(const ::std::string& value) {
  
  article_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.Article.article)
}
#if LANG_CXX11
inline void Article::set_article(::std::string&& value) {
  
  article_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.Article.article)
}
#endif
inline void Article::set_article(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  article_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.Article.article)
}
inline void Article::set_article(const char* value, size_t size) {
  
  article_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.Article.article)
}
inline ::std::string* Article::mutable_article() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.Article.article)
  return article_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Article::release_article() {
  // @@protoc_insertion_point(field_release:outer.robot.Article.article)
  
  return article_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Article::set_allocated_article(::std::string* article) {
  if (article != NULL) {
    
  } else {
    
  }
  article_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), article);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.Article.article)
}

// string source = 2;
inline void Article::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Article::source() const {
  // @@protoc_insertion_point(field_get:outer.robot.Article.source)
  return source_.GetNoArena();
}
inline void Article::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.Article.source)
}
#if LANG_CXX11
inline void Article::set_source(::std::string&& value) {
  
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.Article.source)
}
#endif
inline void Article::set_source(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.Article.source)
}
inline void Article::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.Article.source)
}
inline ::std::string* Article::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.Article.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Article::release_source() {
  // @@protoc_insertion_point(field_release:outer.robot.Article.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Article::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.Article.source)
}

// string icon = 3;
inline void Article::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Article::icon() const {
  // @@protoc_insertion_point(field_get:outer.robot.Article.icon)
  return icon_.GetNoArena();
}
inline void Article::set_icon(const ::std::string& value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.Article.icon)
}
#if LANG_CXX11
inline void Article::set_icon(::std::string&& value) {
  
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.Article.icon)
}
#endif
inline void Article::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.Article.icon)
}
inline void Article::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.Article.icon)
}
inline ::std::string* Article::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.Article.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Article::release_icon() {
  // @@protoc_insertion_point(field_release:outer.robot.Article.icon)
  
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Article::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.Article.icon)
}

// string detailurl = 4;
inline void Article::clear_detailurl() {
  detailurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Article::detailurl() const {
  // @@protoc_insertion_point(field_get:outer.robot.Article.detailurl)
  return detailurl_.GetNoArena();
}
inline void Article::set_detailurl(const ::std::string& value) {
  
  detailurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.Article.detailurl)
}
#if LANG_CXX11
inline void Article::set_detailurl(::std::string&& value) {
  
  detailurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.Article.detailurl)
}
#endif
inline void Article::set_detailurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detailurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.Article.detailurl)
}
inline void Article::set_detailurl(const char* value, size_t size) {
  
  detailurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.Article.detailurl)
}
inline ::std::string* Article::mutable_detailurl() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.Article.detailurl)
  return detailurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Article::release_detailurl() {
  // @@protoc_insertion_point(field_release:outer.robot.Article.detailurl)
  
  return detailurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Article::set_allocated_detailurl(::std::string* detailurl) {
  if (detailurl != NULL) {
    
  } else {
    
  }
  detailurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detailurl);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.Article.detailurl)
}

// -------------------------------------------------------------------

// ClassNewsData

// string text = 1;
inline void ClassNewsData::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClassNewsData::text() const {
  // @@protoc_insertion_point(field_get:outer.robot.ClassNewsData.text)
  return text_.GetNoArena();
}
inline void ClassNewsData::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.ClassNewsData.text)
}
#if LANG_CXX11
inline void ClassNewsData::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.ClassNewsData.text)
}
#endif
inline void ClassNewsData::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.ClassNewsData.text)
}
inline void ClassNewsData::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.ClassNewsData.text)
}
inline ::std::string* ClassNewsData::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.ClassNewsData.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClassNewsData::release_text() {
  // @@protoc_insertion_point(field_release:outer.robot.ClassNewsData.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClassNewsData::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.ClassNewsData.text)
}

// repeated .outer.robot.Article article = 2;
inline int ClassNewsData::article_size() const {
  return article_.size();
}
inline void ClassNewsData::clear_article() {
  article_.Clear();
}
inline const ::outer::robot::Article& ClassNewsData::article(int index) const {
  // @@protoc_insertion_point(field_get:outer.robot.ClassNewsData.article)
  return article_.Get(index);
}
inline ::outer::robot::Article* ClassNewsData::mutable_article(int index) {
  // @@protoc_insertion_point(field_mutable:outer.robot.ClassNewsData.article)
  return article_.Mutable(index);
}
inline ::outer::robot::Article* ClassNewsData::add_article() {
  // @@protoc_insertion_point(field_add:outer.robot.ClassNewsData.article)
  return article_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::robot::Article >*
ClassNewsData::mutable_article() {
  // @@protoc_insertion_point(field_mutable_list:outer.robot.ClassNewsData.article)
  return &article_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::robot::Article >&
ClassNewsData::article() const {
  // @@protoc_insertion_point(field_list:outer.robot.ClassNewsData.article)
  return article_;
}

// -------------------------------------------------------------------

// CookBook

// string name = 1;
inline void CookBook::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CookBook::name() const {
  // @@protoc_insertion_point(field_get:outer.robot.CookBook.name)
  return name_.GetNoArena();
}
inline void CookBook::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.CookBook.name)
}
#if LANG_CXX11
inline void CookBook::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.CookBook.name)
}
#endif
inline void CookBook::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.CookBook.name)
}
inline void CookBook::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.CookBook.name)
}
inline ::std::string* CookBook::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.CookBook.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CookBook::release_name() {
  // @@protoc_insertion_point(field_release:outer.robot.CookBook.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookBook::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.CookBook.name)
}

// string info = 2;
inline void CookBook::clear_info() {
  info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CookBook::info() const {
  // @@protoc_insertion_point(field_get:outer.robot.CookBook.info)
  return info_.GetNoArena();
}
inline void CookBook::set_info(const ::std::string& value) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.CookBook.info)
}
#if LANG_CXX11
inline void CookBook::set_info(::std::string&& value) {
  
  info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.CookBook.info)
}
#endif
inline void CookBook::set_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.CookBook.info)
}
inline void CookBook::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.CookBook.info)
}
inline ::std::string* CookBook::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.CookBook.info)
  return info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CookBook::release_info() {
  // @@protoc_insertion_point(field_release:outer.robot.CookBook.info)
  
  return info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookBook::set_allocated_info(::std::string* info) {
  if (info != NULL) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.CookBook.info)
}

// string detailurl = 3;
inline void CookBook::clear_detailurl() {
  detailurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CookBook::detailurl() const {
  // @@protoc_insertion_point(field_get:outer.robot.CookBook.detailurl)
  return detailurl_.GetNoArena();
}
inline void CookBook::set_detailurl(const ::std::string& value) {
  
  detailurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.CookBook.detailurl)
}
#if LANG_CXX11
inline void CookBook::set_detailurl(::std::string&& value) {
  
  detailurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.CookBook.detailurl)
}
#endif
inline void CookBook::set_detailurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detailurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.CookBook.detailurl)
}
inline void CookBook::set_detailurl(const char* value, size_t size) {
  
  detailurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.CookBook.detailurl)
}
inline ::std::string* CookBook::mutable_detailurl() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.CookBook.detailurl)
  return detailurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CookBook::release_detailurl() {
  // @@protoc_insertion_point(field_release:outer.robot.CookBook.detailurl)
  
  return detailurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookBook::set_allocated_detailurl(::std::string* detailurl) {
  if (detailurl != NULL) {
    
  } else {
    
  }
  detailurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detailurl);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.CookBook.detailurl)
}

// string icon = 4;
inline void CookBook::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CookBook::icon() const {
  // @@protoc_insertion_point(field_get:outer.robot.CookBook.icon)
  return icon_.GetNoArena();
}
inline void CookBook::set_icon(const ::std::string& value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.CookBook.icon)
}
#if LANG_CXX11
inline void CookBook::set_icon(::std::string&& value) {
  
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.CookBook.icon)
}
#endif
inline void CookBook::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.CookBook.icon)
}
inline void CookBook::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.CookBook.icon)
}
inline ::std::string* CookBook::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.CookBook.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CookBook::release_icon() {
  // @@protoc_insertion_point(field_release:outer.robot.CookBook.icon)
  
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CookBook::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.CookBook.icon)
}

// -------------------------------------------------------------------

// ClassCookBookData

// string text = 1;
inline void ClassCookBookData::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClassCookBookData::text() const {
  // @@protoc_insertion_point(field_get:outer.robot.ClassCookBookData.text)
  return text_.GetNoArena();
}
inline void ClassCookBookData::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.ClassCookBookData.text)
}
#if LANG_CXX11
inline void ClassCookBookData::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.ClassCookBookData.text)
}
#endif
inline void ClassCookBookData::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.ClassCookBookData.text)
}
inline void ClassCookBookData::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.ClassCookBookData.text)
}
inline ::std::string* ClassCookBookData::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.ClassCookBookData.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClassCookBookData::release_text() {
  // @@protoc_insertion_point(field_release:outer.robot.ClassCookBookData.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClassCookBookData::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.ClassCookBookData.text)
}

// repeated .outer.robot.CookBook article = 2;
inline int ClassCookBookData::article_size() const {
  return article_.size();
}
inline void ClassCookBookData::clear_article() {
  article_.Clear();
}
inline const ::outer::robot::CookBook& ClassCookBookData::article(int index) const {
  // @@protoc_insertion_point(field_get:outer.robot.ClassCookBookData.article)
  return article_.Get(index);
}
inline ::outer::robot::CookBook* ClassCookBookData::mutable_article(int index) {
  // @@protoc_insertion_point(field_mutable:outer.robot.ClassCookBookData.article)
  return article_.Mutable(index);
}
inline ::outer::robot::CookBook* ClassCookBookData::add_article() {
  // @@protoc_insertion_point(field_add:outer.robot.ClassCookBookData.article)
  return article_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::robot::CookBook >*
ClassCookBookData::mutable_article() {
  // @@protoc_insertion_point(field_mutable_list:outer.robot.ClassCookBookData.article)
  return &article_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::robot::CookBook >&
ClassCookBookData::article() const {
  // @@protoc_insertion_point(field_list:outer.robot.ClassCookBookData.article)
  return article_;
}

// -------------------------------------------------------------------

// AutoReplyRequest

// string from_username = 1;
inline void AutoReplyRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutoReplyRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.robot.AutoReplyRequest.from_username)
  return from_username_.GetNoArena();
}
inline void AutoReplyRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.AutoReplyRequest.from_username)
}
#if LANG_CXX11
inline void AutoReplyRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.AutoReplyRequest.from_username)
}
#endif
inline void AutoReplyRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.AutoReplyRequest.from_username)
}
inline void AutoReplyRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.AutoReplyRequest.from_username)
}
inline ::std::string* AutoReplyRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.AutoReplyRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoReplyRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.robot.AutoReplyRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoReplyRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.AutoReplyRequest.from_username)
}

// string appkey = 2;
inline void AutoReplyRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutoReplyRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.robot.AutoReplyRequest.appkey)
  return appkey_.GetNoArena();
}
inline void AutoReplyRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.AutoReplyRequest.appkey)
}
#if LANG_CXX11
inline void AutoReplyRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.AutoReplyRequest.appkey)
}
#endif
inline void AutoReplyRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.AutoReplyRequest.appkey)
}
inline void AutoReplyRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.AutoReplyRequest.appkey)
}
inline ::std::string* AutoReplyRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.AutoReplyRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoReplyRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.robot.AutoReplyRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoReplyRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.AutoReplyRequest.appkey)
}

// string content = 3;
inline void AutoReplyRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutoReplyRequest::content() const {
  // @@protoc_insertion_point(field_get:outer.robot.AutoReplyRequest.content)
  return content_.GetNoArena();
}
inline void AutoReplyRequest::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.AutoReplyRequest.content)
}
#if LANG_CXX11
inline void AutoReplyRequest::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.AutoReplyRequest.content)
}
#endif
inline void AutoReplyRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.AutoReplyRequest.content)
}
inline void AutoReplyRequest::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.AutoReplyRequest.content)
}
inline ::std::string* AutoReplyRequest::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.AutoReplyRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoReplyRequest::release_content() {
  // @@protoc_insertion_point(field_release:outer.robot.AutoReplyRequest.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoReplyRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.AutoReplyRequest.content)
}

// -------------------------------------------------------------------

// AutoReplyResponse

// .common.errcode.EErrorCode ret = 1;
inline void AutoReplyResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode AutoReplyResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.robot.AutoReplyResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void AutoReplyResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.robot.AutoReplyResponse.ret)
}

// .outer.robot.ERobotClass robot_class = 2;
inline void AutoReplyResponse::clear_robot_class() {
  robot_class_ = 0;
}
inline ::outer::robot::ERobotClass AutoReplyResponse::robot_class() const {
  // @@protoc_insertion_point(field_get:outer.robot.AutoReplyResponse.robot_class)
  return static_cast< ::outer::robot::ERobotClass >(robot_class_);
}
inline void AutoReplyResponse::set_robot_class(::outer::robot::ERobotClass value) {
  
  robot_class_ = value;
  // @@protoc_insertion_point(field_set:outer.robot.AutoReplyResponse.robot_class)
}

// bytes data = 3;
inline void AutoReplyResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutoReplyResponse::data() const {
  // @@protoc_insertion_point(field_get:outer.robot.AutoReplyResponse.data)
  return data_.GetNoArena();
}
inline void AutoReplyResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.robot.AutoReplyResponse.data)
}
#if LANG_CXX11
inline void AutoReplyResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.robot.AutoReplyResponse.data)
}
#endif
inline void AutoReplyResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.robot.AutoReplyResponse.data)
}
inline void AutoReplyResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.robot.AutoReplyResponse.data)
}
inline ::std::string* AutoReplyResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.robot.AutoReplyResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoReplyResponse::release_data() {
  // @@protoc_insertion_point(field_release:outer.robot.AutoReplyResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoReplyResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.robot.AutoReplyResponse.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace robot
}  // namespace outer

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::outer::robot::ETulingErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::outer::robot::ETulingErrorCode>() {
  return ::outer::robot::ETulingErrorCode_descriptor();
}
template <> struct is_proto_enum< ::outer::robot::ERobotClass> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::outer::robot::ERobotClass>() {
  return ::outer::robot::ERobotClass_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_outer_2frobot_2eproto__INCLUDED
