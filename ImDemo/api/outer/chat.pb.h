// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: outer/chat.proto

#ifndef PROTOBUF_outer_2fchat_2eproto__INCLUDED
#define PROTOBUF_outer_2fchat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/msg.pb.h"
#include "common/errcode.pb.h"
#include "common/enumeration.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_outer_2fchat_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsChatMessageRequestImpl();
void InitDefaultsChatMessageRequest();
void InitDefaultsChatMessageResponseImpl();
void InitDefaultsChatMessageResponse();
void InitDefaultsMultiMessageRequestImpl();
void InitDefaultsMultiMessageRequest();
void InitDefaultsMultiMessageResponseImpl();
void InitDefaultsMultiMessageResponse();
void InitDefaultsMultiMessageImpl();
void InitDefaultsMultiMessage();
void InitDefaultsPrivateMessageRequestImpl();
void InitDefaultsPrivateMessageRequest();
void InitDefaultsPrivateMessageResponseImpl();
void InitDefaultsPrivateMessageResponse();
void InitDefaultsPrivateMessageImpl();
void InitDefaultsPrivateMessage();
void InitDefaultsGetServerTimestampRequestImpl();
void InitDefaultsGetServerTimestampRequest();
void InitDefaultsGetServerTimestampResponseImpl();
void InitDefaultsGetServerTimestampResponse();
inline void InitDefaults() {
  InitDefaultsChatMessageRequest();
  InitDefaultsChatMessageResponse();
  InitDefaultsMultiMessageRequest();
  InitDefaultsMultiMessageResponse();
  InitDefaultsMultiMessage();
  InitDefaultsPrivateMessageRequest();
  InitDefaultsPrivateMessageResponse();
  InitDefaultsPrivateMessage();
  InitDefaultsGetServerTimestampRequest();
  InitDefaultsGetServerTimestampResponse();
}
}  // namespace protobuf_outer_2fchat_2eproto
namespace outer {
namespace chat {
class ChatMessageRequest;
class ChatMessageRequestDefaultTypeInternal;
extern ChatMessageRequestDefaultTypeInternal _ChatMessageRequest_default_instance_;
class ChatMessageResponse;
class ChatMessageResponseDefaultTypeInternal;
extern ChatMessageResponseDefaultTypeInternal _ChatMessageResponse_default_instance_;
class GetServerTimestampRequest;
class GetServerTimestampRequestDefaultTypeInternal;
extern GetServerTimestampRequestDefaultTypeInternal _GetServerTimestampRequest_default_instance_;
class GetServerTimestampResponse;
class GetServerTimestampResponseDefaultTypeInternal;
extern GetServerTimestampResponseDefaultTypeInternal _GetServerTimestampResponse_default_instance_;
class MultiMessage;
class MultiMessageDefaultTypeInternal;
extern MultiMessageDefaultTypeInternal _MultiMessage_default_instance_;
class MultiMessageRequest;
class MultiMessageRequestDefaultTypeInternal;
extern MultiMessageRequestDefaultTypeInternal _MultiMessageRequest_default_instance_;
class MultiMessageResponse;
class MultiMessageResponseDefaultTypeInternal;
extern MultiMessageResponseDefaultTypeInternal _MultiMessageResponse_default_instance_;
class PrivateMessage;
class PrivateMessageDefaultTypeInternal;
extern PrivateMessageDefaultTypeInternal _PrivateMessage_default_instance_;
class PrivateMessageRequest;
class PrivateMessageRequestDefaultTypeInternal;
extern PrivateMessageRequestDefaultTypeInternal _PrivateMessageRequest_default_instance_;
class PrivateMessageResponse;
class PrivateMessageResponseDefaultTypeInternal;
extern PrivateMessageResponseDefaultTypeInternal _PrivateMessageResponse_default_instance_;
}  // namespace chat
}  // namespace outer
namespace outer {
namespace chat {

// ===================================================================

class ChatMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chat.ChatMessageRequest) */ {
 public:
  ChatMessageRequest();
  virtual ~ChatMessageRequest();

  ChatMessageRequest(const ChatMessageRequest& from);

  inline ChatMessageRequest& operator=(const ChatMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatMessageRequest(ChatMessageRequest&& from) noexcept
    : ChatMessageRequest() {
    *this = ::std::move(from);
  }

  inline ChatMessageRequest& operator=(ChatMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMessageRequest* internal_default_instance() {
    return reinterpret_cast<const ChatMessageRequest*>(
               &_ChatMessageRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ChatMessageRequest* other);
  friend void swap(ChatMessageRequest& a, ChatMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatMessageRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatMessageRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatMessageRequest& from);
  void MergeFrom(const ChatMessageRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_nick = 3;
  void clear_from_nick();
  static const int kFromNickFieldNumber = 3;
  const ::std::string& from_nick() const;
  void set_from_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_from_nick(::std::string&& value);
  #endif
  void set_from_nick(const char* value);
  void set_from_nick(const char* value, size_t size);
  ::std::string* mutable_from_nick();
  ::std::string* release_from_nick();
  void set_allocated_from_nick(::std::string* from_nick);

  // string to_username = 4;
  void clear_to_username();
  static const int kToUsernameFieldNumber = 4;
  const ::std::string& to_username() const;
  void set_to_username(const ::std::string& value);
  #if LANG_CXX11
  void set_to_username(::std::string&& value);
  #endif
  void set_to_username(const char* value);
  void set_to_username(const char* value, size_t size);
  ::std::string* mutable_to_username();
  ::std::string* release_to_username();
  void set_allocated_to_username(::std::string* to_username);

  // bytes data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string msg_id = 7;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 7;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // string to_phone = 12;
  void clear_to_phone();
  static const int kToPhoneFieldNumber = 12;
  const ::std::string& to_phone() const;
  void set_to_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_to_phone(::std::string&& value);
  #endif
  void set_to_phone(const char* value);
  void set_to_phone(const char* value, size_t size);
  ::std::string* mutable_to_phone();
  ::std::string* release_to_phone();
  void set_allocated_to_phone(::std::string* to_phone);

  // string from_phone = 13;
  void clear_from_phone();
  static const int kFromPhoneFieldNumber = 13;
  const ::std::string& from_phone() const;
  void set_from_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_from_phone(::std::string&& value);
  #endif
  void set_from_phone(const char* value);
  void set_from_phone(const char* value, size_t size);
  ::std::string* mutable_from_phone();
  ::std::string* release_from_phone();
  void set_allocated_from_phone(::std::string* from_phone);

  // .common.msg.EMsgContentType msg_content_type = 5;
  void clear_msg_content_type();
  static const int kMsgContentTypeFieldNumber = 5;
  ::common::msg::EMsgContentType msg_content_type() const;
  void set_msg_content_type(::common::msg::EMsgContentType value);

  // .common.enumeration.EClientType from_client_type = 9;
  void clear_from_client_type();
  static const int kFromClientTypeFieldNumber = 9;
  ::common::enumeration::EClientType from_client_type() const;
  void set_from_client_type(::common::enumeration::EClientType value);

  // bool burn_after_read = 8;
  void clear_burn_after_read();
  static const int kBurnAfterReadFieldNumber = 8;
  bool burn_after_read() const;
  void set_burn_after_read(bool value);

  // bool is_jimao = 10;
  void clear_is_jimao();
  static const int kIsJimaoFieldNumber = 10;
  bool is_jimao() const;
  void set_is_jimao(bool value);

  // bool to_user_is_unregistered = 11;
  void clear_to_user_is_unregistered();
  static const int kToUserIsUnregisteredFieldNumber = 11;
  bool to_user_is_unregistered() const;
  void set_to_user_is_unregistered(bool value);

  // @@protoc_insertion_point(class_scope:outer.chat.ChatMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_nick_;
  ::google::protobuf::internal::ArenaStringPtr to_username_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::internal::ArenaStringPtr to_phone_;
  ::google::protobuf::internal::ArenaStringPtr from_phone_;
  int msg_content_type_;
  int from_client_type_;
  bool burn_after_read_;
  bool is_jimao_;
  bool to_user_is_unregistered_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchat_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchat_2eproto::InitDefaultsChatMessageRequestImpl();
};
// -------------------------------------------------------------------

class ChatMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chat.ChatMessageResponse) */ {
 public:
  ChatMessageResponse();
  virtual ~ChatMessageResponse();

  ChatMessageResponse(const ChatMessageResponse& from);

  inline ChatMessageResponse& operator=(const ChatMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatMessageResponse(ChatMessageResponse&& from) noexcept
    : ChatMessageResponse() {
    *this = ::std::move(from);
  }

  inline ChatMessageResponse& operator=(ChatMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMessageResponse* internal_default_instance() {
    return reinterpret_cast<const ChatMessageResponse*>(
               &_ChatMessageResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ChatMessageResponse* other);
  friend void swap(ChatMessageResponse& a, ChatMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatMessageResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatMessageResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatMessageResponse& from);
  void MergeFrom(const ChatMessageResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // string jimao_left_num = 4;
  void clear_jimao_left_num();
  static const int kJimaoLeftNumFieldNumber = 4;
  const ::std::string& jimao_left_num() const;
  void set_jimao_left_num(const ::std::string& value);
  #if LANG_CXX11
  void set_jimao_left_num(::std::string&& value);
  #endif
  void set_jimao_left_num(const char* value);
  void set_jimao_left_num(const char* value, size_t size);
  ::std::string* mutable_jimao_left_num();
  ::std::string* release_jimao_left_num();
  void set_allocated_jimao_left_num(::std::string* jimao_left_num);

  // uint64 guid = 2;
  void clear_guid();
  static const int kGuidFieldNumber = 2;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // uint32 user_enable = 6;
  void clear_user_enable();
  static const int kUserEnableFieldNumber = 6;
  ::google::protobuf::uint32 user_enable() const;
  void set_user_enable(::google::protobuf::uint32 value);

  // uint64 timestamp = 5;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.chat.ChatMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::internal::ArenaStringPtr jimao_left_num_;
  ::google::protobuf::uint64 guid_;
  int ret_;
  ::google::protobuf::uint32 user_enable_;
  ::google::protobuf::uint64 timestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchat_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchat_2eproto::InitDefaultsChatMessageResponseImpl();
};
// -------------------------------------------------------------------

class MultiMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chat.MultiMessageRequest) */ {
 public:
  MultiMessageRequest();
  virtual ~MultiMessageRequest();

  MultiMessageRequest(const MultiMessageRequest& from);

  inline MultiMessageRequest& operator=(const MultiMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultiMessageRequest(MultiMessageRequest&& from) noexcept
    : MultiMessageRequest() {
    *this = ::std::move(from);
  }

  inline MultiMessageRequest& operator=(MultiMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiMessageRequest* internal_default_instance() {
    return reinterpret_cast<const MultiMessageRequest*>(
               &_MultiMessageRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(MultiMessageRequest* other);
  friend void swap(MultiMessageRequest& a, MultiMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultiMessageRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiMessageRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiMessageRequest& from);
  void MergeFrom(const MultiMessageRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string to_username = 4;
  int to_username_size() const;
  void clear_to_username();
  static const int kToUsernameFieldNumber = 4;
  const ::std::string& to_username(int index) const;
  ::std::string* mutable_to_username(int index);
  void set_to_username(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_to_username(int index, ::std::string&& value);
  #endif
  void set_to_username(int index, const char* value);
  void set_to_username(int index, const char* value, size_t size);
  ::std::string* add_to_username();
  void add_to_username(const ::std::string& value);
  #if LANG_CXX11
  void add_to_username(::std::string&& value);
  #endif
  void add_to_username(const char* value);
  void add_to_username(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& to_username() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_to_username();

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_nick = 3;
  void clear_from_nick();
  static const int kFromNickFieldNumber = 3;
  const ::std::string& from_nick() const;
  void set_from_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_from_nick(::std::string&& value);
  #endif
  void set_from_nick(const char* value);
  void set_from_nick(const char* value, size_t size);
  ::std::string* mutable_from_nick();
  ::std::string* release_from_nick();
  void set_allocated_from_nick(::std::string* from_nick);

  // bytes data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string msg_id = 7;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 7;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.msg.EMsgContentType msg_content_type = 5;
  void clear_msg_content_type();
  static const int kMsgContentTypeFieldNumber = 5;
  ::common::msg::EMsgContentType msg_content_type() const;
  void set_msg_content_type(::common::msg::EMsgContentType value);

  // .common.enumeration.EClientType from_client_type = 9;
  void clear_from_client_type();
  static const int kFromClientTypeFieldNumber = 9;
  ::common::enumeration::EClientType from_client_type() const;
  void set_from_client_type(::common::enumeration::EClientType value);

  // bool burn_after_read = 8;
  void clear_burn_after_read();
  static const int kBurnAfterReadFieldNumber = 8;
  bool burn_after_read() const;
  void set_burn_after_read(bool value);

  // bool is_jimao = 10;
  void clear_is_jimao();
  static const int kIsJimaoFieldNumber = 10;
  bool is_jimao() const;
  void set_is_jimao(bool value);

  // @@protoc_insertion_point(class_scope:outer.chat.MultiMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> to_username_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_nick_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int msg_content_type_;
  int from_client_type_;
  bool burn_after_read_;
  bool is_jimao_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchat_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchat_2eproto::InitDefaultsMultiMessageRequestImpl();
};
// -------------------------------------------------------------------

class MultiMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chat.MultiMessageResponse) */ {
 public:
  MultiMessageResponse();
  virtual ~MultiMessageResponse();

  MultiMessageResponse(const MultiMessageResponse& from);

  inline MultiMessageResponse& operator=(const MultiMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultiMessageResponse(MultiMessageResponse&& from) noexcept
    : MultiMessageResponse() {
    *this = ::std::move(from);
  }

  inline MultiMessageResponse& operator=(MultiMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiMessageResponse* internal_default_instance() {
    return reinterpret_cast<const MultiMessageResponse*>(
               &_MultiMessageResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(MultiMessageResponse* other);
  friend void swap(MultiMessageResponse& a, MultiMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultiMessageResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiMessageResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiMessageResponse& from);
  void MergeFrom(const MultiMessageResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // string jimao_left_num = 4;
  void clear_jimao_left_num();
  static const int kJimaoLeftNumFieldNumber = 4;
  const ::std::string& jimao_left_num() const;
  void set_jimao_left_num(const ::std::string& value);
  #if LANG_CXX11
  void set_jimao_left_num(::std::string&& value);
  #endif
  void set_jimao_left_num(const char* value);
  void set_jimao_left_num(const char* value, size_t size);
  ::std::string* mutable_jimao_left_num();
  ::std::string* release_jimao_left_num();
  void set_allocated_jimao_left_num(::std::string* jimao_left_num);

  // uint64 guid = 2;
  void clear_guid();
  static const int kGuidFieldNumber = 2;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.chat.MultiMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::internal::ArenaStringPtr jimao_left_num_;
  ::google::protobuf::uint64 guid_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchat_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchat_2eproto::InitDefaultsMultiMessageResponseImpl();
};
// -------------------------------------------------------------------

class MultiMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chat.MultiMessage) */ {
 public:
  MultiMessage();
  virtual ~MultiMessage();

  MultiMessage(const MultiMessage& from);

  inline MultiMessage& operator=(const MultiMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultiMessage(MultiMessage&& from) noexcept
    : MultiMessage() {
    *this = ::std::move(from);
  }

  inline MultiMessage& operator=(MultiMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiMessage* internal_default_instance() {
    return reinterpret_cast<const MultiMessage*>(
               &_MultiMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(MultiMessage* other);
  friend void swap(MultiMessage& a, MultiMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultiMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiMessage& from);
  void MergeFrom(const MultiMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string receiver = 8;
  int receiver_size() const;
  void clear_receiver();
  static const int kReceiverFieldNumber = 8;
  const ::std::string& receiver(int index) const;
  ::std::string* mutable_receiver(int index);
  void set_receiver(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_receiver(int index, ::std::string&& value);
  #endif
  void set_receiver(int index, const char* value);
  void set_receiver(int index, const char* value, size_t size);
  ::std::string* add_receiver();
  void add_receiver(const ::std::string& value);
  #if LANG_CXX11
  void add_receiver(::std::string&& value);
  #endif
  void add_receiver(const char* value);
  void add_receiver(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& receiver() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_receiver();

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_nick = 3;
  void clear_from_nick();
  static const int kFromNickFieldNumber = 3;
  const ::std::string& from_nick() const;
  void set_from_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_from_nick(::std::string&& value);
  #endif
  void set_from_nick(const char* value);
  void set_from_nick(const char* value, size_t size);
  ::std::string* mutable_from_nick();
  ::std::string* release_from_nick();
  void set_allocated_from_nick(::std::string* from_nick);

  // bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string msg_id = 7;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 7;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // uint64 guid = 6;
  void clear_guid();
  static const int kGuidFieldNumber = 6;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // .common.msg.EMsgContentType msg_content_type = 4;
  void clear_msg_content_type();
  static const int kMsgContentTypeFieldNumber = 4;
  ::common::msg::EMsgContentType msg_content_type() const;
  void set_msg_content_type(::common::msg::EMsgContentType value);

  // bool is_jimao = 9;
  void clear_is_jimao();
  static const int kIsJimaoFieldNumber = 9;
  bool is_jimao() const;
  void set_is_jimao(bool value);

  // bool is_read = 10;
  void clear_is_read();
  static const int kIsReadFieldNumber = 10;
  bool is_read() const;
  void set_is_read(bool value);

  // @@protoc_insertion_point(class_scope:outer.chat.MultiMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> receiver_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_nick_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::uint64 guid_;
  int msg_content_type_;
  bool is_jimao_;
  bool is_read_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchat_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchat_2eproto::InitDefaultsMultiMessageImpl();
};
// -------------------------------------------------------------------

class PrivateMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chat.PrivateMessageRequest) */ {
 public:
  PrivateMessageRequest();
  virtual ~PrivateMessageRequest();

  PrivateMessageRequest(const PrivateMessageRequest& from);

  inline PrivateMessageRequest& operator=(const PrivateMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivateMessageRequest(PrivateMessageRequest&& from) noexcept
    : PrivateMessageRequest() {
    *this = ::std::move(from);
  }

  inline PrivateMessageRequest& operator=(PrivateMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivateMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivateMessageRequest* internal_default_instance() {
    return reinterpret_cast<const PrivateMessageRequest*>(
               &_PrivateMessageRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PrivateMessageRequest* other);
  friend void swap(PrivateMessageRequest& a, PrivateMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivateMessageRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PrivateMessageRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrivateMessageRequest& from);
  void MergeFrom(const PrivateMessageRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrivateMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_nick = 3;
  void clear_from_nick();
  static const int kFromNickFieldNumber = 3;
  const ::std::string& from_nick() const;
  void set_from_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_from_nick(::std::string&& value);
  #endif
  void set_from_nick(const char* value);
  void set_from_nick(const char* value, size_t size);
  ::std::string* mutable_from_nick();
  ::std::string* release_from_nick();
  void set_allocated_from_nick(::std::string* from_nick);

  // string to_username = 4;
  void clear_to_username();
  static const int kToUsernameFieldNumber = 4;
  const ::std::string& to_username() const;
  void set_to_username(const ::std::string& value);
  #if LANG_CXX11
  void set_to_username(::std::string&& value);
  #endif
  void set_to_username(const char* value);
  void set_to_username(const char* value, size_t size);
  ::std::string* mutable_to_username();
  ::std::string* release_to_username();
  void set_allocated_to_username(::std::string* to_username);

  // bytes data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string msg_id = 7;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 7;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.msg.EMsgContentType msg_content_type = 5;
  void clear_msg_content_type();
  static const int kMsgContentTypeFieldNumber = 5;
  ::common::msg::EMsgContentType msg_content_type() const;
  void set_msg_content_type(::common::msg::EMsgContentType value);

  // .common.enumeration.EClientType from_client_type = 9;
  void clear_from_client_type();
  static const int kFromClientTypeFieldNumber = 9;
  ::common::enumeration::EClientType from_client_type() const;
  void set_from_client_type(::common::enumeration::EClientType value);

  // bool burn_after_read = 8;
  void clear_burn_after_read();
  static const int kBurnAfterReadFieldNumber = 8;
  bool burn_after_read() const;
  void set_burn_after_read(bool value);

  // bool is_jimao = 10;
  void clear_is_jimao();
  static const int kIsJimaoFieldNumber = 10;
  bool is_jimao() const;
  void set_is_jimao(bool value);

  // @@protoc_insertion_point(class_scope:outer.chat.PrivateMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_nick_;
  ::google::protobuf::internal::ArenaStringPtr to_username_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int msg_content_type_;
  int from_client_type_;
  bool burn_after_read_;
  bool is_jimao_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchat_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchat_2eproto::InitDefaultsPrivateMessageRequestImpl();
};
// -------------------------------------------------------------------

class PrivateMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chat.PrivateMessageResponse) */ {
 public:
  PrivateMessageResponse();
  virtual ~PrivateMessageResponse();

  PrivateMessageResponse(const PrivateMessageResponse& from);

  inline PrivateMessageResponse& operator=(const PrivateMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivateMessageResponse(PrivateMessageResponse&& from) noexcept
    : PrivateMessageResponse() {
    *this = ::std::move(from);
  }

  inline PrivateMessageResponse& operator=(PrivateMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivateMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivateMessageResponse* internal_default_instance() {
    return reinterpret_cast<const PrivateMessageResponse*>(
               &_PrivateMessageResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PrivateMessageResponse* other);
  friend void swap(PrivateMessageResponse& a, PrivateMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivateMessageResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PrivateMessageResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrivateMessageResponse& from);
  void MergeFrom(const PrivateMessageResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrivateMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // string jimao_left_num = 4;
  void clear_jimao_left_num();
  static const int kJimaoLeftNumFieldNumber = 4;
  const ::std::string& jimao_left_num() const;
  void set_jimao_left_num(const ::std::string& value);
  #if LANG_CXX11
  void set_jimao_left_num(::std::string&& value);
  #endif
  void set_jimao_left_num(const char* value);
  void set_jimao_left_num(const char* value, size_t size);
  ::std::string* mutable_jimao_left_num();
  ::std::string* release_jimao_left_num();
  void set_allocated_jimao_left_num(::std::string* jimao_left_num);

  // uint64 guid = 2;
  void clear_guid();
  static const int kGuidFieldNumber = 2;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.chat.PrivateMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::internal::ArenaStringPtr jimao_left_num_;
  ::google::protobuf::uint64 guid_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchat_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchat_2eproto::InitDefaultsPrivateMessageResponseImpl();
};
// -------------------------------------------------------------------

class PrivateMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chat.PrivateMessage) */ {
 public:
  PrivateMessage();
  virtual ~PrivateMessage();

  PrivateMessage(const PrivateMessage& from);

  inline PrivateMessage& operator=(const PrivateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivateMessage(PrivateMessage&& from) noexcept
    : PrivateMessage() {
    *this = ::std::move(from);
  }

  inline PrivateMessage& operator=(PrivateMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivateMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivateMessage* internal_default_instance() {
    return reinterpret_cast<const PrivateMessage*>(
               &_PrivateMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(PrivateMessage* other);
  friend void swap(PrivateMessage& a, PrivateMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivateMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  PrivateMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PrivateMessage& from);
  void MergeFrom(const PrivateMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PrivateMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_nick = 3;
  void clear_from_nick();
  static const int kFromNickFieldNumber = 3;
  const ::std::string& from_nick() const;
  void set_from_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_from_nick(::std::string&& value);
  #endif
  void set_from_nick(const char* value);
  void set_from_nick(const char* value, size_t size);
  ::std::string* mutable_from_nick();
  ::std::string* release_from_nick();
  void set_allocated_from_nick(::std::string* from_nick);

  // bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string msg_id = 7;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 7;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // string to_username = 9;
  void clear_to_username();
  static const int kToUsernameFieldNumber = 9;
  const ::std::string& to_username() const;
  void set_to_username(const ::std::string& value);
  #if LANG_CXX11
  void set_to_username(::std::string&& value);
  #endif
  void set_to_username(const char* value);
  void set_to_username(const char* value, size_t size);
  ::std::string* mutable_to_username();
  ::std::string* release_to_username();
  void set_allocated_to_username(::std::string* to_username);

  // uint64 guid = 6;
  void clear_guid();
  static const int kGuidFieldNumber = 6;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // .common.msg.EMsgContentType msg_content_type = 4;
  void clear_msg_content_type();
  static const int kMsgContentTypeFieldNumber = 4;
  ::common::msg::EMsgContentType msg_content_type() const;
  void set_msg_content_type(::common::msg::EMsgContentType value);

  // bool burn_after_read = 8;
  void clear_burn_after_read();
  static const int kBurnAfterReadFieldNumber = 8;
  bool burn_after_read() const;
  void set_burn_after_read(bool value);

  // bool is_jimao = 10;
  void clear_is_jimao();
  static const int kIsJimaoFieldNumber = 10;
  bool is_jimao() const;
  void set_is_jimao(bool value);

  // @@protoc_insertion_point(class_scope:outer.chat.PrivateMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_nick_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::internal::ArenaStringPtr to_username_;
  ::google::protobuf::uint64 guid_;
  int msg_content_type_;
  bool burn_after_read_;
  bool is_jimao_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchat_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchat_2eproto::InitDefaultsPrivateMessageImpl();
};
// -------------------------------------------------------------------

class GetServerTimestampRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chat.GetServerTimestampRequest) */ {
 public:
  GetServerTimestampRequest();
  virtual ~GetServerTimestampRequest();

  GetServerTimestampRequest(const GetServerTimestampRequest& from);

  inline GetServerTimestampRequest& operator=(const GetServerTimestampRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetServerTimestampRequest(GetServerTimestampRequest&& from) noexcept
    : GetServerTimestampRequest() {
    *this = ::std::move(from);
  }

  inline GetServerTimestampRequest& operator=(GetServerTimestampRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServerTimestampRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServerTimestampRequest* internal_default_instance() {
    return reinterpret_cast<const GetServerTimestampRequest*>(
               &_GetServerTimestampRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GetServerTimestampRequest* other);
  friend void swap(GetServerTimestampRequest& a, GetServerTimestampRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetServerTimestampRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetServerTimestampRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetServerTimestampRequest& from);
  void MergeFrom(const GetServerTimestampRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetServerTimestampRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:outer.chat.GetServerTimestampRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchat_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchat_2eproto::InitDefaultsGetServerTimestampRequestImpl();
};
// -------------------------------------------------------------------

class GetServerTimestampResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.chat.GetServerTimestampResponse) */ {
 public:
  GetServerTimestampResponse();
  virtual ~GetServerTimestampResponse();

  GetServerTimestampResponse(const GetServerTimestampResponse& from);

  inline GetServerTimestampResponse& operator=(const GetServerTimestampResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetServerTimestampResponse(GetServerTimestampResponse&& from) noexcept
    : GetServerTimestampResponse() {
    *this = ::std::move(from);
  }

  inline GetServerTimestampResponse& operator=(GetServerTimestampResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServerTimestampResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServerTimestampResponse* internal_default_instance() {
    return reinterpret_cast<const GetServerTimestampResponse*>(
               &_GetServerTimestampResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(GetServerTimestampResponse* other);
  friend void swap(GetServerTimestampResponse& a, GetServerTimestampResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetServerTimestampResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetServerTimestampResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetServerTimestampResponse& from);
  void MergeFrom(const GetServerTimestampResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetServerTimestampResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.chat.GetServerTimestampResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 timestamp_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fchat_2eproto::TableStruct;
  friend void ::protobuf_outer_2fchat_2eproto::InitDefaultsGetServerTimestampResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatMessageRequest

// string from_username = 1;
inline void ChatMessageRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessageRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageRequest.from_username)
  return from_username_.GetNoArena();
}
inline void ChatMessageRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageRequest.from_username)
}
#if LANG_CXX11
inline void ChatMessageRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.ChatMessageRequest.from_username)
}
#endif
inline void ChatMessageRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.ChatMessageRequest.from_username)
}
inline void ChatMessageRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.ChatMessageRequest.from_username)
}
inline ::std::string* ChatMessageRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.ChatMessageRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessageRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.chat.ChatMessageRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessageRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.ChatMessageRequest.from_username)
}

// string appkey = 2;
inline void ChatMessageRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessageRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageRequest.appkey)
  return appkey_.GetNoArena();
}
inline void ChatMessageRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageRequest.appkey)
}
#if LANG_CXX11
inline void ChatMessageRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.ChatMessageRequest.appkey)
}
#endif
inline void ChatMessageRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.ChatMessageRequest.appkey)
}
inline void ChatMessageRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.ChatMessageRequest.appkey)
}
inline ::std::string* ChatMessageRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.ChatMessageRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessageRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.chat.ChatMessageRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessageRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.ChatMessageRequest.appkey)
}

// string from_nick = 3;
inline void ChatMessageRequest::clear_from_nick() {
  from_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessageRequest::from_nick() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageRequest.from_nick)
  return from_nick_.GetNoArena();
}
inline void ChatMessageRequest::set_from_nick(const ::std::string& value) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageRequest.from_nick)
}
#if LANG_CXX11
inline void ChatMessageRequest::set_from_nick(::std::string&& value) {
  
  from_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.ChatMessageRequest.from_nick)
}
#endif
inline void ChatMessageRequest::set_from_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.ChatMessageRequest.from_nick)
}
inline void ChatMessageRequest::set_from_nick(const char* value, size_t size) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.ChatMessageRequest.from_nick)
}
inline ::std::string* ChatMessageRequest::mutable_from_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.ChatMessageRequest.from_nick)
  return from_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessageRequest::release_from_nick() {
  // @@protoc_insertion_point(field_release:outer.chat.ChatMessageRequest.from_nick)
  
  return from_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessageRequest::set_allocated_from_nick(::std::string* from_nick) {
  if (from_nick != NULL) {
    
  } else {
    
  }
  from_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_nick);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.ChatMessageRequest.from_nick)
}

// string to_username = 4;
inline void ChatMessageRequest::clear_to_username() {
  to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessageRequest::to_username() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageRequest.to_username)
  return to_username_.GetNoArena();
}
inline void ChatMessageRequest::set_to_username(const ::std::string& value) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageRequest.to_username)
}
#if LANG_CXX11
inline void ChatMessageRequest::set_to_username(::std::string&& value) {
  
  to_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.ChatMessageRequest.to_username)
}
#endif
inline void ChatMessageRequest::set_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.ChatMessageRequest.to_username)
}
inline void ChatMessageRequest::set_to_username(const char* value, size_t size) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.ChatMessageRequest.to_username)
}
inline ::std::string* ChatMessageRequest::mutable_to_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.ChatMessageRequest.to_username)
  return to_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessageRequest::release_to_username() {
  // @@protoc_insertion_point(field_release:outer.chat.ChatMessageRequest.to_username)
  
  return to_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessageRequest::set_allocated_to_username(::std::string* to_username) {
  if (to_username != NULL) {
    
  } else {
    
  }
  to_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.ChatMessageRequest.to_username)
}

// .common.msg.EMsgContentType msg_content_type = 5;
inline void ChatMessageRequest::clear_msg_content_type() {
  msg_content_type_ = 0;
}
inline ::common::msg::EMsgContentType ChatMessageRequest::msg_content_type() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageRequest.msg_content_type)
  return static_cast< ::common::msg::EMsgContentType >(msg_content_type_);
}
inline void ChatMessageRequest::set_msg_content_type(::common::msg::EMsgContentType value) {
  
  msg_content_type_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageRequest.msg_content_type)
}

// bytes data = 6;
inline void ChatMessageRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessageRequest::data() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageRequest.data)
  return data_.GetNoArena();
}
inline void ChatMessageRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageRequest.data)
}
#if LANG_CXX11
inline void ChatMessageRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.ChatMessageRequest.data)
}
#endif
inline void ChatMessageRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.ChatMessageRequest.data)
}
inline void ChatMessageRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.ChatMessageRequest.data)
}
inline ::std::string* ChatMessageRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.ChatMessageRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessageRequest::release_data() {
  // @@protoc_insertion_point(field_release:outer.chat.ChatMessageRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessageRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.ChatMessageRequest.data)
}

// string msg_id = 7;
inline void ChatMessageRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessageRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void ChatMessageRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageRequest.msg_id)
}
#if LANG_CXX11
inline void ChatMessageRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.ChatMessageRequest.msg_id)
}
#endif
inline void ChatMessageRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.ChatMessageRequest.msg_id)
}
inline void ChatMessageRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.ChatMessageRequest.msg_id)
}
inline ::std::string* ChatMessageRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.ChatMessageRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessageRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.chat.ChatMessageRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessageRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.ChatMessageRequest.msg_id)
}

// bool burn_after_read = 8;
inline void ChatMessageRequest::clear_burn_after_read() {
  burn_after_read_ = false;
}
inline bool ChatMessageRequest::burn_after_read() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageRequest.burn_after_read)
  return burn_after_read_;
}
inline void ChatMessageRequest::set_burn_after_read(bool value) {
  
  burn_after_read_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageRequest.burn_after_read)
}

// .common.enumeration.EClientType from_client_type = 9;
inline void ChatMessageRequest::clear_from_client_type() {
  from_client_type_ = 0;
}
inline ::common::enumeration::EClientType ChatMessageRequest::from_client_type() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageRequest.from_client_type)
  return static_cast< ::common::enumeration::EClientType >(from_client_type_);
}
inline void ChatMessageRequest::set_from_client_type(::common::enumeration::EClientType value) {
  
  from_client_type_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageRequest.from_client_type)
}

// bool is_jimao = 10;
inline void ChatMessageRequest::clear_is_jimao() {
  is_jimao_ = false;
}
inline bool ChatMessageRequest::is_jimao() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageRequest.is_jimao)
  return is_jimao_;
}
inline void ChatMessageRequest::set_is_jimao(bool value) {
  
  is_jimao_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageRequest.is_jimao)
}

// bool to_user_is_unregistered = 11;
inline void ChatMessageRequest::clear_to_user_is_unregistered() {
  to_user_is_unregistered_ = false;
}
inline bool ChatMessageRequest::to_user_is_unregistered() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageRequest.to_user_is_unregistered)
  return to_user_is_unregistered_;
}
inline void ChatMessageRequest::set_to_user_is_unregistered(bool value) {
  
  to_user_is_unregistered_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageRequest.to_user_is_unregistered)
}

// string to_phone = 12;
inline void ChatMessageRequest::clear_to_phone() {
  to_phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessageRequest::to_phone() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageRequest.to_phone)
  return to_phone_.GetNoArena();
}
inline void ChatMessageRequest::set_to_phone(const ::std::string& value) {
  
  to_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageRequest.to_phone)
}
#if LANG_CXX11
inline void ChatMessageRequest::set_to_phone(::std::string&& value) {
  
  to_phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.ChatMessageRequest.to_phone)
}
#endif
inline void ChatMessageRequest::set_to_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.ChatMessageRequest.to_phone)
}
inline void ChatMessageRequest::set_to_phone(const char* value, size_t size) {
  
  to_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.ChatMessageRequest.to_phone)
}
inline ::std::string* ChatMessageRequest::mutable_to_phone() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.ChatMessageRequest.to_phone)
  return to_phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessageRequest::release_to_phone() {
  // @@protoc_insertion_point(field_release:outer.chat.ChatMessageRequest.to_phone)
  
  return to_phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessageRequest::set_allocated_to_phone(::std::string* to_phone) {
  if (to_phone != NULL) {
    
  } else {
    
  }
  to_phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_phone);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.ChatMessageRequest.to_phone)
}

// string from_phone = 13;
inline void ChatMessageRequest::clear_from_phone() {
  from_phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessageRequest::from_phone() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageRequest.from_phone)
  return from_phone_.GetNoArena();
}
inline void ChatMessageRequest::set_from_phone(const ::std::string& value) {
  
  from_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageRequest.from_phone)
}
#if LANG_CXX11
inline void ChatMessageRequest::set_from_phone(::std::string&& value) {
  
  from_phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.ChatMessageRequest.from_phone)
}
#endif
inline void ChatMessageRequest::set_from_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.ChatMessageRequest.from_phone)
}
inline void ChatMessageRequest::set_from_phone(const char* value, size_t size) {
  
  from_phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.ChatMessageRequest.from_phone)
}
inline ::std::string* ChatMessageRequest::mutable_from_phone() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.ChatMessageRequest.from_phone)
  return from_phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessageRequest::release_from_phone() {
  // @@protoc_insertion_point(field_release:outer.chat.ChatMessageRequest.from_phone)
  
  return from_phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessageRequest::set_allocated_from_phone(::std::string* from_phone) {
  if (from_phone != NULL) {
    
  } else {
    
  }
  from_phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_phone);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.ChatMessageRequest.from_phone)
}

// -------------------------------------------------------------------

// ChatMessageResponse

// .common.errcode.EErrorCode ret = 1;
inline void ChatMessageResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode ChatMessageResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void ChatMessageResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageResponse.ret)
}

// uint64 guid = 2;
inline void ChatMessageResponse::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChatMessageResponse::guid() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageResponse.guid)
  return guid_;
}
inline void ChatMessageResponse::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageResponse.guid)
}

// string msg_id = 3;
inline void ChatMessageResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessageResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void ChatMessageResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageResponse.msg_id)
}
#if LANG_CXX11
inline void ChatMessageResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.ChatMessageResponse.msg_id)
}
#endif
inline void ChatMessageResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.ChatMessageResponse.msg_id)
}
inline void ChatMessageResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.ChatMessageResponse.msg_id)
}
inline ::std::string* ChatMessageResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.ChatMessageResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessageResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.chat.ChatMessageResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessageResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.ChatMessageResponse.msg_id)
}

// string jimao_left_num = 4;
inline void ChatMessageResponse::clear_jimao_left_num() {
  jimao_left_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessageResponse::jimao_left_num() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageResponse.jimao_left_num)
  return jimao_left_num_.GetNoArena();
}
inline void ChatMessageResponse::set_jimao_left_num(const ::std::string& value) {
  
  jimao_left_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageResponse.jimao_left_num)
}
#if LANG_CXX11
inline void ChatMessageResponse::set_jimao_left_num(::std::string&& value) {
  
  jimao_left_num_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.ChatMessageResponse.jimao_left_num)
}
#endif
inline void ChatMessageResponse::set_jimao_left_num(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  jimao_left_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.ChatMessageResponse.jimao_left_num)
}
inline void ChatMessageResponse::set_jimao_left_num(const char* value, size_t size) {
  
  jimao_left_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.ChatMessageResponse.jimao_left_num)
}
inline ::std::string* ChatMessageResponse::mutable_jimao_left_num() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.ChatMessageResponse.jimao_left_num)
  return jimao_left_num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessageResponse::release_jimao_left_num() {
  // @@protoc_insertion_point(field_release:outer.chat.ChatMessageResponse.jimao_left_num)
  
  return jimao_left_num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessageResponse::set_allocated_jimao_left_num(::std::string* jimao_left_num) {
  if (jimao_left_num != NULL) {
    
  } else {
    
  }
  jimao_left_num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jimao_left_num);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.ChatMessageResponse.jimao_left_num)
}

// uint64 timestamp = 5;
inline void ChatMessageResponse::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChatMessageResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageResponse.timestamp)
  return timestamp_;
}
inline void ChatMessageResponse::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageResponse.timestamp)
}

// uint32 user_enable = 6;
inline void ChatMessageResponse::clear_user_enable() {
  user_enable_ = 0u;
}
inline ::google::protobuf::uint32 ChatMessageResponse::user_enable() const {
  // @@protoc_insertion_point(field_get:outer.chat.ChatMessageResponse.user_enable)
  return user_enable_;
}
inline void ChatMessageResponse::set_user_enable(::google::protobuf::uint32 value) {
  
  user_enable_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.ChatMessageResponse.user_enable)
}

// -------------------------------------------------------------------

// MultiMessageRequest

// string from_username = 1;
inline void MultiMessageRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiMessageRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessageRequest.from_username)
  return from_username_.GetNoArena();
}
inline void MultiMessageRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessageRequest.from_username)
}
#if LANG_CXX11
inline void MultiMessageRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.MultiMessageRequest.from_username)
}
#endif
inline void MultiMessageRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.MultiMessageRequest.from_username)
}
inline void MultiMessageRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.MultiMessageRequest.from_username)
}
inline ::std::string* MultiMessageRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.MultiMessageRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiMessageRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.chat.MultiMessageRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiMessageRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.MultiMessageRequest.from_username)
}

// string appkey = 2;
inline void MultiMessageRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiMessageRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessageRequest.appkey)
  return appkey_.GetNoArena();
}
inline void MultiMessageRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessageRequest.appkey)
}
#if LANG_CXX11
inline void MultiMessageRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.MultiMessageRequest.appkey)
}
#endif
inline void MultiMessageRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.MultiMessageRequest.appkey)
}
inline void MultiMessageRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.MultiMessageRequest.appkey)
}
inline ::std::string* MultiMessageRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.MultiMessageRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiMessageRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.chat.MultiMessageRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiMessageRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.MultiMessageRequest.appkey)
}

// string from_nick = 3;
inline void MultiMessageRequest::clear_from_nick() {
  from_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiMessageRequest::from_nick() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessageRequest.from_nick)
  return from_nick_.GetNoArena();
}
inline void MultiMessageRequest::set_from_nick(const ::std::string& value) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessageRequest.from_nick)
}
#if LANG_CXX11
inline void MultiMessageRequest::set_from_nick(::std::string&& value) {
  
  from_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.MultiMessageRequest.from_nick)
}
#endif
inline void MultiMessageRequest::set_from_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.MultiMessageRequest.from_nick)
}
inline void MultiMessageRequest::set_from_nick(const char* value, size_t size) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.MultiMessageRequest.from_nick)
}
inline ::std::string* MultiMessageRequest::mutable_from_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.MultiMessageRequest.from_nick)
  return from_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiMessageRequest::release_from_nick() {
  // @@protoc_insertion_point(field_release:outer.chat.MultiMessageRequest.from_nick)
  
  return from_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiMessageRequest::set_allocated_from_nick(::std::string* from_nick) {
  if (from_nick != NULL) {
    
  } else {
    
  }
  from_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_nick);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.MultiMessageRequest.from_nick)
}

// repeated string to_username = 4;
inline int MultiMessageRequest::to_username_size() const {
  return to_username_.size();
}
inline void MultiMessageRequest::clear_to_username() {
  to_username_.Clear();
}
inline const ::std::string& MultiMessageRequest::to_username(int index) const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessageRequest.to_username)
  return to_username_.Get(index);
}
inline ::std::string* MultiMessageRequest::mutable_to_username(int index) {
  // @@protoc_insertion_point(field_mutable:outer.chat.MultiMessageRequest.to_username)
  return to_username_.Mutable(index);
}
inline void MultiMessageRequest::set_to_username(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessageRequest.to_username)
  to_username_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MultiMessageRequest::set_to_username(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessageRequest.to_username)
  to_username_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MultiMessageRequest::set_to_username(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  to_username_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.chat.MultiMessageRequest.to_username)
}
inline void MultiMessageRequest::set_to_username(int index, const char* value, size_t size) {
  to_username_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.chat.MultiMessageRequest.to_username)
}
inline ::std::string* MultiMessageRequest::add_to_username() {
  // @@protoc_insertion_point(field_add_mutable:outer.chat.MultiMessageRequest.to_username)
  return to_username_.Add();
}
inline void MultiMessageRequest::add_to_username(const ::std::string& value) {
  to_username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.chat.MultiMessageRequest.to_username)
}
#if LANG_CXX11
inline void MultiMessageRequest::add_to_username(::std::string&& value) {
  to_username_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.chat.MultiMessageRequest.to_username)
}
#endif
inline void MultiMessageRequest::add_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  to_username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.chat.MultiMessageRequest.to_username)
}
inline void MultiMessageRequest::add_to_username(const char* value, size_t size) {
  to_username_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.chat.MultiMessageRequest.to_username)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MultiMessageRequest::to_username() const {
  // @@protoc_insertion_point(field_list:outer.chat.MultiMessageRequest.to_username)
  return to_username_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MultiMessageRequest::mutable_to_username() {
  // @@protoc_insertion_point(field_mutable_list:outer.chat.MultiMessageRequest.to_username)
  return &to_username_;
}

// .common.msg.EMsgContentType msg_content_type = 5;
inline void MultiMessageRequest::clear_msg_content_type() {
  msg_content_type_ = 0;
}
inline ::common::msg::EMsgContentType MultiMessageRequest::msg_content_type() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessageRequest.msg_content_type)
  return static_cast< ::common::msg::EMsgContentType >(msg_content_type_);
}
inline void MultiMessageRequest::set_msg_content_type(::common::msg::EMsgContentType value) {
  
  msg_content_type_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessageRequest.msg_content_type)
}

// bytes data = 6;
inline void MultiMessageRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiMessageRequest::data() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessageRequest.data)
  return data_.GetNoArena();
}
inline void MultiMessageRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessageRequest.data)
}
#if LANG_CXX11
inline void MultiMessageRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.MultiMessageRequest.data)
}
#endif
inline void MultiMessageRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.MultiMessageRequest.data)
}
inline void MultiMessageRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.MultiMessageRequest.data)
}
inline ::std::string* MultiMessageRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.MultiMessageRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiMessageRequest::release_data() {
  // @@protoc_insertion_point(field_release:outer.chat.MultiMessageRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiMessageRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.MultiMessageRequest.data)
}

// string msg_id = 7;
inline void MultiMessageRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiMessageRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessageRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void MultiMessageRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessageRequest.msg_id)
}
#if LANG_CXX11
inline void MultiMessageRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.MultiMessageRequest.msg_id)
}
#endif
inline void MultiMessageRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.MultiMessageRequest.msg_id)
}
inline void MultiMessageRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.MultiMessageRequest.msg_id)
}
inline ::std::string* MultiMessageRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.MultiMessageRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiMessageRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.chat.MultiMessageRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiMessageRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.MultiMessageRequest.msg_id)
}

// bool burn_after_read = 8;
inline void MultiMessageRequest::clear_burn_after_read() {
  burn_after_read_ = false;
}
inline bool MultiMessageRequest::burn_after_read() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessageRequest.burn_after_read)
  return burn_after_read_;
}
inline void MultiMessageRequest::set_burn_after_read(bool value) {
  
  burn_after_read_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessageRequest.burn_after_read)
}

// .common.enumeration.EClientType from_client_type = 9;
inline void MultiMessageRequest::clear_from_client_type() {
  from_client_type_ = 0;
}
inline ::common::enumeration::EClientType MultiMessageRequest::from_client_type() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessageRequest.from_client_type)
  return static_cast< ::common::enumeration::EClientType >(from_client_type_);
}
inline void MultiMessageRequest::set_from_client_type(::common::enumeration::EClientType value) {
  
  from_client_type_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessageRequest.from_client_type)
}

// bool is_jimao = 10;
inline void MultiMessageRequest::clear_is_jimao() {
  is_jimao_ = false;
}
inline bool MultiMessageRequest::is_jimao() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessageRequest.is_jimao)
  return is_jimao_;
}
inline void MultiMessageRequest::set_is_jimao(bool value) {
  
  is_jimao_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessageRequest.is_jimao)
}

// -------------------------------------------------------------------

// MultiMessageResponse

// .common.errcode.EErrorCode ret = 1;
inline void MultiMessageResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode MultiMessageResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessageResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void MultiMessageResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessageResponse.ret)
}

// uint64 guid = 2;
inline void MultiMessageResponse::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MultiMessageResponse::guid() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessageResponse.guid)
  return guid_;
}
inline void MultiMessageResponse::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessageResponse.guid)
}

// string msg_id = 3;
inline void MultiMessageResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiMessageResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessageResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void MultiMessageResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessageResponse.msg_id)
}
#if LANG_CXX11
inline void MultiMessageResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.MultiMessageResponse.msg_id)
}
#endif
inline void MultiMessageResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.MultiMessageResponse.msg_id)
}
inline void MultiMessageResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.MultiMessageResponse.msg_id)
}
inline ::std::string* MultiMessageResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.MultiMessageResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiMessageResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.chat.MultiMessageResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiMessageResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.MultiMessageResponse.msg_id)
}

// string jimao_left_num = 4;
inline void MultiMessageResponse::clear_jimao_left_num() {
  jimao_left_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiMessageResponse::jimao_left_num() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessageResponse.jimao_left_num)
  return jimao_left_num_.GetNoArena();
}
inline void MultiMessageResponse::set_jimao_left_num(const ::std::string& value) {
  
  jimao_left_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessageResponse.jimao_left_num)
}
#if LANG_CXX11
inline void MultiMessageResponse::set_jimao_left_num(::std::string&& value) {
  
  jimao_left_num_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.MultiMessageResponse.jimao_left_num)
}
#endif
inline void MultiMessageResponse::set_jimao_left_num(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  jimao_left_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.MultiMessageResponse.jimao_left_num)
}
inline void MultiMessageResponse::set_jimao_left_num(const char* value, size_t size) {
  
  jimao_left_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.MultiMessageResponse.jimao_left_num)
}
inline ::std::string* MultiMessageResponse::mutable_jimao_left_num() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.MultiMessageResponse.jimao_left_num)
  return jimao_left_num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiMessageResponse::release_jimao_left_num() {
  // @@protoc_insertion_point(field_release:outer.chat.MultiMessageResponse.jimao_left_num)
  
  return jimao_left_num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiMessageResponse::set_allocated_jimao_left_num(::std::string* jimao_left_num) {
  if (jimao_left_num != NULL) {
    
  } else {
    
  }
  jimao_left_num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jimao_left_num);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.MultiMessageResponse.jimao_left_num)
}

// -------------------------------------------------------------------

// MultiMessage

// string from_username = 1;
inline void MultiMessage::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiMessage::from_username() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessage.from_username)
  return from_username_.GetNoArena();
}
inline void MultiMessage::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessage.from_username)
}
#if LANG_CXX11
inline void MultiMessage::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.MultiMessage.from_username)
}
#endif
inline void MultiMessage::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.MultiMessage.from_username)
}
inline void MultiMessage::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.MultiMessage.from_username)
}
inline ::std::string* MultiMessage::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.MultiMessage.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiMessage::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.chat.MultiMessage.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiMessage::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.MultiMessage.from_username)
}

// string appkey = 2;
inline void MultiMessage::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiMessage::appkey() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessage.appkey)
  return appkey_.GetNoArena();
}
inline void MultiMessage::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessage.appkey)
}
#if LANG_CXX11
inline void MultiMessage::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.MultiMessage.appkey)
}
#endif
inline void MultiMessage::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.MultiMessage.appkey)
}
inline void MultiMessage::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.MultiMessage.appkey)
}
inline ::std::string* MultiMessage::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.MultiMessage.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiMessage::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.chat.MultiMessage.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiMessage::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.MultiMessage.appkey)
}

// string from_nick = 3;
inline void MultiMessage::clear_from_nick() {
  from_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiMessage::from_nick() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessage.from_nick)
  return from_nick_.GetNoArena();
}
inline void MultiMessage::set_from_nick(const ::std::string& value) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessage.from_nick)
}
#if LANG_CXX11
inline void MultiMessage::set_from_nick(::std::string&& value) {
  
  from_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.MultiMessage.from_nick)
}
#endif
inline void MultiMessage::set_from_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.MultiMessage.from_nick)
}
inline void MultiMessage::set_from_nick(const char* value, size_t size) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.MultiMessage.from_nick)
}
inline ::std::string* MultiMessage::mutable_from_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.MultiMessage.from_nick)
  return from_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiMessage::release_from_nick() {
  // @@protoc_insertion_point(field_release:outer.chat.MultiMessage.from_nick)
  
  return from_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiMessage::set_allocated_from_nick(::std::string* from_nick) {
  if (from_nick != NULL) {
    
  } else {
    
  }
  from_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_nick);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.MultiMessage.from_nick)
}

// .common.msg.EMsgContentType msg_content_type = 4;
inline void MultiMessage::clear_msg_content_type() {
  msg_content_type_ = 0;
}
inline ::common::msg::EMsgContentType MultiMessage::msg_content_type() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessage.msg_content_type)
  return static_cast< ::common::msg::EMsgContentType >(msg_content_type_);
}
inline void MultiMessage::set_msg_content_type(::common::msg::EMsgContentType value) {
  
  msg_content_type_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessage.msg_content_type)
}

// bytes data = 5;
inline void MultiMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiMessage::data() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessage.data)
  return data_.GetNoArena();
}
inline void MultiMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessage.data)
}
#if LANG_CXX11
inline void MultiMessage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.MultiMessage.data)
}
#endif
inline void MultiMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.MultiMessage.data)
}
inline void MultiMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.MultiMessage.data)
}
inline ::std::string* MultiMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.MultiMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiMessage::release_data() {
  // @@protoc_insertion_point(field_release:outer.chat.MultiMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.MultiMessage.data)
}

// uint64 guid = 6;
inline void MultiMessage::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MultiMessage::guid() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessage.guid)
  return guid_;
}
inline void MultiMessage::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessage.guid)
}

// string msg_id = 7;
inline void MultiMessage::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiMessage::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessage.msg_id)
  return msg_id_.GetNoArena();
}
inline void MultiMessage::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessage.msg_id)
}
#if LANG_CXX11
inline void MultiMessage::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.MultiMessage.msg_id)
}
#endif
inline void MultiMessage::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.MultiMessage.msg_id)
}
inline void MultiMessage::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.MultiMessage.msg_id)
}
inline ::std::string* MultiMessage::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.MultiMessage.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiMessage::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.chat.MultiMessage.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiMessage::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.MultiMessage.msg_id)
}

// repeated string receiver = 8;
inline int MultiMessage::receiver_size() const {
  return receiver_.size();
}
inline void MultiMessage::clear_receiver() {
  receiver_.Clear();
}
inline const ::std::string& MultiMessage::receiver(int index) const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessage.receiver)
  return receiver_.Get(index);
}
inline ::std::string* MultiMessage::mutable_receiver(int index) {
  // @@protoc_insertion_point(field_mutable:outer.chat.MultiMessage.receiver)
  return receiver_.Mutable(index);
}
inline void MultiMessage::set_receiver(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessage.receiver)
  receiver_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MultiMessage::set_receiver(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessage.receiver)
  receiver_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MultiMessage::set_receiver(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  receiver_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.chat.MultiMessage.receiver)
}
inline void MultiMessage::set_receiver(int index, const char* value, size_t size) {
  receiver_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.chat.MultiMessage.receiver)
}
inline ::std::string* MultiMessage::add_receiver() {
  // @@protoc_insertion_point(field_add_mutable:outer.chat.MultiMessage.receiver)
  return receiver_.Add();
}
inline void MultiMessage::add_receiver(const ::std::string& value) {
  receiver_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.chat.MultiMessage.receiver)
}
#if LANG_CXX11
inline void MultiMessage::add_receiver(::std::string&& value) {
  receiver_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.chat.MultiMessage.receiver)
}
#endif
inline void MultiMessage::add_receiver(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  receiver_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.chat.MultiMessage.receiver)
}
inline void MultiMessage::add_receiver(const char* value, size_t size) {
  receiver_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.chat.MultiMessage.receiver)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MultiMessage::receiver() const {
  // @@protoc_insertion_point(field_list:outer.chat.MultiMessage.receiver)
  return receiver_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MultiMessage::mutable_receiver() {
  // @@protoc_insertion_point(field_mutable_list:outer.chat.MultiMessage.receiver)
  return &receiver_;
}

// bool is_jimao = 9;
inline void MultiMessage::clear_is_jimao() {
  is_jimao_ = false;
}
inline bool MultiMessage::is_jimao() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessage.is_jimao)
  return is_jimao_;
}
inline void MultiMessage::set_is_jimao(bool value) {
  
  is_jimao_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessage.is_jimao)
}

// bool is_read = 10;
inline void MultiMessage::clear_is_read() {
  is_read_ = false;
}
inline bool MultiMessage::is_read() const {
  // @@protoc_insertion_point(field_get:outer.chat.MultiMessage.is_read)
  return is_read_;
}
inline void MultiMessage::set_is_read(bool value) {
  
  is_read_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.MultiMessage.is_read)
}

// -------------------------------------------------------------------

// PrivateMessageRequest

// string from_username = 1;
inline void PrivateMessageRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateMessageRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessageRequest.from_username)
  return from_username_.GetNoArena();
}
inline void PrivateMessageRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessageRequest.from_username)
}
#if LANG_CXX11
inline void PrivateMessageRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.PrivateMessageRequest.from_username)
}
#endif
inline void PrivateMessageRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.PrivateMessageRequest.from_username)
}
inline void PrivateMessageRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.PrivateMessageRequest.from_username)
}
inline ::std::string* PrivateMessageRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.PrivateMessageRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateMessageRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.chat.PrivateMessageRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateMessageRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.PrivateMessageRequest.from_username)
}

// string appkey = 2;
inline void PrivateMessageRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateMessageRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessageRequest.appkey)
  return appkey_.GetNoArena();
}
inline void PrivateMessageRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessageRequest.appkey)
}
#if LANG_CXX11
inline void PrivateMessageRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.PrivateMessageRequest.appkey)
}
#endif
inline void PrivateMessageRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.PrivateMessageRequest.appkey)
}
inline void PrivateMessageRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.PrivateMessageRequest.appkey)
}
inline ::std::string* PrivateMessageRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.PrivateMessageRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateMessageRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.chat.PrivateMessageRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateMessageRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.PrivateMessageRequest.appkey)
}

// string from_nick = 3;
inline void PrivateMessageRequest::clear_from_nick() {
  from_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateMessageRequest::from_nick() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessageRequest.from_nick)
  return from_nick_.GetNoArena();
}
inline void PrivateMessageRequest::set_from_nick(const ::std::string& value) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessageRequest.from_nick)
}
#if LANG_CXX11
inline void PrivateMessageRequest::set_from_nick(::std::string&& value) {
  
  from_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.PrivateMessageRequest.from_nick)
}
#endif
inline void PrivateMessageRequest::set_from_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.PrivateMessageRequest.from_nick)
}
inline void PrivateMessageRequest::set_from_nick(const char* value, size_t size) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.PrivateMessageRequest.from_nick)
}
inline ::std::string* PrivateMessageRequest::mutable_from_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.PrivateMessageRequest.from_nick)
  return from_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateMessageRequest::release_from_nick() {
  // @@protoc_insertion_point(field_release:outer.chat.PrivateMessageRequest.from_nick)
  
  return from_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateMessageRequest::set_allocated_from_nick(::std::string* from_nick) {
  if (from_nick != NULL) {
    
  } else {
    
  }
  from_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_nick);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.PrivateMessageRequest.from_nick)
}

// string to_username = 4;
inline void PrivateMessageRequest::clear_to_username() {
  to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateMessageRequest::to_username() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessageRequest.to_username)
  return to_username_.GetNoArena();
}
inline void PrivateMessageRequest::set_to_username(const ::std::string& value) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessageRequest.to_username)
}
#if LANG_CXX11
inline void PrivateMessageRequest::set_to_username(::std::string&& value) {
  
  to_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.PrivateMessageRequest.to_username)
}
#endif
inline void PrivateMessageRequest::set_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.PrivateMessageRequest.to_username)
}
inline void PrivateMessageRequest::set_to_username(const char* value, size_t size) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.PrivateMessageRequest.to_username)
}
inline ::std::string* PrivateMessageRequest::mutable_to_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.PrivateMessageRequest.to_username)
  return to_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateMessageRequest::release_to_username() {
  // @@protoc_insertion_point(field_release:outer.chat.PrivateMessageRequest.to_username)
  
  return to_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateMessageRequest::set_allocated_to_username(::std::string* to_username) {
  if (to_username != NULL) {
    
  } else {
    
  }
  to_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.PrivateMessageRequest.to_username)
}

// .common.msg.EMsgContentType msg_content_type = 5;
inline void PrivateMessageRequest::clear_msg_content_type() {
  msg_content_type_ = 0;
}
inline ::common::msg::EMsgContentType PrivateMessageRequest::msg_content_type() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessageRequest.msg_content_type)
  return static_cast< ::common::msg::EMsgContentType >(msg_content_type_);
}
inline void PrivateMessageRequest::set_msg_content_type(::common::msg::EMsgContentType value) {
  
  msg_content_type_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessageRequest.msg_content_type)
}

// bytes data = 6;
inline void PrivateMessageRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateMessageRequest::data() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessageRequest.data)
  return data_.GetNoArena();
}
inline void PrivateMessageRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessageRequest.data)
}
#if LANG_CXX11
inline void PrivateMessageRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.PrivateMessageRequest.data)
}
#endif
inline void PrivateMessageRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.PrivateMessageRequest.data)
}
inline void PrivateMessageRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.PrivateMessageRequest.data)
}
inline ::std::string* PrivateMessageRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.PrivateMessageRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateMessageRequest::release_data() {
  // @@protoc_insertion_point(field_release:outer.chat.PrivateMessageRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateMessageRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.PrivateMessageRequest.data)
}

// string msg_id = 7;
inline void PrivateMessageRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateMessageRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessageRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void PrivateMessageRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessageRequest.msg_id)
}
#if LANG_CXX11
inline void PrivateMessageRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.PrivateMessageRequest.msg_id)
}
#endif
inline void PrivateMessageRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.PrivateMessageRequest.msg_id)
}
inline void PrivateMessageRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.PrivateMessageRequest.msg_id)
}
inline ::std::string* PrivateMessageRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.PrivateMessageRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateMessageRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.chat.PrivateMessageRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateMessageRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.PrivateMessageRequest.msg_id)
}

// bool burn_after_read = 8;
inline void PrivateMessageRequest::clear_burn_after_read() {
  burn_after_read_ = false;
}
inline bool PrivateMessageRequest::burn_after_read() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessageRequest.burn_after_read)
  return burn_after_read_;
}
inline void PrivateMessageRequest::set_burn_after_read(bool value) {
  
  burn_after_read_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessageRequest.burn_after_read)
}

// .common.enumeration.EClientType from_client_type = 9;
inline void PrivateMessageRequest::clear_from_client_type() {
  from_client_type_ = 0;
}
inline ::common::enumeration::EClientType PrivateMessageRequest::from_client_type() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessageRequest.from_client_type)
  return static_cast< ::common::enumeration::EClientType >(from_client_type_);
}
inline void PrivateMessageRequest::set_from_client_type(::common::enumeration::EClientType value) {
  
  from_client_type_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessageRequest.from_client_type)
}

// bool is_jimao = 10;
inline void PrivateMessageRequest::clear_is_jimao() {
  is_jimao_ = false;
}
inline bool PrivateMessageRequest::is_jimao() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessageRequest.is_jimao)
  return is_jimao_;
}
inline void PrivateMessageRequest::set_is_jimao(bool value) {
  
  is_jimao_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessageRequest.is_jimao)
}

// -------------------------------------------------------------------

// PrivateMessageResponse

// .common.errcode.EErrorCode ret = 1;
inline void PrivateMessageResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode PrivateMessageResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessageResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void PrivateMessageResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessageResponse.ret)
}

// uint64 guid = 2;
inline void PrivateMessageResponse::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PrivateMessageResponse::guid() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessageResponse.guid)
  return guid_;
}
inline void PrivateMessageResponse::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessageResponse.guid)
}

// string msg_id = 3;
inline void PrivateMessageResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateMessageResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessageResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void PrivateMessageResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessageResponse.msg_id)
}
#if LANG_CXX11
inline void PrivateMessageResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.PrivateMessageResponse.msg_id)
}
#endif
inline void PrivateMessageResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.PrivateMessageResponse.msg_id)
}
inline void PrivateMessageResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.PrivateMessageResponse.msg_id)
}
inline ::std::string* PrivateMessageResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.PrivateMessageResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateMessageResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.chat.PrivateMessageResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateMessageResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.PrivateMessageResponse.msg_id)
}

// string jimao_left_num = 4;
inline void PrivateMessageResponse::clear_jimao_left_num() {
  jimao_left_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateMessageResponse::jimao_left_num() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessageResponse.jimao_left_num)
  return jimao_left_num_.GetNoArena();
}
inline void PrivateMessageResponse::set_jimao_left_num(const ::std::string& value) {
  
  jimao_left_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessageResponse.jimao_left_num)
}
#if LANG_CXX11
inline void PrivateMessageResponse::set_jimao_left_num(::std::string&& value) {
  
  jimao_left_num_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.PrivateMessageResponse.jimao_left_num)
}
#endif
inline void PrivateMessageResponse::set_jimao_left_num(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  jimao_left_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.PrivateMessageResponse.jimao_left_num)
}
inline void PrivateMessageResponse::set_jimao_left_num(const char* value, size_t size) {
  
  jimao_left_num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.PrivateMessageResponse.jimao_left_num)
}
inline ::std::string* PrivateMessageResponse::mutable_jimao_left_num() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.PrivateMessageResponse.jimao_left_num)
  return jimao_left_num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateMessageResponse::release_jimao_left_num() {
  // @@protoc_insertion_point(field_release:outer.chat.PrivateMessageResponse.jimao_left_num)
  
  return jimao_left_num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateMessageResponse::set_allocated_jimao_left_num(::std::string* jimao_left_num) {
  if (jimao_left_num != NULL) {
    
  } else {
    
  }
  jimao_left_num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jimao_left_num);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.PrivateMessageResponse.jimao_left_num)
}

// -------------------------------------------------------------------

// PrivateMessage

// string from_username = 1;
inline void PrivateMessage::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateMessage::from_username() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessage.from_username)
  return from_username_.GetNoArena();
}
inline void PrivateMessage::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessage.from_username)
}
#if LANG_CXX11
inline void PrivateMessage::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.PrivateMessage.from_username)
}
#endif
inline void PrivateMessage::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.PrivateMessage.from_username)
}
inline void PrivateMessage::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.PrivateMessage.from_username)
}
inline ::std::string* PrivateMessage::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.PrivateMessage.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateMessage::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.chat.PrivateMessage.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateMessage::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.PrivateMessage.from_username)
}

// string appkey = 2;
inline void PrivateMessage::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateMessage::appkey() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessage.appkey)
  return appkey_.GetNoArena();
}
inline void PrivateMessage::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessage.appkey)
}
#if LANG_CXX11
inline void PrivateMessage::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.PrivateMessage.appkey)
}
#endif
inline void PrivateMessage::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.PrivateMessage.appkey)
}
inline void PrivateMessage::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.PrivateMessage.appkey)
}
inline ::std::string* PrivateMessage::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.PrivateMessage.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateMessage::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.chat.PrivateMessage.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateMessage::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.PrivateMessage.appkey)
}

// string from_nick = 3;
inline void PrivateMessage::clear_from_nick() {
  from_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateMessage::from_nick() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessage.from_nick)
  return from_nick_.GetNoArena();
}
inline void PrivateMessage::set_from_nick(const ::std::string& value) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessage.from_nick)
}
#if LANG_CXX11
inline void PrivateMessage::set_from_nick(::std::string&& value) {
  
  from_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.PrivateMessage.from_nick)
}
#endif
inline void PrivateMessage::set_from_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.PrivateMessage.from_nick)
}
inline void PrivateMessage::set_from_nick(const char* value, size_t size) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.PrivateMessage.from_nick)
}
inline ::std::string* PrivateMessage::mutable_from_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.PrivateMessage.from_nick)
  return from_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateMessage::release_from_nick() {
  // @@protoc_insertion_point(field_release:outer.chat.PrivateMessage.from_nick)
  
  return from_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateMessage::set_allocated_from_nick(::std::string* from_nick) {
  if (from_nick != NULL) {
    
  } else {
    
  }
  from_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_nick);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.PrivateMessage.from_nick)
}

// .common.msg.EMsgContentType msg_content_type = 4;
inline void PrivateMessage::clear_msg_content_type() {
  msg_content_type_ = 0;
}
inline ::common::msg::EMsgContentType PrivateMessage::msg_content_type() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessage.msg_content_type)
  return static_cast< ::common::msg::EMsgContentType >(msg_content_type_);
}
inline void PrivateMessage::set_msg_content_type(::common::msg::EMsgContentType value) {
  
  msg_content_type_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessage.msg_content_type)
}

// bytes data = 5;
inline void PrivateMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateMessage::data() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessage.data)
  return data_.GetNoArena();
}
inline void PrivateMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessage.data)
}
#if LANG_CXX11
inline void PrivateMessage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.PrivateMessage.data)
}
#endif
inline void PrivateMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.PrivateMessage.data)
}
inline void PrivateMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.PrivateMessage.data)
}
inline ::std::string* PrivateMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.PrivateMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateMessage::release_data() {
  // @@protoc_insertion_point(field_release:outer.chat.PrivateMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.PrivateMessage.data)
}

// uint64 guid = 6;
inline void PrivateMessage::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PrivateMessage::guid() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessage.guid)
  return guid_;
}
inline void PrivateMessage::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessage.guid)
}

// string msg_id = 7;
inline void PrivateMessage::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateMessage::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessage.msg_id)
  return msg_id_.GetNoArena();
}
inline void PrivateMessage::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessage.msg_id)
}
#if LANG_CXX11
inline void PrivateMessage::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.PrivateMessage.msg_id)
}
#endif
inline void PrivateMessage::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.PrivateMessage.msg_id)
}
inline void PrivateMessage::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.PrivateMessage.msg_id)
}
inline ::std::string* PrivateMessage::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.PrivateMessage.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateMessage::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.chat.PrivateMessage.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateMessage::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.PrivateMessage.msg_id)
}

// bool burn_after_read = 8;
inline void PrivateMessage::clear_burn_after_read() {
  burn_after_read_ = false;
}
inline bool PrivateMessage::burn_after_read() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessage.burn_after_read)
  return burn_after_read_;
}
inline void PrivateMessage::set_burn_after_read(bool value) {
  
  burn_after_read_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessage.burn_after_read)
}

// string to_username = 9;
inline void PrivateMessage::clear_to_username() {
  to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateMessage::to_username() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessage.to_username)
  return to_username_.GetNoArena();
}
inline void PrivateMessage::set_to_username(const ::std::string& value) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessage.to_username)
}
#if LANG_CXX11
inline void PrivateMessage::set_to_username(::std::string&& value) {
  
  to_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.chat.PrivateMessage.to_username)
}
#endif
inline void PrivateMessage::set_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.chat.PrivateMessage.to_username)
}
inline void PrivateMessage::set_to_username(const char* value, size_t size) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.chat.PrivateMessage.to_username)
}
inline ::std::string* PrivateMessage::mutable_to_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.chat.PrivateMessage.to_username)
  return to_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateMessage::release_to_username() {
  // @@protoc_insertion_point(field_release:outer.chat.PrivateMessage.to_username)
  
  return to_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateMessage::set_allocated_to_username(::std::string* to_username) {
  if (to_username != NULL) {
    
  } else {
    
  }
  to_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_username);
  // @@protoc_insertion_point(field_set_allocated:outer.chat.PrivateMessage.to_username)
}

// bool is_jimao = 10;
inline void PrivateMessage::clear_is_jimao() {
  is_jimao_ = false;
}
inline bool PrivateMessage::is_jimao() const {
  // @@protoc_insertion_point(field_get:outer.chat.PrivateMessage.is_jimao)
  return is_jimao_;
}
inline void PrivateMessage::set_is_jimao(bool value) {
  
  is_jimao_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.PrivateMessage.is_jimao)
}

// -------------------------------------------------------------------

// GetServerTimestampRequest

// -------------------------------------------------------------------

// GetServerTimestampResponse

// uint64 timestamp = 1;
inline void GetServerTimestampResponse::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetServerTimestampResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:outer.chat.GetServerTimestampResponse.timestamp)
  return timestamp_;
}
inline void GetServerTimestampResponse::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:outer.chat.GetServerTimestampResponse.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat
}  // namespace outer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_outer_2fchat_2eproto__INCLUDED
