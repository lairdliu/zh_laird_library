// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: outer/websocket.proto

#ifndef PROTOBUF_outer_2fwebsocket_2eproto__INCLUDED
#define PROTOBUF_outer_2fwebsocket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/errcode.pb.h"
#include "outer/user.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_outer_2fwebsocket_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsProxyRequestImpl();
void InitDefaultsProxyRequest();
void InitDefaultsProxyResponseImpl();
void InitDefaultsProxyResponse();
void InitDefaultsLoginRequestImpl();
void InitDefaultsLoginRequest();
void InitDefaultsLoginResponseImpl();
void InitDefaultsLoginResponse();
void InitDefaultsLogoutRequestImpl();
void InitDefaultsLogoutRequest();
void InitDefaultsLogoutResponseImpl();
void InitDefaultsLogoutResponse();
void InitDefaultsSessionNotifyImpl();
void InitDefaultsSessionNotify();
void InitDefaultsDownStreamImpl();
void InitDefaultsDownStream();
inline void InitDefaults() {
  InitDefaultsProxyRequest();
  InitDefaultsProxyResponse();
  InitDefaultsLoginRequest();
  InitDefaultsLoginResponse();
  InitDefaultsLogoutRequest();
  InitDefaultsLogoutResponse();
  InitDefaultsSessionNotify();
  InitDefaultsDownStream();
}
}  // namespace protobuf_outer_2fwebsocket_2eproto
namespace outer {
namespace websocket {
class DownStream;
class DownStreamDefaultTypeInternal;
extern DownStreamDefaultTypeInternal _DownStream_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class LogoutRequest;
class LogoutRequestDefaultTypeInternal;
extern LogoutRequestDefaultTypeInternal _LogoutRequest_default_instance_;
class LogoutResponse;
class LogoutResponseDefaultTypeInternal;
extern LogoutResponseDefaultTypeInternal _LogoutResponse_default_instance_;
class ProxyRequest;
class ProxyRequestDefaultTypeInternal;
extern ProxyRequestDefaultTypeInternal _ProxyRequest_default_instance_;
class ProxyResponse;
class ProxyResponseDefaultTypeInternal;
extern ProxyResponseDefaultTypeInternal _ProxyResponse_default_instance_;
class SessionNotify;
class SessionNotifyDefaultTypeInternal;
extern SessionNotifyDefaultTypeInternal _SessionNotify_default_instance_;
}  // namespace websocket
}  // namespace outer
namespace outer {
namespace websocket {

enum EDownStreamType {
  UNKNOWN = 0,
  PROXY_RESPONSE = 2,
  SESSION_NOTIFY = 1,
  EDownStreamType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EDownStreamType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EDownStreamType_IsValid(int value);
const EDownStreamType EDownStreamType_MIN = UNKNOWN;
const EDownStreamType EDownStreamType_MAX = PROXY_RESPONSE;
const int EDownStreamType_ARRAYSIZE = EDownStreamType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDownStreamType_descriptor();
inline const ::std::string& EDownStreamType_Name(EDownStreamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDownStreamType_descriptor(), value);
}
inline bool EDownStreamType_Parse(
    const ::std::string& name, EDownStreamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDownStreamType>(
    EDownStreamType_descriptor(), name, value);
}
// ===================================================================

class ProxyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.websocket.ProxyRequest) */ {
 public:
  ProxyRequest();
  virtual ~ProxyRequest();

  ProxyRequest(const ProxyRequest& from);

  inline ProxyRequest& operator=(const ProxyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProxyRequest(ProxyRequest&& from) noexcept
    : ProxyRequest() {
    *this = ::std::move(from);
  }

  inline ProxyRequest& operator=(ProxyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProxyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProxyRequest* internal_default_instance() {
    return reinterpret_cast<const ProxyRequest*>(
               &_ProxyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ProxyRequest* other);
  friend void swap(ProxyRequest& a, ProxyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProxyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ProxyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProxyRequest& from);
  void MergeFrom(const ProxyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProxyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string method_name = 2;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_method_name(::std::string&& value);
  #endif
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string request_id = 4;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // @@protoc_insertion_point(class_scope:outer.websocket.ProxyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fwebsocket_2eproto::TableStruct;
  friend void ::protobuf_outer_2fwebsocket_2eproto::InitDefaultsProxyRequestImpl();
};
// -------------------------------------------------------------------

class ProxyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.websocket.ProxyResponse) */ {
 public:
  ProxyResponse();
  virtual ~ProxyResponse();

  ProxyResponse(const ProxyResponse& from);

  inline ProxyResponse& operator=(const ProxyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProxyResponse(ProxyResponse&& from) noexcept
    : ProxyResponse() {
    *this = ::std::move(from);
  }

  inline ProxyResponse& operator=(ProxyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProxyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProxyResponse* internal_default_instance() {
    return reinterpret_cast<const ProxyResponse*>(
               &_ProxyResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ProxyResponse* other);
  friend void swap(ProxyResponse& a, ProxyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProxyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ProxyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProxyResponse& from);
  void MergeFrom(const ProxyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProxyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string method_name = 2;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_method_name(::std::string&& value);
  #endif
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string request_id = 5;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 5;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // .common.errcode.EErrorCode ret = 4;
  void clear_ret();
  static const int kRetFieldNumber = 4;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.websocket.ProxyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fwebsocket_2eproto::TableStruct;
  friend void ::protobuf_outer_2fwebsocket_2eproto::InitDefaultsProxyResponseImpl();
};
// -------------------------------------------------------------------

class LoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.websocket.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LoginRequest* other);
  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string appkey_password = 4;
  void clear_appkey_password();
  static const int kAppkeyPasswordFieldNumber = 4;
  const ::std::string& appkey_password() const;
  void set_appkey_password(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey_password(::std::string&& value);
  #endif
  void set_appkey_password(const char* value);
  void set_appkey_password(const char* value, size_t size);
  ::std::string* mutable_appkey_password();
  ::std::string* release_appkey_password();
  void set_allocated_appkey_password(::std::string* appkey_password);

  // bool SHA256 = 5;
  void clear_sha256();
  static const int kSHA256FieldNumber = 5;
  bool sha256() const;
  void set_sha256(bool value);

  // @@protoc_insertion_point(class_scope:outer.websocket.LoginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr appkey_password_;
  bool sha256_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fwebsocket_2eproto::TableStruct;
  friend void ::protobuf_outer_2fwebsocket_2eproto::InitDefaultsLoginRequestImpl();
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.websocket.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LoginResponse* other);
  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .outer.user.UserInfo user_info = 2;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 2;
  const ::outer::user::UserInfo& user_info() const;
  ::outer::user::UserInfo* release_user_info();
  ::outer::user::UserInfo* mutable_user_info();
  void set_allocated_user_info(::outer::user::UserInfo* user_info);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.websocket.LoginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::outer::user::UserInfo* user_info_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fwebsocket_2eproto::TableStruct;
  friend void ::protobuf_outer_2fwebsocket_2eproto::InitDefaultsLoginResponseImpl();
};
// -------------------------------------------------------------------

class LogoutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.websocket.LogoutRequest) */ {
 public:
  LogoutRequest();
  virtual ~LogoutRequest();

  LogoutRequest(const LogoutRequest& from);

  inline LogoutRequest& operator=(const LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutRequest(LogoutRequest&& from) noexcept
    : LogoutRequest() {
    *this = ::std::move(from);
  }

  inline LogoutRequest& operator=(LogoutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutRequest* internal_default_instance() {
    return reinterpret_cast<const LogoutRequest*>(
               &_LogoutRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(LogoutRequest* other);
  friend void swap(LogoutRequest& a, LogoutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutRequest& from);
  void MergeFrom(const LogoutRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.websocket.LogoutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fwebsocket_2eproto::TableStruct;
  friend void ::protobuf_outer_2fwebsocket_2eproto::InitDefaultsLogoutRequestImpl();
};
// -------------------------------------------------------------------

class LogoutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.websocket.LogoutResponse) */ {
 public:
  LogoutResponse();
  virtual ~LogoutResponse();

  LogoutResponse(const LogoutResponse& from);

  inline LogoutResponse& operator=(const LogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutResponse(LogoutResponse&& from) noexcept
    : LogoutResponse() {
    *this = ::std::move(from);
  }

  inline LogoutResponse& operator=(LogoutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutResponse* internal_default_instance() {
    return reinterpret_cast<const LogoutResponse*>(
               &_LogoutResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(LogoutResponse* other);
  friend void swap(LogoutResponse& a, LogoutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutResponse& from);
  void MergeFrom(const LogoutResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.websocket.LogoutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fwebsocket_2eproto::TableStruct;
  friend void ::protobuf_outer_2fwebsocket_2eproto::InitDefaultsLogoutResponseImpl();
};
// -------------------------------------------------------------------

class SessionNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.websocket.SessionNotify) */ {
 public:
  SessionNotify();
  virtual ~SessionNotify();

  SessionNotify(const SessionNotify& from);

  inline SessionNotify& operator=(const SessionNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionNotify(SessionNotify&& from) noexcept
    : SessionNotify() {
    *this = ::std::move(from);
  }

  inline SessionNotify& operator=(SessionNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionNotify* internal_default_instance() {
    return reinterpret_cast<const SessionNotify*>(
               &_SessionNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SessionNotify* other);
  friend void swap(SessionNotify& a, SessionNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionNotify& from);
  void MergeFrom(const SessionNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string to_username = 1;
  void clear_to_username();
  static const int kToUsernameFieldNumber = 1;
  const ::std::string& to_username() const;
  void set_to_username(const ::std::string& value);
  #if LANG_CXX11
  void set_to_username(::std::string&& value);
  #endif
  void set_to_username(const char* value);
  void set_to_username(const char* value, size_t size);
  ::std::string* mutable_to_username();
  ::std::string* release_to_username();
  void set_allocated_to_username(::std::string* to_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.websocket.SessionNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr to_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fwebsocket_2eproto::TableStruct;
  friend void ::protobuf_outer_2fwebsocket_2eproto::InitDefaultsSessionNotifyImpl();
};
// -------------------------------------------------------------------

class DownStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.websocket.DownStream) */ {
 public:
  DownStream();
  virtual ~DownStream();

  DownStream(const DownStream& from);

  inline DownStream& operator=(const DownStream& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DownStream(DownStream&& from) noexcept
    : DownStream() {
    *this = ::std::move(from);
  }

  inline DownStream& operator=(DownStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownStream* internal_default_instance() {
    return reinterpret_cast<const DownStream*>(
               &_DownStream_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(DownStream* other);
  friend void swap(DownStream& a, DownStream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DownStream* New() const PROTOBUF_FINAL { return New(NULL); }

  DownStream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DownStream& from);
  void MergeFrom(const DownStream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DownStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes stream = 2;
  void clear_stream();
  static const int kStreamFieldNumber = 2;
  const ::std::string& stream() const;
  void set_stream(const ::std::string& value);
  #if LANG_CXX11
  void set_stream(::std::string&& value);
  #endif
  void set_stream(const char* value);
  void set_stream(const void* value, size_t size);
  ::std::string* mutable_stream();
  ::std::string* release_stream();
  void set_allocated_stream(::std::string* stream);

  // .outer.websocket.EDownStreamType down_stream_type = 1;
  void clear_down_stream_type();
  static const int kDownStreamTypeFieldNumber = 1;
  ::outer::websocket::EDownStreamType down_stream_type() const;
  void set_down_stream_type(::outer::websocket::EDownStreamType value);

  // @@protoc_insertion_point(class_scope:outer.websocket.DownStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stream_;
  int down_stream_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fwebsocket_2eproto::TableStruct;
  friend void ::protobuf_outer_2fwebsocket_2eproto::InitDefaultsDownStreamImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProxyRequest

// string service_name = 1;
inline void ProxyRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProxyRequest::service_name() const {
  // @@protoc_insertion_point(field_get:outer.websocket.ProxyRequest.service_name)
  return service_name_.GetNoArena();
}
inline void ProxyRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.ProxyRequest.service_name)
}
#if LANG_CXX11
inline void ProxyRequest::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.ProxyRequest.service_name)
}
#endif
inline void ProxyRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.ProxyRequest.service_name)
}
inline void ProxyRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.ProxyRequest.service_name)
}
inline ::std::string* ProxyRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.ProxyRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProxyRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:outer.websocket.ProxyRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.ProxyRequest.service_name)
}

// string method_name = 2;
inline void ProxyRequest::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProxyRequest::method_name() const {
  // @@protoc_insertion_point(field_get:outer.websocket.ProxyRequest.method_name)
  return method_name_.GetNoArena();
}
inline void ProxyRequest::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.ProxyRequest.method_name)
}
#if LANG_CXX11
inline void ProxyRequest::set_method_name(::std::string&& value) {
  
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.ProxyRequest.method_name)
}
#endif
inline void ProxyRequest::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.ProxyRequest.method_name)
}
inline void ProxyRequest::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.ProxyRequest.method_name)
}
inline ::std::string* ProxyRequest::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.ProxyRequest.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProxyRequest::release_method_name() {
  // @@protoc_insertion_point(field_release:outer.websocket.ProxyRequest.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyRequest::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.ProxyRequest.method_name)
}

// bytes data = 3;
inline void ProxyRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProxyRequest::data() const {
  // @@protoc_insertion_point(field_get:outer.websocket.ProxyRequest.data)
  return data_.GetNoArena();
}
inline void ProxyRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.ProxyRequest.data)
}
#if LANG_CXX11
inline void ProxyRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.ProxyRequest.data)
}
#endif
inline void ProxyRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.ProxyRequest.data)
}
inline void ProxyRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.ProxyRequest.data)
}
inline ::std::string* ProxyRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.ProxyRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProxyRequest::release_data() {
  // @@protoc_insertion_point(field_release:outer.websocket.ProxyRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.ProxyRequest.data)
}

// string request_id = 4;
inline void ProxyRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProxyRequest::request_id() const {
  // @@protoc_insertion_point(field_get:outer.websocket.ProxyRequest.request_id)
  return request_id_.GetNoArena();
}
inline void ProxyRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.ProxyRequest.request_id)
}
#if LANG_CXX11
inline void ProxyRequest::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.ProxyRequest.request_id)
}
#endif
inline void ProxyRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.ProxyRequest.request_id)
}
inline void ProxyRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.ProxyRequest.request_id)
}
inline ::std::string* ProxyRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.ProxyRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProxyRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:outer.websocket.ProxyRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.ProxyRequest.request_id)
}

// -------------------------------------------------------------------

// ProxyResponse

// string service_name = 1;
inline void ProxyResponse::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProxyResponse::service_name() const {
  // @@protoc_insertion_point(field_get:outer.websocket.ProxyResponse.service_name)
  return service_name_.GetNoArena();
}
inline void ProxyResponse::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.ProxyResponse.service_name)
}
#if LANG_CXX11
inline void ProxyResponse::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.ProxyResponse.service_name)
}
#endif
inline void ProxyResponse::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.ProxyResponse.service_name)
}
inline void ProxyResponse::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.ProxyResponse.service_name)
}
inline ::std::string* ProxyResponse::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.ProxyResponse.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProxyResponse::release_service_name() {
  // @@protoc_insertion_point(field_release:outer.websocket.ProxyResponse.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyResponse::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.ProxyResponse.service_name)
}

// string method_name = 2;
inline void ProxyResponse::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProxyResponse::method_name() const {
  // @@protoc_insertion_point(field_get:outer.websocket.ProxyResponse.method_name)
  return method_name_.GetNoArena();
}
inline void ProxyResponse::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.ProxyResponse.method_name)
}
#if LANG_CXX11
inline void ProxyResponse::set_method_name(::std::string&& value) {
  
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.ProxyResponse.method_name)
}
#endif
inline void ProxyResponse::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.ProxyResponse.method_name)
}
inline void ProxyResponse::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.ProxyResponse.method_name)
}
inline ::std::string* ProxyResponse::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.ProxyResponse.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProxyResponse::release_method_name() {
  // @@protoc_insertion_point(field_release:outer.websocket.ProxyResponse.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyResponse::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.ProxyResponse.method_name)
}

// bytes data = 3;
inline void ProxyResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProxyResponse::data() const {
  // @@protoc_insertion_point(field_get:outer.websocket.ProxyResponse.data)
  return data_.GetNoArena();
}
inline void ProxyResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.ProxyResponse.data)
}
#if LANG_CXX11
inline void ProxyResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.ProxyResponse.data)
}
#endif
inline void ProxyResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.ProxyResponse.data)
}
inline void ProxyResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.ProxyResponse.data)
}
inline ::std::string* ProxyResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.ProxyResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProxyResponse::release_data() {
  // @@protoc_insertion_point(field_release:outer.websocket.ProxyResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.ProxyResponse.data)
}

// .common.errcode.EErrorCode ret = 4;
inline void ProxyResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode ProxyResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.websocket.ProxyResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void ProxyResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.websocket.ProxyResponse.ret)
}

// string request_id = 5;
inline void ProxyResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProxyResponse::request_id() const {
  // @@protoc_insertion_point(field_get:outer.websocket.ProxyResponse.request_id)
  return request_id_.GetNoArena();
}
inline void ProxyResponse::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.ProxyResponse.request_id)
}
#if LANG_CXX11
inline void ProxyResponse::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.ProxyResponse.request_id)
}
#endif
inline void ProxyResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.ProxyResponse.request_id)
}
inline void ProxyResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.ProxyResponse.request_id)
}
inline ::std::string* ProxyResponse::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.ProxyResponse.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProxyResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:outer.websocket.ProxyResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProxyResponse::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.ProxyResponse.request_id)
}

// -------------------------------------------------------------------

// LoginRequest

// string appkey = 1;
inline void LoginRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.websocket.LoginRequest.appkey)
  return appkey_.GetNoArena();
}
inline void LoginRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.LoginRequest.appkey)
}
#if LANG_CXX11
inline void LoginRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.LoginRequest.appkey)
}
#endif
inline void LoginRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.LoginRequest.appkey)
}
inline void LoginRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.LoginRequest.appkey)
}
inline ::std::string* LoginRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.LoginRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.websocket.LoginRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.LoginRequest.appkey)
}

// string username = 2;
inline void LoginRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.websocket.LoginRequest.username)
  return username_.GetNoArena();
}
inline void LoginRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.LoginRequest.username)
}
#if LANG_CXX11
inline void LoginRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.LoginRequest.username)
}
#endif
inline void LoginRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.LoginRequest.username)
}
inline void LoginRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.LoginRequest.username)
}
inline ::std::string* LoginRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.LoginRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.websocket.LoginRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.LoginRequest.username)
}

// string password = 3;
inline void LoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:outer.websocket.LoginRequest.password)
  return password_.GetNoArena();
}
inline void LoginRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.LoginRequest.password)
}
#if LANG_CXX11
inline void LoginRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.LoginRequest.password)
}
#endif
inline void LoginRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.LoginRequest.password)
}
inline ::std::string* LoginRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.LoginRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:outer.websocket.LoginRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.LoginRequest.password)
}

// string appkey_password = 4;
inline void LoginRequest::clear_appkey_password() {
  appkey_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::appkey_password() const {
  // @@protoc_insertion_point(field_get:outer.websocket.LoginRequest.appkey_password)
  return appkey_password_.GetNoArena();
}
inline void LoginRequest::set_appkey_password(const ::std::string& value) {
  
  appkey_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.LoginRequest.appkey_password)
}
#if LANG_CXX11
inline void LoginRequest::set_appkey_password(::std::string&& value) {
  
  appkey_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.LoginRequest.appkey_password)
}
#endif
inline void LoginRequest::set_appkey_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.LoginRequest.appkey_password)
}
inline void LoginRequest::set_appkey_password(const char* value, size_t size) {
  
  appkey_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.LoginRequest.appkey_password)
}
inline ::std::string* LoginRequest::mutable_appkey_password() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.LoginRequest.appkey_password)
  return appkey_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_appkey_password() {
  // @@protoc_insertion_point(field_release:outer.websocket.LoginRequest.appkey_password)
  
  return appkey_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_appkey_password(::std::string* appkey_password) {
  if (appkey_password != NULL) {
    
  } else {
    
  }
  appkey_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey_password);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.LoginRequest.appkey_password)
}

// bool SHA256 = 5;
inline void LoginRequest::clear_sha256() {
  sha256_ = false;
}
inline bool LoginRequest::sha256() const {
  // @@protoc_insertion_point(field_get:outer.websocket.LoginRequest.SHA256)
  return sha256_;
}
inline void LoginRequest::set_sha256(bool value) {
  
  sha256_ = value;
  // @@protoc_insertion_point(field_set:outer.websocket.LoginRequest.SHA256)
}

// -------------------------------------------------------------------

// LoginResponse

// .common.errcode.EErrorCode ret = 1;
inline void LoginResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode LoginResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.websocket.LoginResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void LoginResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.websocket.LoginResponse.ret)
}

// .outer.user.UserInfo user_info = 2;
inline bool LoginResponse::has_user_info() const {
  return this != internal_default_instance() && user_info_ != NULL;
}
inline const ::outer::user::UserInfo& LoginResponse::user_info() const {
  const ::outer::user::UserInfo* p = user_info_;
  // @@protoc_insertion_point(field_get:outer.websocket.LoginResponse.user_info)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::user::UserInfo*>(
      &::outer::user::_UserInfo_default_instance_);
}
inline ::outer::user::UserInfo* LoginResponse::release_user_info() {
  // @@protoc_insertion_point(field_release:outer.websocket.LoginResponse.user_info)
  
  ::outer::user::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline ::outer::user::UserInfo* LoginResponse::mutable_user_info() {
  
  if (user_info_ == NULL) {
    user_info_ = new ::outer::user::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:outer.websocket.LoginResponse.user_info)
  return user_info_;
}
inline void LoginResponse::set_allocated_user_info(::outer::user::UserInfo* user_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.LoginResponse.user_info)
}

// -------------------------------------------------------------------

// LogoutRequest

// string appkey = 1;
inline void LogoutRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogoutRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.websocket.LogoutRequest.appkey)
  return appkey_.GetNoArena();
}
inline void LogoutRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.LogoutRequest.appkey)
}
#if LANG_CXX11
inline void LogoutRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.LogoutRequest.appkey)
}
#endif
inline void LogoutRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.LogoutRequest.appkey)
}
inline void LogoutRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.LogoutRequest.appkey)
}
inline ::std::string* LogoutRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.LogoutRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogoutRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.websocket.LogoutRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.LogoutRequest.appkey)
}

// string username = 2;
inline void LogoutRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogoutRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.websocket.LogoutRequest.username)
  return username_.GetNoArena();
}
inline void LogoutRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.LogoutRequest.username)
}
#if LANG_CXX11
inline void LogoutRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.LogoutRequest.username)
}
#endif
inline void LogoutRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.LogoutRequest.username)
}
inline void LogoutRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.LogoutRequest.username)
}
inline ::std::string* LogoutRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.LogoutRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogoutRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.websocket.LogoutRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.LogoutRequest.username)
}

// string msg_id = 3;
inline void LogoutRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogoutRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.websocket.LogoutRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void LogoutRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.LogoutRequest.msg_id)
}
#if LANG_CXX11
inline void LogoutRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.LogoutRequest.msg_id)
}
#endif
inline void LogoutRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.LogoutRequest.msg_id)
}
inline void LogoutRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.LogoutRequest.msg_id)
}
inline ::std::string* LogoutRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.LogoutRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogoutRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.websocket.LogoutRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.LogoutRequest.msg_id)
}

// -------------------------------------------------------------------

// LogoutResponse

// .common.errcode.EErrorCode ret = 1;
inline void LogoutResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode LogoutResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.websocket.LogoutResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void LogoutResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.websocket.LogoutResponse.ret)
}

// string msg_id = 2;
inline void LogoutResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogoutResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.websocket.LogoutResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void LogoutResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.LogoutResponse.msg_id)
}
#if LANG_CXX11
inline void LogoutResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.LogoutResponse.msg_id)
}
#endif
inline void LogoutResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.LogoutResponse.msg_id)
}
inline void LogoutResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.LogoutResponse.msg_id)
}
inline ::std::string* LogoutResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.LogoutResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogoutResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.websocket.LogoutResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.LogoutResponse.msg_id)
}

// -------------------------------------------------------------------

// SessionNotify

// string to_username = 1;
inline void SessionNotify::clear_to_username() {
  to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionNotify::to_username() const {
  // @@protoc_insertion_point(field_get:outer.websocket.SessionNotify.to_username)
  return to_username_.GetNoArena();
}
inline void SessionNotify::set_to_username(const ::std::string& value) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.SessionNotify.to_username)
}
#if LANG_CXX11
inline void SessionNotify::set_to_username(::std::string&& value) {
  
  to_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.SessionNotify.to_username)
}
#endif
inline void SessionNotify::set_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.SessionNotify.to_username)
}
inline void SessionNotify::set_to_username(const char* value, size_t size) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.SessionNotify.to_username)
}
inline ::std::string* SessionNotify::mutable_to_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.SessionNotify.to_username)
  return to_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionNotify::release_to_username() {
  // @@protoc_insertion_point(field_release:outer.websocket.SessionNotify.to_username)
  
  return to_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionNotify::set_allocated_to_username(::std::string* to_username) {
  if (to_username != NULL) {
    
  } else {
    
  }
  to_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_username);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.SessionNotify.to_username)
}

// string appkey = 2;
inline void SessionNotify::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionNotify::appkey() const {
  // @@protoc_insertion_point(field_get:outer.websocket.SessionNotify.appkey)
  return appkey_.GetNoArena();
}
inline void SessionNotify::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.SessionNotify.appkey)
}
#if LANG_CXX11
inline void SessionNotify::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.SessionNotify.appkey)
}
#endif
inline void SessionNotify::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.SessionNotify.appkey)
}
inline void SessionNotify::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.SessionNotify.appkey)
}
inline ::std::string* SessionNotify::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.SessionNotify.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionNotify::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.websocket.SessionNotify.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionNotify::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.SessionNotify.appkey)
}

// uint32 type = 3;
inline void SessionNotify::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 SessionNotify::type() const {
  // @@protoc_insertion_point(field_get:outer.websocket.SessionNotify.type)
  return type_;
}
inline void SessionNotify::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:outer.websocket.SessionNotify.type)
}

// bytes data = 4;
inline void SessionNotify::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionNotify::data() const {
  // @@protoc_insertion_point(field_get:outer.websocket.SessionNotify.data)
  return data_.GetNoArena();
}
inline void SessionNotify::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.SessionNotify.data)
}
#if LANG_CXX11
inline void SessionNotify::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.SessionNotify.data)
}
#endif
inline void SessionNotify::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.SessionNotify.data)
}
inline void SessionNotify::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.SessionNotify.data)
}
inline ::std::string* SessionNotify::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.SessionNotify.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionNotify::release_data() {
  // @@protoc_insertion_point(field_release:outer.websocket.SessionNotify.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionNotify::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.SessionNotify.data)
}

// -------------------------------------------------------------------

// DownStream

// .outer.websocket.EDownStreamType down_stream_type = 1;
inline void DownStream::clear_down_stream_type() {
  down_stream_type_ = 0;
}
inline ::outer::websocket::EDownStreamType DownStream::down_stream_type() const {
  // @@protoc_insertion_point(field_get:outer.websocket.DownStream.down_stream_type)
  return static_cast< ::outer::websocket::EDownStreamType >(down_stream_type_);
}
inline void DownStream::set_down_stream_type(::outer::websocket::EDownStreamType value) {
  
  down_stream_type_ = value;
  // @@protoc_insertion_point(field_set:outer.websocket.DownStream.down_stream_type)
}

// bytes stream = 2;
inline void DownStream::clear_stream() {
  stream_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DownStream::stream() const {
  // @@protoc_insertion_point(field_get:outer.websocket.DownStream.stream)
  return stream_.GetNoArena();
}
inline void DownStream::set_stream(const ::std::string& value) {
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.websocket.DownStream.stream)
}
#if LANG_CXX11
inline void DownStream::set_stream(::std::string&& value) {
  
  stream_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.websocket.DownStream.stream)
}
#endif
inline void DownStream::set_stream(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.websocket.DownStream.stream)
}
inline void DownStream::set_stream(const void* value, size_t size) {
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.websocket.DownStream.stream)
}
inline ::std::string* DownStream::mutable_stream() {
  
  // @@protoc_insertion_point(field_mutable:outer.websocket.DownStream.stream)
  return stream_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DownStream::release_stream() {
  // @@protoc_insertion_point(field_release:outer.websocket.DownStream.stream)
  
  return stream_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DownStream::set_allocated_stream(::std::string* stream) {
  if (stream != NULL) {
    
  } else {
    
  }
  stream_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream);
  // @@protoc_insertion_point(field_set_allocated:outer.websocket.DownStream.stream)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace websocket
}  // namespace outer

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::outer::websocket::EDownStreamType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::outer::websocket::EDownStreamType>() {
  return ::outer::websocket::EDownStreamType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_outer_2fwebsocket_2eproto__INCLUDED
