// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: outer/connector.proto

#ifndef PROTOBUF_outer_2fconnector_2eproto__INCLUDED
#define PROTOBUF_outer_2fconnector_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/errcode.pb.h"
#include "common/base.pb.h"
#include "common/enumeration.pb.h"
#include "outer/user.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_outer_2fconnector_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[19];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsUnaryRequestImpl();
void InitDefaultsUnaryRequest();
void InitDefaultsUnaryResponseImpl();
void InitDefaultsUnaryResponse();
void InitDefaultsClientStreamRequestImpl();
void InitDefaultsClientStreamRequest();
void InitDefaultsClientStreamResponseImpl();
void InitDefaultsClientStreamResponse();
void InitDefaultsServerStreamRequestImpl();
void InitDefaultsServerStreamRequest();
void InitDefaultsServerStreamResponseImpl();
void InitDefaultsServerStreamResponse();
void InitDefaultsBidiStreamRequestImpl();
void InitDefaultsBidiStreamRequest();
void InitDefaultsBidiStreamResponseImpl();
void InitDefaultsBidiStreamResponse();
void InitDefaultsSessionRequestImpl();
void InitDefaultsSessionRequest();
void InitDefaultsSessionNotifyImpl();
void InitDefaultsSessionNotify();
void InitDefaultsPingRequestImpl();
void InitDefaultsPingRequest();
void InitDefaultsPingResponseImpl();
void InitDefaultsPingResponse();
void InitDefaultsLoginRequestImpl();
void InitDefaultsLoginRequest();
void InitDefaultsLoginResponseImpl();
void InitDefaultsLoginResponse();
void InitDefaultsLogoutRequestImpl();
void InitDefaultsLogoutRequest();
void InitDefaultsLogoutResponseImpl();
void InitDefaultsLogoutResponse();
void InitDefaultsStreamInitResponseImpl();
void InitDefaultsStreamInitResponse();
void InitDefaultsHealthCheckRequestImpl();
void InitDefaultsHealthCheckRequest();
void InitDefaultsHealthCheckResponseImpl();
void InitDefaultsHealthCheckResponse();
inline void InitDefaults() {
  InitDefaultsUnaryRequest();
  InitDefaultsUnaryResponse();
  InitDefaultsClientStreamRequest();
  InitDefaultsClientStreamResponse();
  InitDefaultsServerStreamRequest();
  InitDefaultsServerStreamResponse();
  InitDefaultsBidiStreamRequest();
  InitDefaultsBidiStreamResponse();
  InitDefaultsSessionRequest();
  InitDefaultsSessionNotify();
  InitDefaultsPingRequest();
  InitDefaultsPingResponse();
  InitDefaultsLoginRequest();
  InitDefaultsLoginResponse();
  InitDefaultsLogoutRequest();
  InitDefaultsLogoutResponse();
  InitDefaultsStreamInitResponse();
  InitDefaultsHealthCheckRequest();
  InitDefaultsHealthCheckResponse();
}
}  // namespace protobuf_outer_2fconnector_2eproto
namespace outer {
namespace connector {
class BidiStreamRequest;
class BidiStreamRequestDefaultTypeInternal;
extern BidiStreamRequestDefaultTypeInternal _BidiStreamRequest_default_instance_;
class BidiStreamResponse;
class BidiStreamResponseDefaultTypeInternal;
extern BidiStreamResponseDefaultTypeInternal _BidiStreamResponse_default_instance_;
class ClientStreamRequest;
class ClientStreamRequestDefaultTypeInternal;
extern ClientStreamRequestDefaultTypeInternal _ClientStreamRequest_default_instance_;
class ClientStreamResponse;
class ClientStreamResponseDefaultTypeInternal;
extern ClientStreamResponseDefaultTypeInternal _ClientStreamResponse_default_instance_;
class HealthCheckRequest;
class HealthCheckRequestDefaultTypeInternal;
extern HealthCheckRequestDefaultTypeInternal _HealthCheckRequest_default_instance_;
class HealthCheckResponse;
class HealthCheckResponseDefaultTypeInternal;
extern HealthCheckResponseDefaultTypeInternal _HealthCheckResponse_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class LogoutRequest;
class LogoutRequestDefaultTypeInternal;
extern LogoutRequestDefaultTypeInternal _LogoutRequest_default_instance_;
class LogoutResponse;
class LogoutResponseDefaultTypeInternal;
extern LogoutResponseDefaultTypeInternal _LogoutResponse_default_instance_;
class PingRequest;
class PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PingResponse;
class PingResponseDefaultTypeInternal;
extern PingResponseDefaultTypeInternal _PingResponse_default_instance_;
class ServerStreamRequest;
class ServerStreamRequestDefaultTypeInternal;
extern ServerStreamRequestDefaultTypeInternal _ServerStreamRequest_default_instance_;
class ServerStreamResponse;
class ServerStreamResponseDefaultTypeInternal;
extern ServerStreamResponseDefaultTypeInternal _ServerStreamResponse_default_instance_;
class SessionNotify;
class SessionNotifyDefaultTypeInternal;
extern SessionNotifyDefaultTypeInternal _SessionNotify_default_instance_;
class SessionRequest;
class SessionRequestDefaultTypeInternal;
extern SessionRequestDefaultTypeInternal _SessionRequest_default_instance_;
class StreamInitResponse;
class StreamInitResponseDefaultTypeInternal;
extern StreamInitResponseDefaultTypeInternal _StreamInitResponse_default_instance_;
class UnaryRequest;
class UnaryRequestDefaultTypeInternal;
extern UnaryRequestDefaultTypeInternal _UnaryRequest_default_instance_;
class UnaryResponse;
class UnaryResponseDefaultTypeInternal;
extern UnaryResponseDefaultTypeInternal _UnaryResponse_default_instance_;
}  // namespace connector
}  // namespace outer
namespace outer {
namespace connector {

enum SessionRequest_ESessionRequestType {
  SessionRequest_ESessionRequestType_UNKNOWNTYPE = 0,
  SessionRequest_ESessionRequestType_LOGIN = 5,
  SessionRequest_ESessionRequestType_LOGOUT = 1,
  SessionRequest_ESessionRequestType_PING = 2,
  SessionRequest_ESessionRequestType_LOGIN_BY_AUTO = 3,
  SessionRequest_ESessionRequestType_LOGIN_BY_TOKEN = 4,
  SessionRequest_ESessionRequestType_SessionRequest_ESessionRequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SessionRequest_ESessionRequestType_SessionRequest_ESessionRequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SessionRequest_ESessionRequestType_IsValid(int value);
const SessionRequest_ESessionRequestType SessionRequest_ESessionRequestType_ESessionRequestType_MIN = SessionRequest_ESessionRequestType_UNKNOWNTYPE;
const SessionRequest_ESessionRequestType SessionRequest_ESessionRequestType_ESessionRequestType_MAX = SessionRequest_ESessionRequestType_LOGIN;
const int SessionRequest_ESessionRequestType_ESessionRequestType_ARRAYSIZE = SessionRequest_ESessionRequestType_ESessionRequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SessionRequest_ESessionRequestType_descriptor();
inline const ::std::string& SessionRequest_ESessionRequestType_Name(SessionRequest_ESessionRequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SessionRequest_ESessionRequestType_descriptor(), value);
}
inline bool SessionRequest_ESessionRequestType_Parse(
    const ::std::string& name, SessionRequest_ESessionRequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SessionRequest_ESessionRequestType>(
    SessionRequest_ESessionRequestType_descriptor(), name, value);
}
enum HealthCheckResponse_ServingStatus {
  HealthCheckResponse_ServingStatus_UNKNOWN = 0,
  HealthCheckResponse_ServingStatus_SERVING = 1,
  HealthCheckResponse_ServingStatus_NOT_SERVING = 2,
  HealthCheckResponse_ServingStatus_HealthCheckResponse_ServingStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HealthCheckResponse_ServingStatus_HealthCheckResponse_ServingStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HealthCheckResponse_ServingStatus_IsValid(int value);
const HealthCheckResponse_ServingStatus HealthCheckResponse_ServingStatus_ServingStatus_MIN = HealthCheckResponse_ServingStatus_UNKNOWN;
const HealthCheckResponse_ServingStatus HealthCheckResponse_ServingStatus_ServingStatus_MAX = HealthCheckResponse_ServingStatus_NOT_SERVING;
const int HealthCheckResponse_ServingStatus_ServingStatus_ARRAYSIZE = HealthCheckResponse_ServingStatus_ServingStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* HealthCheckResponse_ServingStatus_descriptor();
inline const ::std::string& HealthCheckResponse_ServingStatus_Name(HealthCheckResponse_ServingStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    HealthCheckResponse_ServingStatus_descriptor(), value);
}
inline bool HealthCheckResponse_ServingStatus_Parse(
    const ::std::string& name, HealthCheckResponse_ServingStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HealthCheckResponse_ServingStatus>(
    HealthCheckResponse_ServingStatus_descriptor(), name, value);
}
// ===================================================================

class UnaryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.UnaryRequest) */ {
 public:
  UnaryRequest();
  virtual ~UnaryRequest();

  UnaryRequest(const UnaryRequest& from);

  inline UnaryRequest& operator=(const UnaryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnaryRequest(UnaryRequest&& from) noexcept
    : UnaryRequest() {
    *this = ::std::move(from);
  }

  inline UnaryRequest& operator=(UnaryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnaryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnaryRequest* internal_default_instance() {
    return reinterpret_cast<const UnaryRequest*>(
               &_UnaryRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UnaryRequest* other);
  friend void swap(UnaryRequest& a, UnaryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnaryRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UnaryRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnaryRequest& from);
  void MergeFrom(const UnaryRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnaryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string method_name = 2;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_method_name(::std::string&& value);
  #endif
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string request_id = 4;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // @@protoc_insertion_point(class_scope:outer.connector.UnaryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsUnaryRequestImpl();
};
// -------------------------------------------------------------------

class UnaryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.UnaryResponse) */ {
 public:
  UnaryResponse();
  virtual ~UnaryResponse();

  UnaryResponse(const UnaryResponse& from);

  inline UnaryResponse& operator=(const UnaryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnaryResponse(UnaryResponse&& from) noexcept
    : UnaryResponse() {
    *this = ::std::move(from);
  }

  inline UnaryResponse& operator=(UnaryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnaryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnaryResponse* internal_default_instance() {
    return reinterpret_cast<const UnaryResponse*>(
               &_UnaryResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(UnaryResponse* other);
  friend void swap(UnaryResponse& a, UnaryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnaryResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UnaryResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnaryResponse& from);
  void MergeFrom(const UnaryResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnaryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string method_name = 2;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_method_name(::std::string&& value);
  #endif
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string request_id = 5;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 5;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // .common.errcode.EErrorCode ret = 4;
  void clear_ret();
  static const int kRetFieldNumber = 4;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.connector.UnaryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsUnaryResponseImpl();
};
// -------------------------------------------------------------------

class ClientStreamRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.ClientStreamRequest) */ {
 public:
  ClientStreamRequest();
  virtual ~ClientStreamRequest();

  ClientStreamRequest(const ClientStreamRequest& from);

  inline ClientStreamRequest& operator=(const ClientStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientStreamRequest(ClientStreamRequest&& from) noexcept
    : ClientStreamRequest() {
    *this = ::std::move(from);
  }

  inline ClientStreamRequest& operator=(ClientStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientStreamRequest* internal_default_instance() {
    return reinterpret_cast<const ClientStreamRequest*>(
               &_ClientStreamRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ClientStreamRequest* other);
  friend void swap(ClientStreamRequest& a, ClientStreamRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientStreamRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientStreamRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientStreamRequest& from);
  void MergeFrom(const ClientStreamRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientStreamRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string method_name = 2;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_method_name(::std::string&& value);
  #endif
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:outer.connector.ClientStreamRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsClientStreamRequestImpl();
};
// -------------------------------------------------------------------

class ClientStreamResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.ClientStreamResponse) */ {
 public:
  ClientStreamResponse();
  virtual ~ClientStreamResponse();

  ClientStreamResponse(const ClientStreamResponse& from);

  inline ClientStreamResponse& operator=(const ClientStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientStreamResponse(ClientStreamResponse&& from) noexcept
    : ClientStreamResponse() {
    *this = ::std::move(from);
  }

  inline ClientStreamResponse& operator=(ClientStreamResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientStreamResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientStreamResponse* internal_default_instance() {
    return reinterpret_cast<const ClientStreamResponse*>(
               &_ClientStreamResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ClientStreamResponse* other);
  friend void swap(ClientStreamResponse& a, ClientStreamResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientStreamResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientStreamResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientStreamResponse& from);
  void MergeFrom(const ClientStreamResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientStreamResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string method_name = 2;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_method_name(::std::string&& value);
  #endif
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:outer.connector.ClientStreamResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsClientStreamResponseImpl();
};
// -------------------------------------------------------------------

class ServerStreamRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.ServerStreamRequest) */ {
 public:
  ServerStreamRequest();
  virtual ~ServerStreamRequest();

  ServerStreamRequest(const ServerStreamRequest& from);

  inline ServerStreamRequest& operator=(const ServerStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerStreamRequest(ServerStreamRequest&& from) noexcept
    : ServerStreamRequest() {
    *this = ::std::move(from);
  }

  inline ServerStreamRequest& operator=(ServerStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerStreamRequest* internal_default_instance() {
    return reinterpret_cast<const ServerStreamRequest*>(
               &_ServerStreamRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ServerStreamRequest* other);
  friend void swap(ServerStreamRequest& a, ServerStreamRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerStreamRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerStreamRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerStreamRequest& from);
  void MergeFrom(const ServerStreamRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerStreamRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string method_name = 2;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_method_name(::std::string&& value);
  #endif
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:outer.connector.ServerStreamRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsServerStreamRequestImpl();
};
// -------------------------------------------------------------------

class ServerStreamResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.ServerStreamResponse) */ {
 public:
  ServerStreamResponse();
  virtual ~ServerStreamResponse();

  ServerStreamResponse(const ServerStreamResponse& from);

  inline ServerStreamResponse& operator=(const ServerStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerStreamResponse(ServerStreamResponse&& from) noexcept
    : ServerStreamResponse() {
    *this = ::std::move(from);
  }

  inline ServerStreamResponse& operator=(ServerStreamResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerStreamResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerStreamResponse* internal_default_instance() {
    return reinterpret_cast<const ServerStreamResponse*>(
               &_ServerStreamResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ServerStreamResponse* other);
  friend void swap(ServerStreamResponse& a, ServerStreamResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerStreamResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerStreamResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerStreamResponse& from);
  void MergeFrom(const ServerStreamResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerStreamResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string method_name = 2;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_method_name(::std::string&& value);
  #endif
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:outer.connector.ServerStreamResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsServerStreamResponseImpl();
};
// -------------------------------------------------------------------

class BidiStreamRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.BidiStreamRequest) */ {
 public:
  BidiStreamRequest();
  virtual ~BidiStreamRequest();

  BidiStreamRequest(const BidiStreamRequest& from);

  inline BidiStreamRequest& operator=(const BidiStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BidiStreamRequest(BidiStreamRequest&& from) noexcept
    : BidiStreamRequest() {
    *this = ::std::move(from);
  }

  inline BidiStreamRequest& operator=(BidiStreamRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BidiStreamRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BidiStreamRequest* internal_default_instance() {
    return reinterpret_cast<const BidiStreamRequest*>(
               &_BidiStreamRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(BidiStreamRequest* other);
  friend void swap(BidiStreamRequest& a, BidiStreamRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BidiStreamRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BidiStreamRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BidiStreamRequest& from);
  void MergeFrom(const BidiStreamRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BidiStreamRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string method_name = 2;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_method_name(::std::string&& value);
  #endif
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:outer.connector.BidiStreamRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsBidiStreamRequestImpl();
};
// -------------------------------------------------------------------

class BidiStreamResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.BidiStreamResponse) */ {
 public:
  BidiStreamResponse();
  virtual ~BidiStreamResponse();

  BidiStreamResponse(const BidiStreamResponse& from);

  inline BidiStreamResponse& operator=(const BidiStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BidiStreamResponse(BidiStreamResponse&& from) noexcept
    : BidiStreamResponse() {
    *this = ::std::move(from);
  }

  inline BidiStreamResponse& operator=(BidiStreamResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BidiStreamResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BidiStreamResponse* internal_default_instance() {
    return reinterpret_cast<const BidiStreamResponse*>(
               &_BidiStreamResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(BidiStreamResponse* other);
  friend void swap(BidiStreamResponse& a, BidiStreamResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BidiStreamResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BidiStreamResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BidiStreamResponse& from);
  void MergeFrom(const BidiStreamResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BidiStreamResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // string method_name = 2;
  void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  const ::std::string& method_name() const;
  void set_method_name(const ::std::string& value);
  #if LANG_CXX11
  void set_method_name(::std::string&& value);
  #endif
  void set_method_name(const char* value);
  void set_method_name(const char* value, size_t size);
  ::std::string* mutable_method_name();
  ::std::string* release_method_name();
  void set_allocated_method_name(::std::string* method_name);

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:outer.connector.BidiStreamResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr method_name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsBidiStreamResponseImpl();
};
// -------------------------------------------------------------------

class SessionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.SessionRequest) */ {
 public:
  SessionRequest();
  virtual ~SessionRequest();

  SessionRequest(const SessionRequest& from);

  inline SessionRequest& operator=(const SessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionRequest(SessionRequest&& from) noexcept
    : SessionRequest() {
    *this = ::std::move(from);
  }

  inline SessionRequest& operator=(SessionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionRequest* internal_default_instance() {
    return reinterpret_cast<const SessionRequest*>(
               &_SessionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SessionRequest* other);
  friend void swap(SessionRequest& a, SessionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionRequest& from);
  void MergeFrom(const SessionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SessionRequest_ESessionRequestType ESessionRequestType;
  static const ESessionRequestType UNKNOWNTYPE =
    SessionRequest_ESessionRequestType_UNKNOWNTYPE;
  static const ESessionRequestType LOGIN =
    SessionRequest_ESessionRequestType_LOGIN;
  static const ESessionRequestType LOGOUT =
    SessionRequest_ESessionRequestType_LOGOUT;
  static const ESessionRequestType PING =
    SessionRequest_ESessionRequestType_PING;
  static const ESessionRequestType LOGIN_BY_AUTO =
    SessionRequest_ESessionRequestType_LOGIN_BY_AUTO;
  static const ESessionRequestType LOGIN_BY_TOKEN =
    SessionRequest_ESessionRequestType_LOGIN_BY_TOKEN;
  static inline bool ESessionRequestType_IsValid(int value) {
    return SessionRequest_ESessionRequestType_IsValid(value);
  }
  static const ESessionRequestType ESessionRequestType_MIN =
    SessionRequest_ESessionRequestType_ESessionRequestType_MIN;
  static const ESessionRequestType ESessionRequestType_MAX =
    SessionRequest_ESessionRequestType_ESessionRequestType_MAX;
  static const int ESessionRequestType_ARRAYSIZE =
    SessionRequest_ESessionRequestType_ESessionRequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ESessionRequestType_descriptor() {
    return SessionRequest_ESessionRequestType_descriptor();
  }
  static inline const ::std::string& ESessionRequestType_Name(ESessionRequestType value) {
    return SessionRequest_ESessionRequestType_Name(value);
  }
  static inline bool ESessionRequestType_Parse(const ::std::string& name,
      ESessionRequestType* value) {
    return SessionRequest_ESessionRequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string request_id = 4;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 4;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // .common.base.MobileBase base_info = 2;
  bool has_base_info() const;
  void clear_base_info();
  static const int kBaseInfoFieldNumber = 2;
  const ::common::base::MobileBase& base_info() const;
  ::common::base::MobileBase* release_base_info();
  ::common::base::MobileBase* mutable_base_info();
  void set_allocated_base_info(::common::base::MobileBase* base_info);

  // .outer.connector.SessionRequest.ESessionRequestType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::outer::connector::SessionRequest_ESessionRequestType type() const;
  void set_type(::outer::connector::SessionRequest_ESessionRequestType value);

  // @@protoc_insertion_point(class_scope:outer.connector.SessionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::common::base::MobileBase* base_info_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsSessionRequestImpl();
};
// -------------------------------------------------------------------

class SessionNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.SessionNotify) */ {
 public:
  SessionNotify();
  virtual ~SessionNotify();

  SessionNotify(const SessionNotify& from);

  inline SessionNotify& operator=(const SessionNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SessionNotify(SessionNotify&& from) noexcept
    : SessionNotify() {
    *this = ::std::move(from);
  }

  inline SessionNotify& operator=(SessionNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionNotify* internal_default_instance() {
    return reinterpret_cast<const SessionNotify*>(
               &_SessionNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SessionNotify* other);
  friend void swap(SessionNotify& a, SessionNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SessionNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  SessionNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SessionNotify& from);
  void MergeFrom(const SessionNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SessionNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string to_username = 1;
  void clear_to_username();
  static const int kToUsernameFieldNumber = 1;
  const ::std::string& to_username() const;
  void set_to_username(const ::std::string& value);
  #if LANG_CXX11
  void set_to_username(::std::string&& value);
  #endif
  void set_to_username(const char* value);
  void set_to_username(const char* value, size_t size);
  ::std::string* mutable_to_username();
  ::std::string* release_to_username();
  void set_allocated_to_username(::std::string* to_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string request_id = 5;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 5;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  #if LANG_CXX11
  void set_request_id(::std::string&& value);
  #endif
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // uint32 type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.connector.SessionNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr to_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsSessionNotifyImpl();
};
// -------------------------------------------------------------------

class PingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.PingRequest) */ {
 public:
  PingRequest();
  virtual ~PingRequest();

  PingRequest(const PingRequest& from);

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(PingRequest* other);
  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PingRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PingRequest& from);
  void MergeFrom(const PingRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 1;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.connector.PingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsPingRequestImpl();
};
// -------------------------------------------------------------------

class PingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.PingResponse) */ {
 public:
  PingResponse();
  virtual ~PingResponse();

  PingResponse(const PingResponse& from);

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PingResponse(PingResponse&& from) noexcept
    : PingResponse() {
    *this = ::std::move(from);
  }

  inline PingResponse& operator=(PingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingResponse* internal_default_instance() {
    return reinterpret_cast<const PingResponse*>(
               &_PingResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(PingResponse* other);
  friend void swap(PingResponse& a, PingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PingResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PingResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PingResponse& from);
  void MergeFrom(const PingResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.connector.PingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsPingResponseImpl();
};
// -------------------------------------------------------------------

class LoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(LoginRequest* other);
  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string appkey_password = 4;
  void clear_appkey_password();
  static const int kAppkeyPasswordFieldNumber = 4;
  const ::std::string& appkey_password() const;
  void set_appkey_password(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey_password(::std::string&& value);
  #endif
  void set_appkey_password(const char* value);
  void set_appkey_password(const char* value, size_t size);
  ::std::string* mutable_appkey_password();
  ::std::string* release_appkey_password();
  void set_allocated_appkey_password(::std::string* appkey_password);

  // string token = 6;
  void clear_token();
  static const int kTokenFieldNumber = 6;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // bool SHA256 = 5;
  void clear_sha256();
  static const int kSHA256FieldNumber = 5;
  bool sha256() const;
  void set_sha256(bool value);

  // .common.enumeration.ELoginMode login_mode = 7;
  void clear_login_mode();
  static const int kLoginModeFieldNumber = 7;
  ::common::enumeration::ELoginMode login_mode() const;
  void set_login_mode(::common::enumeration::ELoginMode value);

  // @@protoc_insertion_point(class_scope:outer.connector.LoginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr appkey_password_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  bool sha256_;
  int login_mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsLoginRequestImpl();
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(LoginResponse* other);
  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .outer.user.UserInfo user_infos = 2;
  bool has_user_infos() const;
  void clear_user_infos();
  static const int kUserInfosFieldNumber = 2;
  const ::outer::user::UserInfo& user_infos() const;
  ::outer::user::UserInfo* release_user_infos();
  ::outer::user::UserInfo* mutable_user_infos();
  void set_allocated_user_infos(::outer::user::UserInfo* user_infos);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.connector.LoginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::outer::user::UserInfo* user_infos_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsLoginResponseImpl();
};
// -------------------------------------------------------------------

class LogoutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.LogoutRequest) */ {
 public:
  LogoutRequest();
  virtual ~LogoutRequest();

  LogoutRequest(const LogoutRequest& from);

  inline LogoutRequest& operator=(const LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutRequest(LogoutRequest&& from) noexcept
    : LogoutRequest() {
    *this = ::std::move(from);
  }

  inline LogoutRequest& operator=(LogoutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutRequest* internal_default_instance() {
    return reinterpret_cast<const LogoutRequest*>(
               &_LogoutRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(LogoutRequest* other);
  friend void swap(LogoutRequest& a, LogoutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutRequest& from);
  void MergeFrom(const LogoutRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:outer.connector.LogoutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsLogoutRequestImpl();
};
// -------------------------------------------------------------------

class LogoutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.LogoutResponse) */ {
 public:
  LogoutResponse();
  virtual ~LogoutResponse();

  LogoutResponse(const LogoutResponse& from);

  inline LogoutResponse& operator=(const LogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutResponse(LogoutResponse&& from) noexcept
    : LogoutResponse() {
    *this = ::std::move(from);
  }

  inline LogoutResponse& operator=(LogoutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutResponse* internal_default_instance() {
    return reinterpret_cast<const LogoutResponse*>(
               &_LogoutResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(LogoutResponse* other);
  friend void swap(LogoutResponse& a, LogoutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutResponse& from);
  void MergeFrom(const LogoutResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.connector.LogoutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsLogoutResponseImpl();
};
// -------------------------------------------------------------------

class StreamInitResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.StreamInitResponse) */ {
 public:
  StreamInitResponse();
  virtual ~StreamInitResponse();

  StreamInitResponse(const StreamInitResponse& from);

  inline StreamInitResponse& operator=(const StreamInitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamInitResponse(StreamInitResponse&& from) noexcept
    : StreamInitResponse() {
    *this = ::std::move(from);
  }

  inline StreamInitResponse& operator=(StreamInitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamInitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamInitResponse* internal_default_instance() {
    return reinterpret_cast<const StreamInitResponse*>(
               &_StreamInitResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(StreamInitResponse* other);
  friend void swap(StreamInitResponse& a, StreamInitResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamInitResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamInitResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamInitResponse& from);
  void MergeFrom(const StreamInitResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamInitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:outer.connector.StreamInitResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsStreamInitResponseImpl();
};
// -------------------------------------------------------------------

class HealthCheckRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.HealthCheckRequest) */ {
 public:
  HealthCheckRequest();
  virtual ~HealthCheckRequest();

  HealthCheckRequest(const HealthCheckRequest& from);

  inline HealthCheckRequest& operator=(const HealthCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HealthCheckRequest(HealthCheckRequest&& from) noexcept
    : HealthCheckRequest() {
    *this = ::std::move(from);
  }

  inline HealthCheckRequest& operator=(HealthCheckRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HealthCheckRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthCheckRequest* internal_default_instance() {
    return reinterpret_cast<const HealthCheckRequest*>(
               &_HealthCheckRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(HealthCheckRequest* other);
  friend void swap(HealthCheckRequest& a, HealthCheckRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HealthCheckRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  HealthCheckRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HealthCheckRequest& from);
  void MergeFrom(const HealthCheckRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HealthCheckRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service = 1;
  void clear_service();
  static const int kServiceFieldNumber = 1;
  const ::std::string& service() const;
  void set_service(const ::std::string& value);
  #if LANG_CXX11
  void set_service(::std::string&& value);
  #endif
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  ::std::string* mutable_service();
  ::std::string* release_service();
  void set_allocated_service(::std::string* service);

  // @@protoc_insertion_point(class_scope:outer.connector.HealthCheckRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr service_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsHealthCheckRequestImpl();
};
// -------------------------------------------------------------------

class HealthCheckResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.connector.HealthCheckResponse) */ {
 public:
  HealthCheckResponse();
  virtual ~HealthCheckResponse();

  HealthCheckResponse(const HealthCheckResponse& from);

  inline HealthCheckResponse& operator=(const HealthCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HealthCheckResponse(HealthCheckResponse&& from) noexcept
    : HealthCheckResponse() {
    *this = ::std::move(from);
  }

  inline HealthCheckResponse& operator=(HealthCheckResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HealthCheckResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthCheckResponse* internal_default_instance() {
    return reinterpret_cast<const HealthCheckResponse*>(
               &_HealthCheckResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(HealthCheckResponse* other);
  friend void swap(HealthCheckResponse& a, HealthCheckResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HealthCheckResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  HealthCheckResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HealthCheckResponse& from);
  void MergeFrom(const HealthCheckResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HealthCheckResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HealthCheckResponse_ServingStatus ServingStatus;
  static const ServingStatus UNKNOWN =
    HealthCheckResponse_ServingStatus_UNKNOWN;
  static const ServingStatus SERVING =
    HealthCheckResponse_ServingStatus_SERVING;
  static const ServingStatus NOT_SERVING =
    HealthCheckResponse_ServingStatus_NOT_SERVING;
  static inline bool ServingStatus_IsValid(int value) {
    return HealthCheckResponse_ServingStatus_IsValid(value);
  }
  static const ServingStatus ServingStatus_MIN =
    HealthCheckResponse_ServingStatus_ServingStatus_MIN;
  static const ServingStatus ServingStatus_MAX =
    HealthCheckResponse_ServingStatus_ServingStatus_MAX;
  static const int ServingStatus_ARRAYSIZE =
    HealthCheckResponse_ServingStatus_ServingStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ServingStatus_descriptor() {
    return HealthCheckResponse_ServingStatus_descriptor();
  }
  static inline const ::std::string& ServingStatus_Name(ServingStatus value) {
    return HealthCheckResponse_ServingStatus_Name(value);
  }
  static inline bool ServingStatus_Parse(const ::std::string& name,
      ServingStatus* value) {
    return HealthCheckResponse_ServingStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .outer.connector.HealthCheckResponse.ServingStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::outer::connector::HealthCheckResponse_ServingStatus status() const;
  void set_status(::outer::connector::HealthCheckResponse_ServingStatus value);

  // @@protoc_insertion_point(class_scope:outer.connector.HealthCheckResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fconnector_2eproto::TableStruct;
  friend void ::protobuf_outer_2fconnector_2eproto::InitDefaultsHealthCheckResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UnaryRequest

// string service_name = 1;
inline void UnaryRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnaryRequest::service_name() const {
  // @@protoc_insertion_point(field_get:outer.connector.UnaryRequest.service_name)
  return service_name_.GetNoArena();
}
inline void UnaryRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.UnaryRequest.service_name)
}
#if LANG_CXX11
inline void UnaryRequest::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.UnaryRequest.service_name)
}
#endif
inline void UnaryRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.UnaryRequest.service_name)
}
inline void UnaryRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.UnaryRequest.service_name)
}
inline ::std::string* UnaryRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.UnaryRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnaryRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:outer.connector.UnaryRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnaryRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.UnaryRequest.service_name)
}

// string method_name = 2;
inline void UnaryRequest::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnaryRequest::method_name() const {
  // @@protoc_insertion_point(field_get:outer.connector.UnaryRequest.method_name)
  return method_name_.GetNoArena();
}
inline void UnaryRequest::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.UnaryRequest.method_name)
}
#if LANG_CXX11
inline void UnaryRequest::set_method_name(::std::string&& value) {
  
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.UnaryRequest.method_name)
}
#endif
inline void UnaryRequest::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.UnaryRequest.method_name)
}
inline void UnaryRequest::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.UnaryRequest.method_name)
}
inline ::std::string* UnaryRequest::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.UnaryRequest.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnaryRequest::release_method_name() {
  // @@protoc_insertion_point(field_release:outer.connector.UnaryRequest.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnaryRequest::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.UnaryRequest.method_name)
}

// bytes data = 3;
inline void UnaryRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnaryRequest::data() const {
  // @@protoc_insertion_point(field_get:outer.connector.UnaryRequest.data)
  return data_.GetNoArena();
}
inline void UnaryRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.UnaryRequest.data)
}
#if LANG_CXX11
inline void UnaryRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.UnaryRequest.data)
}
#endif
inline void UnaryRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.UnaryRequest.data)
}
inline void UnaryRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.UnaryRequest.data)
}
inline ::std::string* UnaryRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.UnaryRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnaryRequest::release_data() {
  // @@protoc_insertion_point(field_release:outer.connector.UnaryRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnaryRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.UnaryRequest.data)
}

// string request_id = 4;
inline void UnaryRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnaryRequest::request_id() const {
  // @@protoc_insertion_point(field_get:outer.connector.UnaryRequest.request_id)
  return request_id_.GetNoArena();
}
inline void UnaryRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.UnaryRequest.request_id)
}
#if LANG_CXX11
inline void UnaryRequest::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.UnaryRequest.request_id)
}
#endif
inline void UnaryRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.UnaryRequest.request_id)
}
inline void UnaryRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.UnaryRequest.request_id)
}
inline ::std::string* UnaryRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.UnaryRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnaryRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:outer.connector.UnaryRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnaryRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.UnaryRequest.request_id)
}

// -------------------------------------------------------------------

// UnaryResponse

// string service_name = 1;
inline void UnaryResponse::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnaryResponse::service_name() const {
  // @@protoc_insertion_point(field_get:outer.connector.UnaryResponse.service_name)
  return service_name_.GetNoArena();
}
inline void UnaryResponse::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.UnaryResponse.service_name)
}
#if LANG_CXX11
inline void UnaryResponse::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.UnaryResponse.service_name)
}
#endif
inline void UnaryResponse::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.UnaryResponse.service_name)
}
inline void UnaryResponse::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.UnaryResponse.service_name)
}
inline ::std::string* UnaryResponse::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.UnaryResponse.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnaryResponse::release_service_name() {
  // @@protoc_insertion_point(field_release:outer.connector.UnaryResponse.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnaryResponse::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.UnaryResponse.service_name)
}

// string method_name = 2;
inline void UnaryResponse::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnaryResponse::method_name() const {
  // @@protoc_insertion_point(field_get:outer.connector.UnaryResponse.method_name)
  return method_name_.GetNoArena();
}
inline void UnaryResponse::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.UnaryResponse.method_name)
}
#if LANG_CXX11
inline void UnaryResponse::set_method_name(::std::string&& value) {
  
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.UnaryResponse.method_name)
}
#endif
inline void UnaryResponse::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.UnaryResponse.method_name)
}
inline void UnaryResponse::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.UnaryResponse.method_name)
}
inline ::std::string* UnaryResponse::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.UnaryResponse.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnaryResponse::release_method_name() {
  // @@protoc_insertion_point(field_release:outer.connector.UnaryResponse.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnaryResponse::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.UnaryResponse.method_name)
}

// bytes data = 3;
inline void UnaryResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnaryResponse::data() const {
  // @@protoc_insertion_point(field_get:outer.connector.UnaryResponse.data)
  return data_.GetNoArena();
}
inline void UnaryResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.UnaryResponse.data)
}
#if LANG_CXX11
inline void UnaryResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.UnaryResponse.data)
}
#endif
inline void UnaryResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.UnaryResponse.data)
}
inline void UnaryResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.UnaryResponse.data)
}
inline ::std::string* UnaryResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.UnaryResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnaryResponse::release_data() {
  // @@protoc_insertion_point(field_release:outer.connector.UnaryResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnaryResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.UnaryResponse.data)
}

// .common.errcode.EErrorCode ret = 4;
inline void UnaryResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode UnaryResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.connector.UnaryResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void UnaryResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.connector.UnaryResponse.ret)
}

// string request_id = 5;
inline void UnaryResponse::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnaryResponse::request_id() const {
  // @@protoc_insertion_point(field_get:outer.connector.UnaryResponse.request_id)
  return request_id_.GetNoArena();
}
inline void UnaryResponse::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.UnaryResponse.request_id)
}
#if LANG_CXX11
inline void UnaryResponse::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.UnaryResponse.request_id)
}
#endif
inline void UnaryResponse::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.UnaryResponse.request_id)
}
inline void UnaryResponse::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.UnaryResponse.request_id)
}
inline ::std::string* UnaryResponse::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.UnaryResponse.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnaryResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:outer.connector.UnaryResponse.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnaryResponse::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.UnaryResponse.request_id)
}

// -------------------------------------------------------------------

// ClientStreamRequest

// string service_name = 1;
inline void ClientStreamRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientStreamRequest::service_name() const {
  // @@protoc_insertion_point(field_get:outer.connector.ClientStreamRequest.service_name)
  return service_name_.GetNoArena();
}
inline void ClientStreamRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.ClientStreamRequest.service_name)
}
#if LANG_CXX11
inline void ClientStreamRequest::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.ClientStreamRequest.service_name)
}
#endif
inline void ClientStreamRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.ClientStreamRequest.service_name)
}
inline void ClientStreamRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.ClientStreamRequest.service_name)
}
inline ::std::string* ClientStreamRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.ClientStreamRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientStreamRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:outer.connector.ClientStreamRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStreamRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.ClientStreamRequest.service_name)
}

// string method_name = 2;
inline void ClientStreamRequest::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientStreamRequest::method_name() const {
  // @@protoc_insertion_point(field_get:outer.connector.ClientStreamRequest.method_name)
  return method_name_.GetNoArena();
}
inline void ClientStreamRequest::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.ClientStreamRequest.method_name)
}
#if LANG_CXX11
inline void ClientStreamRequest::set_method_name(::std::string&& value) {
  
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.ClientStreamRequest.method_name)
}
#endif
inline void ClientStreamRequest::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.ClientStreamRequest.method_name)
}
inline void ClientStreamRequest::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.ClientStreamRequest.method_name)
}
inline ::std::string* ClientStreamRequest::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.ClientStreamRequest.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientStreamRequest::release_method_name() {
  // @@protoc_insertion_point(field_release:outer.connector.ClientStreamRequest.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStreamRequest::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.ClientStreamRequest.method_name)
}

// bytes data = 3;
inline void ClientStreamRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientStreamRequest::data() const {
  // @@protoc_insertion_point(field_get:outer.connector.ClientStreamRequest.data)
  return data_.GetNoArena();
}
inline void ClientStreamRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.ClientStreamRequest.data)
}
#if LANG_CXX11
inline void ClientStreamRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.ClientStreamRequest.data)
}
#endif
inline void ClientStreamRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.ClientStreamRequest.data)
}
inline void ClientStreamRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.ClientStreamRequest.data)
}
inline ::std::string* ClientStreamRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.ClientStreamRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientStreamRequest::release_data() {
  // @@protoc_insertion_point(field_release:outer.connector.ClientStreamRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStreamRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.ClientStreamRequest.data)
}

// -------------------------------------------------------------------

// ClientStreamResponse

// string service_name = 1;
inline void ClientStreamResponse::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientStreamResponse::service_name() const {
  // @@protoc_insertion_point(field_get:outer.connector.ClientStreamResponse.service_name)
  return service_name_.GetNoArena();
}
inline void ClientStreamResponse::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.ClientStreamResponse.service_name)
}
#if LANG_CXX11
inline void ClientStreamResponse::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.ClientStreamResponse.service_name)
}
#endif
inline void ClientStreamResponse::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.ClientStreamResponse.service_name)
}
inline void ClientStreamResponse::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.ClientStreamResponse.service_name)
}
inline ::std::string* ClientStreamResponse::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.ClientStreamResponse.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientStreamResponse::release_service_name() {
  // @@protoc_insertion_point(field_release:outer.connector.ClientStreamResponse.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStreamResponse::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.ClientStreamResponse.service_name)
}

// string method_name = 2;
inline void ClientStreamResponse::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientStreamResponse::method_name() const {
  // @@protoc_insertion_point(field_get:outer.connector.ClientStreamResponse.method_name)
  return method_name_.GetNoArena();
}
inline void ClientStreamResponse::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.ClientStreamResponse.method_name)
}
#if LANG_CXX11
inline void ClientStreamResponse::set_method_name(::std::string&& value) {
  
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.ClientStreamResponse.method_name)
}
#endif
inline void ClientStreamResponse::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.ClientStreamResponse.method_name)
}
inline void ClientStreamResponse::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.ClientStreamResponse.method_name)
}
inline ::std::string* ClientStreamResponse::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.ClientStreamResponse.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientStreamResponse::release_method_name() {
  // @@protoc_insertion_point(field_release:outer.connector.ClientStreamResponse.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStreamResponse::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.ClientStreamResponse.method_name)
}

// bytes data = 3;
inline void ClientStreamResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientStreamResponse::data() const {
  // @@protoc_insertion_point(field_get:outer.connector.ClientStreamResponse.data)
  return data_.GetNoArena();
}
inline void ClientStreamResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.ClientStreamResponse.data)
}
#if LANG_CXX11
inline void ClientStreamResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.ClientStreamResponse.data)
}
#endif
inline void ClientStreamResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.ClientStreamResponse.data)
}
inline void ClientStreamResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.ClientStreamResponse.data)
}
inline ::std::string* ClientStreamResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.ClientStreamResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientStreamResponse::release_data() {
  // @@protoc_insertion_point(field_release:outer.connector.ClientStreamResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientStreamResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.ClientStreamResponse.data)
}

// -------------------------------------------------------------------

// ServerStreamRequest

// string service_name = 1;
inline void ServerStreamRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerStreamRequest::service_name() const {
  // @@protoc_insertion_point(field_get:outer.connector.ServerStreamRequest.service_name)
  return service_name_.GetNoArena();
}
inline void ServerStreamRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.ServerStreamRequest.service_name)
}
#if LANG_CXX11
inline void ServerStreamRequest::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.ServerStreamRequest.service_name)
}
#endif
inline void ServerStreamRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.ServerStreamRequest.service_name)
}
inline void ServerStreamRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.ServerStreamRequest.service_name)
}
inline ::std::string* ServerStreamRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.ServerStreamRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerStreamRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:outer.connector.ServerStreamRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerStreamRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.ServerStreamRequest.service_name)
}

// string method_name = 2;
inline void ServerStreamRequest::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerStreamRequest::method_name() const {
  // @@protoc_insertion_point(field_get:outer.connector.ServerStreamRequest.method_name)
  return method_name_.GetNoArena();
}
inline void ServerStreamRequest::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.ServerStreamRequest.method_name)
}
#if LANG_CXX11
inline void ServerStreamRequest::set_method_name(::std::string&& value) {
  
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.ServerStreamRequest.method_name)
}
#endif
inline void ServerStreamRequest::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.ServerStreamRequest.method_name)
}
inline void ServerStreamRequest::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.ServerStreamRequest.method_name)
}
inline ::std::string* ServerStreamRequest::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.ServerStreamRequest.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerStreamRequest::release_method_name() {
  // @@protoc_insertion_point(field_release:outer.connector.ServerStreamRequest.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerStreamRequest::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.ServerStreamRequest.method_name)
}

// bytes data = 3;
inline void ServerStreamRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerStreamRequest::data() const {
  // @@protoc_insertion_point(field_get:outer.connector.ServerStreamRequest.data)
  return data_.GetNoArena();
}
inline void ServerStreamRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.ServerStreamRequest.data)
}
#if LANG_CXX11
inline void ServerStreamRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.ServerStreamRequest.data)
}
#endif
inline void ServerStreamRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.ServerStreamRequest.data)
}
inline void ServerStreamRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.ServerStreamRequest.data)
}
inline ::std::string* ServerStreamRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.ServerStreamRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerStreamRequest::release_data() {
  // @@protoc_insertion_point(field_release:outer.connector.ServerStreamRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerStreamRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.ServerStreamRequest.data)
}

// -------------------------------------------------------------------

// ServerStreamResponse

// string service_name = 1;
inline void ServerStreamResponse::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerStreamResponse::service_name() const {
  // @@protoc_insertion_point(field_get:outer.connector.ServerStreamResponse.service_name)
  return service_name_.GetNoArena();
}
inline void ServerStreamResponse::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.ServerStreamResponse.service_name)
}
#if LANG_CXX11
inline void ServerStreamResponse::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.ServerStreamResponse.service_name)
}
#endif
inline void ServerStreamResponse::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.ServerStreamResponse.service_name)
}
inline void ServerStreamResponse::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.ServerStreamResponse.service_name)
}
inline ::std::string* ServerStreamResponse::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.ServerStreamResponse.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerStreamResponse::release_service_name() {
  // @@protoc_insertion_point(field_release:outer.connector.ServerStreamResponse.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerStreamResponse::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.ServerStreamResponse.service_name)
}

// string method_name = 2;
inline void ServerStreamResponse::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerStreamResponse::method_name() const {
  // @@protoc_insertion_point(field_get:outer.connector.ServerStreamResponse.method_name)
  return method_name_.GetNoArena();
}
inline void ServerStreamResponse::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.ServerStreamResponse.method_name)
}
#if LANG_CXX11
inline void ServerStreamResponse::set_method_name(::std::string&& value) {
  
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.ServerStreamResponse.method_name)
}
#endif
inline void ServerStreamResponse::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.ServerStreamResponse.method_name)
}
inline void ServerStreamResponse::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.ServerStreamResponse.method_name)
}
inline ::std::string* ServerStreamResponse::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.ServerStreamResponse.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerStreamResponse::release_method_name() {
  // @@protoc_insertion_point(field_release:outer.connector.ServerStreamResponse.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerStreamResponse::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.ServerStreamResponse.method_name)
}

// bytes data = 3;
inline void ServerStreamResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerStreamResponse::data() const {
  // @@protoc_insertion_point(field_get:outer.connector.ServerStreamResponse.data)
  return data_.GetNoArena();
}
inline void ServerStreamResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.ServerStreamResponse.data)
}
#if LANG_CXX11
inline void ServerStreamResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.ServerStreamResponse.data)
}
#endif
inline void ServerStreamResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.ServerStreamResponse.data)
}
inline void ServerStreamResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.ServerStreamResponse.data)
}
inline ::std::string* ServerStreamResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.ServerStreamResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerStreamResponse::release_data() {
  // @@protoc_insertion_point(field_release:outer.connector.ServerStreamResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerStreamResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.ServerStreamResponse.data)
}

// -------------------------------------------------------------------

// BidiStreamRequest

// string service_name = 1;
inline void BidiStreamRequest::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BidiStreamRequest::service_name() const {
  // @@protoc_insertion_point(field_get:outer.connector.BidiStreamRequest.service_name)
  return service_name_.GetNoArena();
}
inline void BidiStreamRequest::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.BidiStreamRequest.service_name)
}
#if LANG_CXX11
inline void BidiStreamRequest::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.BidiStreamRequest.service_name)
}
#endif
inline void BidiStreamRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.BidiStreamRequest.service_name)
}
inline void BidiStreamRequest::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.BidiStreamRequest.service_name)
}
inline ::std::string* BidiStreamRequest::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.BidiStreamRequest.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidiStreamRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:outer.connector.BidiStreamRequest.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidiStreamRequest::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.BidiStreamRequest.service_name)
}

// string method_name = 2;
inline void BidiStreamRequest::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BidiStreamRequest::method_name() const {
  // @@protoc_insertion_point(field_get:outer.connector.BidiStreamRequest.method_name)
  return method_name_.GetNoArena();
}
inline void BidiStreamRequest::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.BidiStreamRequest.method_name)
}
#if LANG_CXX11
inline void BidiStreamRequest::set_method_name(::std::string&& value) {
  
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.BidiStreamRequest.method_name)
}
#endif
inline void BidiStreamRequest::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.BidiStreamRequest.method_name)
}
inline void BidiStreamRequest::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.BidiStreamRequest.method_name)
}
inline ::std::string* BidiStreamRequest::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.BidiStreamRequest.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidiStreamRequest::release_method_name() {
  // @@protoc_insertion_point(field_release:outer.connector.BidiStreamRequest.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidiStreamRequest::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.BidiStreamRequest.method_name)
}

// bytes data = 3;
inline void BidiStreamRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BidiStreamRequest::data() const {
  // @@protoc_insertion_point(field_get:outer.connector.BidiStreamRequest.data)
  return data_.GetNoArena();
}
inline void BidiStreamRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.BidiStreamRequest.data)
}
#if LANG_CXX11
inline void BidiStreamRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.BidiStreamRequest.data)
}
#endif
inline void BidiStreamRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.BidiStreamRequest.data)
}
inline void BidiStreamRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.BidiStreamRequest.data)
}
inline ::std::string* BidiStreamRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.BidiStreamRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidiStreamRequest::release_data() {
  // @@protoc_insertion_point(field_release:outer.connector.BidiStreamRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidiStreamRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.BidiStreamRequest.data)
}

// -------------------------------------------------------------------

// BidiStreamResponse

// string service_name = 1;
inline void BidiStreamResponse::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BidiStreamResponse::service_name() const {
  // @@protoc_insertion_point(field_get:outer.connector.BidiStreamResponse.service_name)
  return service_name_.GetNoArena();
}
inline void BidiStreamResponse::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.BidiStreamResponse.service_name)
}
#if LANG_CXX11
inline void BidiStreamResponse::set_service_name(::std::string&& value) {
  
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.BidiStreamResponse.service_name)
}
#endif
inline void BidiStreamResponse::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.BidiStreamResponse.service_name)
}
inline void BidiStreamResponse::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.BidiStreamResponse.service_name)
}
inline ::std::string* BidiStreamResponse::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.BidiStreamResponse.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidiStreamResponse::release_service_name() {
  // @@protoc_insertion_point(field_release:outer.connector.BidiStreamResponse.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidiStreamResponse::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.BidiStreamResponse.service_name)
}

// string method_name = 2;
inline void BidiStreamResponse::clear_method_name() {
  method_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BidiStreamResponse::method_name() const {
  // @@protoc_insertion_point(field_get:outer.connector.BidiStreamResponse.method_name)
  return method_name_.GetNoArena();
}
inline void BidiStreamResponse::set_method_name(const ::std::string& value) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.BidiStreamResponse.method_name)
}
#if LANG_CXX11
inline void BidiStreamResponse::set_method_name(::std::string&& value) {
  
  method_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.BidiStreamResponse.method_name)
}
#endif
inline void BidiStreamResponse::set_method_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.BidiStreamResponse.method_name)
}
inline void BidiStreamResponse::set_method_name(const char* value, size_t size) {
  
  method_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.BidiStreamResponse.method_name)
}
inline ::std::string* BidiStreamResponse::mutable_method_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.BidiStreamResponse.method_name)
  return method_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidiStreamResponse::release_method_name() {
  // @@protoc_insertion_point(field_release:outer.connector.BidiStreamResponse.method_name)
  
  return method_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidiStreamResponse::set_allocated_method_name(::std::string* method_name) {
  if (method_name != NULL) {
    
  } else {
    
  }
  method_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method_name);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.BidiStreamResponse.method_name)
}

// bytes data = 3;
inline void BidiStreamResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BidiStreamResponse::data() const {
  // @@protoc_insertion_point(field_get:outer.connector.BidiStreamResponse.data)
  return data_.GetNoArena();
}
inline void BidiStreamResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.BidiStreamResponse.data)
}
#if LANG_CXX11
inline void BidiStreamResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.BidiStreamResponse.data)
}
#endif
inline void BidiStreamResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.BidiStreamResponse.data)
}
inline void BidiStreamResponse::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.BidiStreamResponse.data)
}
inline ::std::string* BidiStreamResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.BidiStreamResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BidiStreamResponse::release_data() {
  // @@protoc_insertion_point(field_release:outer.connector.BidiStreamResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BidiStreamResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.BidiStreamResponse.data)
}

// -------------------------------------------------------------------

// SessionRequest

// .outer.connector.SessionRequest.ESessionRequestType type = 1;
inline void SessionRequest::clear_type() {
  type_ = 0;
}
inline ::outer::connector::SessionRequest_ESessionRequestType SessionRequest::type() const {
  // @@protoc_insertion_point(field_get:outer.connector.SessionRequest.type)
  return static_cast< ::outer::connector::SessionRequest_ESessionRequestType >(type_);
}
inline void SessionRequest::set_type(::outer::connector::SessionRequest_ESessionRequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:outer.connector.SessionRequest.type)
}

// .common.base.MobileBase base_info = 2;
inline bool SessionRequest::has_base_info() const {
  return this != internal_default_instance() && base_info_ != NULL;
}
inline const ::common::base::MobileBase& SessionRequest::base_info() const {
  const ::common::base::MobileBase* p = base_info_;
  // @@protoc_insertion_point(field_get:outer.connector.SessionRequest.base_info)
  return p != NULL ? *p : *reinterpret_cast<const ::common::base::MobileBase*>(
      &::common::base::_MobileBase_default_instance_);
}
inline ::common::base::MobileBase* SessionRequest::release_base_info() {
  // @@protoc_insertion_point(field_release:outer.connector.SessionRequest.base_info)
  
  ::common::base::MobileBase* temp = base_info_;
  base_info_ = NULL;
  return temp;
}
inline ::common::base::MobileBase* SessionRequest::mutable_base_info() {
  
  if (base_info_ == NULL) {
    base_info_ = new ::common::base::MobileBase;
  }
  // @@protoc_insertion_point(field_mutable:outer.connector.SessionRequest.base_info)
  return base_info_;
}
inline void SessionRequest::set_allocated_base_info(::common::base::MobileBase* base_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(base_info_);
  }
  if (base_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base_info, submessage_arena);
    }
    
  } else {
    
  }
  base_info_ = base_info;
  // @@protoc_insertion_point(field_set_allocated:outer.connector.SessionRequest.base_info)
}

// bytes data = 3;
inline void SessionRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionRequest::data() const {
  // @@protoc_insertion_point(field_get:outer.connector.SessionRequest.data)
  return data_.GetNoArena();
}
inline void SessionRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.SessionRequest.data)
}
#if LANG_CXX11
inline void SessionRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.SessionRequest.data)
}
#endif
inline void SessionRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.SessionRequest.data)
}
inline void SessionRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.SessionRequest.data)
}
inline ::std::string* SessionRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.SessionRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionRequest::release_data() {
  // @@protoc_insertion_point(field_release:outer.connector.SessionRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.SessionRequest.data)
}

// string request_id = 4;
inline void SessionRequest::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionRequest::request_id() const {
  // @@protoc_insertion_point(field_get:outer.connector.SessionRequest.request_id)
  return request_id_.GetNoArena();
}
inline void SessionRequest::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.SessionRequest.request_id)
}
#if LANG_CXX11
inline void SessionRequest::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.SessionRequest.request_id)
}
#endif
inline void SessionRequest::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.SessionRequest.request_id)
}
inline void SessionRequest::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.SessionRequest.request_id)
}
inline ::std::string* SessionRequest::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.SessionRequest.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:outer.connector.SessionRequest.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionRequest::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.SessionRequest.request_id)
}

// -------------------------------------------------------------------

// SessionNotify

// string to_username = 1;
inline void SessionNotify::clear_to_username() {
  to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionNotify::to_username() const {
  // @@protoc_insertion_point(field_get:outer.connector.SessionNotify.to_username)
  return to_username_.GetNoArena();
}
inline void SessionNotify::set_to_username(const ::std::string& value) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.SessionNotify.to_username)
}
#if LANG_CXX11
inline void SessionNotify::set_to_username(::std::string&& value) {
  
  to_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.SessionNotify.to_username)
}
#endif
inline void SessionNotify::set_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.SessionNotify.to_username)
}
inline void SessionNotify::set_to_username(const char* value, size_t size) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.SessionNotify.to_username)
}
inline ::std::string* SessionNotify::mutable_to_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.SessionNotify.to_username)
  return to_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionNotify::release_to_username() {
  // @@protoc_insertion_point(field_release:outer.connector.SessionNotify.to_username)
  
  return to_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionNotify::set_allocated_to_username(::std::string* to_username) {
  if (to_username != NULL) {
    
  } else {
    
  }
  to_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_username);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.SessionNotify.to_username)
}

// string appkey = 2;
inline void SessionNotify::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionNotify::appkey() const {
  // @@protoc_insertion_point(field_get:outer.connector.SessionNotify.appkey)
  return appkey_.GetNoArena();
}
inline void SessionNotify::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.SessionNotify.appkey)
}
#if LANG_CXX11
inline void SessionNotify::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.SessionNotify.appkey)
}
#endif
inline void SessionNotify::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.SessionNotify.appkey)
}
inline void SessionNotify::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.SessionNotify.appkey)
}
inline ::std::string* SessionNotify::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.SessionNotify.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionNotify::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.connector.SessionNotify.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionNotify::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.SessionNotify.appkey)
}

// uint32 type = 3;
inline void SessionNotify::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 SessionNotify::type() const {
  // @@protoc_insertion_point(field_get:outer.connector.SessionNotify.type)
  return type_;
}
inline void SessionNotify::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:outer.connector.SessionNotify.type)
}

// bytes data = 4;
inline void SessionNotify::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionNotify::data() const {
  // @@protoc_insertion_point(field_get:outer.connector.SessionNotify.data)
  return data_.GetNoArena();
}
inline void SessionNotify::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.SessionNotify.data)
}
#if LANG_CXX11
inline void SessionNotify::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.SessionNotify.data)
}
#endif
inline void SessionNotify::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.SessionNotify.data)
}
inline void SessionNotify::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.SessionNotify.data)
}
inline ::std::string* SessionNotify::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.SessionNotify.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionNotify::release_data() {
  // @@protoc_insertion_point(field_release:outer.connector.SessionNotify.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionNotify::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.SessionNotify.data)
}

// string request_id = 5;
inline void SessionNotify::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SessionNotify::request_id() const {
  // @@protoc_insertion_point(field_get:outer.connector.SessionNotify.request_id)
  return request_id_.GetNoArena();
}
inline void SessionNotify::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.SessionNotify.request_id)
}
#if LANG_CXX11
inline void SessionNotify::set_request_id(::std::string&& value) {
  
  request_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.SessionNotify.request_id)
}
#endif
inline void SessionNotify::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.SessionNotify.request_id)
}
inline void SessionNotify::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.SessionNotify.request_id)
}
inline ::std::string* SessionNotify::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.SessionNotify.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SessionNotify::release_request_id() {
  // @@protoc_insertion_point(field_release:outer.connector.SessionNotify.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SessionNotify::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.SessionNotify.request_id)
}

// -------------------------------------------------------------------

// PingRequest

// string msg_id = 1;
inline void PingRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PingRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.connector.PingRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void PingRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.PingRequest.msg_id)
}
#if LANG_CXX11
inline void PingRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.PingRequest.msg_id)
}
#endif
inline void PingRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.PingRequest.msg_id)
}
inline void PingRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.PingRequest.msg_id)
}
inline ::std::string* PingRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.PingRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PingRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.connector.PingRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.PingRequest.msg_id)
}

// -------------------------------------------------------------------

// PingResponse

// string msg_id = 2;
inline void PingResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PingResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.connector.PingResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void PingResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.PingResponse.msg_id)
}
#if LANG_CXX11
inline void PingResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.PingResponse.msg_id)
}
#endif
inline void PingResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.PingResponse.msg_id)
}
inline void PingResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.PingResponse.msg_id)
}
inline ::std::string* PingResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.PingResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PingResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.connector.PingResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PingResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.PingResponse.msg_id)
}

// -------------------------------------------------------------------

// LoginRequest

// string username = 1;
inline void LoginRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.connector.LoginRequest.username)
  return username_.GetNoArena();
}
inline void LoginRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.LoginRequest.username)
}
#if LANG_CXX11
inline void LoginRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.LoginRequest.username)
}
#endif
inline void LoginRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.LoginRequest.username)
}
inline void LoginRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.LoginRequest.username)
}
inline ::std::string* LoginRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.LoginRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.connector.LoginRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.LoginRequest.username)
}

// string appkey = 2;
inline void LoginRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.connector.LoginRequest.appkey)
  return appkey_.GetNoArena();
}
inline void LoginRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.LoginRequest.appkey)
}
#if LANG_CXX11
inline void LoginRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.LoginRequest.appkey)
}
#endif
inline void LoginRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.LoginRequest.appkey)
}
inline void LoginRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.LoginRequest.appkey)
}
inline ::std::string* LoginRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.LoginRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.connector.LoginRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.LoginRequest.appkey)
}

// string password = 3;
inline void LoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:outer.connector.LoginRequest.password)
  return password_.GetNoArena();
}
inline void LoginRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.LoginRequest.password)
}
#if LANG_CXX11
inline void LoginRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.LoginRequest.password)
}
#endif
inline void LoginRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.LoginRequest.password)
}
inline ::std::string* LoginRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.LoginRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:outer.connector.LoginRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.LoginRequest.password)
}

// string appkey_password = 4;
inline void LoginRequest::clear_appkey_password() {
  appkey_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::appkey_password() const {
  // @@protoc_insertion_point(field_get:outer.connector.LoginRequest.appkey_password)
  return appkey_password_.GetNoArena();
}
inline void LoginRequest::set_appkey_password(const ::std::string& value) {
  
  appkey_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.LoginRequest.appkey_password)
}
#if LANG_CXX11
inline void LoginRequest::set_appkey_password(::std::string&& value) {
  
  appkey_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.LoginRequest.appkey_password)
}
#endif
inline void LoginRequest::set_appkey_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.LoginRequest.appkey_password)
}
inline void LoginRequest::set_appkey_password(const char* value, size_t size) {
  
  appkey_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.LoginRequest.appkey_password)
}
inline ::std::string* LoginRequest::mutable_appkey_password() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.LoginRequest.appkey_password)
  return appkey_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_appkey_password() {
  // @@protoc_insertion_point(field_release:outer.connector.LoginRequest.appkey_password)
  
  return appkey_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_appkey_password(::std::string* appkey_password) {
  if (appkey_password != NULL) {
    
  } else {
    
  }
  appkey_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey_password);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.LoginRequest.appkey_password)
}

// bool SHA256 = 5;
inline void LoginRequest::clear_sha256() {
  sha256_ = false;
}
inline bool LoginRequest::sha256() const {
  // @@protoc_insertion_point(field_get:outer.connector.LoginRequest.SHA256)
  return sha256_;
}
inline void LoginRequest::set_sha256(bool value) {
  
  sha256_ = value;
  // @@protoc_insertion_point(field_set:outer.connector.LoginRequest.SHA256)
}

// string token = 6;
inline void LoginRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::token() const {
  // @@protoc_insertion_point(field_get:outer.connector.LoginRequest.token)
  return token_.GetNoArena();
}
inline void LoginRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.LoginRequest.token)
}
#if LANG_CXX11
inline void LoginRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.LoginRequest.token)
}
#endif
inline void LoginRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.LoginRequest.token)
}
inline void LoginRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.LoginRequest.token)
}
inline ::std::string* LoginRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.LoginRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_token() {
  // @@protoc_insertion_point(field_release:outer.connector.LoginRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.LoginRequest.token)
}

// .common.enumeration.ELoginMode login_mode = 7;
inline void LoginRequest::clear_login_mode() {
  login_mode_ = 0;
}
inline ::common::enumeration::ELoginMode LoginRequest::login_mode() const {
  // @@protoc_insertion_point(field_get:outer.connector.LoginRequest.login_mode)
  return static_cast< ::common::enumeration::ELoginMode >(login_mode_);
}
inline void LoginRequest::set_login_mode(::common::enumeration::ELoginMode value) {
  
  login_mode_ = value;
  // @@protoc_insertion_point(field_set:outer.connector.LoginRequest.login_mode)
}

// -------------------------------------------------------------------

// LoginResponse

// .common.errcode.EErrorCode ret = 1;
inline void LoginResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode LoginResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.connector.LoginResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void LoginResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.connector.LoginResponse.ret)
}

// .outer.user.UserInfo user_infos = 2;
inline bool LoginResponse::has_user_infos() const {
  return this != internal_default_instance() && user_infos_ != NULL;
}
inline const ::outer::user::UserInfo& LoginResponse::user_infos() const {
  const ::outer::user::UserInfo* p = user_infos_;
  // @@protoc_insertion_point(field_get:outer.connector.LoginResponse.user_infos)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::user::UserInfo*>(
      &::outer::user::_UserInfo_default_instance_);
}
inline ::outer::user::UserInfo* LoginResponse::release_user_infos() {
  // @@protoc_insertion_point(field_release:outer.connector.LoginResponse.user_infos)
  
  ::outer::user::UserInfo* temp = user_infos_;
  user_infos_ = NULL;
  return temp;
}
inline ::outer::user::UserInfo* LoginResponse::mutable_user_infos() {
  
  if (user_infos_ == NULL) {
    user_infos_ = new ::outer::user::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:outer.connector.LoginResponse.user_infos)
  return user_infos_;
}
inline void LoginResponse::set_allocated_user_infos(::outer::user::UserInfo* user_infos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_infos_);
  }
  if (user_infos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_infos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_infos, submessage_arena);
    }
    
  } else {
    
  }
  user_infos_ = user_infos;
  // @@protoc_insertion_point(field_set_allocated:outer.connector.LoginResponse.user_infos)
}

// -------------------------------------------------------------------

// LogoutRequest

// -------------------------------------------------------------------

// LogoutResponse

// .common.errcode.EErrorCode ret = 1;
inline void LogoutResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode LogoutResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.connector.LogoutResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void LogoutResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.connector.LogoutResponse.ret)
}

// -------------------------------------------------------------------

// StreamInitResponse

// -------------------------------------------------------------------

// HealthCheckRequest

// string service = 1;
inline void HealthCheckRequest::clear_service() {
  service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HealthCheckRequest::service() const {
  // @@protoc_insertion_point(field_get:outer.connector.HealthCheckRequest.service)
  return service_.GetNoArena();
}
inline void HealthCheckRequest::set_service(const ::std::string& value) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.connector.HealthCheckRequest.service)
}
#if LANG_CXX11
inline void HealthCheckRequest::set_service(::std::string&& value) {
  
  service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.connector.HealthCheckRequest.service)
}
#endif
inline void HealthCheckRequest::set_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.connector.HealthCheckRequest.service)
}
inline void HealthCheckRequest::set_service(const char* value, size_t size) {
  
  service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.connector.HealthCheckRequest.service)
}
inline ::std::string* HealthCheckRequest::mutable_service() {
  
  // @@protoc_insertion_point(field_mutable:outer.connector.HealthCheckRequest.service)
  return service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HealthCheckRequest::release_service() {
  // @@protoc_insertion_point(field_release:outer.connector.HealthCheckRequest.service)
  
  return service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HealthCheckRequest::set_allocated_service(::std::string* service) {
  if (service != NULL) {
    
  } else {
    
  }
  service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:outer.connector.HealthCheckRequest.service)
}

// -------------------------------------------------------------------

// HealthCheckResponse

// .outer.connector.HealthCheckResponse.ServingStatus status = 1;
inline void HealthCheckResponse::clear_status() {
  status_ = 0;
}
inline ::outer::connector::HealthCheckResponse_ServingStatus HealthCheckResponse::status() const {
  // @@protoc_insertion_point(field_get:outer.connector.HealthCheckResponse.status)
  return static_cast< ::outer::connector::HealthCheckResponse_ServingStatus >(status_);
}
inline void HealthCheckResponse::set_status(::outer::connector::HealthCheckResponse_ServingStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:outer.connector.HealthCheckResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace connector
}  // namespace outer

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::outer::connector::SessionRequest_ESessionRequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::outer::connector::SessionRequest_ESessionRequestType>() {
  return ::outer::connector::SessionRequest_ESessionRequestType_descriptor();
}
template <> struct is_proto_enum< ::outer::connector::HealthCheckResponse_ServingStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::outer::connector::HealthCheckResponse_ServingStatus>() {
  return ::outer::connector::HealthCheckResponse_ServingStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_outer_2fconnector_2eproto__INCLUDED
