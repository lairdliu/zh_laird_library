// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: outer/live.proto

#ifndef PROTOBUF_outer_2flive_2eproto__INCLUDED
#define PROTOBUF_outer_2flive_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/errcode.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_outer_2flive_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLiveInfoImpl();
void InitDefaultsLiveInfo();
void InitDefaultsCreateLiveRoomRequestImpl();
void InitDefaultsCreateLiveRoomRequest();
void InitDefaultsCreateLiveRoomResponseImpl();
void InitDefaultsCreateLiveRoomResponse();
void InitDefaultsStartStreamingRequestImpl();
void InitDefaultsStartStreamingRequest();
void InitDefaultsStartStreamingResponseImpl();
void InitDefaultsStartStreamingResponse();
void InitDefaultsStopStreamingRequestImpl();
void InitDefaultsStopStreamingRequest();
void InitDefaultsStopStreamingResponseImpl();
void InitDefaultsStopStreamingResponse();
void InitDefaultsQueryLiveListRequestImpl();
void InitDefaultsQueryLiveListRequest();
void InitDefaultsQueryLiveListResponseImpl();
void InitDefaultsQueryLiveListResponse();
inline void InitDefaults() {
  InitDefaultsLiveInfo();
  InitDefaultsCreateLiveRoomRequest();
  InitDefaultsCreateLiveRoomResponse();
  InitDefaultsStartStreamingRequest();
  InitDefaultsStartStreamingResponse();
  InitDefaultsStopStreamingRequest();
  InitDefaultsStopStreamingResponse();
  InitDefaultsQueryLiveListRequest();
  InitDefaultsQueryLiveListResponse();
}
}  // namespace protobuf_outer_2flive_2eproto
namespace outer {
namespace live {
class CreateLiveRoomRequest;
class CreateLiveRoomRequestDefaultTypeInternal;
extern CreateLiveRoomRequestDefaultTypeInternal _CreateLiveRoomRequest_default_instance_;
class CreateLiveRoomResponse;
class CreateLiveRoomResponseDefaultTypeInternal;
extern CreateLiveRoomResponseDefaultTypeInternal _CreateLiveRoomResponse_default_instance_;
class LiveInfo;
class LiveInfoDefaultTypeInternal;
extern LiveInfoDefaultTypeInternal _LiveInfo_default_instance_;
class QueryLiveListRequest;
class QueryLiveListRequestDefaultTypeInternal;
extern QueryLiveListRequestDefaultTypeInternal _QueryLiveListRequest_default_instance_;
class QueryLiveListResponse;
class QueryLiveListResponseDefaultTypeInternal;
extern QueryLiveListResponseDefaultTypeInternal _QueryLiveListResponse_default_instance_;
class StartStreamingRequest;
class StartStreamingRequestDefaultTypeInternal;
extern StartStreamingRequestDefaultTypeInternal _StartStreamingRequest_default_instance_;
class StartStreamingResponse;
class StartStreamingResponseDefaultTypeInternal;
extern StartStreamingResponseDefaultTypeInternal _StartStreamingResponse_default_instance_;
class StopStreamingRequest;
class StopStreamingRequestDefaultTypeInternal;
extern StopStreamingRequestDefaultTypeInternal _StopStreamingRequest_default_instance_;
class StopStreamingResponse;
class StopStreamingResponseDefaultTypeInternal;
extern StopStreamingResponseDefaultTypeInternal _StopStreamingResponse_default_instance_;
}  // namespace live
}  // namespace outer
namespace outer {
namespace live {

// ===================================================================

class LiveInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.live.LiveInfo) */ {
 public:
  LiveInfo();
  virtual ~LiveInfo();

  LiveInfo(const LiveInfo& from);

  inline LiveInfo& operator=(const LiveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiveInfo(LiveInfo&& from) noexcept
    : LiveInfo() {
    *this = ::std::move(from);
  }

  inline LiveInfo& operator=(LiveInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LiveInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiveInfo* internal_default_instance() {
    return reinterpret_cast<const LiveInfo*>(
               &_LiveInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LiveInfo* other);
  friend void swap(LiveInfo& a, LiveInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiveInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  LiveInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LiveInfo& from);
  void MergeFrom(const LiveInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LiveInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string live_name = 1;
  void clear_live_name();
  static const int kLiveNameFieldNumber = 1;
  const ::std::string& live_name() const;
  void set_live_name(const ::std::string& value);
  #if LANG_CXX11
  void set_live_name(::std::string&& value);
  #endif
  void set_live_name(const char* value);
  void set_live_name(const char* value, size_t size);
  ::std::string* mutable_live_name();
  ::std::string* release_live_name();
  void set_allocated_live_name(::std::string* live_name);

  // string anchor_username = 2;
  void clear_anchor_username();
  static const int kAnchorUsernameFieldNumber = 2;
  const ::std::string& anchor_username() const;
  void set_anchor_username(const ::std::string& value);
  #if LANG_CXX11
  void set_anchor_username(::std::string&& value);
  #endif
  void set_anchor_username(const char* value);
  void set_anchor_username(const char* value, size_t size);
  ::std::string* mutable_anchor_username();
  ::std::string* release_anchor_username();
  void set_allocated_anchor_username(::std::string* anchor_username);

  // string anchor_nick = 3;
  void clear_anchor_nick();
  static const int kAnchorNickFieldNumber = 3;
  const ::std::string& anchor_nick() const;
  void set_anchor_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_anchor_nick(::std::string&& value);
  #endif
  void set_anchor_nick(const char* value);
  void set_anchor_nick(const char* value, size_t size);
  ::std::string* mutable_anchor_nick();
  ::std::string* release_anchor_nick();
  void set_allocated_anchor_nick(::std::string* anchor_nick);

  // string desc = 4;
  void clear_desc();
  static const int kDescFieldNumber = 4;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // string head_image = 5;
  void clear_head_image();
  static const int kHeadImageFieldNumber = 5;
  const ::std::string& head_image() const;
  void set_head_image(const ::std::string& value);
  #if LANG_CXX11
  void set_head_image(::std::string&& value);
  #endif
  void set_head_image(const char* value);
  void set_head_image(const char* value, size_t size);
  ::std::string* mutable_head_image();
  ::std::string* release_head_image();
  void set_allocated_head_image(::std::string* head_image);

  // string thumb = 6;
  void clear_thumb();
  static const int kThumbFieldNumber = 6;
  const ::std::string& thumb() const;
  void set_thumb(const ::std::string& value);
  #if LANG_CXX11
  void set_thumb(::std::string&& value);
  #endif
  void set_thumb(const char* value);
  void set_thumb(const char* value, size_t size);
  ::std::string* mutable_thumb();
  ::std::string* release_thumb();
  void set_allocated_thumb(::std::string* thumb);

  // @@protoc_insertion_point(class_scope:outer.live.LiveInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr live_name_;
  ::google::protobuf::internal::ArenaStringPtr anchor_username_;
  ::google::protobuf::internal::ArenaStringPtr anchor_nick_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr head_image_;
  ::google::protobuf::internal::ArenaStringPtr thumb_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2flive_2eproto::TableStruct;
  friend void ::protobuf_outer_2flive_2eproto::InitDefaultsLiveInfoImpl();
};
// -------------------------------------------------------------------

class CreateLiveRoomRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.live.CreateLiveRoomRequest) */ {
 public:
  CreateLiveRoomRequest();
  virtual ~CreateLiveRoomRequest();

  CreateLiveRoomRequest(const CreateLiveRoomRequest& from);

  inline CreateLiveRoomRequest& operator=(const CreateLiveRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateLiveRoomRequest(CreateLiveRoomRequest&& from) noexcept
    : CreateLiveRoomRequest() {
    *this = ::std::move(from);
  }

  inline CreateLiveRoomRequest& operator=(CreateLiveRoomRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateLiveRoomRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateLiveRoomRequest* internal_default_instance() {
    return reinterpret_cast<const CreateLiveRoomRequest*>(
               &_CreateLiveRoomRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CreateLiveRoomRequest* other);
  friend void swap(CreateLiveRoomRequest& a, CreateLiveRoomRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateLiveRoomRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateLiveRoomRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateLiveRoomRequest& from);
  void MergeFrom(const CreateLiveRoomRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateLiveRoomRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string anchor_username = 2;
  void clear_anchor_username();
  static const int kAnchorUsernameFieldNumber = 2;
  const ::std::string& anchor_username() const;
  void set_anchor_username(const ::std::string& value);
  #if LANG_CXX11
  void set_anchor_username(::std::string&& value);
  #endif
  void set_anchor_username(const char* value);
  void set_anchor_username(const char* value, size_t size);
  ::std::string* mutable_anchor_username();
  ::std::string* release_anchor_username();
  void set_allocated_anchor_username(::std::string* anchor_username);

  // string anchor_nick = 3;
  void clear_anchor_nick();
  static const int kAnchorNickFieldNumber = 3;
  const ::std::string& anchor_nick() const;
  void set_anchor_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_anchor_nick(::std::string&& value);
  #endif
  void set_anchor_nick(const char* value);
  void set_anchor_nick(const char* value, size_t size);
  ::std::string* mutable_anchor_nick();
  ::std::string* release_anchor_nick();
  void set_allocated_anchor_nick(::std::string* anchor_nick);

  // string live_name = 4;
  void clear_live_name();
  static const int kLiveNameFieldNumber = 4;
  const ::std::string& live_name() const;
  void set_live_name(const ::std::string& value);
  #if LANG_CXX11
  void set_live_name(::std::string&& value);
  #endif
  void set_live_name(const char* value);
  void set_live_name(const char* value, size_t size);
  ::std::string* mutable_live_name();
  ::std::string* release_live_name();
  void set_allocated_live_name(::std::string* live_name);

  // string head_image = 5;
  void clear_head_image();
  static const int kHeadImageFieldNumber = 5;
  const ::std::string& head_image() const;
  void set_head_image(const ::std::string& value);
  #if LANG_CXX11
  void set_head_image(::std::string&& value);
  #endif
  void set_head_image(const char* value);
  void set_head_image(const char* value, size_t size);
  ::std::string* mutable_head_image();
  ::std::string* release_head_image();
  void set_allocated_head_image(::std::string* head_image);

  // string desc = 6;
  void clear_desc();
  static const int kDescFieldNumber = 6;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:outer.live.CreateLiveRoomRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr anchor_username_;
  ::google::protobuf::internal::ArenaStringPtr anchor_nick_;
  ::google::protobuf::internal::ArenaStringPtr live_name_;
  ::google::protobuf::internal::ArenaStringPtr head_image_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2flive_2eproto::TableStruct;
  friend void ::protobuf_outer_2flive_2eproto::InitDefaultsCreateLiveRoomRequestImpl();
};
// -------------------------------------------------------------------

class CreateLiveRoomResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.live.CreateLiveRoomResponse) */ {
 public:
  CreateLiveRoomResponse();
  virtual ~CreateLiveRoomResponse();

  CreateLiveRoomResponse(const CreateLiveRoomResponse& from);

  inline CreateLiveRoomResponse& operator=(const CreateLiveRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateLiveRoomResponse(CreateLiveRoomResponse&& from) noexcept
    : CreateLiveRoomResponse() {
    *this = ::std::move(from);
  }

  inline CreateLiveRoomResponse& operator=(CreateLiveRoomResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateLiveRoomResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateLiveRoomResponse* internal_default_instance() {
    return reinterpret_cast<const CreateLiveRoomResponse*>(
               &_CreateLiveRoomResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CreateLiveRoomResponse* other);
  friend void swap(CreateLiveRoomResponse& a, CreateLiveRoomResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateLiveRoomResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateLiveRoomResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateLiveRoomResponse& from);
  void MergeFrom(const CreateLiveRoomResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateLiveRoomResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string live_id = 1;
  void clear_live_id();
  static const int kLiveIdFieldNumber = 1;
  const ::std::string& live_id() const;
  void set_live_id(const ::std::string& value);
  #if LANG_CXX11
  void set_live_id(::std::string&& value);
  #endif
  void set_live_id(const char* value);
  void set_live_id(const char* value, size_t size);
  ::std::string* mutable_live_id();
  ::std::string* release_live_id();
  void set_allocated_live_id(::std::string* live_id);

  // string room_id = 2;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  #if LANG_CXX11
  void set_room_id(::std::string&& value);
  #endif
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // .common.errcode.EErrorCode ret = 3;
  void clear_ret();
  static const int kRetFieldNumber = 3;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.live.CreateLiveRoomResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr live_id_;
  ::google::protobuf::internal::ArenaStringPtr room_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2flive_2eproto::TableStruct;
  friend void ::protobuf_outer_2flive_2eproto::InitDefaultsCreateLiveRoomResponseImpl();
};
// -------------------------------------------------------------------

class StartStreamingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.live.StartStreamingRequest) */ {
 public:
  StartStreamingRequest();
  virtual ~StartStreamingRequest();

  StartStreamingRequest(const StartStreamingRequest& from);

  inline StartStreamingRequest& operator=(const StartStreamingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartStreamingRequest(StartStreamingRequest&& from) noexcept
    : StartStreamingRequest() {
    *this = ::std::move(from);
  }

  inline StartStreamingRequest& operator=(StartStreamingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartStreamingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartStreamingRequest* internal_default_instance() {
    return reinterpret_cast<const StartStreamingRequest*>(
               &_StartStreamingRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(StartStreamingRequest* other);
  friend void swap(StartStreamingRequest& a, StartStreamingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartStreamingRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StartStreamingRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartStreamingRequest& from);
  void MergeFrom(const StartStreamingRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartStreamingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string live_id = 3;
  void clear_live_id();
  static const int kLiveIdFieldNumber = 3;
  const ::std::string& live_id() const;
  void set_live_id(const ::std::string& value);
  #if LANG_CXX11
  void set_live_id(::std::string&& value);
  #endif
  void set_live_id(const char* value);
  void set_live_id(const char* value, size_t size);
  ::std::string* mutable_live_id();
  ::std::string* release_live_id();
  void set_allocated_live_id(::std::string* live_id);

  // @@protoc_insertion_point(class_scope:outer.live.StartStreamingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr live_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2flive_2eproto::TableStruct;
  friend void ::protobuf_outer_2flive_2eproto::InitDefaultsStartStreamingRequestImpl();
};
// -------------------------------------------------------------------

class StartStreamingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.live.StartStreamingResponse) */ {
 public:
  StartStreamingResponse();
  virtual ~StartStreamingResponse();

  StartStreamingResponse(const StartStreamingResponse& from);

  inline StartStreamingResponse& operator=(const StartStreamingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartStreamingResponse(StartStreamingResponse&& from) noexcept
    : StartStreamingResponse() {
    *this = ::std::move(from);
  }

  inline StartStreamingResponse& operator=(StartStreamingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartStreamingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartStreamingResponse* internal_default_instance() {
    return reinterpret_cast<const StartStreamingResponse*>(
               &_StartStreamingResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(StartStreamingResponse* other);
  friend void swap(StartStreamingResponse& a, StartStreamingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartStreamingResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  StartStreamingResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartStreamingResponse& from);
  void MergeFrom(const StartStreamingResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartStreamingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  #if LANG_CXX11
  void set_stream_id(::std::string&& value);
  #endif
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);

  // .common.errcode.EErrorCode ret = 2;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.live.StartStreamingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2flive_2eproto::TableStruct;
  friend void ::protobuf_outer_2flive_2eproto::InitDefaultsStartStreamingResponseImpl();
};
// -------------------------------------------------------------------

class StopStreamingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.live.StopStreamingRequest) */ {
 public:
  StopStreamingRequest();
  virtual ~StopStreamingRequest();

  StopStreamingRequest(const StopStreamingRequest& from);

  inline StopStreamingRequest& operator=(const StopStreamingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopStreamingRequest(StopStreamingRequest&& from) noexcept
    : StopStreamingRequest() {
    *this = ::std::move(from);
  }

  inline StopStreamingRequest& operator=(StopStreamingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StopStreamingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopStreamingRequest* internal_default_instance() {
    return reinterpret_cast<const StopStreamingRequest*>(
               &_StopStreamingRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(StopStreamingRequest* other);
  friend void swap(StopStreamingRequest& a, StopStreamingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopStreamingRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StopStreamingRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StopStreamingRequest& from);
  void MergeFrom(const StopStreamingRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StopStreamingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string room_id = 3;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  #if LANG_CXX11
  void set_room_id(::std::string&& value);
  #endif
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // @@protoc_insertion_point(class_scope:outer.live.StopStreamingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr room_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2flive_2eproto::TableStruct;
  friend void ::protobuf_outer_2flive_2eproto::InitDefaultsStopStreamingRequestImpl();
};
// -------------------------------------------------------------------

class StopStreamingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.live.StopStreamingResponse) */ {
 public:
  StopStreamingResponse();
  virtual ~StopStreamingResponse();

  StopStreamingResponse(const StopStreamingResponse& from);

  inline StopStreamingResponse& operator=(const StopStreamingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopStreamingResponse(StopStreamingResponse&& from) noexcept
    : StopStreamingResponse() {
    *this = ::std::move(from);
  }

  inline StopStreamingResponse& operator=(StopStreamingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StopStreamingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopStreamingResponse* internal_default_instance() {
    return reinterpret_cast<const StopStreamingResponse*>(
               &_StopStreamingResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(StopStreamingResponse* other);
  friend void swap(StopStreamingResponse& a, StopStreamingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopStreamingResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  StopStreamingResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StopStreamingResponse& from);
  void MergeFrom(const StopStreamingResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StopStreamingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 2;
  void clear_ret();
  static const int kRetFieldNumber = 2;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.live.StopStreamingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2flive_2eproto::TableStruct;
  friend void ::protobuf_outer_2flive_2eproto::InitDefaultsStopStreamingResponseImpl();
};
// -------------------------------------------------------------------

class QueryLiveListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.live.QueryLiveListRequest) */ {
 public:
  QueryLiveListRequest();
  virtual ~QueryLiveListRequest();

  QueryLiveListRequest(const QueryLiveListRequest& from);

  inline QueryLiveListRequest& operator=(const QueryLiveListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryLiveListRequest(QueryLiveListRequest&& from) noexcept
    : QueryLiveListRequest() {
    *this = ::std::move(from);
  }

  inline QueryLiveListRequest& operator=(QueryLiveListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryLiveListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryLiveListRequest* internal_default_instance() {
    return reinterpret_cast<const QueryLiveListRequest*>(
               &_QueryLiveListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(QueryLiveListRequest* other);
  friend void swap(QueryLiveListRequest& a, QueryLiveListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryLiveListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryLiveListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryLiveListRequest& from);
  void MergeFrom(const QueryLiveListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryLiveListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:outer.live.QueryLiveListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2flive_2eproto::TableStruct;
  friend void ::protobuf_outer_2flive_2eproto::InitDefaultsQueryLiveListRequestImpl();
};
// -------------------------------------------------------------------

class QueryLiveListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.live.QueryLiveListResponse) */ {
 public:
  QueryLiveListResponse();
  virtual ~QueryLiveListResponse();

  QueryLiveListResponse(const QueryLiveListResponse& from);

  inline QueryLiveListResponse& operator=(const QueryLiveListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryLiveListResponse(QueryLiveListResponse&& from) noexcept
    : QueryLiveListResponse() {
    *this = ::std::move(from);
  }

  inline QueryLiveListResponse& operator=(QueryLiveListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryLiveListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryLiveListResponse* internal_default_instance() {
    return reinterpret_cast<const QueryLiveListResponse*>(
               &_QueryLiveListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(QueryLiveListResponse* other);
  friend void swap(QueryLiveListResponse& a, QueryLiveListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryLiveListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  QueryLiveListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QueryLiveListResponse& from);
  void MergeFrom(const QueryLiveListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QueryLiveListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.live.LiveInfo live_info = 2;
  int live_info_size() const;
  void clear_live_info();
  static const int kLiveInfoFieldNumber = 2;
  const ::outer::live::LiveInfo& live_info(int index) const;
  ::outer::live::LiveInfo* mutable_live_info(int index);
  ::outer::live::LiveInfo* add_live_info();
  ::google::protobuf::RepeatedPtrField< ::outer::live::LiveInfo >*
      mutable_live_info();
  const ::google::protobuf::RepeatedPtrField< ::outer::live::LiveInfo >&
      live_info() const;

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.live.QueryLiveListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::live::LiveInfo > live_info_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2flive_2eproto::TableStruct;
  friend void ::protobuf_outer_2flive_2eproto::InitDefaultsQueryLiveListResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LiveInfo

// string live_name = 1;
inline void LiveInfo::clear_live_name() {
  live_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LiveInfo::live_name() const {
  // @@protoc_insertion_point(field_get:outer.live.LiveInfo.live_name)
  return live_name_.GetNoArena();
}
inline void LiveInfo::set_live_name(const ::std::string& value) {
  
  live_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.LiveInfo.live_name)
}
#if LANG_CXX11
inline void LiveInfo::set_live_name(::std::string&& value) {
  
  live_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.LiveInfo.live_name)
}
#endif
inline void LiveInfo::set_live_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  live_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.LiveInfo.live_name)
}
inline void LiveInfo::set_live_name(const char* value, size_t size) {
  
  live_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.LiveInfo.live_name)
}
inline ::std::string* LiveInfo::mutable_live_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.LiveInfo.live_name)
  return live_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiveInfo::release_live_name() {
  // @@protoc_insertion_point(field_release:outer.live.LiveInfo.live_name)
  
  return live_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiveInfo::set_allocated_live_name(::std::string* live_name) {
  if (live_name != NULL) {
    
  } else {
    
  }
  live_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), live_name);
  // @@protoc_insertion_point(field_set_allocated:outer.live.LiveInfo.live_name)
}

// string anchor_username = 2;
inline void LiveInfo::clear_anchor_username() {
  anchor_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LiveInfo::anchor_username() const {
  // @@protoc_insertion_point(field_get:outer.live.LiveInfo.anchor_username)
  return anchor_username_.GetNoArena();
}
inline void LiveInfo::set_anchor_username(const ::std::string& value) {
  
  anchor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.LiveInfo.anchor_username)
}
#if LANG_CXX11
inline void LiveInfo::set_anchor_username(::std::string&& value) {
  
  anchor_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.LiveInfo.anchor_username)
}
#endif
inline void LiveInfo::set_anchor_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  anchor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.LiveInfo.anchor_username)
}
inline void LiveInfo::set_anchor_username(const char* value, size_t size) {
  
  anchor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.LiveInfo.anchor_username)
}
inline ::std::string* LiveInfo::mutable_anchor_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.LiveInfo.anchor_username)
  return anchor_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiveInfo::release_anchor_username() {
  // @@protoc_insertion_point(field_release:outer.live.LiveInfo.anchor_username)
  
  return anchor_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiveInfo::set_allocated_anchor_username(::std::string* anchor_username) {
  if (anchor_username != NULL) {
    
  } else {
    
  }
  anchor_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), anchor_username);
  // @@protoc_insertion_point(field_set_allocated:outer.live.LiveInfo.anchor_username)
}

// string anchor_nick = 3;
inline void LiveInfo::clear_anchor_nick() {
  anchor_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LiveInfo::anchor_nick() const {
  // @@protoc_insertion_point(field_get:outer.live.LiveInfo.anchor_nick)
  return anchor_nick_.GetNoArena();
}
inline void LiveInfo::set_anchor_nick(const ::std::string& value) {
  
  anchor_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.LiveInfo.anchor_nick)
}
#if LANG_CXX11
inline void LiveInfo::set_anchor_nick(::std::string&& value) {
  
  anchor_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.LiveInfo.anchor_nick)
}
#endif
inline void LiveInfo::set_anchor_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  anchor_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.LiveInfo.anchor_nick)
}
inline void LiveInfo::set_anchor_nick(const char* value, size_t size) {
  
  anchor_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.LiveInfo.anchor_nick)
}
inline ::std::string* LiveInfo::mutable_anchor_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.LiveInfo.anchor_nick)
  return anchor_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiveInfo::release_anchor_nick() {
  // @@protoc_insertion_point(field_release:outer.live.LiveInfo.anchor_nick)
  
  return anchor_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiveInfo::set_allocated_anchor_nick(::std::string* anchor_nick) {
  if (anchor_nick != NULL) {
    
  } else {
    
  }
  anchor_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), anchor_nick);
  // @@protoc_insertion_point(field_set_allocated:outer.live.LiveInfo.anchor_nick)
}

// string desc = 4;
inline void LiveInfo::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LiveInfo::desc() const {
  // @@protoc_insertion_point(field_get:outer.live.LiveInfo.desc)
  return desc_.GetNoArena();
}
inline void LiveInfo::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.LiveInfo.desc)
}
#if LANG_CXX11
inline void LiveInfo::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.LiveInfo.desc)
}
#endif
inline void LiveInfo::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.LiveInfo.desc)
}
inline void LiveInfo::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.LiveInfo.desc)
}
inline ::std::string* LiveInfo::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.LiveInfo.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiveInfo::release_desc() {
  // @@protoc_insertion_point(field_release:outer.live.LiveInfo.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiveInfo::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:outer.live.LiveInfo.desc)
}

// string head_image = 5;
inline void LiveInfo::clear_head_image() {
  head_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LiveInfo::head_image() const {
  // @@protoc_insertion_point(field_get:outer.live.LiveInfo.head_image)
  return head_image_.GetNoArena();
}
inline void LiveInfo::set_head_image(const ::std::string& value) {
  
  head_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.LiveInfo.head_image)
}
#if LANG_CXX11
inline void LiveInfo::set_head_image(::std::string&& value) {
  
  head_image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.LiveInfo.head_image)
}
#endif
inline void LiveInfo::set_head_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  head_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.LiveInfo.head_image)
}
inline void LiveInfo::set_head_image(const char* value, size_t size) {
  
  head_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.LiveInfo.head_image)
}
inline ::std::string* LiveInfo::mutable_head_image() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.LiveInfo.head_image)
  return head_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiveInfo::release_head_image() {
  // @@protoc_insertion_point(field_release:outer.live.LiveInfo.head_image)
  
  return head_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiveInfo::set_allocated_head_image(::std::string* head_image) {
  if (head_image != NULL) {
    
  } else {
    
  }
  head_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), head_image);
  // @@protoc_insertion_point(field_set_allocated:outer.live.LiveInfo.head_image)
}

// string thumb = 6;
inline void LiveInfo::clear_thumb() {
  thumb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LiveInfo::thumb() const {
  // @@protoc_insertion_point(field_get:outer.live.LiveInfo.thumb)
  return thumb_.GetNoArena();
}
inline void LiveInfo::set_thumb(const ::std::string& value) {
  
  thumb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.LiveInfo.thumb)
}
#if LANG_CXX11
inline void LiveInfo::set_thumb(::std::string&& value) {
  
  thumb_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.LiveInfo.thumb)
}
#endif
inline void LiveInfo::set_thumb(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.LiveInfo.thumb)
}
inline void LiveInfo::set_thumb(const char* value, size_t size) {
  
  thumb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.LiveInfo.thumb)
}
inline ::std::string* LiveInfo::mutable_thumb() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.LiveInfo.thumb)
  return thumb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiveInfo::release_thumb() {
  // @@protoc_insertion_point(field_release:outer.live.LiveInfo.thumb)
  
  return thumb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiveInfo::set_allocated_thumb(::std::string* thumb) {
  if (thumb != NULL) {
    
  } else {
    
  }
  thumb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumb);
  // @@protoc_insertion_point(field_set_allocated:outer.live.LiveInfo.thumb)
}

// -------------------------------------------------------------------

// CreateLiveRoomRequest

// string appkey = 1;
inline void CreateLiveRoomRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateLiveRoomRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.live.CreateLiveRoomRequest.appkey)
  return appkey_.GetNoArena();
}
inline void CreateLiveRoomRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.CreateLiveRoomRequest.appkey)
}
#if LANG_CXX11
inline void CreateLiveRoomRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.CreateLiveRoomRequest.appkey)
}
#endif
inline void CreateLiveRoomRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.CreateLiveRoomRequest.appkey)
}
inline void CreateLiveRoomRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.CreateLiveRoomRequest.appkey)
}
inline ::std::string* CreateLiveRoomRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.CreateLiveRoomRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateLiveRoomRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.live.CreateLiveRoomRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateLiveRoomRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.live.CreateLiveRoomRequest.appkey)
}

// string anchor_username = 2;
inline void CreateLiveRoomRequest::clear_anchor_username() {
  anchor_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateLiveRoomRequest::anchor_username() const {
  // @@protoc_insertion_point(field_get:outer.live.CreateLiveRoomRequest.anchor_username)
  return anchor_username_.GetNoArena();
}
inline void CreateLiveRoomRequest::set_anchor_username(const ::std::string& value) {
  
  anchor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.CreateLiveRoomRequest.anchor_username)
}
#if LANG_CXX11
inline void CreateLiveRoomRequest::set_anchor_username(::std::string&& value) {
  
  anchor_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.CreateLiveRoomRequest.anchor_username)
}
#endif
inline void CreateLiveRoomRequest::set_anchor_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  anchor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.CreateLiveRoomRequest.anchor_username)
}
inline void CreateLiveRoomRequest::set_anchor_username(const char* value, size_t size) {
  
  anchor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.CreateLiveRoomRequest.anchor_username)
}
inline ::std::string* CreateLiveRoomRequest::mutable_anchor_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.CreateLiveRoomRequest.anchor_username)
  return anchor_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateLiveRoomRequest::release_anchor_username() {
  // @@protoc_insertion_point(field_release:outer.live.CreateLiveRoomRequest.anchor_username)
  
  return anchor_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateLiveRoomRequest::set_allocated_anchor_username(::std::string* anchor_username) {
  if (anchor_username != NULL) {
    
  } else {
    
  }
  anchor_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), anchor_username);
  // @@protoc_insertion_point(field_set_allocated:outer.live.CreateLiveRoomRequest.anchor_username)
}

// string anchor_nick = 3;
inline void CreateLiveRoomRequest::clear_anchor_nick() {
  anchor_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateLiveRoomRequest::anchor_nick() const {
  // @@protoc_insertion_point(field_get:outer.live.CreateLiveRoomRequest.anchor_nick)
  return anchor_nick_.GetNoArena();
}
inline void CreateLiveRoomRequest::set_anchor_nick(const ::std::string& value) {
  
  anchor_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.CreateLiveRoomRequest.anchor_nick)
}
#if LANG_CXX11
inline void CreateLiveRoomRequest::set_anchor_nick(::std::string&& value) {
  
  anchor_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.CreateLiveRoomRequest.anchor_nick)
}
#endif
inline void CreateLiveRoomRequest::set_anchor_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  anchor_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.CreateLiveRoomRequest.anchor_nick)
}
inline void CreateLiveRoomRequest::set_anchor_nick(const char* value, size_t size) {
  
  anchor_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.CreateLiveRoomRequest.anchor_nick)
}
inline ::std::string* CreateLiveRoomRequest::mutable_anchor_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.CreateLiveRoomRequest.anchor_nick)
  return anchor_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateLiveRoomRequest::release_anchor_nick() {
  // @@protoc_insertion_point(field_release:outer.live.CreateLiveRoomRequest.anchor_nick)
  
  return anchor_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateLiveRoomRequest::set_allocated_anchor_nick(::std::string* anchor_nick) {
  if (anchor_nick != NULL) {
    
  } else {
    
  }
  anchor_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), anchor_nick);
  // @@protoc_insertion_point(field_set_allocated:outer.live.CreateLiveRoomRequest.anchor_nick)
}

// string live_name = 4;
inline void CreateLiveRoomRequest::clear_live_name() {
  live_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateLiveRoomRequest::live_name() const {
  // @@protoc_insertion_point(field_get:outer.live.CreateLiveRoomRequest.live_name)
  return live_name_.GetNoArena();
}
inline void CreateLiveRoomRequest::set_live_name(const ::std::string& value) {
  
  live_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.CreateLiveRoomRequest.live_name)
}
#if LANG_CXX11
inline void CreateLiveRoomRequest::set_live_name(::std::string&& value) {
  
  live_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.CreateLiveRoomRequest.live_name)
}
#endif
inline void CreateLiveRoomRequest::set_live_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  live_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.CreateLiveRoomRequest.live_name)
}
inline void CreateLiveRoomRequest::set_live_name(const char* value, size_t size) {
  
  live_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.CreateLiveRoomRequest.live_name)
}
inline ::std::string* CreateLiveRoomRequest::mutable_live_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.CreateLiveRoomRequest.live_name)
  return live_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateLiveRoomRequest::release_live_name() {
  // @@protoc_insertion_point(field_release:outer.live.CreateLiveRoomRequest.live_name)
  
  return live_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateLiveRoomRequest::set_allocated_live_name(::std::string* live_name) {
  if (live_name != NULL) {
    
  } else {
    
  }
  live_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), live_name);
  // @@protoc_insertion_point(field_set_allocated:outer.live.CreateLiveRoomRequest.live_name)
}

// string head_image = 5;
inline void CreateLiveRoomRequest::clear_head_image() {
  head_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateLiveRoomRequest::head_image() const {
  // @@protoc_insertion_point(field_get:outer.live.CreateLiveRoomRequest.head_image)
  return head_image_.GetNoArena();
}
inline void CreateLiveRoomRequest::set_head_image(const ::std::string& value) {
  
  head_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.CreateLiveRoomRequest.head_image)
}
#if LANG_CXX11
inline void CreateLiveRoomRequest::set_head_image(::std::string&& value) {
  
  head_image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.CreateLiveRoomRequest.head_image)
}
#endif
inline void CreateLiveRoomRequest::set_head_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  head_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.CreateLiveRoomRequest.head_image)
}
inline void CreateLiveRoomRequest::set_head_image(const char* value, size_t size) {
  
  head_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.CreateLiveRoomRequest.head_image)
}
inline ::std::string* CreateLiveRoomRequest::mutable_head_image() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.CreateLiveRoomRequest.head_image)
  return head_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateLiveRoomRequest::release_head_image() {
  // @@protoc_insertion_point(field_release:outer.live.CreateLiveRoomRequest.head_image)
  
  return head_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateLiveRoomRequest::set_allocated_head_image(::std::string* head_image) {
  if (head_image != NULL) {
    
  } else {
    
  }
  head_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), head_image);
  // @@protoc_insertion_point(field_set_allocated:outer.live.CreateLiveRoomRequest.head_image)
}

// string desc = 6;
inline void CreateLiveRoomRequest::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateLiveRoomRequest::desc() const {
  // @@protoc_insertion_point(field_get:outer.live.CreateLiveRoomRequest.desc)
  return desc_.GetNoArena();
}
inline void CreateLiveRoomRequest::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.CreateLiveRoomRequest.desc)
}
#if LANG_CXX11
inline void CreateLiveRoomRequest::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.CreateLiveRoomRequest.desc)
}
#endif
inline void CreateLiveRoomRequest::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.CreateLiveRoomRequest.desc)
}
inline void CreateLiveRoomRequest::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.CreateLiveRoomRequest.desc)
}
inline ::std::string* CreateLiveRoomRequest::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.CreateLiveRoomRequest.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateLiveRoomRequest::release_desc() {
  // @@protoc_insertion_point(field_release:outer.live.CreateLiveRoomRequest.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateLiveRoomRequest::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:outer.live.CreateLiveRoomRequest.desc)
}

// -------------------------------------------------------------------

// CreateLiveRoomResponse

// string live_id = 1;
inline void CreateLiveRoomResponse::clear_live_id() {
  live_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateLiveRoomResponse::live_id() const {
  // @@protoc_insertion_point(field_get:outer.live.CreateLiveRoomResponse.live_id)
  return live_id_.GetNoArena();
}
inline void CreateLiveRoomResponse::set_live_id(const ::std::string& value) {
  
  live_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.CreateLiveRoomResponse.live_id)
}
#if LANG_CXX11
inline void CreateLiveRoomResponse::set_live_id(::std::string&& value) {
  
  live_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.CreateLiveRoomResponse.live_id)
}
#endif
inline void CreateLiveRoomResponse::set_live_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  live_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.CreateLiveRoomResponse.live_id)
}
inline void CreateLiveRoomResponse::set_live_id(const char* value, size_t size) {
  
  live_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.CreateLiveRoomResponse.live_id)
}
inline ::std::string* CreateLiveRoomResponse::mutable_live_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.CreateLiveRoomResponse.live_id)
  return live_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateLiveRoomResponse::release_live_id() {
  // @@protoc_insertion_point(field_release:outer.live.CreateLiveRoomResponse.live_id)
  
  return live_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateLiveRoomResponse::set_allocated_live_id(::std::string* live_id) {
  if (live_id != NULL) {
    
  } else {
    
  }
  live_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), live_id);
  // @@protoc_insertion_point(field_set_allocated:outer.live.CreateLiveRoomResponse.live_id)
}

// string room_id = 2;
inline void CreateLiveRoomResponse::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateLiveRoomResponse::room_id() const {
  // @@protoc_insertion_point(field_get:outer.live.CreateLiveRoomResponse.room_id)
  return room_id_.GetNoArena();
}
inline void CreateLiveRoomResponse::set_room_id(const ::std::string& value) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.CreateLiveRoomResponse.room_id)
}
#if LANG_CXX11
inline void CreateLiveRoomResponse::set_room_id(::std::string&& value) {
  
  room_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.CreateLiveRoomResponse.room_id)
}
#endif
inline void CreateLiveRoomResponse::set_room_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.CreateLiveRoomResponse.room_id)
}
inline void CreateLiveRoomResponse::set_room_id(const char* value, size_t size) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.CreateLiveRoomResponse.room_id)
}
inline ::std::string* CreateLiveRoomResponse::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.CreateLiveRoomResponse.room_id)
  return room_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateLiveRoomResponse::release_room_id() {
  // @@protoc_insertion_point(field_release:outer.live.CreateLiveRoomResponse.room_id)
  
  return room_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateLiveRoomResponse::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:outer.live.CreateLiveRoomResponse.room_id)
}

// .common.errcode.EErrorCode ret = 3;
inline void CreateLiveRoomResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode CreateLiveRoomResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.live.CreateLiveRoomResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void CreateLiveRoomResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.live.CreateLiveRoomResponse.ret)
}

// -------------------------------------------------------------------

// StartStreamingRequest

// string username = 1;
inline void StartStreamingRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartStreamingRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.live.StartStreamingRequest.username)
  return username_.GetNoArena();
}
inline void StartStreamingRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.StartStreamingRequest.username)
}
#if LANG_CXX11
inline void StartStreamingRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.StartStreamingRequest.username)
}
#endif
inline void StartStreamingRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.StartStreamingRequest.username)
}
inline void StartStreamingRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.StartStreamingRequest.username)
}
inline ::std::string* StartStreamingRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.StartStreamingRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartStreamingRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.live.StartStreamingRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartStreamingRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.live.StartStreamingRequest.username)
}

// string appkey = 2;
inline void StartStreamingRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartStreamingRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.live.StartStreamingRequest.appkey)
  return appkey_.GetNoArena();
}
inline void StartStreamingRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.StartStreamingRequest.appkey)
}
#if LANG_CXX11
inline void StartStreamingRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.StartStreamingRequest.appkey)
}
#endif
inline void StartStreamingRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.StartStreamingRequest.appkey)
}
inline void StartStreamingRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.StartStreamingRequest.appkey)
}
inline ::std::string* StartStreamingRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.StartStreamingRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartStreamingRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.live.StartStreamingRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartStreamingRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.live.StartStreamingRequest.appkey)
}

// string live_id = 3;
inline void StartStreamingRequest::clear_live_id() {
  live_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartStreamingRequest::live_id() const {
  // @@protoc_insertion_point(field_get:outer.live.StartStreamingRequest.live_id)
  return live_id_.GetNoArena();
}
inline void StartStreamingRequest::set_live_id(const ::std::string& value) {
  
  live_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.StartStreamingRequest.live_id)
}
#if LANG_CXX11
inline void StartStreamingRequest::set_live_id(::std::string&& value) {
  
  live_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.StartStreamingRequest.live_id)
}
#endif
inline void StartStreamingRequest::set_live_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  live_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.StartStreamingRequest.live_id)
}
inline void StartStreamingRequest::set_live_id(const char* value, size_t size) {
  
  live_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.StartStreamingRequest.live_id)
}
inline ::std::string* StartStreamingRequest::mutable_live_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.StartStreamingRequest.live_id)
  return live_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartStreamingRequest::release_live_id() {
  // @@protoc_insertion_point(field_release:outer.live.StartStreamingRequest.live_id)
  
  return live_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartStreamingRequest::set_allocated_live_id(::std::string* live_id) {
  if (live_id != NULL) {
    
  } else {
    
  }
  live_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), live_id);
  // @@protoc_insertion_point(field_set_allocated:outer.live.StartStreamingRequest.live_id)
}

// -------------------------------------------------------------------

// StartStreamingResponse

// string stream_id = 1;
inline void StartStreamingResponse::clear_stream_id() {
  stream_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartStreamingResponse::stream_id() const {
  // @@protoc_insertion_point(field_get:outer.live.StartStreamingResponse.stream_id)
  return stream_id_.GetNoArena();
}
inline void StartStreamingResponse::set_stream_id(const ::std::string& value) {
  
  stream_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.StartStreamingResponse.stream_id)
}
#if LANG_CXX11
inline void StartStreamingResponse::set_stream_id(::std::string&& value) {
  
  stream_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.StartStreamingResponse.stream_id)
}
#endif
inline void StartStreamingResponse::set_stream_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stream_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.StartStreamingResponse.stream_id)
}
inline void StartStreamingResponse::set_stream_id(const char* value, size_t size) {
  
  stream_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.StartStreamingResponse.stream_id)
}
inline ::std::string* StartStreamingResponse::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.StartStreamingResponse.stream_id)
  return stream_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartStreamingResponse::release_stream_id() {
  // @@protoc_insertion_point(field_release:outer.live.StartStreamingResponse.stream_id)
  
  return stream_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartStreamingResponse::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id);
  // @@protoc_insertion_point(field_set_allocated:outer.live.StartStreamingResponse.stream_id)
}

// .common.errcode.EErrorCode ret = 2;
inline void StartStreamingResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode StartStreamingResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.live.StartStreamingResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void StartStreamingResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.live.StartStreamingResponse.ret)
}

// -------------------------------------------------------------------

// StopStreamingRequest

// string username = 1;
inline void StopStreamingRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopStreamingRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.live.StopStreamingRequest.username)
  return username_.GetNoArena();
}
inline void StopStreamingRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.StopStreamingRequest.username)
}
#if LANG_CXX11
inline void StopStreamingRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.StopStreamingRequest.username)
}
#endif
inline void StopStreamingRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.StopStreamingRequest.username)
}
inline void StopStreamingRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.StopStreamingRequest.username)
}
inline ::std::string* StopStreamingRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.StopStreamingRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopStreamingRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.live.StopStreamingRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopStreamingRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.live.StopStreamingRequest.username)
}

// string appkey = 2;
inline void StopStreamingRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopStreamingRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.live.StopStreamingRequest.appkey)
  return appkey_.GetNoArena();
}
inline void StopStreamingRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.StopStreamingRequest.appkey)
}
#if LANG_CXX11
inline void StopStreamingRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.StopStreamingRequest.appkey)
}
#endif
inline void StopStreamingRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.StopStreamingRequest.appkey)
}
inline void StopStreamingRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.StopStreamingRequest.appkey)
}
inline ::std::string* StopStreamingRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.StopStreamingRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopStreamingRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.live.StopStreamingRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopStreamingRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.live.StopStreamingRequest.appkey)
}

// string room_id = 3;
inline void StopStreamingRequest::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopStreamingRequest::room_id() const {
  // @@protoc_insertion_point(field_get:outer.live.StopStreamingRequest.room_id)
  return room_id_.GetNoArena();
}
inline void StopStreamingRequest::set_room_id(const ::std::string& value) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.StopStreamingRequest.room_id)
}
#if LANG_CXX11
inline void StopStreamingRequest::set_room_id(::std::string&& value) {
  
  room_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.StopStreamingRequest.room_id)
}
#endif
inline void StopStreamingRequest::set_room_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.StopStreamingRequest.room_id)
}
inline void StopStreamingRequest::set_room_id(const char* value, size_t size) {
  
  room_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.StopStreamingRequest.room_id)
}
inline ::std::string* StopStreamingRequest::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.StopStreamingRequest.room_id)
  return room_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopStreamingRequest::release_room_id() {
  // @@protoc_insertion_point(field_release:outer.live.StopStreamingRequest.room_id)
  
  return room_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopStreamingRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:outer.live.StopStreamingRequest.room_id)
}

// -------------------------------------------------------------------

// StopStreamingResponse

// .common.errcode.EErrorCode ret = 2;
inline void StopStreamingResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode StopStreamingResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.live.StopStreamingResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void StopStreamingResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.live.StopStreamingResponse.ret)
}

// -------------------------------------------------------------------

// QueryLiveListRequest

// string appkey = 1;
inline void QueryLiveListRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryLiveListRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.live.QueryLiveListRequest.appkey)
  return appkey_.GetNoArena();
}
inline void QueryLiveListRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.QueryLiveListRequest.appkey)
}
#if LANG_CXX11
inline void QueryLiveListRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.QueryLiveListRequest.appkey)
}
#endif
inline void QueryLiveListRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.QueryLiveListRequest.appkey)
}
inline void QueryLiveListRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.QueryLiveListRequest.appkey)
}
inline ::std::string* QueryLiveListRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.QueryLiveListRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryLiveListRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.live.QueryLiveListRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryLiveListRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.live.QueryLiveListRequest.appkey)
}

// string username = 2;
inline void QueryLiveListRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryLiveListRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.live.QueryLiveListRequest.username)
  return username_.GetNoArena();
}
inline void QueryLiveListRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.live.QueryLiveListRequest.username)
}
#if LANG_CXX11
inline void QueryLiveListRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.live.QueryLiveListRequest.username)
}
#endif
inline void QueryLiveListRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.live.QueryLiveListRequest.username)
}
inline void QueryLiveListRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.live.QueryLiveListRequest.username)
}
inline ::std::string* QueryLiveListRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.live.QueryLiveListRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryLiveListRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.live.QueryLiveListRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryLiveListRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.live.QueryLiveListRequest.username)
}

// -------------------------------------------------------------------

// QueryLiveListResponse

// .common.errcode.EErrorCode ret = 1;
inline void QueryLiveListResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode QueryLiveListResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.live.QueryLiveListResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void QueryLiveListResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.live.QueryLiveListResponse.ret)
}

// repeated .outer.live.LiveInfo live_info = 2;
inline int QueryLiveListResponse::live_info_size() const {
  return live_info_.size();
}
inline void QueryLiveListResponse::clear_live_info() {
  live_info_.Clear();
}
inline const ::outer::live::LiveInfo& QueryLiveListResponse::live_info(int index) const {
  // @@protoc_insertion_point(field_get:outer.live.QueryLiveListResponse.live_info)
  return live_info_.Get(index);
}
inline ::outer::live::LiveInfo* QueryLiveListResponse::mutable_live_info(int index) {
  // @@protoc_insertion_point(field_mutable:outer.live.QueryLiveListResponse.live_info)
  return live_info_.Mutable(index);
}
inline ::outer::live::LiveInfo* QueryLiveListResponse::add_live_info() {
  // @@protoc_insertion_point(field_add:outer.live.QueryLiveListResponse.live_info)
  return live_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::live::LiveInfo >*
QueryLiveListResponse::mutable_live_info() {
  // @@protoc_insertion_point(field_mutable_list:outer.live.QueryLiveListResponse.live_info)
  return &live_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::live::LiveInfo >&
QueryLiveListResponse::live_info() const {
  // @@protoc_insertion_point(field_list:outer.live.QueryLiveListResponse.live_info)
  return live_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace live
}  // namespace outer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_outer_2flive_2eproto__INCLUDED
