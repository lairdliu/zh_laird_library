// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: outer/chatroom.proto

#include "outer/chatroom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace outer {
namespace chatroom {
class ChatroomInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatroomInfo>
      _instance;
} _ChatroomInfo_default_instance_;
class CrewDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Crew>
      _instance;
} _Crew_default_instance_;
class ChatroomDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatroomDetail>
      _instance;
} _ChatroomDetail_default_instance_;
class ChatroomSignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatroomSignal>
      _instance;
} _ChatroomSignal_default_instance_;
class SearchRoomByNameRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchRoomByNameRequest>
      _instance;
} _SearchRoomByNameRequest_default_instance_;
class SearchRoomByNameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchRoomByNameResponse>
      _instance;
} _SearchRoomByNameResponse_default_instance_;
class SearchRoomByIdRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchRoomByIdRequest>
      _instance;
} _SearchRoomByIdRequest_default_instance_;
class SearchRoomByIdResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SearchRoomByIdResponse>
      _instance;
} _SearchRoomByIdResponse_default_instance_;
class GetRoomListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRoomListRequest>
      _instance;
} _GetRoomListRequest_default_instance_;
class GetRoomListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRoomListResponse>
      _instance;
} _GetRoomListResponse_default_instance_;
class QueryRoomDetailRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryRoomDetailRequest>
      _instance;
} _QueryRoomDetailRequest_default_instance_;
class QueryRoomDetailResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryRoomDetailResponse>
      _instance;
} _QueryRoomDetailResponse_default_instance_;
class SetRoomInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetRoomInfoRequest>
      _instance;
} _SetRoomInfoRequest_default_instance_;
class SetRoomInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SetRoomInfoResponse>
      _instance;
} _SetRoomInfoResponse_default_instance_;
class AddMemberToRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddMemberToRoomRequest>
      _instance;
} _AddMemberToRoomRequest_default_instance_;
class AddMemberToRoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddMemberToRoomResponse>
      _instance;
} _AddMemberToRoomResponse_default_instance_;
class JoinRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JoinRoomRequest>
      _instance;
} _JoinRoomRequest_default_instance_;
class JoinRoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JoinRoomResponse>
      _instance;
} _JoinRoomResponse_default_instance_;
class ExitRoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExitRoomRequest>
      _instance;
} _ExitRoomRequest_default_instance_;
class ExitRoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExitRoomResponse>
      _instance;
} _ExitRoomResponse_default_instance_;
class GetTotalMemberCountRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTotalMemberCountRequest>
      _instance;
} _GetTotalMemberCountRequest_default_instance_;
class GetTotalMemberCountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTotalMemberCountResponse>
      _instance;
} _GetTotalMemberCountResponse_default_instance_;
class SendRoomMessageRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SendRoomMessageRequest>
      _instance;
} _SendRoomMessageRequest_default_instance_;
class SendRoomMessageResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SendRoomMessageResponse>
      _instance;
} _SendRoomMessageResponse_default_instance_;
}  // namespace chatroom
}  // namespace outer
namespace protobuf_outer_2fchatroom_2eproto {
void InitDefaultsChatroomInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_ChatroomInfo_default_instance_;
    new (ptr) ::outer::chatroom::ChatroomInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::ChatroomInfo::InitAsDefaultInstance();
}

void InitDefaultsChatroomInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChatroomInfoImpl);
}

void InitDefaultsCrewImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_Crew_default_instance_;
    new (ptr) ::outer::chatroom::Crew();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::Crew::InitAsDefaultInstance();
}

void InitDefaultsCrew() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCrewImpl);
}

void InitDefaultsChatroomDetailImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_outer_2fchatroom_2eproto::InitDefaultsCrew();
  {
    void* ptr = &::outer::chatroom::_ChatroomDetail_default_instance_;
    new (ptr) ::outer::chatroom::ChatroomDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::ChatroomDetail::InitAsDefaultInstance();
}

void InitDefaultsChatroomDetail() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChatroomDetailImpl);
}

void InitDefaultsChatroomSignalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_outer_2fchatroom_2eproto::InitDefaultsCrew();
  protobuf_outer_2fchatroom_2eproto::InitDefaultsChatroomDetail();
  {
    void* ptr = &::outer::chatroom::_ChatroomSignal_default_instance_;
    new (ptr) ::outer::chatroom::ChatroomSignal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::ChatroomSignal::InitAsDefaultInstance();
}

void InitDefaultsChatroomSignal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChatroomSignalImpl);
}

void InitDefaultsSearchRoomByNameRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_SearchRoomByNameRequest_default_instance_;
    new (ptr) ::outer::chatroom::SearchRoomByNameRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::SearchRoomByNameRequest::InitAsDefaultInstance();
}

void InitDefaultsSearchRoomByNameRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchRoomByNameRequestImpl);
}

void InitDefaultsSearchRoomByNameResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_outer_2fchatroom_2eproto::InitDefaultsChatroomInfo();
  {
    void* ptr = &::outer::chatroom::_SearchRoomByNameResponse_default_instance_;
    new (ptr) ::outer::chatroom::SearchRoomByNameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::SearchRoomByNameResponse::InitAsDefaultInstance();
}

void InitDefaultsSearchRoomByNameResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchRoomByNameResponseImpl);
}

void InitDefaultsSearchRoomByIdRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_SearchRoomByIdRequest_default_instance_;
    new (ptr) ::outer::chatroom::SearchRoomByIdRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::SearchRoomByIdRequest::InitAsDefaultInstance();
}

void InitDefaultsSearchRoomByIdRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchRoomByIdRequestImpl);
}

void InitDefaultsSearchRoomByIdResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_outer_2fchatroom_2eproto::InitDefaultsChatroomInfo();
  {
    void* ptr = &::outer::chatroom::_SearchRoomByIdResponse_default_instance_;
    new (ptr) ::outer::chatroom::SearchRoomByIdResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::SearchRoomByIdResponse::InitAsDefaultInstance();
}

void InitDefaultsSearchRoomByIdResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSearchRoomByIdResponseImpl);
}

void InitDefaultsGetRoomListRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_GetRoomListRequest_default_instance_;
    new (ptr) ::outer::chatroom::GetRoomListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::GetRoomListRequest::InitAsDefaultInstance();
}

void InitDefaultsGetRoomListRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetRoomListRequestImpl);
}

void InitDefaultsGetRoomListResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_outer_2fchatroom_2eproto::InitDefaultsChatroomInfo();
  {
    void* ptr = &::outer::chatroom::_GetRoomListResponse_default_instance_;
    new (ptr) ::outer::chatroom::GetRoomListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::GetRoomListResponse::InitAsDefaultInstance();
}

void InitDefaultsGetRoomListResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetRoomListResponseImpl);
}

void InitDefaultsQueryRoomDetailRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_QueryRoomDetailRequest_default_instance_;
    new (ptr) ::outer::chatroom::QueryRoomDetailRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::QueryRoomDetailRequest::InitAsDefaultInstance();
}

void InitDefaultsQueryRoomDetailRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQueryRoomDetailRequestImpl);
}

void InitDefaultsQueryRoomDetailResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_outer_2fchatroom_2eproto::InitDefaultsChatroomDetail();
  {
    void* ptr = &::outer::chatroom::_QueryRoomDetailResponse_default_instance_;
    new (ptr) ::outer::chatroom::QueryRoomDetailResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::QueryRoomDetailResponse::InitAsDefaultInstance();
}

void InitDefaultsQueryRoomDetailResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQueryRoomDetailResponseImpl);
}

void InitDefaultsSetRoomInfoRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_SetRoomInfoRequest_default_instance_;
    new (ptr) ::outer::chatroom::SetRoomInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::SetRoomInfoRequest::InitAsDefaultInstance();
}

void InitDefaultsSetRoomInfoRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSetRoomInfoRequestImpl);
}

void InitDefaultsSetRoomInfoResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_SetRoomInfoResponse_default_instance_;
    new (ptr) ::outer::chatroom::SetRoomInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::SetRoomInfoResponse::InitAsDefaultInstance();
}

void InitDefaultsSetRoomInfoResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSetRoomInfoResponseImpl);
}

void InitDefaultsAddMemberToRoomRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_AddMemberToRoomRequest_default_instance_;
    new (ptr) ::outer::chatroom::AddMemberToRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::AddMemberToRoomRequest::InitAsDefaultInstance();
}

void InitDefaultsAddMemberToRoomRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddMemberToRoomRequestImpl);
}

void InitDefaultsAddMemberToRoomResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_AddMemberToRoomResponse_default_instance_;
    new (ptr) ::outer::chatroom::AddMemberToRoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::AddMemberToRoomResponse::InitAsDefaultInstance();
}

void InitDefaultsAddMemberToRoomResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAddMemberToRoomResponseImpl);
}

void InitDefaultsJoinRoomRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_JoinRoomRequest_default_instance_;
    new (ptr) ::outer::chatroom::JoinRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::JoinRoomRequest::InitAsDefaultInstance();
}

void InitDefaultsJoinRoomRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsJoinRoomRequestImpl);
}

void InitDefaultsJoinRoomResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_JoinRoomResponse_default_instance_;
    new (ptr) ::outer::chatroom::JoinRoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::JoinRoomResponse::InitAsDefaultInstance();
}

void InitDefaultsJoinRoomResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsJoinRoomResponseImpl);
}

void InitDefaultsExitRoomRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_ExitRoomRequest_default_instance_;
    new (ptr) ::outer::chatroom::ExitRoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::ExitRoomRequest::InitAsDefaultInstance();
}

void InitDefaultsExitRoomRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsExitRoomRequestImpl);
}

void InitDefaultsExitRoomResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_ExitRoomResponse_default_instance_;
    new (ptr) ::outer::chatroom::ExitRoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::ExitRoomResponse::InitAsDefaultInstance();
}

void InitDefaultsExitRoomResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsExitRoomResponseImpl);
}

void InitDefaultsGetTotalMemberCountRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_GetTotalMemberCountRequest_default_instance_;
    new (ptr) ::outer::chatroom::GetTotalMemberCountRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::GetTotalMemberCountRequest::InitAsDefaultInstance();
}

void InitDefaultsGetTotalMemberCountRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetTotalMemberCountRequestImpl);
}

void InitDefaultsGetTotalMemberCountResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_GetTotalMemberCountResponse_default_instance_;
    new (ptr) ::outer::chatroom::GetTotalMemberCountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::GetTotalMemberCountResponse::InitAsDefaultInstance();
}

void InitDefaultsGetTotalMemberCountResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetTotalMemberCountResponseImpl);
}

void InitDefaultsSendRoomMessageRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_SendRoomMessageRequest_default_instance_;
    new (ptr) ::outer::chatroom::SendRoomMessageRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::SendRoomMessageRequest::InitAsDefaultInstance();
}

void InitDefaultsSendRoomMessageRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSendRoomMessageRequestImpl);
}

void InitDefaultsSendRoomMessageResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chatroom::_SendRoomMessageResponse_default_instance_;
    new (ptr) ::outer::chatroom::SendRoomMessageResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chatroom::SendRoomMessageResponse::InitAsDefaultInstance();
}

void InitDefaultsSendRoomMessageResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSendRoomMessageResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[24];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ChatroomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ChatroomInfo, room_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ChatroomInfo, room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::Crew, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::Crew, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::Crew, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::Crew, nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::Crew, role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::Crew, modified_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ChatroomDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ChatroomDetail, owner_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ChatroomDetail, room_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ChatroomDetail, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ChatroomDetail, member_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ChatroomDetail, created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ChatroomDetail, desc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ChatroomDetail, members_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ChatroomSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ChatroomSignal, signal_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ChatroomSignal, crew_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ChatroomSignal, chatroom_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ChatroomSignal, guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SearchRoomByNameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SearchRoomByNameRequest, from_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SearchRoomByNameRequest, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SearchRoomByNameRequest, room_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SearchRoomByNameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SearchRoomByNameResponse, room_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SearchRoomByNameResponse, ret_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SearchRoomByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SearchRoomByIdRequest, from_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SearchRoomByIdRequest, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SearchRoomByIdRequest, room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SearchRoomByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SearchRoomByIdResponse, room_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SearchRoomByIdResponse, ret_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::GetRoomListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::GetRoomListRequest, from_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::GetRoomListRequest, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::GetRoomListRequest, modified_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::GetRoomListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::GetRoomListResponse, room_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::GetRoomListResponse, ret_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::QueryRoomDetailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::QueryRoomDetailRequest, from_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::QueryRoomDetailRequest, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::QueryRoomDetailRequest, room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::QueryRoomDetailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::QueryRoomDetailResponse, room_detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::QueryRoomDetailResponse, ret_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SetRoomInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SetRoomInfoRequest, from_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SetRoomInfoRequest, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SetRoomInfoRequest, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SetRoomInfoRequest, room_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SetRoomInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SetRoomInfoResponse, ret_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::AddMemberToRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::AddMemberToRoomRequest, from_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::AddMemberToRoomRequest, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::AddMemberToRoomRequest, invitee_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::AddMemberToRoomRequest, room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::AddMemberToRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::AddMemberToRoomResponse, ret_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::JoinRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::JoinRoomRequest, from_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::JoinRoomRequest, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::JoinRoomRequest, room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::JoinRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::JoinRoomResponse, ret_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ExitRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ExitRoomRequest, from_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ExitRoomRequest, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ExitRoomRequest, room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ExitRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::ExitRoomResponse, ret_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::GetTotalMemberCountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::GetTotalMemberCountRequest, from_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::GetTotalMemberCountRequest, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::GetTotalMemberCountRequest, room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::GetTotalMemberCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::GetTotalMemberCountResponse, member_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::GetTotalMemberCountResponse, ret_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SendRoomMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SendRoomMessageRequest, from_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SendRoomMessageRequest, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SendRoomMessageRequest, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SendRoomMessageRequest, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SendRoomMessageRequest, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SendRoomMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chatroom::SendRoomMessageResponse, ret_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::outer::chatroom::ChatroomInfo)},
  { 7, -1, sizeof(::outer::chatroom::Crew)},
  { 17, -1, sizeof(::outer::chatroom::ChatroomDetail)},
  { 29, -1, sizeof(::outer::chatroom::ChatroomSignal)},
  { 38, -1, sizeof(::outer::chatroom::SearchRoomByNameRequest)},
  { 46, -1, sizeof(::outer::chatroom::SearchRoomByNameResponse)},
  { 53, -1, sizeof(::outer::chatroom::SearchRoomByIdRequest)},
  { 61, -1, sizeof(::outer::chatroom::SearchRoomByIdResponse)},
  { 68, -1, sizeof(::outer::chatroom::GetRoomListRequest)},
  { 76, -1, sizeof(::outer::chatroom::GetRoomListResponse)},
  { 83, -1, sizeof(::outer::chatroom::QueryRoomDetailRequest)},
  { 91, -1, sizeof(::outer::chatroom::QueryRoomDetailResponse)},
  { 98, -1, sizeof(::outer::chatroom::SetRoomInfoRequest)},
  { 107, -1, sizeof(::outer::chatroom::SetRoomInfoResponse)},
  { 113, -1, sizeof(::outer::chatroom::AddMemberToRoomRequest)},
  { 122, -1, sizeof(::outer::chatroom::AddMemberToRoomResponse)},
  { 128, -1, sizeof(::outer::chatroom::JoinRoomRequest)},
  { 136, -1, sizeof(::outer::chatroom::JoinRoomResponse)},
  { 142, -1, sizeof(::outer::chatroom::ExitRoomRequest)},
  { 150, -1, sizeof(::outer::chatroom::ExitRoomResponse)},
  { 156, -1, sizeof(::outer::chatroom::GetTotalMemberCountRequest)},
  { 164, -1, sizeof(::outer::chatroom::GetTotalMemberCountResponse)},
  { 171, -1, sizeof(::outer::chatroom::SendRoomMessageRequest)},
  { 181, -1, sizeof(::outer::chatroom::SendRoomMessageResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_ChatroomInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_Crew_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_ChatroomDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_ChatroomSignal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_SearchRoomByNameRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_SearchRoomByNameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_SearchRoomByIdRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_SearchRoomByIdResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_GetRoomListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_GetRoomListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_QueryRoomDetailRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_QueryRoomDetailResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_SetRoomInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_SetRoomInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_AddMemberToRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_AddMemberToRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_JoinRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_JoinRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_ExitRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_ExitRoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_GetTotalMemberCountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_GetTotalMemberCountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_SendRoomMessageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chatroom::_SendRoomMessageResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "outer/chatroom.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 24);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024outer/chatroom.proto\022\016outer.chatroom\032\024"
      "common/errcode.proto\"2\n\014ChatroomInfo\022\021\n\t"
      "room_name\030\001 \001(\t\022\017\n\007room_id\030\002 \001(\004\"m\n\004Crew"
      "\022\020\n\010username\030\001 \001(\t\022\016\n\006appkey\030\002 \001(\t\022\014\n\004ni"
      "ck\030\003 \001(\t\022#\n\004role\030\004 \001(\0162\025.outer.chatroom."
      "ERole\022\020\n\010modified\030\005 \001(\t\"\244\001\n\016ChatroomDeta"
      "il\022\022\n\nowner_name\030\001 \001(\t\022\021\n\troom_name\030\002 \001("
      "\t\022\017\n\007room_id\030\003 \001(\004\022\024\n\014member_count\030\004 \001(\r"
      "\022\017\n\007created\030\005 \001(\004\022\014\n\004desc\030\006 \001(\t\022%\n\007membe"
      "rs\030\007 \003(\0132\024.outer.chatroom.Crew\"\260\001\n\016Chatr"
      "oomSignal\0220\n\013signal_type\030\001 \001(\0162\033.outer.c"
      "hatroom.ESignalType\022\'\n\tcrew_info\030\002 \003(\0132\024"
      ".outer.chatroom.Crew\0225\n\rchatroom_info\030\003 "
      "\001(\0132\036.outer.chatroom.ChatroomDetail\022\014\n\004g"
      "uid\030\004 \001(\004\"S\n\027SearchRoomByNameRequest\022\025\n\r"
      "from_username\030\001 \001(\t\022\016\n\006appkey\030\002 \001(\t\022\021\n\tr"
      "oom_name\030\003 \001(\t\"t\n\030SearchRoomByNameRespon"
      "se\022/\n\troom_info\030\001 \003(\0132\034.outer.chatroom.C"
      "hatroomInfo\022\'\n\003ret\030\002 \001(\0162\032.common.errcod"
      "e.EErrorCode\"O\n\025SearchRoomByIdRequest\022\025\n"
      "\rfrom_username\030\001 \001(\t\022\016\n\006appkey\030\002 \001(\t\022\017\n\007"
      "room_id\030\003 \001(\004\"r\n\026SearchRoomByIdResponse\022"
      "/\n\troom_info\030\001 \003(\0132\034.outer.chatroom.Chat"
      "roomInfo\022\'\n\003ret\030\002 \001(\0162\032.common.errcode.E"
      "ErrorCode\"M\n\022GetRoomListRequest\022\025\n\rfrom_"
      "username\030\001 \001(\t\022\016\n\006appkey\030\002 \001(\t\022\020\n\010modifi"
      "ed\030\003 \001(\t\"o\n\023GetRoomListResponse\022/\n\troom_"
      "info\030\001 \003(\0132\034.outer.chatroom.ChatroomInfo"
      "\022\'\n\003ret\030\002 \001(\0162\032.common.errcode.EErrorCod"
      "e\"P\n\026QueryRoomDetailRequest\022\025\n\rfrom_user"
      "name\030\001 \001(\t\022\016\n\006appkey\030\002 \001(\t\022\017\n\007room_id\030\003 "
      "\001(\004\"w\n\027QueryRoomDetailResponse\0223\n\013room_d"
      "etail\030\001 \001(\0132\036.outer.chatroom.ChatroomDet"
      "ail\022\'\n\003ret\030\002 \001(\0162\032.common.errcode.EError"
      "Code\"[\n\022SetRoomInfoRequest\022\021\n\tfrom_name\030"
      "\001 \001(\t\022\016\n\006appkey\030\002 \001(\t\022\017\n\007room_id\030\003 \001(\004\022\021"
      "\n\troom_name\030\004 \001(\t\">\n\023SetRoomInfoResponse"
      "\022\'\n\003ret\030\001 \001(\0162\032.common.errcode.EErrorCod"
      "e\"f\n\026AddMemberToRoomRequest\022\025\n\rfrom_user"
      "name\030\001 \001(\t\022\016\n\006appkey\030\002 \001(\t\022\024\n\014invitee_na"
      "me\030\003 \003(\t\022\017\n\007room_id\030\004 \001(\004\"B\n\027AddMemberTo"
      "RoomResponse\022\'\n\003ret\030\001 \001(\0162\032.common.errco"
      "de.EErrorCode\"I\n\017JoinRoomRequest\022\025\n\rfrom"
      "_username\030\001 \001(\t\022\016\n\006appkey\030\002 \001(\t\022\017\n\007room_"
      "id\030\003 \001(\004\";\n\020JoinRoomResponse\022\'\n\003ret\030\001 \001("
      "\0162\032.common.errcode.EErrorCode\"I\n\017ExitRoo"
      "mRequest\022\025\n\rfrom_username\030\001 \001(\t\022\016\n\006appke"
      "y\030\002 \001(\t\022\017\n\007room_id\030\003 \001(\004\";\n\020ExitRoomResp"
      "onse\022\'\n\003ret\030\001 \001(\0162\032.common.errcode.EErro"
      "rCode\"T\n\032GetTotalMemberCountRequest\022\025\n\rf"
      "rom_username\030\001 \001(\t\022\016\n\006appkey\030\002 \001(\t\022\017\n\007ro"
      "om_id\030\003 \001(\004\"\\\n\033GetTotalMemberCountRespon"
      "se\022\024\n\014member_count\030\001 \001(\004\022\'\n\003ret\030\002 \001(\0162\032."
      "common.errcode.EErrorCode\"\212\001\n\026SendRoomMe"
      "ssageRequest\022\025\n\rfrom_username\030\001 \001(\t\022\016\n\006a"
      "ppkey\030\002 \001(\t\022\017\n\007room_id\030\003 \001(\004\022*\n\010msg_type"
      "\030\004 \001(\0162\030.outer.chatroom.EMsgType\022\014\n\004data"
      "\030\005 \001(\014\"B\n\027SendRoomMessageResponse\022\'\n\003ret"
      "\030\001 \001(\0162\032.common.errcode.EErrorCode*8\n\nER"
      "oomState\022\025\n\021UNKNOWNEROOMSTATE\020\000\022\t\n\005CLOSE"
      "\020\002\022\010\n\004OPEN\020\001*)\n\010EMsgType\022\023\n\017UNKNOWNEMSGT"
      "YPE\020\000\022\010\n\004TEXT\020\001*;\n\005ERole\022\020\n\014UNKNOWNEROLE"
      "\020\000\022\n\n\006MEMBER\020\003\022\t\n\005ADMIN\020\001\022\t\n\005OWNER\020\002*\304\001\n"
      "\013ESignalType\022\026\n\022UNKNOWNESIGNALTYPE\020\000\022\024\n\020"
      "CREW_JOIN_SIGNAL\020\006\022\024\n\020CREW_EXIT_SIGNAL\020\001"
      "\022\031\n\025CHATROOM_CLOSE_SIGNAL\020\002\022\032\n\026CHATROOM_"
      "DELETE_SIGNAL\020\003\022\030\n\024OWNER_CHANGED_SIGNAL\020"
      "\004\022 \n\034CHATROOM_INFO_CHANGED_SIGNAL\020\0052\303\007\n\017"
      "ChatroomService\022e\n\020SearchRoomByName\022\'.ou"
      "ter.chatroom.SearchRoomByNameRequest\032(.o"
      "uter.chatroom.SearchRoomByNameResponse\022_"
      "\n\016SearchRoomById\022%.outer.chatroom.Search"
      "RoomByIdRequest\032&.outer.chatroom.SearchR"
      "oomByIdResponse\022V\n\013GetRoomList\022\".outer.c"
      "hatroom.GetRoomListRequest\032#.outer.chatr"
      "oom.GetRoomListResponse\022V\n\013SetRoomInfo\022\""
      ".outer.chatroom.SetRoomInfoRequest\032#.out"
      "er.chatroom.SetRoomInfoResponse\022b\n\017AddMe"
      "mberToRoom\022&.outer.chatroom.AddMemberToR"
      "oomRequest\032\'.outer.chatroom.AddMemberToR"
      "oomResponse\022M\n\010JoinRoom\022\037.outer.chatroom"
      ".JoinRoomRequest\032 .outer.chatroom.JoinRo"
      "omResponse\022M\n\010ExitRoom\022\037.outer.chatroom."
      "ExitRoomRequest\032 .outer.chatroom.ExitRoo"
      "mResponse\022n\n\023GetTotalMemberCount\022*.outer"
      ".chatroom.GetTotalMemberCountRequest\032+.o"
      "uter.chatroom.GetTotalMemberCountRespons"
      "e\022b\n\017SendRoomMessage\022&.outer.chatroom.Se"
      "ndRoomMessageRequest\032\'.outer.chatroom.Se"
      "ndRoomMessageResponse\022b\n\017QueryRoomDetail"
      "\022&.outer.chatroom.QueryRoomDetailRequest"
      "\032\'.outer.chatroom.QueryRoomDetailRespons"
      "eB*\n\034com.cmcc.littlec.proto.outerB\010Chatr"
      "oomP\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3733);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "outer/chatroom.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2ferrcode_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_outer_2fchatroom_2eproto
namespace outer {
namespace chatroom {
const ::google::protobuf::EnumDescriptor* ERoomState_descriptor() {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_outer_2fchatroom_2eproto::file_level_enum_descriptors[0];
}
bool ERoomState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMsgType_descriptor() {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_outer_2fchatroom_2eproto::file_level_enum_descriptors[1];
}
bool EMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERole_descriptor() {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_outer_2fchatroom_2eproto::file_level_enum_descriptors[2];
}
bool ERole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESignalType_descriptor() {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_outer_2fchatroom_2eproto::file_level_enum_descriptors[3];
}
bool ESignalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ChatroomInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatroomInfo::kRoomNameFieldNumber;
const int ChatroomInfo::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatroomInfo::ChatroomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsChatroomInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.ChatroomInfo)
}
ChatroomInfo::ChatroomInfo(const ChatroomInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_name().size() > 0) {
    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.ChatroomInfo)
}

void ChatroomInfo::SharedCtor() {
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ChatroomInfo::~ChatroomInfo() {
  // @@protoc_insertion_point(destructor:outer.chatroom.ChatroomInfo)
  SharedDtor();
}

void ChatroomInfo::SharedDtor() {
  room_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatroomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatroomInfo::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatroomInfo& ChatroomInfo::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsChatroomInfo();
  return *internal_default_instance();
}

ChatroomInfo* ChatroomInfo::New(::google::protobuf::Arena* arena) const {
  ChatroomInfo* n = new ChatroomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatroomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.ChatroomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ChatroomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.ChatroomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string room_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_name().data(), static_cast<int>(this->room_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.ChatroomInfo.room_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.ChatroomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.ChatroomInfo)
  return false;
#undef DO_
}

void ChatroomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.ChatroomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_name = 1;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), static_cast<int>(this->room_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.ChatroomInfo.room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_name(), output);
  }

  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->room_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.ChatroomInfo)
}

::google::protobuf::uint8* ChatroomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.ChatroomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_name = 1;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), static_cast<int>(this->room_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.ChatroomInfo.room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_name(), target);
  }

  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->room_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.ChatroomInfo)
  return target;
}

size_t ChatroomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.ChatroomInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string room_name = 1;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_name());
  }

  // uint64 room_id = 2;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatroomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.ChatroomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatroomInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatroomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.ChatroomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.ChatroomInfo)
    MergeFrom(*source);
  }
}

void ChatroomInfo::MergeFrom(const ChatroomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.ChatroomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_name().size() > 0) {

    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void ChatroomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.ChatroomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatroomInfo::CopyFrom(const ChatroomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.ChatroomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatroomInfo::IsInitialized() const {
  return true;
}

void ChatroomInfo::Swap(ChatroomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatroomInfo::InternalSwap(ChatroomInfo* other) {
  using std::swap;
  room_name_.Swap(&other->room_name_);
  swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatroomInfo::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Crew::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Crew::kUsernameFieldNumber;
const int Crew::kAppkeyFieldNumber;
const int Crew::kNickFieldNumber;
const int Crew::kRoleFieldNumber;
const int Crew::kModifiedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Crew::Crew()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsCrew();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.Crew)
}
Crew::Crew(const Crew& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nick().size() > 0) {
    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  modified_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modified().size() > 0) {
    modified_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modified_);
  }
  role_ = from.role_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.Crew)
}

void Crew::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modified_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_ = 0;
  _cached_size_ = 0;
}

Crew::~Crew() {
  // @@protoc_insertion_point(destructor:outer.chatroom.Crew)
  SharedDtor();
}

void Crew::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modified_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Crew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Crew::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Crew& Crew::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsCrew();
  return *internal_default_instance();
}

Crew* Crew::New(::google::protobuf::Arena* arena) const {
  Crew* n = new Crew;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Crew::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.Crew)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modified_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_ = 0;
  _internal_metadata_.Clear();
}

bool Crew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.Crew)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.Crew.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appkey().data(), static_cast<int>(this->appkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.Crew.appkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nick().data(), static_cast<int>(this->nick().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.Crew.nick"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .outer.chatroom.ERole role = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_role(static_cast< ::outer::chatroom::ERole >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string modified = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modified()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modified().data(), static_cast<int>(this->modified().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.Crew.modified"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.Crew)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.Crew)
  return false;
#undef DO_
}

void Crew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.Crew)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.Crew.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.Crew.appkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // string nick = 3;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), static_cast<int>(this->nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.Crew.nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nick(), output);
  }

  // .outer.chatroom.ERole role = 4;
  if (this->role() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->role(), output);
  }

  // string modified = 5;
  if (this->modified().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modified().data(), static_cast<int>(this->modified().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.Crew.modified");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->modified(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.Crew)
}

::google::protobuf::uint8* Crew::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.Crew)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.Crew.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.Crew.appkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appkey(), target);
  }

  // string nick = 3;
  if (this->nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick().data(), static_cast<int>(this->nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.Crew.nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick(), target);
  }

  // .outer.chatroom.ERole role = 4;
  if (this->role() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->role(), target);
  }

  // string modified = 5;
  if (this->modified().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modified().data(), static_cast<int>(this->modified().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.Crew.modified");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->modified(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.Crew)
  return target;
}

size_t Crew::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.Crew)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  // string nick = 3;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick());
  }

  // string modified = 5;
  if (this->modified().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modified());
  }

  // .outer.chatroom.ERole role = 4;
  if (this->role() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Crew::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.Crew)
  GOOGLE_DCHECK_NE(&from, this);
  const Crew* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Crew>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.Crew)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.Crew)
    MergeFrom(*source);
  }
}

void Crew::MergeFrom(const Crew& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.Crew)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.modified().size() > 0) {

    modified_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modified_);
  }
  if (from.role() != 0) {
    set_role(from.role());
  }
}

void Crew::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.Crew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Crew::CopyFrom(const Crew& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.Crew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crew::IsInitialized() const {
  return true;
}

void Crew::Swap(Crew* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Crew::InternalSwap(Crew* other) {
  using std::swap;
  username_.Swap(&other->username_);
  appkey_.Swap(&other->appkey_);
  nick_.Swap(&other->nick_);
  modified_.Swap(&other->modified_);
  swap(role_, other->role_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Crew::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatroomDetail::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatroomDetail::kOwnerNameFieldNumber;
const int ChatroomDetail::kRoomNameFieldNumber;
const int ChatroomDetail::kRoomIdFieldNumber;
const int ChatroomDetail::kMemberCountFieldNumber;
const int ChatroomDetail::kCreatedFieldNumber;
const int ChatroomDetail::kDescFieldNumber;
const int ChatroomDetail::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatroomDetail::ChatroomDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsChatroomDetail();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.ChatroomDetail)
}
ChatroomDetail::ChatroomDetail(const ChatroomDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      members_(from.members_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.owner_name().size() > 0) {
    owner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
  }
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_name().size() > 0) {
    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.desc().size() > 0) {
    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(member_count_));
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.ChatroomDetail)
}

void ChatroomDetail::SharedCtor() {
  owner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_count_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(member_count_));
  _cached_size_ = 0;
}

ChatroomDetail::~ChatroomDetail() {
  // @@protoc_insertion_point(destructor:outer.chatroom.ChatroomDetail)
  SharedDtor();
}

void ChatroomDetail::SharedDtor() {
  owner_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatroomDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatroomDetail::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatroomDetail& ChatroomDetail::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsChatroomDetail();
  return *internal_default_instance();
}

ChatroomDetail* ChatroomDetail::New(::google::protobuf::Arena* arena) const {
  ChatroomDetail* n = new ChatroomDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatroomDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.ChatroomDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_count_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(member_count_));
  _internal_metadata_.Clear();
}

bool ChatroomDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.ChatroomDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string owner_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_name().data(), static_cast<int>(this->owner_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.ChatroomDetail.owner_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string room_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_name().data(), static_cast<int>(this->room_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.ChatroomDetail.room_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 member_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 created = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string desc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->desc().data(), static_cast<int>(this->desc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.ChatroomDetail.desc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .outer.chatroom.Crew members = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.ChatroomDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.ChatroomDetail)
  return false;
#undef DO_
}

void ChatroomDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.ChatroomDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_name = 1;
  if (this->owner_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_name().data(), static_cast<int>(this->owner_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.ChatroomDetail.owner_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->owner_name(), output);
  }

  // string room_name = 2;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), static_cast<int>(this->room_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.ChatroomDetail.room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->room_name(), output);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->room_id(), output);
  }

  // uint32 member_count = 4;
  if (this->member_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->member_count(), output);
  }

  // uint64 created = 5;
  if (this->created() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->created(), output);
  }

  // string desc = 6;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.ChatroomDetail.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->desc(), output);
  }

  // repeated .outer.chatroom.Crew members = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->members(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.ChatroomDetail)
}

::google::protobuf::uint8* ChatroomDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.ChatroomDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_name = 1;
  if (this->owner_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_name().data(), static_cast<int>(this->owner_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.ChatroomDetail.owner_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->owner_name(), target);
  }

  // string room_name = 2;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), static_cast<int>(this->room_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.ChatroomDetail.room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_name(), target);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->room_id(), target);
  }

  // uint32 member_count = 4;
  if (this->member_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->member_count(), target);
  }

  // uint64 created = 5;
  if (this->created() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->created(), target);
  }

  // string desc = 6;
  if (this->desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->desc().data(), static_cast<int>(this->desc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.ChatroomDetail.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->desc(), target);
  }

  // repeated .outer.chatroom.Crew members = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->members(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.ChatroomDetail)
  return target;
}

size_t ChatroomDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.ChatroomDetail)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .outer.chatroom.Crew members = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  // string owner_name = 1;
  if (this->owner_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner_name());
  }

  // string room_name = 2;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_name());
  }

  // string desc = 6;
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // uint64 created = 5;
  if (this->created() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->created());
  }

  // uint32 member_count = 4;
  if (this->member_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->member_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatroomDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.ChatroomDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatroomDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatroomDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.ChatroomDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.ChatroomDetail)
    MergeFrom(*source);
  }
}

void ChatroomDetail::MergeFrom(const ChatroomDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.ChatroomDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from.owner_name().size() > 0) {

    owner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
  }
  if (from.room_name().size() > 0) {

    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  if (from.desc().size() > 0) {

    desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.created() != 0) {
    set_created(from.created());
  }
  if (from.member_count() != 0) {
    set_member_count(from.member_count());
  }
}

void ChatroomDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.ChatroomDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatroomDetail::CopyFrom(const ChatroomDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.ChatroomDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatroomDetail::IsInitialized() const {
  return true;
}

void ChatroomDetail::Swap(ChatroomDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatroomDetail::InternalSwap(ChatroomDetail* other) {
  using std::swap;
  members_.InternalSwap(&other->members_);
  owner_name_.Swap(&other->owner_name_);
  room_name_.Swap(&other->room_name_);
  desc_.Swap(&other->desc_);
  swap(room_id_, other->room_id_);
  swap(created_, other->created_);
  swap(member_count_, other->member_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatroomDetail::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatroomSignal::InitAsDefaultInstance() {
  ::outer::chatroom::_ChatroomSignal_default_instance_._instance.get_mutable()->chatroom_info_ = const_cast< ::outer::chatroom::ChatroomDetail*>(
      ::outer::chatroom::ChatroomDetail::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatroomSignal::kSignalTypeFieldNumber;
const int ChatroomSignal::kCrewInfoFieldNumber;
const int ChatroomSignal::kChatroomInfoFieldNumber;
const int ChatroomSignal::kGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatroomSignal::ChatroomSignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsChatroomSignal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.ChatroomSignal)
}
ChatroomSignal::ChatroomSignal(const ChatroomSignal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      crew_info_(from.crew_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_chatroom_info()) {
    chatroom_info_ = new ::outer::chatroom::ChatroomDetail(*from.chatroom_info_);
  } else {
    chatroom_info_ = NULL;
  }
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_type_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(signal_type_));
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.ChatroomSignal)
}

void ChatroomSignal::SharedCtor() {
  ::memset(&chatroom_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_type_) -
      reinterpret_cast<char*>(&chatroom_info_)) + sizeof(signal_type_));
  _cached_size_ = 0;
}

ChatroomSignal::~ChatroomSignal() {
  // @@protoc_insertion_point(destructor:outer.chatroom.ChatroomSignal)
  SharedDtor();
}

void ChatroomSignal::SharedDtor() {
  if (this != internal_default_instance()) delete chatroom_info_;
}

void ChatroomSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatroomSignal::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatroomSignal& ChatroomSignal::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsChatroomSignal();
  return *internal_default_instance();
}

ChatroomSignal* ChatroomSignal::New(::google::protobuf::Arena* arena) const {
  ChatroomSignal* n = new ChatroomSignal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatroomSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.ChatroomSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crew_info_.Clear();
  if (GetArenaNoVirtual() == NULL && chatroom_info_ != NULL) {
    delete chatroom_info_;
  }
  chatroom_info_ = NULL;
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_type_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(signal_type_));
  _internal_metadata_.Clear();
}

bool ChatroomSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.ChatroomSignal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .outer.chatroom.ESignalType signal_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_signal_type(static_cast< ::outer::chatroom::ESignalType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .outer.chatroom.Crew crew_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_crew_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .outer.chatroom.ChatroomDetail chatroom_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chatroom_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 guid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.ChatroomSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.ChatroomSignal)
  return false;
#undef DO_
}

void ChatroomSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.ChatroomSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .outer.chatroom.ESignalType signal_type = 1;
  if (this->signal_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->signal_type(), output);
  }

  // repeated .outer.chatroom.Crew crew_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crew_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->crew_info(static_cast<int>(i)), output);
  }

  // .outer.chatroom.ChatroomDetail chatroom_info = 3;
  if (this->has_chatroom_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->chatroom_info_, output);
  }

  // uint64 guid = 4;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.ChatroomSignal)
}

::google::protobuf::uint8* ChatroomSignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.ChatroomSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .outer.chatroom.ESignalType signal_type = 1;
  if (this->signal_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->signal_type(), target);
  }

  // repeated .outer.chatroom.Crew crew_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crew_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->crew_info(static_cast<int>(i)), deterministic, target);
  }

  // .outer.chatroom.ChatroomDetail chatroom_info = 3;
  if (this->has_chatroom_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->chatroom_info_, deterministic, target);
  }

  // uint64 guid = 4;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.ChatroomSignal)
  return target;
}

size_t ChatroomSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.ChatroomSignal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .outer.chatroom.Crew crew_info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->crew_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->crew_info(static_cast<int>(i)));
    }
  }

  // .outer.chatroom.ChatroomDetail chatroom_info = 3;
  if (this->has_chatroom_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->chatroom_info_);
  }

  // uint64 guid = 4;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // .outer.chatroom.ESignalType signal_type = 1;
  if (this->signal_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->signal_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatroomSignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.ChatroomSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatroomSignal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatroomSignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.ChatroomSignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.ChatroomSignal)
    MergeFrom(*source);
  }
}

void ChatroomSignal::MergeFrom(const ChatroomSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.ChatroomSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crew_info_.MergeFrom(from.crew_info_);
  if (from.has_chatroom_info()) {
    mutable_chatroom_info()->::outer::chatroom::ChatroomDetail::MergeFrom(from.chatroom_info());
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.signal_type() != 0) {
    set_signal_type(from.signal_type());
  }
}

void ChatroomSignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.ChatroomSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatroomSignal::CopyFrom(const ChatroomSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.ChatroomSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatroomSignal::IsInitialized() const {
  return true;
}

void ChatroomSignal::Swap(ChatroomSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatroomSignal::InternalSwap(ChatroomSignal* other) {
  using std::swap;
  crew_info_.InternalSwap(&other->crew_info_);
  swap(chatroom_info_, other->chatroom_info_);
  swap(guid_, other->guid_);
  swap(signal_type_, other->signal_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatroomSignal::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchRoomByNameRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchRoomByNameRequest::kFromUsernameFieldNumber;
const int SearchRoomByNameRequest::kAppkeyFieldNumber;
const int SearchRoomByNameRequest::kRoomNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchRoomByNameRequest::SearchRoomByNameRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSearchRoomByNameRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.SearchRoomByNameRequest)
}
SearchRoomByNameRequest::SearchRoomByNameRequest(const SearchRoomByNameRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_username().size() > 0) {
    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_name().size() > 0) {
    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.SearchRoomByNameRequest)
}

void SearchRoomByNameRequest::SharedCtor() {
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SearchRoomByNameRequest::~SearchRoomByNameRequest() {
  // @@protoc_insertion_point(destructor:outer.chatroom.SearchRoomByNameRequest)
  SharedDtor();
}

void SearchRoomByNameRequest::SharedDtor() {
  from_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchRoomByNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchRoomByNameRequest::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchRoomByNameRequest& SearchRoomByNameRequest::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSearchRoomByNameRequest();
  return *internal_default_instance();
}

SearchRoomByNameRequest* SearchRoomByNameRequest::New(::google::protobuf::Arena* arena) const {
  SearchRoomByNameRequest* n = new SearchRoomByNameRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchRoomByNameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.SearchRoomByNameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SearchRoomByNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.SearchRoomByNameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_username().data(), static_cast<int>(this->from_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.SearchRoomByNameRequest.from_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appkey().data(), static_cast<int>(this->appkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.SearchRoomByNameRequest.appkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string room_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_name().data(), static_cast<int>(this->room_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.SearchRoomByNameRequest.room_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.SearchRoomByNameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.SearchRoomByNameRequest)
  return false;
#undef DO_
}

void SearchRoomByNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.SearchRoomByNameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SearchRoomByNameRequest.from_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_username(), output);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SearchRoomByNameRequest.appkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // string room_name = 3;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), static_cast<int>(this->room_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SearchRoomByNameRequest.room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->room_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.SearchRoomByNameRequest)
}

::google::protobuf::uint8* SearchRoomByNameRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.SearchRoomByNameRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SearchRoomByNameRequest.from_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_username(), target);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SearchRoomByNameRequest.appkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appkey(), target);
  }

  // string room_name = 3;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), static_cast<int>(this->room_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SearchRoomByNameRequest.room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.SearchRoomByNameRequest)
  return target;
}

size_t SearchRoomByNameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.SearchRoomByNameRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string from_username = 1;
  if (this->from_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_username());
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  // string room_name = 3;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRoomByNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.SearchRoomByNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchRoomByNameRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchRoomByNameRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.SearchRoomByNameRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.SearchRoomByNameRequest)
    MergeFrom(*source);
  }
}

void SearchRoomByNameRequest::MergeFrom(const SearchRoomByNameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.SearchRoomByNameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_username().size() > 0) {

    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.room_name().size() > 0) {

    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
}

void SearchRoomByNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.SearchRoomByNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRoomByNameRequest::CopyFrom(const SearchRoomByNameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.SearchRoomByNameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRoomByNameRequest::IsInitialized() const {
  return true;
}

void SearchRoomByNameRequest::Swap(SearchRoomByNameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchRoomByNameRequest::InternalSwap(SearchRoomByNameRequest* other) {
  using std::swap;
  from_username_.Swap(&other->from_username_);
  appkey_.Swap(&other->appkey_);
  room_name_.Swap(&other->room_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchRoomByNameRequest::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchRoomByNameResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchRoomByNameResponse::kRoomInfoFieldNumber;
const int SearchRoomByNameResponse::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchRoomByNameResponse::SearchRoomByNameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSearchRoomByNameResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.SearchRoomByNameResponse)
}
SearchRoomByNameResponse::SearchRoomByNameResponse(const SearchRoomByNameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      room_info_(from.room_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.SearchRoomByNameResponse)
}

void SearchRoomByNameResponse::SharedCtor() {
  ret_ = 0;
  _cached_size_ = 0;
}

SearchRoomByNameResponse::~SearchRoomByNameResponse() {
  // @@protoc_insertion_point(destructor:outer.chatroom.SearchRoomByNameResponse)
  SharedDtor();
}

void SearchRoomByNameResponse::SharedDtor() {
}

void SearchRoomByNameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchRoomByNameResponse::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchRoomByNameResponse& SearchRoomByNameResponse::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSearchRoomByNameResponse();
  return *internal_default_instance();
}

SearchRoomByNameResponse* SearchRoomByNameResponse::New(::google::protobuf::Arena* arena) const {
  SearchRoomByNameResponse* n = new SearchRoomByNameResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchRoomByNameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.SearchRoomByNameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_info_.Clear();
  ret_ = 0;
  _internal_metadata_.Clear();
}

bool SearchRoomByNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.SearchRoomByNameResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .outer.chatroom.ChatroomInfo room_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_room_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.errcode.EErrorCode ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::common::errcode::EErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.SearchRoomByNameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.SearchRoomByNameResponse)
  return false;
#undef DO_
}

void SearchRoomByNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.SearchRoomByNameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .outer.chatroom.ChatroomInfo room_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->room_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room_info(static_cast<int>(i)), output);
  }

  // .common.errcode.EErrorCode ret = 2;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.SearchRoomByNameResponse)
}

::google::protobuf::uint8* SearchRoomByNameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.SearchRoomByNameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .outer.chatroom.ChatroomInfo room_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->room_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->room_info(static_cast<int>(i)), deterministic, target);
  }

  // .common.errcode.EErrorCode ret = 2;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.SearchRoomByNameResponse)
  return target;
}

size_t SearchRoomByNameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.SearchRoomByNameResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .outer.chatroom.ChatroomInfo room_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->room_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->room_info(static_cast<int>(i)));
    }
  }

  // .common.errcode.EErrorCode ret = 2;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRoomByNameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.SearchRoomByNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchRoomByNameResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchRoomByNameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.SearchRoomByNameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.SearchRoomByNameResponse)
    MergeFrom(*source);
  }
}

void SearchRoomByNameResponse::MergeFrom(const SearchRoomByNameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.SearchRoomByNameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  room_info_.MergeFrom(from.room_info_);
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void SearchRoomByNameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.SearchRoomByNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRoomByNameResponse::CopyFrom(const SearchRoomByNameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.SearchRoomByNameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRoomByNameResponse::IsInitialized() const {
  return true;
}

void SearchRoomByNameResponse::Swap(SearchRoomByNameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchRoomByNameResponse::InternalSwap(SearchRoomByNameResponse* other) {
  using std::swap;
  room_info_.InternalSwap(&other->room_info_);
  swap(ret_, other->ret_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchRoomByNameResponse::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchRoomByIdRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchRoomByIdRequest::kFromUsernameFieldNumber;
const int SearchRoomByIdRequest::kAppkeyFieldNumber;
const int SearchRoomByIdRequest::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchRoomByIdRequest::SearchRoomByIdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSearchRoomByIdRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.SearchRoomByIdRequest)
}
SearchRoomByIdRequest::SearchRoomByIdRequest(const SearchRoomByIdRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_username().size() > 0) {
    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.SearchRoomByIdRequest)
}

void SearchRoomByIdRequest::SharedCtor() {
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

SearchRoomByIdRequest::~SearchRoomByIdRequest() {
  // @@protoc_insertion_point(destructor:outer.chatroom.SearchRoomByIdRequest)
  SharedDtor();
}

void SearchRoomByIdRequest::SharedDtor() {
  from_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SearchRoomByIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchRoomByIdRequest::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchRoomByIdRequest& SearchRoomByIdRequest::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSearchRoomByIdRequest();
  return *internal_default_instance();
}

SearchRoomByIdRequest* SearchRoomByIdRequest::New(::google::protobuf::Arena* arena) const {
  SearchRoomByIdRequest* n = new SearchRoomByIdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchRoomByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.SearchRoomByIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool SearchRoomByIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.SearchRoomByIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_username().data(), static_cast<int>(this->from_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.SearchRoomByIdRequest.from_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appkey().data(), static_cast<int>(this->appkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.SearchRoomByIdRequest.appkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.SearchRoomByIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.SearchRoomByIdRequest)
  return false;
#undef DO_
}

void SearchRoomByIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.SearchRoomByIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SearchRoomByIdRequest.from_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_username(), output);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SearchRoomByIdRequest.appkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->room_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.SearchRoomByIdRequest)
}

::google::protobuf::uint8* SearchRoomByIdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.SearchRoomByIdRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SearchRoomByIdRequest.from_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_username(), target);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SearchRoomByIdRequest.appkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appkey(), target);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->room_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.SearchRoomByIdRequest)
  return target;
}

size_t SearchRoomByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.SearchRoomByIdRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string from_username = 1;
  if (this->from_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_username());
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRoomByIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.SearchRoomByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchRoomByIdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchRoomByIdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.SearchRoomByIdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.SearchRoomByIdRequest)
    MergeFrom(*source);
  }
}

void SearchRoomByIdRequest::MergeFrom(const SearchRoomByIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.SearchRoomByIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_username().size() > 0) {

    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void SearchRoomByIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.SearchRoomByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRoomByIdRequest::CopyFrom(const SearchRoomByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.SearchRoomByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRoomByIdRequest::IsInitialized() const {
  return true;
}

void SearchRoomByIdRequest::Swap(SearchRoomByIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchRoomByIdRequest::InternalSwap(SearchRoomByIdRequest* other) {
  using std::swap;
  from_username_.Swap(&other->from_username_);
  appkey_.Swap(&other->appkey_);
  swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchRoomByIdRequest::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SearchRoomByIdResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchRoomByIdResponse::kRoomInfoFieldNumber;
const int SearchRoomByIdResponse::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchRoomByIdResponse::SearchRoomByIdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSearchRoomByIdResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.SearchRoomByIdResponse)
}
SearchRoomByIdResponse::SearchRoomByIdResponse(const SearchRoomByIdResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      room_info_(from.room_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.SearchRoomByIdResponse)
}

void SearchRoomByIdResponse::SharedCtor() {
  ret_ = 0;
  _cached_size_ = 0;
}

SearchRoomByIdResponse::~SearchRoomByIdResponse() {
  // @@protoc_insertion_point(destructor:outer.chatroom.SearchRoomByIdResponse)
  SharedDtor();
}

void SearchRoomByIdResponse::SharedDtor() {
}

void SearchRoomByIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchRoomByIdResponse::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SearchRoomByIdResponse& SearchRoomByIdResponse::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSearchRoomByIdResponse();
  return *internal_default_instance();
}

SearchRoomByIdResponse* SearchRoomByIdResponse::New(::google::protobuf::Arena* arena) const {
  SearchRoomByIdResponse* n = new SearchRoomByIdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchRoomByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.SearchRoomByIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_info_.Clear();
  ret_ = 0;
  _internal_metadata_.Clear();
}

bool SearchRoomByIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.SearchRoomByIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .outer.chatroom.ChatroomInfo room_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_room_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.errcode.EErrorCode ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::common::errcode::EErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.SearchRoomByIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.SearchRoomByIdResponse)
  return false;
#undef DO_
}

void SearchRoomByIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.SearchRoomByIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .outer.chatroom.ChatroomInfo room_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->room_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room_info(static_cast<int>(i)), output);
  }

  // .common.errcode.EErrorCode ret = 2;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.SearchRoomByIdResponse)
}

::google::protobuf::uint8* SearchRoomByIdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.SearchRoomByIdResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .outer.chatroom.ChatroomInfo room_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->room_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->room_info(static_cast<int>(i)), deterministic, target);
  }

  // .common.errcode.EErrorCode ret = 2;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.SearchRoomByIdResponse)
  return target;
}

size_t SearchRoomByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.SearchRoomByIdResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .outer.chatroom.ChatroomInfo room_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->room_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->room_info(static_cast<int>(i)));
    }
  }

  // .common.errcode.EErrorCode ret = 2;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchRoomByIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.SearchRoomByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchRoomByIdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchRoomByIdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.SearchRoomByIdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.SearchRoomByIdResponse)
    MergeFrom(*source);
  }
}

void SearchRoomByIdResponse::MergeFrom(const SearchRoomByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.SearchRoomByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  room_info_.MergeFrom(from.room_info_);
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void SearchRoomByIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.SearchRoomByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRoomByIdResponse::CopyFrom(const SearchRoomByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.SearchRoomByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRoomByIdResponse::IsInitialized() const {
  return true;
}

void SearchRoomByIdResponse::Swap(SearchRoomByIdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchRoomByIdResponse::InternalSwap(SearchRoomByIdResponse* other) {
  using std::swap;
  room_info_.InternalSwap(&other->room_info_);
  swap(ret_, other->ret_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchRoomByIdResponse::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRoomListRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRoomListRequest::kFromUsernameFieldNumber;
const int GetRoomListRequest::kAppkeyFieldNumber;
const int GetRoomListRequest::kModifiedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRoomListRequest::GetRoomListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsGetRoomListRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.GetRoomListRequest)
}
GetRoomListRequest::GetRoomListRequest(const GetRoomListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_username().size() > 0) {
    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  modified_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modified().size() > 0) {
    modified_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modified_);
  }
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.GetRoomListRequest)
}

void GetRoomListRequest::SharedCtor() {
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modified_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetRoomListRequest::~GetRoomListRequest() {
  // @@protoc_insertion_point(destructor:outer.chatroom.GetRoomListRequest)
  SharedDtor();
}

void GetRoomListRequest::SharedDtor() {
  from_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modified_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetRoomListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomListRequest::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRoomListRequest& GetRoomListRequest::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsGetRoomListRequest();
  return *internal_default_instance();
}

GetRoomListRequest* GetRoomListRequest::New(::google::protobuf::Arena* arena) const {
  GetRoomListRequest* n = new GetRoomListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRoomListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.GetRoomListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modified_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetRoomListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.GetRoomListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_username().data(), static_cast<int>(this->from_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.GetRoomListRequest.from_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appkey().data(), static_cast<int>(this->appkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.GetRoomListRequest.appkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string modified = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modified()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modified().data(), static_cast<int>(this->modified().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.GetRoomListRequest.modified"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.GetRoomListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.GetRoomListRequest)
  return false;
#undef DO_
}

void GetRoomListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.GetRoomListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.GetRoomListRequest.from_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_username(), output);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.GetRoomListRequest.appkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // string modified = 3;
  if (this->modified().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modified().data(), static_cast<int>(this->modified().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.GetRoomListRequest.modified");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->modified(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.GetRoomListRequest)
}

::google::protobuf::uint8* GetRoomListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.GetRoomListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.GetRoomListRequest.from_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_username(), target);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.GetRoomListRequest.appkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appkey(), target);
  }

  // string modified = 3;
  if (this->modified().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modified().data(), static_cast<int>(this->modified().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.GetRoomListRequest.modified");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->modified(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.GetRoomListRequest)
  return target;
}

size_t GetRoomListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.GetRoomListRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string from_username = 1;
  if (this->from_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_username());
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  // string modified = 3;
  if (this->modified().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modified());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.GetRoomListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRoomListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRoomListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.GetRoomListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.GetRoomListRequest)
    MergeFrom(*source);
  }
}

void GetRoomListRequest::MergeFrom(const GetRoomListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.GetRoomListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_username().size() > 0) {

    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.modified().size() > 0) {

    modified_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modified_);
  }
}

void GetRoomListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.GetRoomListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomListRequest::CopyFrom(const GetRoomListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.GetRoomListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomListRequest::IsInitialized() const {
  return true;
}

void GetRoomListRequest::Swap(GetRoomListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRoomListRequest::InternalSwap(GetRoomListRequest* other) {
  using std::swap;
  from_username_.Swap(&other->from_username_);
  appkey_.Swap(&other->appkey_);
  modified_.Swap(&other->modified_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRoomListRequest::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRoomListResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRoomListResponse::kRoomInfoFieldNumber;
const int GetRoomListResponse::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRoomListResponse::GetRoomListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsGetRoomListResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.GetRoomListResponse)
}
GetRoomListResponse::GetRoomListResponse(const GetRoomListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      room_info_(from.room_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.GetRoomListResponse)
}

void GetRoomListResponse::SharedCtor() {
  ret_ = 0;
  _cached_size_ = 0;
}

GetRoomListResponse::~GetRoomListResponse() {
  // @@protoc_insertion_point(destructor:outer.chatroom.GetRoomListResponse)
  SharedDtor();
}

void GetRoomListResponse::SharedDtor() {
}

void GetRoomListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomListResponse::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRoomListResponse& GetRoomListResponse::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsGetRoomListResponse();
  return *internal_default_instance();
}

GetRoomListResponse* GetRoomListResponse::New(::google::protobuf::Arena* arena) const {
  GetRoomListResponse* n = new GetRoomListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRoomListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.GetRoomListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_info_.Clear();
  ret_ = 0;
  _internal_metadata_.Clear();
}

bool GetRoomListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.GetRoomListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .outer.chatroom.ChatroomInfo room_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_room_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.errcode.EErrorCode ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::common::errcode::EErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.GetRoomListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.GetRoomListResponse)
  return false;
#undef DO_
}

void GetRoomListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.GetRoomListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .outer.chatroom.ChatroomInfo room_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->room_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room_info(static_cast<int>(i)), output);
  }

  // .common.errcode.EErrorCode ret = 2;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.GetRoomListResponse)
}

::google::protobuf::uint8* GetRoomListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.GetRoomListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .outer.chatroom.ChatroomInfo room_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->room_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->room_info(static_cast<int>(i)), deterministic, target);
  }

  // .common.errcode.EErrorCode ret = 2;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.GetRoomListResponse)
  return target;
}

size_t GetRoomListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.GetRoomListResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .outer.chatroom.ChatroomInfo room_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->room_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->room_info(static_cast<int>(i)));
    }
  }

  // .common.errcode.EErrorCode ret = 2;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.GetRoomListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRoomListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRoomListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.GetRoomListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.GetRoomListResponse)
    MergeFrom(*source);
  }
}

void GetRoomListResponse::MergeFrom(const GetRoomListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.GetRoomListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  room_info_.MergeFrom(from.room_info_);
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void GetRoomListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.GetRoomListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomListResponse::CopyFrom(const GetRoomListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.GetRoomListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomListResponse::IsInitialized() const {
  return true;
}

void GetRoomListResponse::Swap(GetRoomListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRoomListResponse::InternalSwap(GetRoomListResponse* other) {
  using std::swap;
  room_info_.InternalSwap(&other->room_info_);
  swap(ret_, other->ret_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRoomListResponse::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryRoomDetailRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryRoomDetailRequest::kFromUsernameFieldNumber;
const int QueryRoomDetailRequest::kAppkeyFieldNumber;
const int QueryRoomDetailRequest::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryRoomDetailRequest::QueryRoomDetailRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsQueryRoomDetailRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.QueryRoomDetailRequest)
}
QueryRoomDetailRequest::QueryRoomDetailRequest(const QueryRoomDetailRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_username().size() > 0) {
    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.QueryRoomDetailRequest)
}

void QueryRoomDetailRequest::SharedCtor() {
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

QueryRoomDetailRequest::~QueryRoomDetailRequest() {
  // @@protoc_insertion_point(destructor:outer.chatroom.QueryRoomDetailRequest)
  SharedDtor();
}

void QueryRoomDetailRequest::SharedDtor() {
  from_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryRoomDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryRoomDetailRequest::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryRoomDetailRequest& QueryRoomDetailRequest::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsQueryRoomDetailRequest();
  return *internal_default_instance();
}

QueryRoomDetailRequest* QueryRoomDetailRequest::New(::google::protobuf::Arena* arena) const {
  QueryRoomDetailRequest* n = new QueryRoomDetailRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryRoomDetailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.QueryRoomDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool QueryRoomDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.QueryRoomDetailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_username().data(), static_cast<int>(this->from_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.QueryRoomDetailRequest.from_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appkey().data(), static_cast<int>(this->appkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.QueryRoomDetailRequest.appkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.QueryRoomDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.QueryRoomDetailRequest)
  return false;
#undef DO_
}

void QueryRoomDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.QueryRoomDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.QueryRoomDetailRequest.from_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_username(), output);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.QueryRoomDetailRequest.appkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->room_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.QueryRoomDetailRequest)
}

::google::protobuf::uint8* QueryRoomDetailRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.QueryRoomDetailRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.QueryRoomDetailRequest.from_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_username(), target);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.QueryRoomDetailRequest.appkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appkey(), target);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->room_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.QueryRoomDetailRequest)
  return target;
}

size_t QueryRoomDetailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.QueryRoomDetailRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string from_username = 1;
  if (this->from_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_username());
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRoomDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.QueryRoomDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRoomDetailRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryRoomDetailRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.QueryRoomDetailRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.QueryRoomDetailRequest)
    MergeFrom(*source);
  }
}

void QueryRoomDetailRequest::MergeFrom(const QueryRoomDetailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.QueryRoomDetailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_username().size() > 0) {

    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void QueryRoomDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.QueryRoomDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRoomDetailRequest::CopyFrom(const QueryRoomDetailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.QueryRoomDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRoomDetailRequest::IsInitialized() const {
  return true;
}

void QueryRoomDetailRequest::Swap(QueryRoomDetailRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryRoomDetailRequest::InternalSwap(QueryRoomDetailRequest* other) {
  using std::swap;
  from_username_.Swap(&other->from_username_);
  appkey_.Swap(&other->appkey_);
  swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryRoomDetailRequest::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryRoomDetailResponse::InitAsDefaultInstance() {
  ::outer::chatroom::_QueryRoomDetailResponse_default_instance_._instance.get_mutable()->room_detail_ = const_cast< ::outer::chatroom::ChatroomDetail*>(
      ::outer::chatroom::ChatroomDetail::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryRoomDetailResponse::kRoomDetailFieldNumber;
const int QueryRoomDetailResponse::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryRoomDetailResponse::QueryRoomDetailResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsQueryRoomDetailResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.QueryRoomDetailResponse)
}
QueryRoomDetailResponse::QueryRoomDetailResponse(const QueryRoomDetailResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_room_detail()) {
    room_detail_ = new ::outer::chatroom::ChatroomDetail(*from.room_detail_);
  } else {
    room_detail_ = NULL;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.QueryRoomDetailResponse)
}

void QueryRoomDetailResponse::SharedCtor() {
  ::memset(&room_detail_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&room_detail_)) + sizeof(ret_));
  _cached_size_ = 0;
}

QueryRoomDetailResponse::~QueryRoomDetailResponse() {
  // @@protoc_insertion_point(destructor:outer.chatroom.QueryRoomDetailResponse)
  SharedDtor();
}

void QueryRoomDetailResponse::SharedDtor() {
  if (this != internal_default_instance()) delete room_detail_;
}

void QueryRoomDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryRoomDetailResponse::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryRoomDetailResponse& QueryRoomDetailResponse::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsQueryRoomDetailResponse();
  return *internal_default_instance();
}

QueryRoomDetailResponse* QueryRoomDetailResponse::New(::google::protobuf::Arena* arena) const {
  QueryRoomDetailResponse* n = new QueryRoomDetailResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryRoomDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.QueryRoomDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && room_detail_ != NULL) {
    delete room_detail_;
  }
  room_detail_ = NULL;
  ret_ = 0;
  _internal_metadata_.Clear();
}

bool QueryRoomDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.QueryRoomDetailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .outer.chatroom.ChatroomDetail room_detail = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.errcode.EErrorCode ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::common::errcode::EErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.QueryRoomDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.QueryRoomDetailResponse)
  return false;
#undef DO_
}

void QueryRoomDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.QueryRoomDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .outer.chatroom.ChatroomDetail room_detail = 1;
  if (this->has_room_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->room_detail_, output);
  }

  // .common.errcode.EErrorCode ret = 2;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.QueryRoomDetailResponse)
}

::google::protobuf::uint8* QueryRoomDetailResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.QueryRoomDetailResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .outer.chatroom.ChatroomDetail room_detail = 1;
  if (this->has_room_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->room_detail_, deterministic, target);
  }

  // .common.errcode.EErrorCode ret = 2;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.QueryRoomDetailResponse)
  return target;
}

size_t QueryRoomDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.QueryRoomDetailResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .outer.chatroom.ChatroomDetail room_detail = 1;
  if (this->has_room_detail()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->room_detail_);
  }

  // .common.errcode.EErrorCode ret = 2;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRoomDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.QueryRoomDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRoomDetailResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryRoomDetailResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.QueryRoomDetailResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.QueryRoomDetailResponse)
    MergeFrom(*source);
  }
}

void QueryRoomDetailResponse::MergeFrom(const QueryRoomDetailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.QueryRoomDetailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_room_detail()) {
    mutable_room_detail()->::outer::chatroom::ChatroomDetail::MergeFrom(from.room_detail());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void QueryRoomDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.QueryRoomDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRoomDetailResponse::CopyFrom(const QueryRoomDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.QueryRoomDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRoomDetailResponse::IsInitialized() const {
  return true;
}

void QueryRoomDetailResponse::Swap(QueryRoomDetailResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryRoomDetailResponse::InternalSwap(QueryRoomDetailResponse* other) {
  using std::swap;
  swap(room_detail_, other->room_detail_);
  swap(ret_, other->ret_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryRoomDetailResponse::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetRoomInfoRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRoomInfoRequest::kFromNameFieldNumber;
const int SetRoomInfoRequest::kAppkeyFieldNumber;
const int SetRoomInfoRequest::kRoomIdFieldNumber;
const int SetRoomInfoRequest::kRoomNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRoomInfoRequest::SetRoomInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSetRoomInfoRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.SetRoomInfoRequest)
}
SetRoomInfoRequest::SetRoomInfoRequest(const SetRoomInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_name().size() > 0) {
    from_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_name_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_name().size() > 0) {
    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.SetRoomInfoRequest)
}

void SetRoomInfoRequest::SharedCtor() {
  from_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

SetRoomInfoRequest::~SetRoomInfoRequest() {
  // @@protoc_insertion_point(destructor:outer.chatroom.SetRoomInfoRequest)
  SharedDtor();
}

void SetRoomInfoRequest::SharedDtor() {
  from_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SetRoomInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRoomInfoRequest::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetRoomInfoRequest& SetRoomInfoRequest::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSetRoomInfoRequest();
  return *internal_default_instance();
}

SetRoomInfoRequest* SetRoomInfoRequest::New(::google::protobuf::Arena* arena) const {
  SetRoomInfoRequest* n = new SetRoomInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetRoomInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.SetRoomInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool SetRoomInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.SetRoomInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_name().data(), static_cast<int>(this->from_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.SetRoomInfoRequest.from_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appkey().data(), static_cast<int>(this->appkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.SetRoomInfoRequest.appkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string room_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_name().data(), static_cast<int>(this->room_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.SetRoomInfoRequest.room_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.SetRoomInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.SetRoomInfoRequest)
  return false;
#undef DO_
}

void SetRoomInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.SetRoomInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_name = 1;
  if (this->from_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_name().data(), static_cast<int>(this->from_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SetRoomInfoRequest.from_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_name(), output);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SetRoomInfoRequest.appkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->room_id(), output);
  }

  // string room_name = 4;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), static_cast<int>(this->room_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SetRoomInfoRequest.room_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->room_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.SetRoomInfoRequest)
}

::google::protobuf::uint8* SetRoomInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.SetRoomInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_name = 1;
  if (this->from_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_name().data(), static_cast<int>(this->from_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SetRoomInfoRequest.from_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_name(), target);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SetRoomInfoRequest.appkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appkey(), target);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->room_id(), target);
  }

  // string room_name = 4;
  if (this->room_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_name().data(), static_cast<int>(this->room_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SetRoomInfoRequest.room_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->room_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.SetRoomInfoRequest)
  return target;
}

size_t SetRoomInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.SetRoomInfoRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string from_name = 1;
  if (this->from_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_name());
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  // string room_name = 4;
  if (this->room_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_name());
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRoomInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.SetRoomInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRoomInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetRoomInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.SetRoomInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.SetRoomInfoRequest)
    MergeFrom(*source);
  }
}

void SetRoomInfoRequest::MergeFrom(const SetRoomInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.SetRoomInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_name().size() > 0) {

    from_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_name_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.room_name().size() > 0) {

    room_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_name_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void SetRoomInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.SetRoomInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRoomInfoRequest::CopyFrom(const SetRoomInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.SetRoomInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRoomInfoRequest::IsInitialized() const {
  return true;
}

void SetRoomInfoRequest::Swap(SetRoomInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRoomInfoRequest::InternalSwap(SetRoomInfoRequest* other) {
  using std::swap;
  from_name_.Swap(&other->from_name_);
  appkey_.Swap(&other->appkey_);
  room_name_.Swap(&other->room_name_);
  swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetRoomInfoRequest::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SetRoomInfoResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRoomInfoResponse::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRoomInfoResponse::SetRoomInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSetRoomInfoResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.SetRoomInfoResponse)
}
SetRoomInfoResponse::SetRoomInfoResponse(const SetRoomInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.SetRoomInfoResponse)
}

void SetRoomInfoResponse::SharedCtor() {
  ret_ = 0;
  _cached_size_ = 0;
}

SetRoomInfoResponse::~SetRoomInfoResponse() {
  // @@protoc_insertion_point(destructor:outer.chatroom.SetRoomInfoResponse)
  SharedDtor();
}

void SetRoomInfoResponse::SharedDtor() {
}

void SetRoomInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRoomInfoResponse::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetRoomInfoResponse& SetRoomInfoResponse::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSetRoomInfoResponse();
  return *internal_default_instance();
}

SetRoomInfoResponse* SetRoomInfoResponse::New(::google::protobuf::Arena* arena) const {
  SetRoomInfoResponse* n = new SetRoomInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetRoomInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.SetRoomInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

bool SetRoomInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.SetRoomInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.errcode.EErrorCode ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::common::errcode::EErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.SetRoomInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.SetRoomInfoResponse)
  return false;
#undef DO_
}

void SetRoomInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.SetRoomInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.SetRoomInfoResponse)
}

::google::protobuf::uint8* SetRoomInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.SetRoomInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.SetRoomInfoResponse)
  return target;
}

size_t SetRoomInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.SetRoomInfoResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRoomInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.SetRoomInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRoomInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetRoomInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.SetRoomInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.SetRoomInfoResponse)
    MergeFrom(*source);
  }
}

void SetRoomInfoResponse::MergeFrom(const SetRoomInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.SetRoomInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void SetRoomInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.SetRoomInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRoomInfoResponse::CopyFrom(const SetRoomInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.SetRoomInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRoomInfoResponse::IsInitialized() const {
  return true;
}

void SetRoomInfoResponse::Swap(SetRoomInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRoomInfoResponse::InternalSwap(SetRoomInfoResponse* other) {
  using std::swap;
  swap(ret_, other->ret_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetRoomInfoResponse::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddMemberToRoomRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddMemberToRoomRequest::kFromUsernameFieldNumber;
const int AddMemberToRoomRequest::kAppkeyFieldNumber;
const int AddMemberToRoomRequest::kInviteeNameFieldNumber;
const int AddMemberToRoomRequest::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddMemberToRoomRequest::AddMemberToRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsAddMemberToRoomRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.AddMemberToRoomRequest)
}
AddMemberToRoomRequest::AddMemberToRoomRequest(const AddMemberToRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      invitee_name_(from.invitee_name_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_username().size() > 0) {
    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.AddMemberToRoomRequest)
}

void AddMemberToRoomRequest::SharedCtor() {
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

AddMemberToRoomRequest::~AddMemberToRoomRequest() {
  // @@protoc_insertion_point(destructor:outer.chatroom.AddMemberToRoomRequest)
  SharedDtor();
}

void AddMemberToRoomRequest::SharedDtor() {
  from_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddMemberToRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMemberToRoomRequest::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddMemberToRoomRequest& AddMemberToRoomRequest::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsAddMemberToRoomRequest();
  return *internal_default_instance();
}

AddMemberToRoomRequest* AddMemberToRoomRequest::New(::google::protobuf::Arena* arena) const {
  AddMemberToRoomRequest* n = new AddMemberToRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddMemberToRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.AddMemberToRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invitee_name_.Clear();
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool AddMemberToRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.AddMemberToRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_username().data(), static_cast<int>(this->from_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.AddMemberToRoomRequest.from_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appkey().data(), static_cast<int>(this->appkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.AddMemberToRoomRequest.appkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string invitee_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_invitee_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->invitee_name(this->invitee_name_size() - 1).data(),
            static_cast<int>(this->invitee_name(this->invitee_name_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.AddMemberToRoomRequest.invitee_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.AddMemberToRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.AddMemberToRoomRequest)
  return false;
#undef DO_
}

void AddMemberToRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.AddMemberToRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.AddMemberToRoomRequest.from_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_username(), output);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.AddMemberToRoomRequest.appkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // repeated string invitee_name = 3;
  for (int i = 0, n = this->invitee_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->invitee_name(i).data(), static_cast<int>(this->invitee_name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.AddMemberToRoomRequest.invitee_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->invitee_name(i), output);
  }

  // uint64 room_id = 4;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->room_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.AddMemberToRoomRequest)
}

::google::protobuf::uint8* AddMemberToRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.AddMemberToRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.AddMemberToRoomRequest.from_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_username(), target);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.AddMemberToRoomRequest.appkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appkey(), target);
  }

  // repeated string invitee_name = 3;
  for (int i = 0, n = this->invitee_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->invitee_name(i).data(), static_cast<int>(this->invitee_name(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.AddMemberToRoomRequest.invitee_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->invitee_name(i), target);
  }

  // uint64 room_id = 4;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->room_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.AddMemberToRoomRequest)
  return target;
}

size_t AddMemberToRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.AddMemberToRoomRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string invitee_name = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->invitee_name_size());
  for (int i = 0, n = this->invitee_name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->invitee_name(i));
  }

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_username());
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  // uint64 room_id = 4;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMemberToRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.AddMemberToRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddMemberToRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddMemberToRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.AddMemberToRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.AddMemberToRoomRequest)
    MergeFrom(*source);
  }
}

void AddMemberToRoomRequest::MergeFrom(const AddMemberToRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.AddMemberToRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invitee_name_.MergeFrom(from.invitee_name_);
  if (from.from_username().size() > 0) {

    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void AddMemberToRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.AddMemberToRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMemberToRoomRequest::CopyFrom(const AddMemberToRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.AddMemberToRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMemberToRoomRequest::IsInitialized() const {
  return true;
}

void AddMemberToRoomRequest::Swap(AddMemberToRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddMemberToRoomRequest::InternalSwap(AddMemberToRoomRequest* other) {
  using std::swap;
  invitee_name_.InternalSwap(&other->invitee_name_);
  from_username_.Swap(&other->from_username_);
  appkey_.Swap(&other->appkey_);
  swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddMemberToRoomRequest::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddMemberToRoomResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddMemberToRoomResponse::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddMemberToRoomResponse::AddMemberToRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsAddMemberToRoomResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.AddMemberToRoomResponse)
}
AddMemberToRoomResponse::AddMemberToRoomResponse(const AddMemberToRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.AddMemberToRoomResponse)
}

void AddMemberToRoomResponse::SharedCtor() {
  ret_ = 0;
  _cached_size_ = 0;
}

AddMemberToRoomResponse::~AddMemberToRoomResponse() {
  // @@protoc_insertion_point(destructor:outer.chatroom.AddMemberToRoomResponse)
  SharedDtor();
}

void AddMemberToRoomResponse::SharedDtor() {
}

void AddMemberToRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMemberToRoomResponse::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddMemberToRoomResponse& AddMemberToRoomResponse::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsAddMemberToRoomResponse();
  return *internal_default_instance();
}

AddMemberToRoomResponse* AddMemberToRoomResponse::New(::google::protobuf::Arena* arena) const {
  AddMemberToRoomResponse* n = new AddMemberToRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddMemberToRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.AddMemberToRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

bool AddMemberToRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.AddMemberToRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.errcode.EErrorCode ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::common::errcode::EErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.AddMemberToRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.AddMemberToRoomResponse)
  return false;
#undef DO_
}

void AddMemberToRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.AddMemberToRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.AddMemberToRoomResponse)
}

::google::protobuf::uint8* AddMemberToRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.AddMemberToRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.AddMemberToRoomResponse)
  return target;
}

size_t AddMemberToRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.AddMemberToRoomResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMemberToRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.AddMemberToRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddMemberToRoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddMemberToRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.AddMemberToRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.AddMemberToRoomResponse)
    MergeFrom(*source);
  }
}

void AddMemberToRoomResponse::MergeFrom(const AddMemberToRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.AddMemberToRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void AddMemberToRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.AddMemberToRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMemberToRoomResponse::CopyFrom(const AddMemberToRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.AddMemberToRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMemberToRoomResponse::IsInitialized() const {
  return true;
}

void AddMemberToRoomResponse::Swap(AddMemberToRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddMemberToRoomResponse::InternalSwap(AddMemberToRoomResponse* other) {
  using std::swap;
  swap(ret_, other->ret_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddMemberToRoomResponse::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JoinRoomRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinRoomRequest::kFromUsernameFieldNumber;
const int JoinRoomRequest::kAppkeyFieldNumber;
const int JoinRoomRequest::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinRoomRequest::JoinRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsJoinRoomRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.JoinRoomRequest)
}
JoinRoomRequest::JoinRoomRequest(const JoinRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_username().size() > 0) {
    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.JoinRoomRequest)
}

void JoinRoomRequest::SharedCtor() {
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

JoinRoomRequest::~JoinRoomRequest() {
  // @@protoc_insertion_point(destructor:outer.chatroom.JoinRoomRequest)
  SharedDtor();
}

void JoinRoomRequest::SharedDtor() {
  from_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JoinRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinRoomRequest::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinRoomRequest& JoinRoomRequest::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsJoinRoomRequest();
  return *internal_default_instance();
}

JoinRoomRequest* JoinRoomRequest::New(::google::protobuf::Arena* arena) const {
  JoinRoomRequest* n = new JoinRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.JoinRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool JoinRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.JoinRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_username().data(), static_cast<int>(this->from_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.JoinRoomRequest.from_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appkey().data(), static_cast<int>(this->appkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.JoinRoomRequest.appkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.JoinRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.JoinRoomRequest)
  return false;
#undef DO_
}

void JoinRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.JoinRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.JoinRoomRequest.from_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_username(), output);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.JoinRoomRequest.appkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->room_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.JoinRoomRequest)
}

::google::protobuf::uint8* JoinRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.JoinRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.JoinRoomRequest.from_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_username(), target);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.JoinRoomRequest.appkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appkey(), target);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->room_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.JoinRoomRequest)
  return target;
}

size_t JoinRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.JoinRoomRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string from_username = 1;
  if (this->from_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_username());
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.JoinRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.JoinRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.JoinRoomRequest)
    MergeFrom(*source);
  }
}

void JoinRoomRequest::MergeFrom(const JoinRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.JoinRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_username().size() > 0) {

    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void JoinRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.JoinRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomRequest::CopyFrom(const JoinRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.JoinRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomRequest::IsInitialized() const {
  return true;
}

void JoinRoomRequest::Swap(JoinRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinRoomRequest::InternalSwap(JoinRoomRequest* other) {
  using std::swap;
  from_username_.Swap(&other->from_username_);
  appkey_.Swap(&other->appkey_);
  swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinRoomRequest::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JoinRoomResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinRoomResponse::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinRoomResponse::JoinRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsJoinRoomResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.JoinRoomResponse)
}
JoinRoomResponse::JoinRoomResponse(const JoinRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.JoinRoomResponse)
}

void JoinRoomResponse::SharedCtor() {
  ret_ = 0;
  _cached_size_ = 0;
}

JoinRoomResponse::~JoinRoomResponse() {
  // @@protoc_insertion_point(destructor:outer.chatroom.JoinRoomResponse)
  SharedDtor();
}

void JoinRoomResponse::SharedDtor() {
}

void JoinRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinRoomResponse::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoinRoomResponse& JoinRoomResponse::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsJoinRoomResponse();
  return *internal_default_instance();
}

JoinRoomResponse* JoinRoomResponse::New(::google::protobuf::Arena* arena) const {
  JoinRoomResponse* n = new JoinRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.JoinRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

bool JoinRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.JoinRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.errcode.EErrorCode ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::common::errcode::EErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.JoinRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.JoinRoomResponse)
  return false;
#undef DO_
}

void JoinRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.JoinRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.JoinRoomResponse)
}

::google::protobuf::uint8* JoinRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.JoinRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.JoinRoomResponse)
  return target;
}

size_t JoinRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.JoinRoomResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.JoinRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinRoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.JoinRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.JoinRoomResponse)
    MergeFrom(*source);
  }
}

void JoinRoomResponse::MergeFrom(const JoinRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.JoinRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void JoinRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.JoinRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomResponse::CopyFrom(const JoinRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.JoinRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomResponse::IsInitialized() const {
  return true;
}

void JoinRoomResponse::Swap(JoinRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinRoomResponse::InternalSwap(JoinRoomResponse* other) {
  using std::swap;
  swap(ret_, other->ret_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinRoomResponse::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExitRoomRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExitRoomRequest::kFromUsernameFieldNumber;
const int ExitRoomRequest::kAppkeyFieldNumber;
const int ExitRoomRequest::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExitRoomRequest::ExitRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsExitRoomRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.ExitRoomRequest)
}
ExitRoomRequest::ExitRoomRequest(const ExitRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_username().size() > 0) {
    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.ExitRoomRequest)
}

void ExitRoomRequest::SharedCtor() {
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ExitRoomRequest::~ExitRoomRequest() {
  // @@protoc_insertion_point(destructor:outer.chatroom.ExitRoomRequest)
  SharedDtor();
}

void ExitRoomRequest::SharedDtor() {
  from_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExitRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitRoomRequest::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExitRoomRequest& ExitRoomRequest::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsExitRoomRequest();
  return *internal_default_instance();
}

ExitRoomRequest* ExitRoomRequest::New(::google::protobuf::Arena* arena) const {
  ExitRoomRequest* n = new ExitRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExitRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.ExitRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool ExitRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.ExitRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_username().data(), static_cast<int>(this->from_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.ExitRoomRequest.from_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appkey().data(), static_cast<int>(this->appkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.ExitRoomRequest.appkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.ExitRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.ExitRoomRequest)
  return false;
#undef DO_
}

void ExitRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.ExitRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.ExitRoomRequest.from_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_username(), output);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.ExitRoomRequest.appkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->room_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.ExitRoomRequest)
}

::google::protobuf::uint8* ExitRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.ExitRoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.ExitRoomRequest.from_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_username(), target);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.ExitRoomRequest.appkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appkey(), target);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->room_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.ExitRoomRequest)
  return target;
}

size_t ExitRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.ExitRoomRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string from_username = 1;
  if (this->from_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_username());
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.ExitRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExitRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExitRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.ExitRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.ExitRoomRequest)
    MergeFrom(*source);
  }
}

void ExitRoomRequest::MergeFrom(const ExitRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.ExitRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_username().size() > 0) {

    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void ExitRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.ExitRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitRoomRequest::CopyFrom(const ExitRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.ExitRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitRoomRequest::IsInitialized() const {
  return true;
}

void ExitRoomRequest::Swap(ExitRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExitRoomRequest::InternalSwap(ExitRoomRequest* other) {
  using std::swap;
  from_username_.Swap(&other->from_username_);
  appkey_.Swap(&other->appkey_);
  swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExitRoomRequest::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExitRoomResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExitRoomResponse::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExitRoomResponse::ExitRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsExitRoomResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.ExitRoomResponse)
}
ExitRoomResponse::ExitRoomResponse(const ExitRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.ExitRoomResponse)
}

void ExitRoomResponse::SharedCtor() {
  ret_ = 0;
  _cached_size_ = 0;
}

ExitRoomResponse::~ExitRoomResponse() {
  // @@protoc_insertion_point(destructor:outer.chatroom.ExitRoomResponse)
  SharedDtor();
}

void ExitRoomResponse::SharedDtor() {
}

void ExitRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitRoomResponse::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExitRoomResponse& ExitRoomResponse::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsExitRoomResponse();
  return *internal_default_instance();
}

ExitRoomResponse* ExitRoomResponse::New(::google::protobuf::Arena* arena) const {
  ExitRoomResponse* n = new ExitRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExitRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.ExitRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

bool ExitRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.ExitRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.errcode.EErrorCode ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::common::errcode::EErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.ExitRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.ExitRoomResponse)
  return false;
#undef DO_
}

void ExitRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.ExitRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.ExitRoomResponse)
}

::google::protobuf::uint8* ExitRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.ExitRoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.ExitRoomResponse)
  return target;
}

size_t ExitRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.ExitRoomResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.ExitRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExitRoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExitRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.ExitRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.ExitRoomResponse)
    MergeFrom(*source);
  }
}

void ExitRoomResponse::MergeFrom(const ExitRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.ExitRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void ExitRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.ExitRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitRoomResponse::CopyFrom(const ExitRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.ExitRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitRoomResponse::IsInitialized() const {
  return true;
}

void ExitRoomResponse::Swap(ExitRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExitRoomResponse::InternalSwap(ExitRoomResponse* other) {
  using std::swap;
  swap(ret_, other->ret_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExitRoomResponse::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTotalMemberCountRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTotalMemberCountRequest::kFromUsernameFieldNumber;
const int GetTotalMemberCountRequest::kAppkeyFieldNumber;
const int GetTotalMemberCountRequest::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTotalMemberCountRequest::GetTotalMemberCountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsGetTotalMemberCountRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.GetTotalMemberCountRequest)
}
GetTotalMemberCountRequest::GetTotalMemberCountRequest(const GetTotalMemberCountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_username().size() > 0) {
    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.GetTotalMemberCountRequest)
}

void GetTotalMemberCountRequest::SharedCtor() {
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

GetTotalMemberCountRequest::~GetTotalMemberCountRequest() {
  // @@protoc_insertion_point(destructor:outer.chatroom.GetTotalMemberCountRequest)
  SharedDtor();
}

void GetTotalMemberCountRequest::SharedDtor() {
  from_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetTotalMemberCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTotalMemberCountRequest::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTotalMemberCountRequest& GetTotalMemberCountRequest::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsGetTotalMemberCountRequest();
  return *internal_default_instance();
}

GetTotalMemberCountRequest* GetTotalMemberCountRequest::New(::google::protobuf::Arena* arena) const {
  GetTotalMemberCountRequest* n = new GetTotalMemberCountRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTotalMemberCountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.GetTotalMemberCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetTotalMemberCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.GetTotalMemberCountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_username().data(), static_cast<int>(this->from_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.GetTotalMemberCountRequest.from_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appkey().data(), static_cast<int>(this->appkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.GetTotalMemberCountRequest.appkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.GetTotalMemberCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.GetTotalMemberCountRequest)
  return false;
#undef DO_
}

void GetTotalMemberCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.GetTotalMemberCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.GetTotalMemberCountRequest.from_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_username(), output);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.GetTotalMemberCountRequest.appkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->room_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.GetTotalMemberCountRequest)
}

::google::protobuf::uint8* GetTotalMemberCountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.GetTotalMemberCountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.GetTotalMemberCountRequest.from_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_username(), target);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.GetTotalMemberCountRequest.appkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appkey(), target);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->room_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.GetTotalMemberCountRequest)
  return target;
}

size_t GetTotalMemberCountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.GetTotalMemberCountRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string from_username = 1;
  if (this->from_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_username());
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTotalMemberCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.GetTotalMemberCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTotalMemberCountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTotalMemberCountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.GetTotalMemberCountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.GetTotalMemberCountRequest)
    MergeFrom(*source);
  }
}

void GetTotalMemberCountRequest::MergeFrom(const GetTotalMemberCountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.GetTotalMemberCountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_username().size() > 0) {

    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void GetTotalMemberCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.GetTotalMemberCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTotalMemberCountRequest::CopyFrom(const GetTotalMemberCountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.GetTotalMemberCountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTotalMemberCountRequest::IsInitialized() const {
  return true;
}

void GetTotalMemberCountRequest::Swap(GetTotalMemberCountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTotalMemberCountRequest::InternalSwap(GetTotalMemberCountRequest* other) {
  using std::swap;
  from_username_.Swap(&other->from_username_);
  appkey_.Swap(&other->appkey_);
  swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTotalMemberCountRequest::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTotalMemberCountResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTotalMemberCountResponse::kMemberCountFieldNumber;
const int GetTotalMemberCountResponse::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTotalMemberCountResponse::GetTotalMemberCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsGetTotalMemberCountResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.GetTotalMemberCountResponse)
}
GetTotalMemberCountResponse::GetTotalMemberCountResponse(const GetTotalMemberCountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&member_count_, &from.member_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&member_count_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.GetTotalMemberCountResponse)
}

void GetTotalMemberCountResponse::SharedCtor() {
  ::memset(&member_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&member_count_)) + sizeof(ret_));
  _cached_size_ = 0;
}

GetTotalMemberCountResponse::~GetTotalMemberCountResponse() {
  // @@protoc_insertion_point(destructor:outer.chatroom.GetTotalMemberCountResponse)
  SharedDtor();
}

void GetTotalMemberCountResponse::SharedDtor() {
}

void GetTotalMemberCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTotalMemberCountResponse::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTotalMemberCountResponse& GetTotalMemberCountResponse::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsGetTotalMemberCountResponse();
  return *internal_default_instance();
}

GetTotalMemberCountResponse* GetTotalMemberCountResponse::New(::google::protobuf::Arena* arena) const {
  GetTotalMemberCountResponse* n = new GetTotalMemberCountResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetTotalMemberCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.GetTotalMemberCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&member_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&member_count_)) + sizeof(ret_));
  _internal_metadata_.Clear();
}

bool GetTotalMemberCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.GetTotalMemberCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 member_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &member_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.errcode.EErrorCode ret = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::common::errcode::EErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.GetTotalMemberCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.GetTotalMemberCountResponse)
  return false;
#undef DO_
}

void GetTotalMemberCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.GetTotalMemberCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 member_count = 1;
  if (this->member_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->member_count(), output);
  }

  // .common.errcode.EErrorCode ret = 2;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.GetTotalMemberCountResponse)
}

::google::protobuf::uint8* GetTotalMemberCountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.GetTotalMemberCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 member_count = 1;
  if (this->member_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->member_count(), target);
  }

  // .common.errcode.EErrorCode ret = 2;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.GetTotalMemberCountResponse)
  return target;
}

size_t GetTotalMemberCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.GetTotalMemberCountResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 member_count = 1;
  if (this->member_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->member_count());
  }

  // .common.errcode.EErrorCode ret = 2;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTotalMemberCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.GetTotalMemberCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTotalMemberCountResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTotalMemberCountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.GetTotalMemberCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.GetTotalMemberCountResponse)
    MergeFrom(*source);
  }
}

void GetTotalMemberCountResponse::MergeFrom(const GetTotalMemberCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.GetTotalMemberCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.member_count() != 0) {
    set_member_count(from.member_count());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void GetTotalMemberCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.GetTotalMemberCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTotalMemberCountResponse::CopyFrom(const GetTotalMemberCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.GetTotalMemberCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTotalMemberCountResponse::IsInitialized() const {
  return true;
}

void GetTotalMemberCountResponse::Swap(GetTotalMemberCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTotalMemberCountResponse::InternalSwap(GetTotalMemberCountResponse* other) {
  using std::swap;
  swap(member_count_, other->member_count_);
  swap(ret_, other->ret_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTotalMemberCountResponse::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SendRoomMessageRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendRoomMessageRequest::kFromUsernameFieldNumber;
const int SendRoomMessageRequest::kAppkeyFieldNumber;
const int SendRoomMessageRequest::kRoomIdFieldNumber;
const int SendRoomMessageRequest::kMsgTypeFieldNumber;
const int SendRoomMessageRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendRoomMessageRequest::SendRoomMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSendRoomMessageRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.SendRoomMessageRequest)
}
SendRoomMessageRequest::SendRoomMessageRequest(const SendRoomMessageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_username().size() > 0) {
    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&room_id_, &from.room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&room_id_)) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.SendRoomMessageRequest)
}

void SendRoomMessageRequest::SharedCtor() {
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(msg_type_));
  _cached_size_ = 0;
}

SendRoomMessageRequest::~SendRoomMessageRequest() {
  // @@protoc_insertion_point(destructor:outer.chatroom.SendRoomMessageRequest)
  SharedDtor();
}

void SendRoomMessageRequest::SharedDtor() {
  from_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SendRoomMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendRoomMessageRequest::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendRoomMessageRequest& SendRoomMessageRequest::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSendRoomMessageRequest();
  return *internal_default_instance();
}

SendRoomMessageRequest* SendRoomMessageRequest::New(::google::protobuf::Arena* arena) const {
  SendRoomMessageRequest* n = new SendRoomMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendRoomMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.SendRoomMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&room_id_)) + sizeof(msg_type_));
  _internal_metadata_.Clear();
}

bool SendRoomMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.SendRoomMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_username().data(), static_cast<int>(this->from_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.SendRoomMessageRequest.from_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appkey().data(), static_cast<int>(this->appkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chatroom.SendRoomMessageRequest.appkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 room_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .outer.chatroom.EMsgType msg_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_type(static_cast< ::outer::chatroom::EMsgType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.SendRoomMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.SendRoomMessageRequest)
  return false;
#undef DO_
}

void SendRoomMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.SendRoomMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SendRoomMessageRequest.from_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_username(), output);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SendRoomMessageRequest.appkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->room_id(), output);
  }

  // .outer.chatroom.EMsgType msg_type = 4;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->msg_type(), output);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.SendRoomMessageRequest)
}

::google::protobuf::uint8* SendRoomMessageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.SendRoomMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SendRoomMessageRequest.from_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_username(), target);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chatroom.SendRoomMessageRequest.appkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appkey(), target);
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->room_id(), target);
  }

  // .outer.chatroom.EMsgType msg_type = 4;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->msg_type(), target);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.SendRoomMessageRequest)
  return target;
}

size_t SendRoomMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.SendRoomMessageRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string from_username = 1;
  if (this->from_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_username());
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint64 room_id = 3;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->room_id());
  }

  // .outer.chatroom.EMsgType msg_type = 4;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendRoomMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.SendRoomMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendRoomMessageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendRoomMessageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.SendRoomMessageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.SendRoomMessageRequest)
    MergeFrom(*source);
  }
}

void SendRoomMessageRequest::MergeFrom(const SendRoomMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.SendRoomMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_username().size() > 0) {

    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
}

void SendRoomMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.SendRoomMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendRoomMessageRequest::CopyFrom(const SendRoomMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.SendRoomMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRoomMessageRequest::IsInitialized() const {
  return true;
}

void SendRoomMessageRequest::Swap(SendRoomMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendRoomMessageRequest::InternalSwap(SendRoomMessageRequest* other) {
  using std::swap;
  from_username_.Swap(&other->from_username_);
  appkey_.Swap(&other->appkey_);
  data_.Swap(&other->data_);
  swap(room_id_, other->room_id_);
  swap(msg_type_, other->msg_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendRoomMessageRequest::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SendRoomMessageResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendRoomMessageResponse::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendRoomMessageResponse::SendRoomMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSendRoomMessageResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chatroom.SendRoomMessageResponse)
}
SendRoomMessageResponse::SendRoomMessageResponse(const SendRoomMessageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:outer.chatroom.SendRoomMessageResponse)
}

void SendRoomMessageResponse::SharedCtor() {
  ret_ = 0;
  _cached_size_ = 0;
}

SendRoomMessageResponse::~SendRoomMessageResponse() {
  // @@protoc_insertion_point(destructor:outer.chatroom.SendRoomMessageResponse)
  SharedDtor();
}

void SendRoomMessageResponse::SharedDtor() {
}

void SendRoomMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendRoomMessageResponse::descriptor() {
  ::protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendRoomMessageResponse& SendRoomMessageResponse::default_instance() {
  ::protobuf_outer_2fchatroom_2eproto::InitDefaultsSendRoomMessageResponse();
  return *internal_default_instance();
}

SendRoomMessageResponse* SendRoomMessageResponse::New(::google::protobuf::Arena* arena) const {
  SendRoomMessageResponse* n = new SendRoomMessageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendRoomMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chatroom.SendRoomMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _internal_metadata_.Clear();
}

bool SendRoomMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chatroom.SendRoomMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.errcode.EErrorCode ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::common::errcode::EErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chatroom.SendRoomMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chatroom.SendRoomMessageResponse)
  return false;
#undef DO_
}

void SendRoomMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chatroom.SendRoomMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chatroom.SendRoomMessageResponse)
}

::google::protobuf::uint8* SendRoomMessageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chatroom.SendRoomMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chatroom.SendRoomMessageResponse)
  return target;
}

size_t SendRoomMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chatroom.SendRoomMessageResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendRoomMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chatroom.SendRoomMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendRoomMessageResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendRoomMessageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chatroom.SendRoomMessageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chatroom.SendRoomMessageResponse)
    MergeFrom(*source);
  }
}

void SendRoomMessageResponse::MergeFrom(const SendRoomMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chatroom.SendRoomMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void SendRoomMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chatroom.SendRoomMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendRoomMessageResponse::CopyFrom(const SendRoomMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chatroom.SendRoomMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRoomMessageResponse::IsInitialized() const {
  return true;
}

void SendRoomMessageResponse::Swap(SendRoomMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendRoomMessageResponse::InternalSwap(SendRoomMessageResponse* other) {
  using std::swap;
  swap(ret_, other->ret_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendRoomMessageResponse::GetMetadata() const {
  protobuf_outer_2fchatroom_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchatroom_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chatroom
}  // namespace outer

// @@protoc_insertion_point(global_scope)
