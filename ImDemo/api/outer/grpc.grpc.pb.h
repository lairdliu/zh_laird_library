// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: outer/grpc.proto
#ifndef GRPC_outer_2fgrpc_2eproto__INCLUDED
#define GRPC_outer_2fgrpc_2eproto__INCLUDED

#include "outer/grpc.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace outer {
namespace grpc {

// 通知服务，用于服务端推送通知至客户端
class ConnectorService final {
 public:
  static constexpr char const* service_full_name() {
    return "outer.grpc.ConnectorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 一对一服务请求
    virtual ::grpc::Status SendUnaryRequest(::grpc::ClientContext* context, const ::outer::connector::UnaryRequest& request, ::outer::connector::UnaryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::outer::connector::UnaryResponse>> AsyncSendUnaryRequest(::grpc::ClientContext* context, const ::outer::connector::UnaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::outer::connector::UnaryResponse>>(AsyncSendUnaryRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::outer::connector::UnaryResponse>> PrepareAsyncSendUnaryRequest(::grpc::ClientContext* context, const ::outer::connector::UnaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::outer::connector::UnaryResponse>>(PrepareAsyncSendUnaryRequestRaw(context, request, cq));
    }
    // Session相关操作
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>> SendSessionRequest(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>>(SendSessionRequestRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>> AsyncSendSessionRequest(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>>(AsyncSendSessionRequestRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>> PrepareAsyncSendSessionRequest(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>>(PrepareAsyncSendSessionRequestRaw(context, cq));
    }
    // health检测
    virtual ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::outer::connector::HealthCheckRequest& request, ::outer::connector::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::outer::connector::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::outer::connector::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::outer::connector::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::outer::connector::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::outer::connector::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::outer::connector::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::outer::connector::UnaryResponse>* AsyncSendUnaryRequestRaw(::grpc::ClientContext* context, const ::outer::connector::UnaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::outer::connector::UnaryResponse>* PrepareAsyncSendUnaryRequestRaw(::grpc::ClientContext* context, const ::outer::connector::UnaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>* SendSessionRequestRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>* AsyncSendSessionRequestRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>* PrepareAsyncSendSessionRequestRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::outer::connector::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::outer::connector::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::outer::connector::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::outer::connector::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SendUnaryRequest(::grpc::ClientContext* context, const ::outer::connector::UnaryRequest& request, ::outer::connector::UnaryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::outer::connector::UnaryResponse>> AsyncSendUnaryRequest(::grpc::ClientContext* context, const ::outer::connector::UnaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::outer::connector::UnaryResponse>>(AsyncSendUnaryRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::outer::connector::UnaryResponse>> PrepareAsyncSendUnaryRequest(::grpc::ClientContext* context, const ::outer::connector::UnaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::outer::connector::UnaryResponse>>(PrepareAsyncSendUnaryRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>> SendSessionRequest(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>>(SendSessionRequestRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>> AsyncSendSessionRequest(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>>(AsyncSendSessionRequestRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>> PrepareAsyncSendSessionRequest(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>>(PrepareAsyncSendSessionRequestRaw(context, cq));
    }
    ::grpc::Status HealthCheck(::grpc::ClientContext* context, const ::outer::connector::HealthCheckRequest& request, ::outer::connector::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::outer::connector::HealthCheckResponse>> AsyncHealthCheck(::grpc::ClientContext* context, const ::outer::connector::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::outer::connector::HealthCheckResponse>>(AsyncHealthCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::outer::connector::HealthCheckResponse>> PrepareAsyncHealthCheck(::grpc::ClientContext* context, const ::outer::connector::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::outer::connector::HealthCheckResponse>>(PrepareAsyncHealthCheckRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::outer::connector::UnaryResponse>* AsyncSendUnaryRequestRaw(::grpc::ClientContext* context, const ::outer::connector::UnaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::outer::connector::UnaryResponse>* PrepareAsyncSendUnaryRequestRaw(::grpc::ClientContext* context, const ::outer::connector::UnaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>* SendSessionRequestRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>* AsyncSendSessionRequestRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::outer::connector::SessionRequest, ::outer::connector::SessionNotify>* PrepareAsyncSendSessionRequestRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::outer::connector::HealthCheckResponse>* AsyncHealthCheckRaw(::grpc::ClientContext* context, const ::outer::connector::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::outer::connector::HealthCheckResponse>* PrepareAsyncHealthCheckRaw(::grpc::ClientContext* context, const ::outer::connector::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendUnaryRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_SendSessionRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_HealthCheck_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 一对一服务请求
    virtual ::grpc::Status SendUnaryRequest(::grpc::ServerContext* context, const ::outer::connector::UnaryRequest* request, ::outer::connector::UnaryResponse* response);
    // Session相关操作
    virtual ::grpc::Status SendSessionRequest(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::outer::connector::SessionNotify, ::outer::connector::SessionRequest>* stream);
    // health检测
    virtual ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::outer::connector::HealthCheckRequest* request, ::outer::connector::HealthCheckResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendUnaryRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendUnaryRequest() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendUnaryRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendUnaryRequest(::grpc::ServerContext* context, const ::outer::connector::UnaryRequest* request, ::outer::connector::UnaryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendUnaryRequest(::grpc::ServerContext* context, ::outer::connector::UnaryRequest* request, ::grpc::ServerAsyncResponseWriter< ::outer::connector::UnaryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendSessionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendSessionRequest() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendSessionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSessionRequest(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::outer::connector::SessionNotify, ::outer::connector::SessionRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendSessionRequest(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::outer::connector::SessionNotify, ::outer::connector::SessionRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_HealthCheck() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::outer::connector::HealthCheckRequest* request, ::outer::connector::HealthCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::outer::connector::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::outer::connector::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendUnaryRequest<WithAsyncMethod_SendSessionRequest<WithAsyncMethod_HealthCheck<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SendUnaryRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendUnaryRequest() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendUnaryRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendUnaryRequest(::grpc::ServerContext* context, const ::outer::connector::UnaryRequest* request, ::outer::connector::UnaryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendSessionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendSessionRequest() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendSessionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSessionRequest(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::outer::connector::SessionNotify, ::outer::connector::SessionRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_HealthCheck() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::outer::connector::HealthCheckRequest* request, ::outer::connector::HealthCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendUnaryRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendUnaryRequest() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendUnaryRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendUnaryRequest(::grpc::ServerContext* context, const ::outer::connector::UnaryRequest* request, ::outer::connector::UnaryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendUnaryRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendSessionRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendSessionRequest() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendSessionRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSessionRequest(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::outer::connector::SessionNotify, ::outer::connector::SessionRequest>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendSessionRequest(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_HealthCheck() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::outer::connector::HealthCheckRequest* request, ::outer::connector::HealthCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHealthCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendUnaryRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendUnaryRequest() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::outer::connector::UnaryRequest, ::outer::connector::UnaryResponse>(std::bind(&WithStreamedUnaryMethod_SendUnaryRequest<BaseClass>::StreamedSendUnaryRequest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendUnaryRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendUnaryRequest(::grpc::ServerContext* context, const ::outer::connector::UnaryRequest* request, ::outer::connector::UnaryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendUnaryRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::outer::connector::UnaryRequest,::outer::connector::UnaryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HealthCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_HealthCheck() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::outer::connector::HealthCheckRequest, ::outer::connector::HealthCheckResponse>(std::bind(&WithStreamedUnaryMethod_HealthCheck<BaseClass>::StreamedHealthCheck, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_HealthCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HealthCheck(::grpc::ServerContext* context, const ::outer::connector::HealthCheckRequest* request, ::outer::connector::HealthCheckResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHealthCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::outer::connector::HealthCheckRequest,::outer::connector::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendUnaryRequest<WithStreamedUnaryMethod_HealthCheck<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendUnaryRequest<WithStreamedUnaryMethod_HealthCheck<Service > > StreamedService;
};

}  // namespace grpc
}  // namespace outer


#endif  // GRPC_outer_2fgrpc_2eproto__INCLUDED
