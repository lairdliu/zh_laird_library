// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: outer/chat.proto

#include "outer/chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace outer {
namespace chat {
class ChatMessageRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatMessageRequest>
      _instance;
} _ChatMessageRequest_default_instance_;
class ChatMessageResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatMessageResponse>
      _instance;
} _ChatMessageResponse_default_instance_;
class MultiMessageRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiMessageRequest>
      _instance;
} _MultiMessageRequest_default_instance_;
class MultiMessageResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiMessageResponse>
      _instance;
} _MultiMessageResponse_default_instance_;
class MultiMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiMessage>
      _instance;
} _MultiMessage_default_instance_;
class PrivateMessageRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivateMessageRequest>
      _instance;
} _PrivateMessageRequest_default_instance_;
class PrivateMessageResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivateMessageResponse>
      _instance;
} _PrivateMessageResponse_default_instance_;
class PrivateMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PrivateMessage>
      _instance;
} _PrivateMessage_default_instance_;
class GetServerTimestampRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetServerTimestampRequest>
      _instance;
} _GetServerTimestampRequest_default_instance_;
class GetServerTimestampResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetServerTimestampResponse>
      _instance;
} _GetServerTimestampResponse_default_instance_;
}  // namespace chat
}  // namespace outer
namespace protobuf_outer_2fchat_2eproto {
void InitDefaultsChatMessageRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chat::_ChatMessageRequest_default_instance_;
    new (ptr) ::outer::chat::ChatMessageRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chat::ChatMessageRequest::InitAsDefaultInstance();
}

void InitDefaultsChatMessageRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChatMessageRequestImpl);
}

void InitDefaultsChatMessageResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chat::_ChatMessageResponse_default_instance_;
    new (ptr) ::outer::chat::ChatMessageResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chat::ChatMessageResponse::InitAsDefaultInstance();
}

void InitDefaultsChatMessageResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsChatMessageResponseImpl);
}

void InitDefaultsMultiMessageRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chat::_MultiMessageRequest_default_instance_;
    new (ptr) ::outer::chat::MultiMessageRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chat::MultiMessageRequest::InitAsDefaultInstance();
}

void InitDefaultsMultiMessageRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMultiMessageRequestImpl);
}

void InitDefaultsMultiMessageResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chat::_MultiMessageResponse_default_instance_;
    new (ptr) ::outer::chat::MultiMessageResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chat::MultiMessageResponse::InitAsDefaultInstance();
}

void InitDefaultsMultiMessageResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMultiMessageResponseImpl);
}

void InitDefaultsMultiMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chat::_MultiMessage_default_instance_;
    new (ptr) ::outer::chat::MultiMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chat::MultiMessage::InitAsDefaultInstance();
}

void InitDefaultsMultiMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMultiMessageImpl);
}

void InitDefaultsPrivateMessageRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chat::_PrivateMessageRequest_default_instance_;
    new (ptr) ::outer::chat::PrivateMessageRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chat::PrivateMessageRequest::InitAsDefaultInstance();
}

void InitDefaultsPrivateMessageRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPrivateMessageRequestImpl);
}

void InitDefaultsPrivateMessageResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chat::_PrivateMessageResponse_default_instance_;
    new (ptr) ::outer::chat::PrivateMessageResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chat::PrivateMessageResponse::InitAsDefaultInstance();
}

void InitDefaultsPrivateMessageResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPrivateMessageResponseImpl);
}

void InitDefaultsPrivateMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chat::_PrivateMessage_default_instance_;
    new (ptr) ::outer::chat::PrivateMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chat::PrivateMessage::InitAsDefaultInstance();
}

void InitDefaultsPrivateMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPrivateMessageImpl);
}

void InitDefaultsGetServerTimestampRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chat::_GetServerTimestampRequest_default_instance_;
    new (ptr) ::outer::chat::GetServerTimestampRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chat::GetServerTimestampRequest::InitAsDefaultInstance();
}

void InitDefaultsGetServerTimestampRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetServerTimestampRequestImpl);
}

void InitDefaultsGetServerTimestampResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::outer::chat::_GetServerTimestampResponse_default_instance_;
    new (ptr) ::outer::chat::GetServerTimestampResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::outer::chat::GetServerTimestampResponse::InitAsDefaultInstance();
}

void InitDefaultsGetServerTimestampResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetServerTimestampResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageRequest, from_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageRequest, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageRequest, from_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageRequest, to_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageRequest, msg_content_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageRequest, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageRequest, burn_after_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageRequest, from_client_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageRequest, is_jimao_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageRequest, to_user_is_unregistered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageRequest, to_phone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageRequest, from_phone_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageResponse, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageResponse, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageResponse, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageResponse, jimao_left_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageResponse, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::ChatMessageResponse, user_enable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessageRequest, from_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessageRequest, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessageRequest, from_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessageRequest, to_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessageRequest, msg_content_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessageRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessageRequest, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessageRequest, burn_after_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessageRequest, from_client_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessageRequest, is_jimao_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessageResponse, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessageResponse, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessageResponse, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessageResponse, jimao_left_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessage, from_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessage, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessage, from_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessage, msg_content_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessage, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessage, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessage, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessage, receiver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessage, is_jimao_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::MultiMessage, is_read_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessageRequest, from_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessageRequest, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessageRequest, from_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessageRequest, to_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessageRequest, msg_content_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessageRequest, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessageRequest, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessageRequest, burn_after_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessageRequest, from_client_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessageRequest, is_jimao_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessageResponse, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessageResponse, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessageResponse, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessageResponse, jimao_left_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessage, from_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessage, appkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessage, from_nick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessage, msg_content_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessage, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessage, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessage, msg_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessage, burn_after_read_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessage, to_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::PrivateMessage, is_jimao_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::GetServerTimestampRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::GetServerTimestampResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::outer::chat::GetServerTimestampResponse, timestamp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::outer::chat::ChatMessageRequest)},
  { 18, -1, sizeof(::outer::chat::ChatMessageResponse)},
  { 29, -1, sizeof(::outer::chat::MultiMessageRequest)},
  { 44, -1, sizeof(::outer::chat::MultiMessageResponse)},
  { 53, -1, sizeof(::outer::chat::MultiMessage)},
  { 68, -1, sizeof(::outer::chat::PrivateMessageRequest)},
  { 83, -1, sizeof(::outer::chat::PrivateMessageResponse)},
  { 92, -1, sizeof(::outer::chat::PrivateMessage)},
  { 107, -1, sizeof(::outer::chat::GetServerTimestampRequest)},
  { 112, -1, sizeof(::outer::chat::GetServerTimestampResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chat::_ChatMessageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chat::_ChatMessageResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chat::_MultiMessageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chat::_MultiMessageResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chat::_MultiMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chat::_PrivateMessageRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chat::_PrivateMessageResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chat::_PrivateMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chat::_GetServerTimestampRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::outer::chat::_GetServerTimestampResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "outer/chat.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020outer/chat.proto\022\nouter.chat\032\020common/m"
      "sg.proto\032\024common/errcode.proto\032\030common/e"
      "numeration.proto\"\345\002\n\022ChatMessageRequest\022"
      "\025\n\rfrom_username\030\001 \001(\t\022\016\n\006appkey\030\002 \001(\t\022\021"
      "\n\tfrom_nick\030\003 \001(\t\022\023\n\013to_username\030\004 \001(\t\0225"
      "\n\020msg_content_type\030\005 \001(\0162\033.common.msg.EM"
      "sgContentType\022\014\n\004data\030\006 \001(\014\022\016\n\006msg_id\030\007 "
      "\001(\t\022\027\n\017burn_after_read\030\010 \001(\010\0229\n\020from_cli"
      "ent_type\030\t \001(\0162\037.common.enumeration.ECli"
      "entType\022\020\n\010is_jimao\030\n \001(\010\022\037\n\027to_user_is_"
      "unregistered\030\013 \001(\010\022\020\n\010to_phone\030\014 \001(\t\022\022\n\n"
      "from_phone\030\r \001(\t\"\234\001\n\023ChatMessageResponse"
      "\022\'\n\003ret\030\001 \001(\0162\032.common.errcode.EErrorCod"
      "e\022\014\n\004guid\030\002 \001(\004\022\016\n\006msg_id\030\003 \001(\t\022\026\n\016jimao"
      "_left_num\030\004 \001(\t\022\021\n\ttimestamp\030\005 \001(\004\022\023\n\013us"
      "er_enable\030\006 \001(\r\"\237\002\n\023MultiMessageRequest\022"
      "\025\n\rfrom_username\030\001 \001(\t\022\016\n\006appkey\030\002 \001(\t\022\021"
      "\n\tfrom_nick\030\003 \001(\t\022\023\n\013to_username\030\004 \003(\t\0225"
      "\n\020msg_content_type\030\005 \001(\0162\033.common.msg.EM"
      "sgContentType\022\014\n\004data\030\006 \001(\014\022\016\n\006msg_id\030\007 "
      "\001(\t\022\027\n\017burn_after_read\030\010 \001(\010\0229\n\020from_cli"
      "ent_type\030\t \001(\0162\037.common.enumeration.ECli"
      "entType\022\020\n\010is_jimao\030\n \001(\010\"u\n\024MultiMessag"
      "eResponse\022\'\n\003ret\030\001 \001(\0162\032.common.errcode."
      "EErrorCode\022\014\n\004guid\030\002 \001(\004\022\016\n\006msg_id\030\003 \001(\t"
      "\022\026\n\016jimao_left_num\030\004 \001(\t\"\340\001\n\014MultiMessag"
      "e\022\025\n\rfrom_username\030\001 \001(\t\022\016\n\006appkey\030\002 \001(\t"
      "\022\021\n\tfrom_nick\030\003 \001(\t\0225\n\020msg_content_type\030"
      "\004 \001(\0162\033.common.msg.EMsgContentType\022\014\n\004da"
      "ta\030\005 \001(\014\022\014\n\004guid\030\006 \001(\004\022\016\n\006msg_id\030\007 \001(\t\022\020"
      "\n\010receiver\030\010 \003(\t\022\020\n\010is_jimao\030\t \001(\010\022\017\n\007is"
      "_read\030\n \001(\010\"\241\002\n\025PrivateMessageRequest\022\025\n"
      "\rfrom_username\030\001 \001(\t\022\016\n\006appkey\030\002 \001(\t\022\021\n\t"
      "from_nick\030\003 \001(\t\022\023\n\013to_username\030\004 \001(\t\0225\n\020"
      "msg_content_type\030\005 \001(\0162\033.common.msg.EMsg"
      "ContentType\022\014\n\004data\030\006 \001(\014\022\016\n\006msg_id\030\007 \001("
      "\t\022\027\n\017burn_after_read\030\010 \001(\010\0229\n\020from_clien"
      "t_type\030\t \001(\0162\037.common.enumeration.EClien"
      "tType\022\020\n\010is_jimao\030\n \001(\010\"w\n\026PrivateMessag"
      "eResponse\022\'\n\003ret\030\001 \001(\0162\032.common.errcode."
      "EErrorCode\022\014\n\004guid\030\002 \001(\004\022\016\n\006msg_id\030\003 \001(\t"
      "\022\026\n\016jimao_left_num\030\004 \001(\t\"\355\001\n\016PrivateMess"
      "age\022\025\n\rfrom_username\030\001 \001(\t\022\016\n\006appkey\030\002 \001"
      "(\t\022\021\n\tfrom_nick\030\003 \001(\t\0225\n\020msg_content_typ"
      "e\030\004 \001(\0162\033.common.msg.EMsgContentType\022\014\n\004"
      "data\030\005 \001(\014\022\014\n\004guid\030\006 \001(\004\022\016\n\006msg_id\030\007 \001(\t"
      "\022\027\n\017burn_after_read\030\010 \001(\010\022\023\n\013to_username"
      "\030\t \001(\t\022\020\n\010is_jimao\030\n \001(\010\"\033\n\031GetServerTim"
      "estampRequest\"/\n\032GetServerTimestampRespo"
      "nse\022\021\n\ttimestamp\030\001 \001(\0042\345\002\n\013ChatService\022K"
      "\n\010SendChat\022\036.outer.chat.ChatMessageReque"
      "st\032\037.outer.chat.ChatMessageResponse\022N\n\tS"
      "endMulti\022\037.outer.chat.MultiMessageReques"
      "t\032 .outer.chat.MultiMessageResponse\022T\n\013S"
      "endPrivate\022!.outer.chat.PrivateMessageRe"
      "quest\032\".outer.chat.PrivateMessageRespons"
      "e\022c\n\022GetServerTimestamp\022%.outer.chat.Get"
      "ServerTimestampRequest\032&.outer.chat.GetS"
      "erverTimestampResponseB&\n\034com.cmcc.littl"
      "ec.proto.outerB\004ChatP\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2390);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "outer/chat.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2fmsg_2eproto::AddDescriptors();
  ::protobuf_common_2ferrcode_2eproto::AddDescriptors();
  ::protobuf_common_2fenumeration_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_outer_2fchat_2eproto
namespace outer {
namespace chat {

// ===================================================================

void ChatMessageRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatMessageRequest::kFromUsernameFieldNumber;
const int ChatMessageRequest::kAppkeyFieldNumber;
const int ChatMessageRequest::kFromNickFieldNumber;
const int ChatMessageRequest::kToUsernameFieldNumber;
const int ChatMessageRequest::kMsgContentTypeFieldNumber;
const int ChatMessageRequest::kDataFieldNumber;
const int ChatMessageRequest::kMsgIdFieldNumber;
const int ChatMessageRequest::kBurnAfterReadFieldNumber;
const int ChatMessageRequest::kFromClientTypeFieldNumber;
const int ChatMessageRequest::kIsJimaoFieldNumber;
const int ChatMessageRequest::kToUserIsUnregisteredFieldNumber;
const int ChatMessageRequest::kToPhoneFieldNumber;
const int ChatMessageRequest::kFromPhoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatMessageRequest::ChatMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchat_2eproto::InitDefaultsChatMessageRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chat.ChatMessageRequest)
}
ChatMessageRequest::ChatMessageRequest(const ChatMessageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_username().size() > 0) {
    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  from_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_nick().size() > 0) {
    from_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_nick_);
  }
  to_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.to_username().size() > 0) {
    to_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_username_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_id().size() > 0) {
    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  to_phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.to_phone().size() > 0) {
    to_phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_phone_);
  }
  from_phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_phone().size() > 0) {
    from_phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_phone_);
  }
  ::memcpy(&msg_content_type_, &from.msg_content_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_user_is_unregistered_) -
    reinterpret_cast<char*>(&msg_content_type_)) + sizeof(to_user_is_unregistered_));
  // @@protoc_insertion_point(copy_constructor:outer.chat.ChatMessageRequest)
}

void ChatMessageRequest::SharedCtor() {
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_content_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_user_is_unregistered_) -
      reinterpret_cast<char*>(&msg_content_type_)) + sizeof(to_user_is_unregistered_));
  _cached_size_ = 0;
}

ChatMessageRequest::~ChatMessageRequest() {
  // @@protoc_insertion_point(destructor:outer.chat.ChatMessageRequest)
  SharedDtor();
}

void ChatMessageRequest::SharedDtor() {
  from_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessageRequest::descriptor() {
  ::protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatMessageRequest& ChatMessageRequest::default_instance() {
  ::protobuf_outer_2fchat_2eproto::InitDefaultsChatMessageRequest();
  return *internal_default_instance();
}

ChatMessageRequest* ChatMessageRequest::New(::google::protobuf::Arena* arena) const {
  ChatMessageRequest* n = new ChatMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chat.ChatMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_content_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_user_is_unregistered_) -
      reinterpret_cast<char*>(&msg_content_type_)) + sizeof(to_user_is_unregistered_));
  _internal_metadata_.Clear();
}

bool ChatMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chat.ChatMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_username().data(), static_cast<int>(this->from_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.ChatMessageRequest.from_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appkey().data(), static_cast<int>(this->appkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.ChatMessageRequest.appkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string from_nick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_nick().data(), static_cast<int>(this->from_nick().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.ChatMessageRequest.from_nick"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string to_username = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_username().data(), static_cast<int>(this->to_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.ChatMessageRequest.to_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.msg.EMsgContentType msg_content_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_content_type(static_cast< ::common::msg::EMsgContentType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_id().data(), static_cast<int>(this->msg_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.ChatMessageRequest.msg_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool burn_after_read = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &burn_after_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.enumeration.EClientType from_client_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_from_client_type(static_cast< ::common::enumeration::EClientType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_jimao = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_jimao_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool to_user_is_unregistered = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_user_is_unregistered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string to_phone = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_phone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_phone().data(), static_cast<int>(this->to_phone().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.ChatMessageRequest.to_phone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string from_phone = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_phone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_phone().data(), static_cast<int>(this->from_phone().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.ChatMessageRequest.from_phone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chat.ChatMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chat.ChatMessageRequest)
  return false;
#undef DO_
}

void ChatMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chat.ChatMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageRequest.from_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_username(), output);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageRequest.appkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // string from_nick = 3;
  if (this->from_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_nick().data(), static_cast<int>(this->from_nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageRequest.from_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_nick(), output);
  }

  // string to_username = 4;
  if (this->to_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_username().data(), static_cast<int>(this->to_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageRequest.to_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to_username(), output);
  }

  // .common.msg.EMsgContentType msg_content_type = 5;
  if (this->msg_content_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->msg_content_type(), output);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // string msg_id = 7;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageRequest.msg_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->msg_id(), output);
  }

  // bool burn_after_read = 8;
  if (this->burn_after_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->burn_after_read(), output);
  }

  // .common.enumeration.EClientType from_client_type = 9;
  if (this->from_client_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->from_client_type(), output);
  }

  // bool is_jimao = 10;
  if (this->is_jimao() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_jimao(), output);
  }

  // bool to_user_is_unregistered = 11;
  if (this->to_user_is_unregistered() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->to_user_is_unregistered(), output);
  }

  // string to_phone = 12;
  if (this->to_phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_phone().data(), static_cast<int>(this->to_phone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageRequest.to_phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->to_phone(), output);
  }

  // string from_phone = 13;
  if (this->from_phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_phone().data(), static_cast<int>(this->from_phone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageRequest.from_phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->from_phone(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chat.ChatMessageRequest)
}

::google::protobuf::uint8* ChatMessageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chat.ChatMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageRequest.from_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_username(), target);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageRequest.appkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appkey(), target);
  }

  // string from_nick = 3;
  if (this->from_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_nick().data(), static_cast<int>(this->from_nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageRequest.from_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_nick(), target);
  }

  // string to_username = 4;
  if (this->to_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_username().data(), static_cast<int>(this->to_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageRequest.to_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to_username(), target);
  }

  // .common.msg.EMsgContentType msg_content_type = 5;
  if (this->msg_content_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->msg_content_type(), target);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // string msg_id = 7;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageRequest.msg_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->msg_id(), target);
  }

  // bool burn_after_read = 8;
  if (this->burn_after_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->burn_after_read(), target);
  }

  // .common.enumeration.EClientType from_client_type = 9;
  if (this->from_client_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->from_client_type(), target);
  }

  // bool is_jimao = 10;
  if (this->is_jimao() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_jimao(), target);
  }

  // bool to_user_is_unregistered = 11;
  if (this->to_user_is_unregistered() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->to_user_is_unregistered(), target);
  }

  // string to_phone = 12;
  if (this->to_phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_phone().data(), static_cast<int>(this->to_phone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageRequest.to_phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->to_phone(), target);
  }

  // string from_phone = 13;
  if (this->from_phone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_phone().data(), static_cast<int>(this->from_phone().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageRequest.from_phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->from_phone(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chat.ChatMessageRequest)
  return target;
}

size_t ChatMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chat.ChatMessageRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string from_username = 1;
  if (this->from_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_username());
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  // string from_nick = 3;
  if (this->from_nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_nick());
  }

  // string to_username = 4;
  if (this->to_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_username());
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string msg_id = 7;
  if (this->msg_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_id());
  }

  // string to_phone = 12;
  if (this->to_phone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_phone());
  }

  // string from_phone = 13;
  if (this->from_phone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_phone());
  }

  // .common.msg.EMsgContentType msg_content_type = 5;
  if (this->msg_content_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_content_type());
  }

  // .common.enumeration.EClientType from_client_type = 9;
  if (this->from_client_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->from_client_type());
  }

  // bool burn_after_read = 8;
  if (this->burn_after_read() != 0) {
    total_size += 1 + 1;
  }

  // bool is_jimao = 10;
  if (this->is_jimao() != 0) {
    total_size += 1 + 1;
  }

  // bool to_user_is_unregistered = 11;
  if (this->to_user_is_unregistered() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chat.ChatMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatMessageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatMessageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chat.ChatMessageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chat.ChatMessageRequest)
    MergeFrom(*source);
  }
}

void ChatMessageRequest::MergeFrom(const ChatMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chat.ChatMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_username().size() > 0) {

    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.from_nick().size() > 0) {

    from_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_nick_);
  }
  if (from.to_username().size() > 0) {

    to_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_username_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.msg_id().size() > 0) {

    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  if (from.to_phone().size() > 0) {

    to_phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_phone_);
  }
  if (from.from_phone().size() > 0) {

    from_phone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_phone_);
  }
  if (from.msg_content_type() != 0) {
    set_msg_content_type(from.msg_content_type());
  }
  if (from.from_client_type() != 0) {
    set_from_client_type(from.from_client_type());
  }
  if (from.burn_after_read() != 0) {
    set_burn_after_read(from.burn_after_read());
  }
  if (from.is_jimao() != 0) {
    set_is_jimao(from.is_jimao());
  }
  if (from.to_user_is_unregistered() != 0) {
    set_to_user_is_unregistered(from.to_user_is_unregistered());
  }
}

void ChatMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chat.ChatMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessageRequest::CopyFrom(const ChatMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chat.ChatMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageRequest::IsInitialized() const {
  return true;
}

void ChatMessageRequest::Swap(ChatMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatMessageRequest::InternalSwap(ChatMessageRequest* other) {
  using std::swap;
  from_username_.Swap(&other->from_username_);
  appkey_.Swap(&other->appkey_);
  from_nick_.Swap(&other->from_nick_);
  to_username_.Swap(&other->to_username_);
  data_.Swap(&other->data_);
  msg_id_.Swap(&other->msg_id_);
  to_phone_.Swap(&other->to_phone_);
  from_phone_.Swap(&other->from_phone_);
  swap(msg_content_type_, other->msg_content_type_);
  swap(from_client_type_, other->from_client_type_);
  swap(burn_after_read_, other->burn_after_read_);
  swap(is_jimao_, other->is_jimao_);
  swap(to_user_is_unregistered_, other->to_user_is_unregistered_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatMessageRequest::GetMetadata() const {
  protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatMessageResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatMessageResponse::kRetFieldNumber;
const int ChatMessageResponse::kGuidFieldNumber;
const int ChatMessageResponse::kMsgIdFieldNumber;
const int ChatMessageResponse::kJimaoLeftNumFieldNumber;
const int ChatMessageResponse::kTimestampFieldNumber;
const int ChatMessageResponse::kUserEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatMessageResponse::ChatMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchat_2eproto::InitDefaultsChatMessageResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chat.ChatMessageResponse)
}
ChatMessageResponse::ChatMessageResponse(const ChatMessageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_id().size() > 0) {
    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  jimao_left_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.jimao_left_num().size() > 0) {
    jimao_left_num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jimao_left_num_);
  }
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:outer.chat.ChatMessageResponse)
}

void ChatMessageResponse::SharedCtor() {
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jimao_left_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

ChatMessageResponse::~ChatMessageResponse() {
  // @@protoc_insertion_point(destructor:outer.chat.ChatMessageResponse)
  SharedDtor();
}

void ChatMessageResponse::SharedDtor() {
  msg_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jimao_left_num_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessageResponse::descriptor() {
  ::protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatMessageResponse& ChatMessageResponse::default_instance() {
  ::protobuf_outer_2fchat_2eproto::InitDefaultsChatMessageResponse();
  return *internal_default_instance();
}

ChatMessageResponse* ChatMessageResponse::New(::google::protobuf::Arena* arena) const {
  ChatMessageResponse* n = new ChatMessageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chat.ChatMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jimao_left_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

bool ChatMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chat.ChatMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.errcode.EErrorCode ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::common::errcode::EErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_id().data(), static_cast<int>(this->msg_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.ChatMessageResponse.msg_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string jimao_left_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jimao_left_num()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jimao_left_num().data(), static_cast<int>(this->jimao_left_num().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.ChatMessageResponse.jimao_left_num"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 user_enable = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chat.ChatMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chat.ChatMessageResponse)
  return false;
#undef DO_
}

void ChatMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chat.ChatMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // string msg_id = 3;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageResponse.msg_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg_id(), output);
  }

  // string jimao_left_num = 4;
  if (this->jimao_left_num().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jimao_left_num().data(), static_cast<int>(this->jimao_left_num().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageResponse.jimao_left_num");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->jimao_left_num(), output);
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // uint32 user_enable = 6;
  if (this->user_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->user_enable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chat.ChatMessageResponse)
}

::google::protobuf::uint8* ChatMessageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chat.ChatMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // string msg_id = 3;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageResponse.msg_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_id(), target);
  }

  // string jimao_left_num = 4;
  if (this->jimao_left_num().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jimao_left_num().data(), static_cast<int>(this->jimao_left_num().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.ChatMessageResponse.jimao_left_num");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jimao_left_num(), target);
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // uint32 user_enable = 6;
  if (this->user_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->user_enable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chat.ChatMessageResponse)
  return target;
}

size_t ChatMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chat.ChatMessageResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg_id = 3;
  if (this->msg_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_id());
  }

  // string jimao_left_num = 4;
  if (this->jimao_left_num().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->jimao_left_num());
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  // uint32 user_enable = 6;
  if (this->user_enable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_enable());
  }

  // uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chat.ChatMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatMessageResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatMessageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chat.ChatMessageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chat.ChatMessageResponse)
    MergeFrom(*source);
  }
}

void ChatMessageResponse::MergeFrom(const ChatMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chat.ChatMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_id().size() > 0) {

    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  if (from.jimao_left_num().size() > 0) {

    jimao_left_num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jimao_left_num_);
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
  if (from.user_enable() != 0) {
    set_user_enable(from.user_enable());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void ChatMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chat.ChatMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessageResponse::CopyFrom(const ChatMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chat.ChatMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageResponse::IsInitialized() const {
  return true;
}

void ChatMessageResponse::Swap(ChatMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatMessageResponse::InternalSwap(ChatMessageResponse* other) {
  using std::swap;
  msg_id_.Swap(&other->msg_id_);
  jimao_left_num_.Swap(&other->jimao_left_num_);
  swap(guid_, other->guid_);
  swap(ret_, other->ret_);
  swap(user_enable_, other->user_enable_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatMessageResponse::GetMetadata() const {
  protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiMessageRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiMessageRequest::kFromUsernameFieldNumber;
const int MultiMessageRequest::kAppkeyFieldNumber;
const int MultiMessageRequest::kFromNickFieldNumber;
const int MultiMessageRequest::kToUsernameFieldNumber;
const int MultiMessageRequest::kMsgContentTypeFieldNumber;
const int MultiMessageRequest::kDataFieldNumber;
const int MultiMessageRequest::kMsgIdFieldNumber;
const int MultiMessageRequest::kBurnAfterReadFieldNumber;
const int MultiMessageRequest::kFromClientTypeFieldNumber;
const int MultiMessageRequest::kIsJimaoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiMessageRequest::MultiMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchat_2eproto::InitDefaultsMultiMessageRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chat.MultiMessageRequest)
}
MultiMessageRequest::MultiMessageRequest(const MultiMessageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      to_username_(from.to_username_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_username().size() > 0) {
    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  from_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_nick().size() > 0) {
    from_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_nick_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_id().size() > 0) {
    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  ::memcpy(&msg_content_type_, &from.msg_content_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_jimao_) -
    reinterpret_cast<char*>(&msg_content_type_)) + sizeof(is_jimao_));
  // @@protoc_insertion_point(copy_constructor:outer.chat.MultiMessageRequest)
}

void MultiMessageRequest::SharedCtor() {
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_content_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_jimao_) -
      reinterpret_cast<char*>(&msg_content_type_)) + sizeof(is_jimao_));
  _cached_size_ = 0;
}

MultiMessageRequest::~MultiMessageRequest() {
  // @@protoc_insertion_point(destructor:outer.chat.MultiMessageRequest)
  SharedDtor();
}

void MultiMessageRequest::SharedDtor() {
  from_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MultiMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiMessageRequest::descriptor() {
  ::protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiMessageRequest& MultiMessageRequest::default_instance() {
  ::protobuf_outer_2fchat_2eproto::InitDefaultsMultiMessageRequest();
  return *internal_default_instance();
}

MultiMessageRequest* MultiMessageRequest::New(::google::protobuf::Arena* arena) const {
  MultiMessageRequest* n = new MultiMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chat.MultiMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_username_.Clear();
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_content_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_jimao_) -
      reinterpret_cast<char*>(&msg_content_type_)) + sizeof(is_jimao_));
  _internal_metadata_.Clear();
}

bool MultiMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chat.MultiMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_username().data(), static_cast<int>(this->from_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.MultiMessageRequest.from_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appkey().data(), static_cast<int>(this->appkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.MultiMessageRequest.appkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string from_nick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_nick().data(), static_cast<int>(this->from_nick().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.MultiMessageRequest.from_nick"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string to_username = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_to_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_username(this->to_username_size() - 1).data(),
            static_cast<int>(this->to_username(this->to_username_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.MultiMessageRequest.to_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.msg.EMsgContentType msg_content_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_content_type(static_cast< ::common::msg::EMsgContentType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_id().data(), static_cast<int>(this->msg_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.MultiMessageRequest.msg_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool burn_after_read = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &burn_after_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.enumeration.EClientType from_client_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_from_client_type(static_cast< ::common::enumeration::EClientType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_jimao = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_jimao_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chat.MultiMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chat.MultiMessageRequest)
  return false;
#undef DO_
}

void MultiMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chat.MultiMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessageRequest.from_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_username(), output);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessageRequest.appkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // string from_nick = 3;
  if (this->from_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_nick().data(), static_cast<int>(this->from_nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessageRequest.from_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_nick(), output);
  }

  // repeated string to_username = 4;
  for (int i = 0, n = this->to_username_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_username(i).data(), static_cast<int>(this->to_username(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessageRequest.to_username");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->to_username(i), output);
  }

  // .common.msg.EMsgContentType msg_content_type = 5;
  if (this->msg_content_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->msg_content_type(), output);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // string msg_id = 7;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessageRequest.msg_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->msg_id(), output);
  }

  // bool burn_after_read = 8;
  if (this->burn_after_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->burn_after_read(), output);
  }

  // .common.enumeration.EClientType from_client_type = 9;
  if (this->from_client_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->from_client_type(), output);
  }

  // bool is_jimao = 10;
  if (this->is_jimao() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_jimao(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chat.MultiMessageRequest)
}

::google::protobuf::uint8* MultiMessageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chat.MultiMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessageRequest.from_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_username(), target);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessageRequest.appkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appkey(), target);
  }

  // string from_nick = 3;
  if (this->from_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_nick().data(), static_cast<int>(this->from_nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessageRequest.from_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_nick(), target);
  }

  // repeated string to_username = 4;
  for (int i = 0, n = this->to_username_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_username(i).data(), static_cast<int>(this->to_username(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessageRequest.to_username");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->to_username(i), target);
  }

  // .common.msg.EMsgContentType msg_content_type = 5;
  if (this->msg_content_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->msg_content_type(), target);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // string msg_id = 7;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessageRequest.msg_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->msg_id(), target);
  }

  // bool burn_after_read = 8;
  if (this->burn_after_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->burn_after_read(), target);
  }

  // .common.enumeration.EClientType from_client_type = 9;
  if (this->from_client_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->from_client_type(), target);
  }

  // bool is_jimao = 10;
  if (this->is_jimao() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_jimao(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chat.MultiMessageRequest)
  return target;
}

size_t MultiMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chat.MultiMessageRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string to_username = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->to_username_size());
  for (int i = 0, n = this->to_username_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->to_username(i));
  }

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_username());
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  // string from_nick = 3;
  if (this->from_nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_nick());
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string msg_id = 7;
  if (this->msg_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_id());
  }

  // .common.msg.EMsgContentType msg_content_type = 5;
  if (this->msg_content_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_content_type());
  }

  // .common.enumeration.EClientType from_client_type = 9;
  if (this->from_client_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->from_client_type());
  }

  // bool burn_after_read = 8;
  if (this->burn_after_read() != 0) {
    total_size += 1 + 1;
  }

  // bool is_jimao = 10;
  if (this->is_jimao() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chat.MultiMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiMessageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiMessageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chat.MultiMessageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chat.MultiMessageRequest)
    MergeFrom(*source);
  }
}

void MultiMessageRequest::MergeFrom(const MultiMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chat.MultiMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  to_username_.MergeFrom(from.to_username_);
  if (from.from_username().size() > 0) {

    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.from_nick().size() > 0) {

    from_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_nick_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.msg_id().size() > 0) {

    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  if (from.msg_content_type() != 0) {
    set_msg_content_type(from.msg_content_type());
  }
  if (from.from_client_type() != 0) {
    set_from_client_type(from.from_client_type());
  }
  if (from.burn_after_read() != 0) {
    set_burn_after_read(from.burn_after_read());
  }
  if (from.is_jimao() != 0) {
    set_is_jimao(from.is_jimao());
  }
}

void MultiMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chat.MultiMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiMessageRequest::CopyFrom(const MultiMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chat.MultiMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiMessageRequest::IsInitialized() const {
  return true;
}

void MultiMessageRequest::Swap(MultiMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiMessageRequest::InternalSwap(MultiMessageRequest* other) {
  using std::swap;
  to_username_.InternalSwap(&other->to_username_);
  from_username_.Swap(&other->from_username_);
  appkey_.Swap(&other->appkey_);
  from_nick_.Swap(&other->from_nick_);
  data_.Swap(&other->data_);
  msg_id_.Swap(&other->msg_id_);
  swap(msg_content_type_, other->msg_content_type_);
  swap(from_client_type_, other->from_client_type_);
  swap(burn_after_read_, other->burn_after_read_);
  swap(is_jimao_, other->is_jimao_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiMessageRequest::GetMetadata() const {
  protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiMessageResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiMessageResponse::kRetFieldNumber;
const int MultiMessageResponse::kGuidFieldNumber;
const int MultiMessageResponse::kMsgIdFieldNumber;
const int MultiMessageResponse::kJimaoLeftNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiMessageResponse::MultiMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchat_2eproto::InitDefaultsMultiMessageResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chat.MultiMessageResponse)
}
MultiMessageResponse::MultiMessageResponse(const MultiMessageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_id().size() > 0) {
    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  jimao_left_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.jimao_left_num().size() > 0) {
    jimao_left_num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jimao_left_num_);
  }
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:outer.chat.MultiMessageResponse)
}

void MultiMessageResponse::SharedCtor() {
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jimao_left_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(ret_));
  _cached_size_ = 0;
}

MultiMessageResponse::~MultiMessageResponse() {
  // @@protoc_insertion_point(destructor:outer.chat.MultiMessageResponse)
  SharedDtor();
}

void MultiMessageResponse::SharedDtor() {
  msg_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jimao_left_num_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MultiMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiMessageResponse::descriptor() {
  ::protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiMessageResponse& MultiMessageResponse::default_instance() {
  ::protobuf_outer_2fchat_2eproto::InitDefaultsMultiMessageResponse();
  return *internal_default_instance();
}

MultiMessageResponse* MultiMessageResponse::New(::google::protobuf::Arena* arena) const {
  MultiMessageResponse* n = new MultiMessageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chat.MultiMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jimao_left_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(ret_));
  _internal_metadata_.Clear();
}

bool MultiMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chat.MultiMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.errcode.EErrorCode ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::common::errcode::EErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_id().data(), static_cast<int>(this->msg_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.MultiMessageResponse.msg_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string jimao_left_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jimao_left_num()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jimao_left_num().data(), static_cast<int>(this->jimao_left_num().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.MultiMessageResponse.jimao_left_num"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chat.MultiMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chat.MultiMessageResponse)
  return false;
#undef DO_
}

void MultiMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chat.MultiMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // string msg_id = 3;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessageResponse.msg_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg_id(), output);
  }

  // string jimao_left_num = 4;
  if (this->jimao_left_num().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jimao_left_num().data(), static_cast<int>(this->jimao_left_num().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessageResponse.jimao_left_num");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->jimao_left_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chat.MultiMessageResponse)
}

::google::protobuf::uint8* MultiMessageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chat.MultiMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // string msg_id = 3;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessageResponse.msg_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_id(), target);
  }

  // string jimao_left_num = 4;
  if (this->jimao_left_num().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jimao_left_num().data(), static_cast<int>(this->jimao_left_num().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessageResponse.jimao_left_num");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jimao_left_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chat.MultiMessageResponse)
  return target;
}

size_t MultiMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chat.MultiMessageResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg_id = 3;
  if (this->msg_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_id());
  }

  // string jimao_left_num = 4;
  if (this->jimao_left_num().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->jimao_left_num());
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chat.MultiMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiMessageResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiMessageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chat.MultiMessageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chat.MultiMessageResponse)
    MergeFrom(*source);
  }
}

void MultiMessageResponse::MergeFrom(const MultiMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chat.MultiMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_id().size() > 0) {

    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  if (from.jimao_left_num().size() > 0) {

    jimao_left_num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jimao_left_num_);
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void MultiMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chat.MultiMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiMessageResponse::CopyFrom(const MultiMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chat.MultiMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiMessageResponse::IsInitialized() const {
  return true;
}

void MultiMessageResponse::Swap(MultiMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiMessageResponse::InternalSwap(MultiMessageResponse* other) {
  using std::swap;
  msg_id_.Swap(&other->msg_id_);
  jimao_left_num_.Swap(&other->jimao_left_num_);
  swap(guid_, other->guid_);
  swap(ret_, other->ret_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiMessageResponse::GetMetadata() const {
  protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiMessage::kFromUsernameFieldNumber;
const int MultiMessage::kAppkeyFieldNumber;
const int MultiMessage::kFromNickFieldNumber;
const int MultiMessage::kMsgContentTypeFieldNumber;
const int MultiMessage::kDataFieldNumber;
const int MultiMessage::kGuidFieldNumber;
const int MultiMessage::kMsgIdFieldNumber;
const int MultiMessage::kReceiverFieldNumber;
const int MultiMessage::kIsJimaoFieldNumber;
const int MultiMessage::kIsReadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiMessage::MultiMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchat_2eproto::InitDefaultsMultiMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chat.MultiMessage)
}
MultiMessage::MultiMessage(const MultiMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      receiver_(from.receiver_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_username().size() > 0) {
    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  from_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_nick().size() > 0) {
    from_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_nick_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_id().size() > 0) {
    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_read_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(is_read_));
  // @@protoc_insertion_point(copy_constructor:outer.chat.MultiMessage)
}

void MultiMessage::SharedCtor() {
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_read_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(is_read_));
  _cached_size_ = 0;
}

MultiMessage::~MultiMessage() {
  // @@protoc_insertion_point(destructor:outer.chat.MultiMessage)
  SharedDtor();
}

void MultiMessage::SharedDtor() {
  from_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MultiMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiMessage::descriptor() {
  ::protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiMessage& MultiMessage::default_instance() {
  ::protobuf_outer_2fchat_2eproto::InitDefaultsMultiMessage();
  return *internal_default_instance();
}

MultiMessage* MultiMessage::New(::google::protobuf::Arena* arena) const {
  MultiMessage* n = new MultiMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chat.MultiMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiver_.Clear();
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_read_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(is_read_));
  _internal_metadata_.Clear();
}

bool MultiMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chat.MultiMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_username().data(), static_cast<int>(this->from_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.MultiMessage.from_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appkey().data(), static_cast<int>(this->appkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.MultiMessage.appkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string from_nick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_nick().data(), static_cast<int>(this->from_nick().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.MultiMessage.from_nick"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.msg.EMsgContentType msg_content_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_content_type(static_cast< ::common::msg::EMsgContentType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 guid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_id().data(), static_cast<int>(this->msg_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.MultiMessage.msg_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string receiver = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_receiver()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->receiver(this->receiver_size() - 1).data(),
            static_cast<int>(this->receiver(this->receiver_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.MultiMessage.receiver"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_jimao = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_jimao_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_read = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chat.MultiMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chat.MultiMessage)
  return false;
#undef DO_
}

void MultiMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chat.MultiMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessage.from_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_username(), output);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessage.appkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // string from_nick = 3;
  if (this->from_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_nick().data(), static_cast<int>(this->from_nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessage.from_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_nick(), output);
  }

  // .common.msg.EMsgContentType msg_content_type = 4;
  if (this->msg_content_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->msg_content_type(), output);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // uint64 guid = 6;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->guid(), output);
  }

  // string msg_id = 7;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessage.msg_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->msg_id(), output);
  }

  // repeated string receiver = 8;
  for (int i = 0, n = this->receiver_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiver(i).data(), static_cast<int>(this->receiver(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessage.receiver");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->receiver(i), output);
  }

  // bool is_jimao = 9;
  if (this->is_jimao() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_jimao(), output);
  }

  // bool is_read = 10;
  if (this->is_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_read(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chat.MultiMessage)
}

::google::protobuf::uint8* MultiMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chat.MultiMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessage.from_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_username(), target);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessage.appkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appkey(), target);
  }

  // string from_nick = 3;
  if (this->from_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_nick().data(), static_cast<int>(this->from_nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessage.from_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_nick(), target);
  }

  // .common.msg.EMsgContentType msg_content_type = 4;
  if (this->msg_content_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->msg_content_type(), target);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // uint64 guid = 6;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->guid(), target);
  }

  // string msg_id = 7;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessage.msg_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->msg_id(), target);
  }

  // repeated string receiver = 8;
  for (int i = 0, n = this->receiver_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receiver(i).data(), static_cast<int>(this->receiver(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.MultiMessage.receiver");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->receiver(i), target);
  }

  // bool is_jimao = 9;
  if (this->is_jimao() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_jimao(), target);
  }

  // bool is_read = 10;
  if (this->is_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_read(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chat.MultiMessage)
  return target;
}

size_t MultiMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chat.MultiMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string receiver = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->receiver_size());
  for (int i = 0, n = this->receiver_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->receiver(i));
  }

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_username());
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  // string from_nick = 3;
  if (this->from_nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_nick());
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string msg_id = 7;
  if (this->msg_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_id());
  }

  // uint64 guid = 6;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // .common.msg.EMsgContentType msg_content_type = 4;
  if (this->msg_content_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_content_type());
  }

  // bool is_jimao = 9;
  if (this->is_jimao() != 0) {
    total_size += 1 + 1;
  }

  // bool is_read = 10;
  if (this->is_read() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chat.MultiMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chat.MultiMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chat.MultiMessage)
    MergeFrom(*source);
  }
}

void MultiMessage::MergeFrom(const MultiMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chat.MultiMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  receiver_.MergeFrom(from.receiver_);
  if (from.from_username().size() > 0) {

    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.from_nick().size() > 0) {

    from_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_nick_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.msg_id().size() > 0) {

    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.msg_content_type() != 0) {
    set_msg_content_type(from.msg_content_type());
  }
  if (from.is_jimao() != 0) {
    set_is_jimao(from.is_jimao());
  }
  if (from.is_read() != 0) {
    set_is_read(from.is_read());
  }
}

void MultiMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chat.MultiMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiMessage::CopyFrom(const MultiMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chat.MultiMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiMessage::IsInitialized() const {
  return true;
}

void MultiMessage::Swap(MultiMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiMessage::InternalSwap(MultiMessage* other) {
  using std::swap;
  receiver_.InternalSwap(&other->receiver_);
  from_username_.Swap(&other->from_username_);
  appkey_.Swap(&other->appkey_);
  from_nick_.Swap(&other->from_nick_);
  data_.Swap(&other->data_);
  msg_id_.Swap(&other->msg_id_);
  swap(guid_, other->guid_);
  swap(msg_content_type_, other->msg_content_type_);
  swap(is_jimao_, other->is_jimao_);
  swap(is_read_, other->is_read_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiMessage::GetMetadata() const {
  protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PrivateMessageRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivateMessageRequest::kFromUsernameFieldNumber;
const int PrivateMessageRequest::kAppkeyFieldNumber;
const int PrivateMessageRequest::kFromNickFieldNumber;
const int PrivateMessageRequest::kToUsernameFieldNumber;
const int PrivateMessageRequest::kMsgContentTypeFieldNumber;
const int PrivateMessageRequest::kDataFieldNumber;
const int PrivateMessageRequest::kMsgIdFieldNumber;
const int PrivateMessageRequest::kBurnAfterReadFieldNumber;
const int PrivateMessageRequest::kFromClientTypeFieldNumber;
const int PrivateMessageRequest::kIsJimaoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivateMessageRequest::PrivateMessageRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchat_2eproto::InitDefaultsPrivateMessageRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chat.PrivateMessageRequest)
}
PrivateMessageRequest::PrivateMessageRequest(const PrivateMessageRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_username().size() > 0) {
    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  from_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_nick().size() > 0) {
    from_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_nick_);
  }
  to_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.to_username().size() > 0) {
    to_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_username_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_id().size() > 0) {
    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  ::memcpy(&msg_content_type_, &from.msg_content_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_jimao_) -
    reinterpret_cast<char*>(&msg_content_type_)) + sizeof(is_jimao_));
  // @@protoc_insertion_point(copy_constructor:outer.chat.PrivateMessageRequest)
}

void PrivateMessageRequest::SharedCtor() {
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_content_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_jimao_) -
      reinterpret_cast<char*>(&msg_content_type_)) + sizeof(is_jimao_));
  _cached_size_ = 0;
}

PrivateMessageRequest::~PrivateMessageRequest() {
  // @@protoc_insertion_point(destructor:outer.chat.PrivateMessageRequest)
  SharedDtor();
}

void PrivateMessageRequest::SharedDtor() {
  from_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrivateMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivateMessageRequest::descriptor() {
  ::protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrivateMessageRequest& PrivateMessageRequest::default_instance() {
  ::protobuf_outer_2fchat_2eproto::InitDefaultsPrivateMessageRequest();
  return *internal_default_instance();
}

PrivateMessageRequest* PrivateMessageRequest::New(::google::protobuf::Arena* arena) const {
  PrivateMessageRequest* n = new PrivateMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrivateMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chat.PrivateMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_content_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_jimao_) -
      reinterpret_cast<char*>(&msg_content_type_)) + sizeof(is_jimao_));
  _internal_metadata_.Clear();
}

bool PrivateMessageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chat.PrivateMessageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_username().data(), static_cast<int>(this->from_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.PrivateMessageRequest.from_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appkey().data(), static_cast<int>(this->appkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.PrivateMessageRequest.appkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string from_nick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_nick().data(), static_cast<int>(this->from_nick().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.PrivateMessageRequest.from_nick"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string to_username = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_username().data(), static_cast<int>(this->to_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.PrivateMessageRequest.to_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.msg.EMsgContentType msg_content_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_content_type(static_cast< ::common::msg::EMsgContentType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_id().data(), static_cast<int>(this->msg_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.PrivateMessageRequest.msg_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool burn_after_read = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &burn_after_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.enumeration.EClientType from_client_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_from_client_type(static_cast< ::common::enumeration::EClientType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_jimao = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_jimao_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chat.PrivateMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chat.PrivateMessageRequest)
  return false;
#undef DO_
}

void PrivateMessageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chat.PrivateMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessageRequest.from_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_username(), output);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessageRequest.appkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // string from_nick = 3;
  if (this->from_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_nick().data(), static_cast<int>(this->from_nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessageRequest.from_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_nick(), output);
  }

  // string to_username = 4;
  if (this->to_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_username().data(), static_cast<int>(this->to_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessageRequest.to_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to_username(), output);
  }

  // .common.msg.EMsgContentType msg_content_type = 5;
  if (this->msg_content_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->msg_content_type(), output);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // string msg_id = 7;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessageRequest.msg_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->msg_id(), output);
  }

  // bool burn_after_read = 8;
  if (this->burn_after_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->burn_after_read(), output);
  }

  // .common.enumeration.EClientType from_client_type = 9;
  if (this->from_client_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->from_client_type(), output);
  }

  // bool is_jimao = 10;
  if (this->is_jimao() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_jimao(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chat.PrivateMessageRequest)
}

::google::protobuf::uint8* PrivateMessageRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chat.PrivateMessageRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessageRequest.from_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_username(), target);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessageRequest.appkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appkey(), target);
  }

  // string from_nick = 3;
  if (this->from_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_nick().data(), static_cast<int>(this->from_nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessageRequest.from_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_nick(), target);
  }

  // string to_username = 4;
  if (this->to_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_username().data(), static_cast<int>(this->to_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessageRequest.to_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to_username(), target);
  }

  // .common.msg.EMsgContentType msg_content_type = 5;
  if (this->msg_content_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->msg_content_type(), target);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // string msg_id = 7;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessageRequest.msg_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->msg_id(), target);
  }

  // bool burn_after_read = 8;
  if (this->burn_after_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->burn_after_read(), target);
  }

  // .common.enumeration.EClientType from_client_type = 9;
  if (this->from_client_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->from_client_type(), target);
  }

  // bool is_jimao = 10;
  if (this->is_jimao() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_jimao(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chat.PrivateMessageRequest)
  return target;
}

size_t PrivateMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chat.PrivateMessageRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string from_username = 1;
  if (this->from_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_username());
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  // string from_nick = 3;
  if (this->from_nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_nick());
  }

  // string to_username = 4;
  if (this->to_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_username());
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string msg_id = 7;
  if (this->msg_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_id());
  }

  // .common.msg.EMsgContentType msg_content_type = 5;
  if (this->msg_content_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_content_type());
  }

  // .common.enumeration.EClientType from_client_type = 9;
  if (this->from_client_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->from_client_type());
  }

  // bool burn_after_read = 8;
  if (this->burn_after_read() != 0) {
    total_size += 1 + 1;
  }

  // bool is_jimao = 10;
  if (this->is_jimao() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivateMessageRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chat.PrivateMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivateMessageRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrivateMessageRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chat.PrivateMessageRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chat.PrivateMessageRequest)
    MergeFrom(*source);
  }
}

void PrivateMessageRequest::MergeFrom(const PrivateMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chat.PrivateMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_username().size() > 0) {

    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.from_nick().size() > 0) {

    from_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_nick_);
  }
  if (from.to_username().size() > 0) {

    to_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_username_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.msg_id().size() > 0) {

    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  if (from.msg_content_type() != 0) {
    set_msg_content_type(from.msg_content_type());
  }
  if (from.from_client_type() != 0) {
    set_from_client_type(from.from_client_type());
  }
  if (from.burn_after_read() != 0) {
    set_burn_after_read(from.burn_after_read());
  }
  if (from.is_jimao() != 0) {
    set_is_jimao(from.is_jimao());
  }
}

void PrivateMessageRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chat.PrivateMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateMessageRequest::CopyFrom(const PrivateMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chat.PrivateMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateMessageRequest::IsInitialized() const {
  return true;
}

void PrivateMessageRequest::Swap(PrivateMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivateMessageRequest::InternalSwap(PrivateMessageRequest* other) {
  using std::swap;
  from_username_.Swap(&other->from_username_);
  appkey_.Swap(&other->appkey_);
  from_nick_.Swap(&other->from_nick_);
  to_username_.Swap(&other->to_username_);
  data_.Swap(&other->data_);
  msg_id_.Swap(&other->msg_id_);
  swap(msg_content_type_, other->msg_content_type_);
  swap(from_client_type_, other->from_client_type_);
  swap(burn_after_read_, other->burn_after_read_);
  swap(is_jimao_, other->is_jimao_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrivateMessageRequest::GetMetadata() const {
  protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PrivateMessageResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivateMessageResponse::kRetFieldNumber;
const int PrivateMessageResponse::kGuidFieldNumber;
const int PrivateMessageResponse::kMsgIdFieldNumber;
const int PrivateMessageResponse::kJimaoLeftNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivateMessageResponse::PrivateMessageResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchat_2eproto::InitDefaultsPrivateMessageResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chat.PrivateMessageResponse)
}
PrivateMessageResponse::PrivateMessageResponse(const PrivateMessageResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_id().size() > 0) {
    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  jimao_left_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.jimao_left_num().size() > 0) {
    jimao_left_num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jimao_left_num_);
  }
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:outer.chat.PrivateMessageResponse)
}

void PrivateMessageResponse::SharedCtor() {
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jimao_left_num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(ret_));
  _cached_size_ = 0;
}

PrivateMessageResponse::~PrivateMessageResponse() {
  // @@protoc_insertion_point(destructor:outer.chat.PrivateMessageResponse)
  SharedDtor();
}

void PrivateMessageResponse::SharedDtor() {
  msg_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jimao_left_num_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrivateMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivateMessageResponse::descriptor() {
  ::protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrivateMessageResponse& PrivateMessageResponse::default_instance() {
  ::protobuf_outer_2fchat_2eproto::InitDefaultsPrivateMessageResponse();
  return *internal_default_instance();
}

PrivateMessageResponse* PrivateMessageResponse::New(::google::protobuf::Arena* arena) const {
  PrivateMessageResponse* n = new PrivateMessageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrivateMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chat.PrivateMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jimao_left_num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(ret_));
  _internal_metadata_.Clear();
}

bool PrivateMessageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chat.PrivateMessageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.errcode.EErrorCode ret = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::common::errcode::EErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_id().data(), static_cast<int>(this->msg_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.PrivateMessageResponse.msg_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string jimao_left_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jimao_left_num()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jimao_left_num().data(), static_cast<int>(this->jimao_left_num().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.PrivateMessageResponse.jimao_left_num"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chat.PrivateMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chat.PrivateMessageResponse)
  return false;
#undef DO_
}

void PrivateMessageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chat.PrivateMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guid(), output);
  }

  // string msg_id = 3;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessageResponse.msg_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg_id(), output);
  }

  // string jimao_left_num = 4;
  if (this->jimao_left_num().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jimao_left_num().data(), static_cast<int>(this->jimao_left_num().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessageResponse.jimao_left_num");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->jimao_left_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chat.PrivateMessageResponse)
}

::google::protobuf::uint8* PrivateMessageResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chat.PrivateMessageResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guid(), target);
  }

  // string msg_id = 3;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessageResponse.msg_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg_id(), target);
  }

  // string jimao_left_num = 4;
  if (this->jimao_left_num().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jimao_left_num().data(), static_cast<int>(this->jimao_left_num().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessageResponse.jimao_left_num");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->jimao_left_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chat.PrivateMessageResponse)
  return target;
}

size_t PrivateMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chat.PrivateMessageResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg_id = 3;
  if (this->msg_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_id());
  }

  // string jimao_left_num = 4;
  if (this->jimao_left_num().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->jimao_left_num());
  }

  // uint64 guid = 2;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // .common.errcode.EErrorCode ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivateMessageResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chat.PrivateMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivateMessageResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrivateMessageResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chat.PrivateMessageResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chat.PrivateMessageResponse)
    MergeFrom(*source);
  }
}

void PrivateMessageResponse::MergeFrom(const PrivateMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chat.PrivateMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_id().size() > 0) {

    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  if (from.jimao_left_num().size() > 0) {

    jimao_left_num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jimao_left_num_);
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
}

void PrivateMessageResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chat.PrivateMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateMessageResponse::CopyFrom(const PrivateMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chat.PrivateMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateMessageResponse::IsInitialized() const {
  return true;
}

void PrivateMessageResponse::Swap(PrivateMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivateMessageResponse::InternalSwap(PrivateMessageResponse* other) {
  using std::swap;
  msg_id_.Swap(&other->msg_id_);
  jimao_left_num_.Swap(&other->jimao_left_num_);
  swap(guid_, other->guid_);
  swap(ret_, other->ret_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrivateMessageResponse::GetMetadata() const {
  protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PrivateMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivateMessage::kFromUsernameFieldNumber;
const int PrivateMessage::kAppkeyFieldNumber;
const int PrivateMessage::kFromNickFieldNumber;
const int PrivateMessage::kMsgContentTypeFieldNumber;
const int PrivateMessage::kDataFieldNumber;
const int PrivateMessage::kGuidFieldNumber;
const int PrivateMessage::kMsgIdFieldNumber;
const int PrivateMessage::kBurnAfterReadFieldNumber;
const int PrivateMessage::kToUsernameFieldNumber;
const int PrivateMessage::kIsJimaoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivateMessage::PrivateMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchat_2eproto::InitDefaultsPrivateMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chat.PrivateMessage)
}
PrivateMessage::PrivateMessage(const PrivateMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_username().size() > 0) {
    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.appkey().size() > 0) {
    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  from_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.from_nick().size() > 0) {
    from_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_nick_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg_id().size() > 0) {
    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  to_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.to_username().size() > 0) {
    to_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_username_);
  }
  ::memcpy(&guid_, &from.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_jimao_) -
    reinterpret_cast<char*>(&guid_)) + sizeof(is_jimao_));
  // @@protoc_insertion_point(copy_constructor:outer.chat.PrivateMessage)
}

void PrivateMessage::SharedCtor() {
  from_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_nick_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_jimao_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(is_jimao_));
  _cached_size_ = 0;
}

PrivateMessage::~PrivateMessage() {
  // @@protoc_insertion_point(destructor:outer.chat.PrivateMessage)
  SharedDtor();
}

void PrivateMessage::SharedDtor() {
  from_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_nick_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrivateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivateMessage::descriptor() {
  ::protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PrivateMessage& PrivateMessage::default_instance() {
  ::protobuf_outer_2fchat_2eproto::InitDefaultsPrivateMessage();
  return *internal_default_instance();
}

PrivateMessage* PrivateMessage::New(::google::protobuf::Arena* arena) const {
  PrivateMessage* n = new PrivateMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrivateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chat.PrivateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_jimao_) -
      reinterpret_cast<char*>(&guid_)) + sizeof(is_jimao_));
  _internal_metadata_.Clear();
}

bool PrivateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chat.PrivateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string from_username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_username().data(), static_cast<int>(this->from_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.PrivateMessage.from_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string appkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appkey().data(), static_cast<int>(this->appkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.PrivateMessage.appkey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string from_nick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_nick()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->from_nick().data(), static_cast<int>(this->from_nick().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.PrivateMessage.from_nick"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .common.msg.EMsgContentType msg_content_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_content_type(static_cast< ::common::msg::EMsgContentType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 guid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg_id().data(), static_cast<int>(this->msg_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.PrivateMessage.msg_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool burn_after_read = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &burn_after_read_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string to_username = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->to_username().data(), static_cast<int>(this->to_username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "outer.chat.PrivateMessage.to_username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_jimao = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_jimao_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chat.PrivateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chat.PrivateMessage)
  return false;
#undef DO_
}

void PrivateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chat.PrivateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessage.from_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_username(), output);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessage.appkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appkey(), output);
  }

  // string from_nick = 3;
  if (this->from_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_nick().data(), static_cast<int>(this->from_nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessage.from_nick");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_nick(), output);
  }

  // .common.msg.EMsgContentType msg_content_type = 4;
  if (this->msg_content_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->msg_content_type(), output);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // uint64 guid = 6;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->guid(), output);
  }

  // string msg_id = 7;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessage.msg_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->msg_id(), output);
  }

  // bool burn_after_read = 8;
  if (this->burn_after_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->burn_after_read(), output);
  }

  // string to_username = 9;
  if (this->to_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_username().data(), static_cast<int>(this->to_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessage.to_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->to_username(), output);
  }

  // bool is_jimao = 10;
  if (this->is_jimao() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_jimao(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chat.PrivateMessage)
}

::google::protobuf::uint8* PrivateMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chat.PrivateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from_username = 1;
  if (this->from_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_username().data(), static_cast<int>(this->from_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessage.from_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_username(), target);
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appkey().data(), static_cast<int>(this->appkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessage.appkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appkey(), target);
  }

  // string from_nick = 3;
  if (this->from_nick().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->from_nick().data(), static_cast<int>(this->from_nick().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessage.from_nick");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_nick(), target);
  }

  // .common.msg.EMsgContentType msg_content_type = 4;
  if (this->msg_content_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->msg_content_type(), target);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // uint64 guid = 6;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->guid(), target);
  }

  // string msg_id = 7;
  if (this->msg_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg_id().data(), static_cast<int>(this->msg_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessage.msg_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->msg_id(), target);
  }

  // bool burn_after_read = 8;
  if (this->burn_after_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->burn_after_read(), target);
  }

  // string to_username = 9;
  if (this->to_username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->to_username().data(), static_cast<int>(this->to_username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "outer.chat.PrivateMessage.to_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->to_username(), target);
  }

  // bool is_jimao = 10;
  if (this->is_jimao() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_jimao(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chat.PrivateMessage)
  return target;
}

size_t PrivateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chat.PrivateMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string from_username = 1;
  if (this->from_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_username());
  }

  // string appkey = 2;
  if (this->appkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appkey());
  }

  // string from_nick = 3;
  if (this->from_nick().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->from_nick());
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string msg_id = 7;
  if (this->msg_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_id());
  }

  // string to_username = 9;
  if (this->to_username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->to_username());
  }

  // uint64 guid = 6;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->guid());
  }

  // .common.msg.EMsgContentType msg_content_type = 4;
  if (this->msg_content_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_content_type());
  }

  // bool burn_after_read = 8;
  if (this->burn_after_read() != 0) {
    total_size += 1 + 1;
  }

  // bool is_jimao = 10;
  if (this->is_jimao() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivateMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chat.PrivateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivateMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrivateMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chat.PrivateMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chat.PrivateMessage)
    MergeFrom(*source);
  }
}

void PrivateMessage::MergeFrom(const PrivateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chat.PrivateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_username().size() > 0) {

    from_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_username_);
  }
  if (from.appkey().size() > 0) {

    appkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appkey_);
  }
  if (from.from_nick().size() > 0) {

    from_nick_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_nick_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.msg_id().size() > 0) {

    msg_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_id_);
  }
  if (from.to_username().size() > 0) {

    to_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_username_);
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.msg_content_type() != 0) {
    set_msg_content_type(from.msg_content_type());
  }
  if (from.burn_after_read() != 0) {
    set_burn_after_read(from.burn_after_read());
  }
  if (from.is_jimao() != 0) {
    set_is_jimao(from.is_jimao());
  }
}

void PrivateMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chat.PrivateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateMessage::CopyFrom(const PrivateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chat.PrivateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateMessage::IsInitialized() const {
  return true;
}

void PrivateMessage::Swap(PrivateMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivateMessage::InternalSwap(PrivateMessage* other) {
  using std::swap;
  from_username_.Swap(&other->from_username_);
  appkey_.Swap(&other->appkey_);
  from_nick_.Swap(&other->from_nick_);
  data_.Swap(&other->data_);
  msg_id_.Swap(&other->msg_id_);
  to_username_.Swap(&other->to_username_);
  swap(guid_, other->guid_);
  swap(msg_content_type_, other->msg_content_type_);
  swap(burn_after_read_, other->burn_after_read_);
  swap(is_jimao_, other->is_jimao_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrivateMessage::GetMetadata() const {
  protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetServerTimestampRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServerTimestampRequest::GetServerTimestampRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchat_2eproto::InitDefaultsGetServerTimestampRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chat.GetServerTimestampRequest)
}
GetServerTimestampRequest::GetServerTimestampRequest(const GetServerTimestampRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:outer.chat.GetServerTimestampRequest)
}

void GetServerTimestampRequest::SharedCtor() {
  _cached_size_ = 0;
}

GetServerTimestampRequest::~GetServerTimestampRequest() {
  // @@protoc_insertion_point(destructor:outer.chat.GetServerTimestampRequest)
  SharedDtor();
}

void GetServerTimestampRequest::SharedDtor() {
}

void GetServerTimestampRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerTimestampRequest::descriptor() {
  ::protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetServerTimestampRequest& GetServerTimestampRequest::default_instance() {
  ::protobuf_outer_2fchat_2eproto::InitDefaultsGetServerTimestampRequest();
  return *internal_default_instance();
}

GetServerTimestampRequest* GetServerTimestampRequest::New(::google::protobuf::Arena* arena) const {
  GetServerTimestampRequest* n = new GetServerTimestampRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetServerTimestampRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chat.GetServerTimestampRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetServerTimestampRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chat.GetServerTimestampRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chat.GetServerTimestampRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chat.GetServerTimestampRequest)
  return false;
#undef DO_
}

void GetServerTimestampRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chat.GetServerTimestampRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chat.GetServerTimestampRequest)
}

::google::protobuf::uint8* GetServerTimestampRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chat.GetServerTimestampRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chat.GetServerTimestampRequest)
  return target;
}

size_t GetServerTimestampRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chat.GetServerTimestampRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerTimestampRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chat.GetServerTimestampRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServerTimestampRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServerTimestampRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chat.GetServerTimestampRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chat.GetServerTimestampRequest)
    MergeFrom(*source);
  }
}

void GetServerTimestampRequest::MergeFrom(const GetServerTimestampRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chat.GetServerTimestampRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetServerTimestampRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chat.GetServerTimestampRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerTimestampRequest::CopyFrom(const GetServerTimestampRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chat.GetServerTimestampRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerTimestampRequest::IsInitialized() const {
  return true;
}

void GetServerTimestampRequest::Swap(GetServerTimestampRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetServerTimestampRequest::InternalSwap(GetServerTimestampRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetServerTimestampRequest::GetMetadata() const {
  protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetServerTimestampResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServerTimestampResponse::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServerTimestampResponse::GetServerTimestampResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_outer_2fchat_2eproto::InitDefaultsGetServerTimestampResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:outer.chat.GetServerTimestampResponse)
}
GetServerTimestampResponse::GetServerTimestampResponse(const GetServerTimestampResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:outer.chat.GetServerTimestampResponse)
}

void GetServerTimestampResponse::SharedCtor() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

GetServerTimestampResponse::~GetServerTimestampResponse() {
  // @@protoc_insertion_point(destructor:outer.chat.GetServerTimestampResponse)
  SharedDtor();
}

void GetServerTimestampResponse::SharedDtor() {
}

void GetServerTimestampResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerTimestampResponse::descriptor() {
  ::protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetServerTimestampResponse& GetServerTimestampResponse::default_instance() {
  ::protobuf_outer_2fchat_2eproto::InitDefaultsGetServerTimestampResponse();
  return *internal_default_instance();
}

GetServerTimestampResponse* GetServerTimestampResponse::New(::google::protobuf::Arena* arena) const {
  GetServerTimestampResponse* n = new GetServerTimestampResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetServerTimestampResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:outer.chat.GetServerTimestampResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool GetServerTimestampResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:outer.chat.GetServerTimestampResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:outer.chat.GetServerTimestampResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:outer.chat.GetServerTimestampResponse)
  return false;
#undef DO_
}

void GetServerTimestampResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:outer.chat.GetServerTimestampResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:outer.chat.GetServerTimestampResponse)
}

::google::protobuf::uint8* GetServerTimestampResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:outer.chat.GetServerTimestampResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:outer.chat.GetServerTimestampResponse)
  return target;
}

size_t GetServerTimestampResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:outer.chat.GetServerTimestampResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerTimestampResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:outer.chat.GetServerTimestampResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServerTimestampResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServerTimestampResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:outer.chat.GetServerTimestampResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:outer.chat.GetServerTimestampResponse)
    MergeFrom(*source);
  }
}

void GetServerTimestampResponse::MergeFrom(const GetServerTimestampResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:outer.chat.GetServerTimestampResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void GetServerTimestampResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:outer.chat.GetServerTimestampResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerTimestampResponse::CopyFrom(const GetServerTimestampResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:outer.chat.GetServerTimestampResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerTimestampResponse::IsInitialized() const {
  return true;
}

void GetServerTimestampResponse::Swap(GetServerTimestampResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetServerTimestampResponse::InternalSwap(GetServerTimestampResponse* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetServerTimestampResponse::GetMetadata() const {
  protobuf_outer_2fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_outer_2fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chat
}  // namespace outer

// @@protoc_insertion_point(global_scope)
