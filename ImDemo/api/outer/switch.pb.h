// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: outer/switch.proto

#ifndef PROTOBUF_outer_2fswitch_2eproto__INCLUDED
#define PROTOBUF_outer_2fswitch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/errcode.pb.h"
#include "common/enumeration.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_outer_2fswitch_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[24];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsInviteRequestImpl();
void InitDefaultsInviteRequest();
void InitDefaultsInviteResponseImpl();
void InitDefaultsInviteResponse();
void InitDefaultsInviteMessageImpl();
void InitDefaultsInviteMessage();
void InitDefaultsConnectRequestImpl();
void InitDefaultsConnectRequest();
void InitDefaultsConnectResponseImpl();
void InitDefaultsConnectResponse();
void InitDefaultsConnectMessageImpl();
void InitDefaultsConnectMessage();
void InitDefaultsBusyRequestImpl();
void InitDefaultsBusyRequest();
void InitDefaultsBusyResponseImpl();
void InitDefaultsBusyResponse();
void InitDefaultsBusyMessageImpl();
void InitDefaultsBusyMessage();
void InitDefaultsCancelRequestImpl();
void InitDefaultsCancelRequest();
void InitDefaultsCancelResponseImpl();
void InitDefaultsCancelResponse();
void InitDefaultsCancelMessageImpl();
void InitDefaultsCancelMessage();
void InitDefaultsRefuseRequestImpl();
void InitDefaultsRefuseRequest();
void InitDefaultsRefuseResponseImpl();
void InitDefaultsRefuseResponse();
void InitDefaultsRefuseMessageImpl();
void InitDefaultsRefuseMessage();
void InitDefaultsByeRequestImpl();
void InitDefaultsByeRequest();
void InitDefaultsByeResponseImpl();
void InitDefaultsByeResponse();
void InitDefaultsByeMessageImpl();
void InitDefaultsByeMessage();
void InitDefaultsReinviteRequestImpl();
void InitDefaultsReinviteRequest();
void InitDefaultsReinviteResponseImpl();
void InitDefaultsReinviteResponse();
void InitDefaultsReinviteMessageImpl();
void InitDefaultsReinviteMessage();
void InitDefaultsCallMessageImpl();
void InitDefaultsCallMessage();
void InitDefaultsSyncCallRequestImpl();
void InitDefaultsSyncCallRequest();
void InitDefaultsSyncCallResponseImpl();
void InitDefaultsSyncCallResponse();
inline void InitDefaults() {
  InitDefaultsInviteRequest();
  InitDefaultsInviteResponse();
  InitDefaultsInviteMessage();
  InitDefaultsConnectRequest();
  InitDefaultsConnectResponse();
  InitDefaultsConnectMessage();
  InitDefaultsBusyRequest();
  InitDefaultsBusyResponse();
  InitDefaultsBusyMessage();
  InitDefaultsCancelRequest();
  InitDefaultsCancelResponse();
  InitDefaultsCancelMessage();
  InitDefaultsRefuseRequest();
  InitDefaultsRefuseResponse();
  InitDefaultsRefuseMessage();
  InitDefaultsByeRequest();
  InitDefaultsByeResponse();
  InitDefaultsByeMessage();
  InitDefaultsReinviteRequest();
  InitDefaultsReinviteResponse();
  InitDefaultsReinviteMessage();
  InitDefaultsCallMessage();
  InitDefaultsSyncCallRequest();
  InitDefaultsSyncCallResponse();
}
}  // namespace protobuf_outer_2fswitch_2eproto
namespace outer {
namespace switch {
class BusyMessage;
class BusyMessageDefaultTypeInternal;
extern BusyMessageDefaultTypeInternal _BusyMessage_default_instance_;
class BusyRequest;
class BusyRequestDefaultTypeInternal;
extern BusyRequestDefaultTypeInternal _BusyRequest_default_instance_;
class BusyResponse;
class BusyResponseDefaultTypeInternal;
extern BusyResponseDefaultTypeInternal _BusyResponse_default_instance_;
class ByeMessage;
class ByeMessageDefaultTypeInternal;
extern ByeMessageDefaultTypeInternal _ByeMessage_default_instance_;
class ByeRequest;
class ByeRequestDefaultTypeInternal;
extern ByeRequestDefaultTypeInternal _ByeRequest_default_instance_;
class ByeResponse;
class ByeResponseDefaultTypeInternal;
extern ByeResponseDefaultTypeInternal _ByeResponse_default_instance_;
class CallMessage;
class CallMessageDefaultTypeInternal;
extern CallMessageDefaultTypeInternal _CallMessage_default_instance_;
class CancelMessage;
class CancelMessageDefaultTypeInternal;
extern CancelMessageDefaultTypeInternal _CancelMessage_default_instance_;
class CancelRequest;
class CancelRequestDefaultTypeInternal;
extern CancelRequestDefaultTypeInternal _CancelRequest_default_instance_;
class CancelResponse;
class CancelResponseDefaultTypeInternal;
extern CancelResponseDefaultTypeInternal _CancelResponse_default_instance_;
class ConnectMessage;
class ConnectMessageDefaultTypeInternal;
extern ConnectMessageDefaultTypeInternal _ConnectMessage_default_instance_;
class ConnectRequest;
class ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class ConnectResponse;
class ConnectResponseDefaultTypeInternal;
extern ConnectResponseDefaultTypeInternal _ConnectResponse_default_instance_;
class InviteMessage;
class InviteMessageDefaultTypeInternal;
extern InviteMessageDefaultTypeInternal _InviteMessage_default_instance_;
class InviteRequest;
class InviteRequestDefaultTypeInternal;
extern InviteRequestDefaultTypeInternal _InviteRequest_default_instance_;
class InviteResponse;
class InviteResponseDefaultTypeInternal;
extern InviteResponseDefaultTypeInternal _InviteResponse_default_instance_;
class RefuseMessage;
class RefuseMessageDefaultTypeInternal;
extern RefuseMessageDefaultTypeInternal _RefuseMessage_default_instance_;
class RefuseRequest;
class RefuseRequestDefaultTypeInternal;
extern RefuseRequestDefaultTypeInternal _RefuseRequest_default_instance_;
class RefuseResponse;
class RefuseResponseDefaultTypeInternal;
extern RefuseResponseDefaultTypeInternal _RefuseResponse_default_instance_;
class ReinviteMessage;
class ReinviteMessageDefaultTypeInternal;
extern ReinviteMessageDefaultTypeInternal _ReinviteMessage_default_instance_;
class ReinviteRequest;
class ReinviteRequestDefaultTypeInternal;
extern ReinviteRequestDefaultTypeInternal _ReinviteRequest_default_instance_;
class ReinviteResponse;
class ReinviteResponseDefaultTypeInternal;
extern ReinviteResponseDefaultTypeInternal _ReinviteResponse_default_instance_;
class SyncCallRequest;
class SyncCallRequestDefaultTypeInternal;
extern SyncCallRequestDefaultTypeInternal _SyncCallRequest_default_instance_;
class SyncCallResponse;
class SyncCallResponseDefaultTypeInternal;
extern SyncCallResponseDefaultTypeInternal _SyncCallResponse_default_instance_;
}  // namespace switch
}  // namespace outer
namespace outer {
namespace switch {

enum ECallMediaType {
  UNKNOWN = 0,
  AUDIO = 3,
  VIDEO = 1,
  AV = 2,
  ECallMediaType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ECallMediaType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ECallMediaType_IsValid(int value);
const ECallMediaType ECallMediaType_MIN = UNKNOWN;
const ECallMediaType ECallMediaType_MAX = AUDIO;
const int ECallMediaType_ARRAYSIZE = ECallMediaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECallMediaType_descriptor();
inline const ::std::string& ECallMediaType_Name(ECallMediaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECallMediaType_descriptor(), value);
}
inline bool ECallMediaType_Parse(
    const ::std::string& name, ECallMediaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECallMediaType>(
    ECallMediaType_descriptor(), name, value);
}
enum ECallState {
  UNKNOWNSTATE = 0,
  RINGING = 6,
  CONNECTED = 1,
  CALLEE_BUSY = 2,
  CALLEE_REFUSED = 3,
  CALLER_CANCELED = 4,
  FINISH = 5,
  ECallState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ECallState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ECallState_IsValid(int value);
const ECallState ECallState_MIN = UNKNOWNSTATE;
const ECallState ECallState_MAX = RINGING;
const int ECallState_ARRAYSIZE = ECallState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECallState_descriptor();
inline const ::std::string& ECallState_Name(ECallState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECallState_descriptor(), value);
}
inline bool ECallState_Parse(
    const ::std::string& name, ECallState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECallState>(
    ECallState_descriptor(), name, value);
}
// ===================================================================

class InviteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.InviteRequest) */ {
 public:
  InviteRequest();
  virtual ~InviteRequest();

  InviteRequest(const InviteRequest& from);

  inline InviteRequest& operator=(const InviteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InviteRequest(InviteRequest&& from) noexcept
    : InviteRequest() {
    *this = ::std::move(from);
  }

  inline InviteRequest& operator=(InviteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InviteRequest* internal_default_instance() {
    return reinterpret_cast<const InviteRequest*>(
               &_InviteRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(InviteRequest* other);
  friend void swap(InviteRequest& a, InviteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InviteRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  InviteRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InviteRequest& from);
  void MergeFrom(const InviteRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InviteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 3;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 3;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string to_username = 4;
  void clear_to_username();
  static const int kToUsernameFieldNumber = 4;
  const ::std::string& to_username() const;
  void set_to_username(const ::std::string& value);
  #if LANG_CXX11
  void set_to_username(::std::string&& value);
  #endif
  void set_to_username(const char* value);
  void set_to_username(const char* value, size_t size);
  ::std::string* mutable_to_username();
  ::std::string* release_to_username();
  void set_allocated_to_username(::std::string* to_username);

  // string local_ip = 5;
  void clear_local_ip();
  static const int kLocalIpFieldNumber = 5;
  const ::std::string& local_ip() const;
  void set_local_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_local_ip(::std::string&& value);
  #endif
  void set_local_ip(const char* value);
  void set_local_ip(const char* value, size_t size);
  ::std::string* mutable_local_ip();
  ::std::string* release_local_ip();
  void set_allocated_local_ip(::std::string* local_ip);

  // string local_audio_codec_list = 7;
  void clear_local_audio_codec_list();
  static const int kLocalAudioCodecListFieldNumber = 7;
  const ::std::string& local_audio_codec_list() const;
  void set_local_audio_codec_list(const ::std::string& value);
  #if LANG_CXX11
  void set_local_audio_codec_list(::std::string&& value);
  #endif
  void set_local_audio_codec_list(const char* value);
  void set_local_audio_codec_list(const char* value, size_t size);
  ::std::string* mutable_local_audio_codec_list();
  ::std::string* release_local_audio_codec_list();
  void set_allocated_local_audio_codec_list(::std::string* local_audio_codec_list);

  // string local_video_codec_list = 9;
  void clear_local_video_codec_list();
  static const int kLocalVideoCodecListFieldNumber = 9;
  const ::std::string& local_video_codec_list() const;
  void set_local_video_codec_list(const ::std::string& value);
  #if LANG_CXX11
  void set_local_video_codec_list(::std::string&& value);
  #endif
  void set_local_video_codec_list(const char* value);
  void set_local_video_codec_list(const char* value, size_t size);
  ::std::string* mutable_local_video_codec_list();
  ::std::string* release_local_video_codec_list();
  void set_allocated_local_video_codec_list(::std::string* local_video_codec_list);

  // .outer.switch.ECallMediaType call_media_type = 1;
  void clear_call_media_type();
  static const int kCallMediaTypeFieldNumber = 1;
  ::outer::switch::ECallMediaType call_media_type() const;
  void set_call_media_type(::outer::switch::ECallMediaType value);

  // uint32 local_audio_port = 6;
  void clear_local_audio_port();
  static const int kLocalAudioPortFieldNumber = 6;
  ::google::protobuf::uint32 local_audio_port() const;
  void set_local_audio_port(::google::protobuf::uint32 value);

  // uint32 local_video_port = 8;
  void clear_local_video_port();
  static const int kLocalVideoPortFieldNumber = 8;
  ::google::protobuf::uint32 local_video_port() const;
  void set_local_video_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.switch.InviteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr to_username_;
  ::google::protobuf::internal::ArenaStringPtr local_ip_;
  ::google::protobuf::internal::ArenaStringPtr local_audio_codec_list_;
  ::google::protobuf::internal::ArenaStringPtr local_video_codec_list_;
  int call_media_type_;
  ::google::protobuf::uint32 local_audio_port_;
  ::google::protobuf::uint32 local_video_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsInviteRequestImpl();
};
// -------------------------------------------------------------------

class InviteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.InviteResponse) */ {
 public:
  InviteResponse();
  virtual ~InviteResponse();

  InviteResponse(const InviteResponse& from);

  inline InviteResponse& operator=(const InviteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InviteResponse(InviteResponse&& from) noexcept
    : InviteResponse() {
    *this = ::std::move(from);
  }

  inline InviteResponse& operator=(InviteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InviteResponse* internal_default_instance() {
    return reinterpret_cast<const InviteResponse*>(
               &_InviteResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(InviteResponse* other);
  friend void swap(InviteResponse& a, InviteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InviteResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  InviteResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InviteResponse& from);
  void MergeFrom(const InviteResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InviteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mrf_ip = 3;
  void clear_mrf_ip();
  static const int kMrfIpFieldNumber = 3;
  const ::std::string& mrf_ip() const;
  void set_mrf_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_mrf_ip(::std::string&& value);
  #endif
  void set_mrf_ip(const char* value);
  void set_mrf_ip(const char* value, size_t size);
  ::std::string* mutable_mrf_ip();
  ::std::string* release_mrf_ip();
  void set_allocated_mrf_ip(::std::string* mrf_ip);

  // uint64 callid = 2;
  void clear_callid();
  static const int kCallidFieldNumber = 2;
  ::google::protobuf::uint64 callid() const;
  void set_callid(::google::protobuf::uint64 value);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // uint32 mrf_audio_port = 4;
  void clear_mrf_audio_port();
  static const int kMrfAudioPortFieldNumber = 4;
  ::google::protobuf::uint32 mrf_audio_port() const;
  void set_mrf_audio_port(::google::protobuf::uint32 value);

  // uint32 mrf_video_port = 5;
  void clear_mrf_video_port();
  static const int kMrfVideoPortFieldNumber = 5;
  ::google::protobuf::uint32 mrf_video_port() const;
  void set_mrf_video_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.switch.InviteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mrf_ip_;
  ::google::protobuf::uint64 callid_;
  int ret_;
  ::google::protobuf::uint32 mrf_audio_port_;
  ::google::protobuf::uint32 mrf_video_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsInviteResponseImpl();
};
// -------------------------------------------------------------------

class InviteMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.InviteMessage) */ {
 public:
  InviteMessage();
  virtual ~InviteMessage();

  InviteMessage(const InviteMessage& from);

  inline InviteMessage& operator=(const InviteMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InviteMessage(InviteMessage&& from) noexcept
    : InviteMessage() {
    *this = ::std::move(from);
  }

  inline InviteMessage& operator=(InviteMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InviteMessage* internal_default_instance() {
    return reinterpret_cast<const InviteMessage*>(
               &_InviteMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(InviteMessage* other);
  friend void swap(InviteMessage& a, InviteMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InviteMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  InviteMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InviteMessage& from);
  void MergeFrom(const InviteMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InviteMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string callid = 1;
  void clear_callid();
  static const int kCallidFieldNumber = 1;
  const ::std::string& callid() const;
  void set_callid(const ::std::string& value);
  #if LANG_CXX11
  void set_callid(::std::string&& value);
  #endif
  void set_callid(const char* value);
  void set_callid(const char* value, size_t size);
  ::std::string* mutable_callid();
  ::std::string* release_callid();
  void set_allocated_callid(::std::string* callid);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 4;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 4;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string to_username = 5;
  void clear_to_username();
  static const int kToUsernameFieldNumber = 5;
  const ::std::string& to_username() const;
  void set_to_username(const ::std::string& value);
  #if LANG_CXX11
  void set_to_username(::std::string&& value);
  #endif
  void set_to_username(const char* value);
  void set_to_username(const char* value, size_t size);
  ::std::string* mutable_to_username();
  ::std::string* release_to_username();
  void set_allocated_to_username(::std::string* to_username);

  // string remote_audio_codec_list = 6;
  void clear_remote_audio_codec_list();
  static const int kRemoteAudioCodecListFieldNumber = 6;
  const ::std::string& remote_audio_codec_list() const;
  void set_remote_audio_codec_list(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_audio_codec_list(::std::string&& value);
  #endif
  void set_remote_audio_codec_list(const char* value);
  void set_remote_audio_codec_list(const char* value, size_t size);
  ::std::string* mutable_remote_audio_codec_list();
  ::std::string* release_remote_audio_codec_list();
  void set_allocated_remote_audio_codec_list(::std::string* remote_audio_codec_list);

  // string remote_video_codec_list = 7;
  void clear_remote_video_codec_list();
  static const int kRemoteVideoCodecListFieldNumber = 7;
  const ::std::string& remote_video_codec_list() const;
  void set_remote_video_codec_list(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_video_codec_list(::std::string&& value);
  #endif
  void set_remote_video_codec_list(const char* value);
  void set_remote_video_codec_list(const char* value, size_t size);
  ::std::string* mutable_remote_video_codec_list();
  ::std::string* release_remote_video_codec_list();
  void set_allocated_remote_video_codec_list(::std::string* remote_video_codec_list);

  // string mrf_ip = 8;
  void clear_mrf_ip();
  static const int kMrfIpFieldNumber = 8;
  const ::std::string& mrf_ip() const;
  void set_mrf_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_mrf_ip(::std::string&& value);
  #endif
  void set_mrf_ip(const char* value);
  void set_mrf_ip(const char* value, size_t size);
  ::std::string* mutable_mrf_ip();
  ::std::string* release_mrf_ip();
  void set_allocated_mrf_ip(::std::string* mrf_ip);

  // .outer.switch.ECallMediaType call_media_type = 2;
  void clear_call_media_type();
  static const int kCallMediaTypeFieldNumber = 2;
  ::outer::switch::ECallMediaType call_media_type() const;
  void set_call_media_type(::outer::switch::ECallMediaType value);

  // uint32 mrf_audio_port = 9;
  void clear_mrf_audio_port();
  static const int kMrfAudioPortFieldNumber = 9;
  ::google::protobuf::uint32 mrf_audio_port() const;
  void set_mrf_audio_port(::google::protobuf::uint32 value);

  // uint32 mrf_video_port = 10;
  void clear_mrf_video_port();
  static const int kMrfVideoPortFieldNumber = 10;
  ::google::protobuf::uint32 mrf_video_port() const;
  void set_mrf_video_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.switch.InviteMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr callid_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr to_username_;
  ::google::protobuf::internal::ArenaStringPtr remote_audio_codec_list_;
  ::google::protobuf::internal::ArenaStringPtr remote_video_codec_list_;
  ::google::protobuf::internal::ArenaStringPtr mrf_ip_;
  int call_media_type_;
  ::google::protobuf::uint32 mrf_audio_port_;
  ::google::protobuf::uint32 mrf_video_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsInviteMessageImpl();
};
// -------------------------------------------------------------------

class ConnectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.ConnectRequest) */ {
 public:
  ConnectRequest();
  virtual ~ConnectRequest();

  ConnectRequest(const ConnectRequest& from);

  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectRequest(ConnectRequest&& from) noexcept
    : ConnectRequest() {
    *this = ::std::move(from);
  }

  inline ConnectRequest& operator=(ConnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest*>(
               &_ConnectRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ConnectRequest* other);
  friend void swap(ConnectRequest& a, ConnectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnectRequest& from);
  void MergeFrom(const ConnectRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string callid = 1;
  void clear_callid();
  static const int kCallidFieldNumber = 1;
  const ::std::string& callid() const;
  void set_callid(const ::std::string& value);
  #if LANG_CXX11
  void set_callid(::std::string&& value);
  #endif
  void set_callid(const char* value);
  void set_callid(const char* value, size_t size);
  ::std::string* mutable_callid();
  ::std::string* release_callid();
  void set_allocated_callid(::std::string* callid);

  // string local_ip = 2;
  void clear_local_ip();
  static const int kLocalIpFieldNumber = 2;
  const ::std::string& local_ip() const;
  void set_local_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_local_ip(::std::string&& value);
  #endif
  void set_local_ip(const char* value);
  void set_local_ip(const char* value, size_t size);
  ::std::string* mutable_local_ip();
  ::std::string* release_local_ip();
  void set_allocated_local_ip(::std::string* local_ip);

  // string local_audio_codec_list = 4;
  void clear_local_audio_codec_list();
  static const int kLocalAudioCodecListFieldNumber = 4;
  const ::std::string& local_audio_codec_list() const;
  void set_local_audio_codec_list(const ::std::string& value);
  #if LANG_CXX11
  void set_local_audio_codec_list(::std::string&& value);
  #endif
  void set_local_audio_codec_list(const char* value);
  void set_local_audio_codec_list(const char* value, size_t size);
  ::std::string* mutable_local_audio_codec_list();
  ::std::string* release_local_audio_codec_list();
  void set_allocated_local_audio_codec_list(::std::string* local_audio_codec_list);

  // string local_video_codec_list = 6;
  void clear_local_video_codec_list();
  static const int kLocalVideoCodecListFieldNumber = 6;
  const ::std::string& local_video_codec_list() const;
  void set_local_video_codec_list(const ::std::string& value);
  #if LANG_CXX11
  void set_local_video_codec_list(::std::string&& value);
  #endif
  void set_local_video_codec_list(const char* value);
  void set_local_video_codec_list(const char* value, size_t size);
  ::std::string* mutable_local_video_codec_list();
  ::std::string* release_local_video_codec_list();
  void set_allocated_local_video_codec_list(::std::string* local_video_codec_list);

  // uint32 local_audio_port = 3;
  void clear_local_audio_port();
  static const int kLocalAudioPortFieldNumber = 3;
  ::google::protobuf::uint32 local_audio_port() const;
  void set_local_audio_port(::google::protobuf::uint32 value);

  // uint32 local_video_port = 5;
  void clear_local_video_port();
  static const int kLocalVideoPortFieldNumber = 5;
  ::google::protobuf::uint32 local_video_port() const;
  void set_local_video_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.switch.ConnectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr callid_;
  ::google::protobuf::internal::ArenaStringPtr local_ip_;
  ::google::protobuf::internal::ArenaStringPtr local_audio_codec_list_;
  ::google::protobuf::internal::ArenaStringPtr local_video_codec_list_;
  ::google::protobuf::uint32 local_audio_port_;
  ::google::protobuf::uint32 local_video_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsConnectRequestImpl();
};
// -------------------------------------------------------------------

class ConnectResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.ConnectResponse) */ {
 public:
  ConnectResponse();
  virtual ~ConnectResponse();

  ConnectResponse(const ConnectResponse& from);

  inline ConnectResponse& operator=(const ConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectResponse(ConnectResponse&& from) noexcept
    : ConnectResponse() {
    *this = ::std::move(from);
  }

  inline ConnectResponse& operator=(ConnectResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectResponse*>(
               &_ConnectResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ConnectResponse* other);
  friend void swap(ConnectResponse& a, ConnectResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnectResponse& from);
  void MergeFrom(const ConnectResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.switch.ConnectResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsConnectResponseImpl();
};
// -------------------------------------------------------------------

class ConnectMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.ConnectMessage) */ {
 public:
  ConnectMessage();
  virtual ~ConnectMessage();

  ConnectMessage(const ConnectMessage& from);

  inline ConnectMessage& operator=(const ConnectMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectMessage(ConnectMessage&& from) noexcept
    : ConnectMessage() {
    *this = ::std::move(from);
  }

  inline ConnectMessage& operator=(ConnectMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectMessage* internal_default_instance() {
    return reinterpret_cast<const ConnectMessage*>(
               &_ConnectMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ConnectMessage* other);
  friend void swap(ConnectMessage& a, ConnectMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnectMessage& from);
  void MergeFrom(const ConnectMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string callid = 1;
  void clear_callid();
  static const int kCallidFieldNumber = 1;
  const ::std::string& callid() const;
  void set_callid(const ::std::string& value);
  #if LANG_CXX11
  void set_callid(::std::string&& value);
  #endif
  void set_callid(const char* value);
  void set_callid(const char* value, size_t size);
  ::std::string* mutable_callid();
  ::std::string* release_callid();
  void set_allocated_callid(::std::string* callid);

  // string callee_audio_codec_list = 2;
  void clear_callee_audio_codec_list();
  static const int kCalleeAudioCodecListFieldNumber = 2;
  const ::std::string& callee_audio_codec_list() const;
  void set_callee_audio_codec_list(const ::std::string& value);
  #if LANG_CXX11
  void set_callee_audio_codec_list(::std::string&& value);
  #endif
  void set_callee_audio_codec_list(const char* value);
  void set_callee_audio_codec_list(const char* value, size_t size);
  ::std::string* mutable_callee_audio_codec_list();
  ::std::string* release_callee_audio_codec_list();
  void set_allocated_callee_audio_codec_list(::std::string* callee_audio_codec_list);

  // string callee_video_codec_list = 3;
  void clear_callee_video_codec_list();
  static const int kCalleeVideoCodecListFieldNumber = 3;
  const ::std::string& callee_video_codec_list() const;
  void set_callee_video_codec_list(const ::std::string& value);
  #if LANG_CXX11
  void set_callee_video_codec_list(::std::string&& value);
  #endif
  void set_callee_video_codec_list(const char* value);
  void set_callee_video_codec_list(const char* value, size_t size);
  ::std::string* mutable_callee_video_codec_list();
  ::std::string* release_callee_video_codec_list();
  void set_allocated_callee_video_codec_list(::std::string* callee_video_codec_list);

  // @@protoc_insertion_point(class_scope:outer.switch.ConnectMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr callid_;
  ::google::protobuf::internal::ArenaStringPtr callee_audio_codec_list_;
  ::google::protobuf::internal::ArenaStringPtr callee_video_codec_list_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsConnectMessageImpl();
};
// -------------------------------------------------------------------

class BusyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.BusyRequest) */ {
 public:
  BusyRequest();
  virtual ~BusyRequest();

  BusyRequest(const BusyRequest& from);

  inline BusyRequest& operator=(const BusyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BusyRequest(BusyRequest&& from) noexcept
    : BusyRequest() {
    *this = ::std::move(from);
  }

  inline BusyRequest& operator=(BusyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BusyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BusyRequest* internal_default_instance() {
    return reinterpret_cast<const BusyRequest*>(
               &_BusyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(BusyRequest* other);
  friend void swap(BusyRequest& a, BusyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BusyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BusyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BusyRequest& from);
  void MergeFrom(const BusyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BusyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string callid = 1;
  void clear_callid();
  static const int kCallidFieldNumber = 1;
  const ::std::string& callid() const;
  void set_callid(const ::std::string& value);
  #if LANG_CXX11
  void set_callid(::std::string&& value);
  #endif
  void set_callid(const char* value);
  void set_callid(const char* value, size_t size);
  ::std::string* mutable_callid();
  ::std::string* release_callid();
  void set_allocated_callid(::std::string* callid);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 3;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 3;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // @@protoc_insertion_point(class_scope:outer.switch.BusyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr callid_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsBusyRequestImpl();
};
// -------------------------------------------------------------------

class BusyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.BusyResponse) */ {
 public:
  BusyResponse();
  virtual ~BusyResponse();

  BusyResponse(const BusyResponse& from);

  inline BusyResponse& operator=(const BusyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BusyResponse(BusyResponse&& from) noexcept
    : BusyResponse() {
    *this = ::std::move(from);
  }

  inline BusyResponse& operator=(BusyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BusyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BusyResponse* internal_default_instance() {
    return reinterpret_cast<const BusyResponse*>(
               &_BusyResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(BusyResponse* other);
  friend void swap(BusyResponse& a, BusyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BusyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BusyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BusyResponse& from);
  void MergeFrom(const BusyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BusyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.switch.BusyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsBusyResponseImpl();
};
// -------------------------------------------------------------------

class BusyMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.BusyMessage) */ {
 public:
  BusyMessage();
  virtual ~BusyMessage();

  BusyMessage(const BusyMessage& from);

  inline BusyMessage& operator=(const BusyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BusyMessage(BusyMessage&& from) noexcept
    : BusyMessage() {
    *this = ::std::move(from);
  }

  inline BusyMessage& operator=(BusyMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BusyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BusyMessage* internal_default_instance() {
    return reinterpret_cast<const BusyMessage*>(
               &_BusyMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(BusyMessage* other);
  friend void swap(BusyMessage& a, BusyMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BusyMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  BusyMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BusyMessage& from);
  void MergeFrom(const BusyMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BusyMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string callid = 1;
  void clear_callid();
  static const int kCallidFieldNumber = 1;
  const ::std::string& callid() const;
  void set_callid(const ::std::string& value);
  #if LANG_CXX11
  void set_callid(::std::string&& value);
  #endif
  void set_callid(const char* value);
  void set_callid(const char* value, size_t size);
  ::std::string* mutable_callid();
  ::std::string* release_callid();
  void set_allocated_callid(::std::string* callid);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 3;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 3;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // @@protoc_insertion_point(class_scope:outer.switch.BusyMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr callid_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsBusyMessageImpl();
};
// -------------------------------------------------------------------

class CancelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.CancelRequest) */ {
 public:
  CancelRequest();
  virtual ~CancelRequest();

  CancelRequest(const CancelRequest& from);

  inline CancelRequest& operator=(const CancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelRequest(CancelRequest&& from) noexcept
    : CancelRequest() {
    *this = ::std::move(from);
  }

  inline CancelRequest& operator=(CancelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelRequest* internal_default_instance() {
    return reinterpret_cast<const CancelRequest*>(
               &_CancelRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(CancelRequest* other);
  friend void swap(CancelRequest& a, CancelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CancelRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CancelRequest& from);
  void MergeFrom(const CancelRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CancelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string callid = 1;
  void clear_callid();
  static const int kCallidFieldNumber = 1;
  const ::std::string& callid() const;
  void set_callid(const ::std::string& value);
  #if LANG_CXX11
  void set_callid(::std::string&& value);
  #endif
  void set_callid(const char* value);
  void set_callid(const char* value, size_t size);
  ::std::string* mutable_callid();
  ::std::string* release_callid();
  void set_allocated_callid(::std::string* callid);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 3;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 3;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // @@protoc_insertion_point(class_scope:outer.switch.CancelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr callid_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsCancelRequestImpl();
};
// -------------------------------------------------------------------

class CancelResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.CancelResponse) */ {
 public:
  CancelResponse();
  virtual ~CancelResponse();

  CancelResponse(const CancelResponse& from);

  inline CancelResponse& operator=(const CancelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelResponse(CancelResponse&& from) noexcept
    : CancelResponse() {
    *this = ::std::move(from);
  }

  inline CancelResponse& operator=(CancelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelResponse* internal_default_instance() {
    return reinterpret_cast<const CancelResponse*>(
               &_CancelResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(CancelResponse* other);
  friend void swap(CancelResponse& a, CancelResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CancelResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CancelResponse& from);
  void MergeFrom(const CancelResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CancelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.switch.CancelResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsCancelResponseImpl();
};
// -------------------------------------------------------------------

class CancelMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.CancelMessage) */ {
 public:
  CancelMessage();
  virtual ~CancelMessage();

  CancelMessage(const CancelMessage& from);

  inline CancelMessage& operator=(const CancelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelMessage(CancelMessage&& from) noexcept
    : CancelMessage() {
    *this = ::std::move(from);
  }

  inline CancelMessage& operator=(CancelMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelMessage* internal_default_instance() {
    return reinterpret_cast<const CancelMessage*>(
               &_CancelMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CancelMessage* other);
  friend void swap(CancelMessage& a, CancelMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CancelMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CancelMessage& from);
  void MergeFrom(const CancelMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CancelMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string callid = 1;
  void clear_callid();
  static const int kCallidFieldNumber = 1;
  const ::std::string& callid() const;
  void set_callid(const ::std::string& value);
  #if LANG_CXX11
  void set_callid(::std::string&& value);
  #endif
  void set_callid(const char* value);
  void set_callid(const char* value, size_t size);
  ::std::string* mutable_callid();
  ::std::string* release_callid();
  void set_allocated_callid(::std::string* callid);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 3;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 3;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // @@protoc_insertion_point(class_scope:outer.switch.CancelMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr callid_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsCancelMessageImpl();
};
// -------------------------------------------------------------------

class RefuseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.RefuseRequest) */ {
 public:
  RefuseRequest();
  virtual ~RefuseRequest();

  RefuseRequest(const RefuseRequest& from);

  inline RefuseRequest& operator=(const RefuseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RefuseRequest(RefuseRequest&& from) noexcept
    : RefuseRequest() {
    *this = ::std::move(from);
  }

  inline RefuseRequest& operator=(RefuseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RefuseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefuseRequest* internal_default_instance() {
    return reinterpret_cast<const RefuseRequest*>(
               &_RefuseRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(RefuseRequest* other);
  friend void swap(RefuseRequest& a, RefuseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RefuseRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RefuseRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RefuseRequest& from);
  void MergeFrom(const RefuseRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RefuseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string callid = 1;
  void clear_callid();
  static const int kCallidFieldNumber = 1;
  const ::std::string& callid() const;
  void set_callid(const ::std::string& value);
  #if LANG_CXX11
  void set_callid(::std::string&& value);
  #endif
  void set_callid(const char* value);
  void set_callid(const char* value, size_t size);
  ::std::string* mutable_callid();
  ::std::string* release_callid();
  void set_allocated_callid(::std::string* callid);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 3;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 3;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // @@protoc_insertion_point(class_scope:outer.switch.RefuseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr callid_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsRefuseRequestImpl();
};
// -------------------------------------------------------------------

class RefuseResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.RefuseResponse) */ {
 public:
  RefuseResponse();
  virtual ~RefuseResponse();

  RefuseResponse(const RefuseResponse& from);

  inline RefuseResponse& operator=(const RefuseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RefuseResponse(RefuseResponse&& from) noexcept
    : RefuseResponse() {
    *this = ::std::move(from);
  }

  inline RefuseResponse& operator=(RefuseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RefuseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefuseResponse* internal_default_instance() {
    return reinterpret_cast<const RefuseResponse*>(
               &_RefuseResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(RefuseResponse* other);
  friend void swap(RefuseResponse& a, RefuseResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RefuseResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RefuseResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RefuseResponse& from);
  void MergeFrom(const RefuseResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RefuseResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.switch.RefuseResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsRefuseResponseImpl();
};
// -------------------------------------------------------------------

class RefuseMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.RefuseMessage) */ {
 public:
  RefuseMessage();
  virtual ~RefuseMessage();

  RefuseMessage(const RefuseMessage& from);

  inline RefuseMessage& operator=(const RefuseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RefuseMessage(RefuseMessage&& from) noexcept
    : RefuseMessage() {
    *this = ::std::move(from);
  }

  inline RefuseMessage& operator=(RefuseMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RefuseMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefuseMessage* internal_default_instance() {
    return reinterpret_cast<const RefuseMessage*>(
               &_RefuseMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(RefuseMessage* other);
  friend void swap(RefuseMessage& a, RefuseMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RefuseMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  RefuseMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RefuseMessage& from);
  void MergeFrom(const RefuseMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RefuseMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string callid = 1;
  void clear_callid();
  static const int kCallidFieldNumber = 1;
  const ::std::string& callid() const;
  void set_callid(const ::std::string& value);
  #if LANG_CXX11
  void set_callid(::std::string&& value);
  #endif
  void set_callid(const char* value);
  void set_callid(const char* value, size_t size);
  ::std::string* mutable_callid();
  ::std::string* release_callid();
  void set_allocated_callid(::std::string* callid);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 3;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 3;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // @@protoc_insertion_point(class_scope:outer.switch.RefuseMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr callid_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsRefuseMessageImpl();
};
// -------------------------------------------------------------------

class ByeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.ByeRequest) */ {
 public:
  ByeRequest();
  virtual ~ByeRequest();

  ByeRequest(const ByeRequest& from);

  inline ByeRequest& operator=(const ByeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ByeRequest(ByeRequest&& from) noexcept
    : ByeRequest() {
    *this = ::std::move(from);
  }

  inline ByeRequest& operator=(ByeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ByeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ByeRequest* internal_default_instance() {
    return reinterpret_cast<const ByeRequest*>(
               &_ByeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(ByeRequest* other);
  friend void swap(ByeRequest& a, ByeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ByeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ByeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ByeRequest& from);
  void MergeFrom(const ByeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ByeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string callid = 1;
  void clear_callid();
  static const int kCallidFieldNumber = 1;
  const ::std::string& callid() const;
  void set_callid(const ::std::string& value);
  #if LANG_CXX11
  void set_callid(::std::string&& value);
  #endif
  void set_callid(const char* value);
  void set_callid(const char* value, size_t size);
  ::std::string* mutable_callid();
  ::std::string* release_callid();
  void set_allocated_callid(::std::string* callid);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 3;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 3;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // @@protoc_insertion_point(class_scope:outer.switch.ByeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr callid_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsByeRequestImpl();
};
// -------------------------------------------------------------------

class ByeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.ByeResponse) */ {
 public:
  ByeResponse();
  virtual ~ByeResponse();

  ByeResponse(const ByeResponse& from);

  inline ByeResponse& operator=(const ByeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ByeResponse(ByeResponse&& from) noexcept
    : ByeResponse() {
    *this = ::std::move(from);
  }

  inline ByeResponse& operator=(ByeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ByeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ByeResponse* internal_default_instance() {
    return reinterpret_cast<const ByeResponse*>(
               &_ByeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ByeResponse* other);
  friend void swap(ByeResponse& a, ByeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ByeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ByeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ByeResponse& from);
  void MergeFrom(const ByeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ByeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.switch.ByeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsByeResponseImpl();
};
// -------------------------------------------------------------------

class ByeMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.ByeMessage) */ {
 public:
  ByeMessage();
  virtual ~ByeMessage();

  ByeMessage(const ByeMessage& from);

  inline ByeMessage& operator=(const ByeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ByeMessage(ByeMessage&& from) noexcept
    : ByeMessage() {
    *this = ::std::move(from);
  }

  inline ByeMessage& operator=(ByeMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ByeMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ByeMessage* internal_default_instance() {
    return reinterpret_cast<const ByeMessage*>(
               &_ByeMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(ByeMessage* other);
  friend void swap(ByeMessage& a, ByeMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ByeMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ByeMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ByeMessage& from);
  void MergeFrom(const ByeMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ByeMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string callid = 1;
  void clear_callid();
  static const int kCallidFieldNumber = 1;
  const ::std::string& callid() const;
  void set_callid(const ::std::string& value);
  #if LANG_CXX11
  void set_callid(::std::string&& value);
  #endif
  void set_callid(const char* value);
  void set_callid(const char* value, size_t size);
  ::std::string* mutable_callid();
  ::std::string* release_callid();
  void set_allocated_callid(::std::string* callid);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 3;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 3;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // @@protoc_insertion_point(class_scope:outer.switch.ByeMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr callid_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsByeMessageImpl();
};
// -------------------------------------------------------------------

class ReinviteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.ReinviteRequest) */ {
 public:
  ReinviteRequest();
  virtual ~ReinviteRequest();

  ReinviteRequest(const ReinviteRequest& from);

  inline ReinviteRequest& operator=(const ReinviteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReinviteRequest(ReinviteRequest&& from) noexcept
    : ReinviteRequest() {
    *this = ::std::move(from);
  }

  inline ReinviteRequest& operator=(ReinviteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReinviteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReinviteRequest* internal_default_instance() {
    return reinterpret_cast<const ReinviteRequest*>(
               &_ReinviteRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(ReinviteRequest* other);
  friend void swap(ReinviteRequest& a, ReinviteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReinviteRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ReinviteRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReinviteRequest& from);
  void MergeFrom(const ReinviteRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReinviteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 3;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 3;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string local_ip = 5;
  void clear_local_ip();
  static const int kLocalIpFieldNumber = 5;
  const ::std::string& local_ip() const;
  void set_local_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_local_ip(::std::string&& value);
  #endif
  void set_local_ip(const char* value);
  void set_local_ip(const char* value, size_t size);
  ::std::string* mutable_local_ip();
  ::std::string* release_local_ip();
  void set_allocated_local_ip(::std::string* local_ip);

  // string local_audio_codec_list = 7;
  void clear_local_audio_codec_list();
  static const int kLocalAudioCodecListFieldNumber = 7;
  const ::std::string& local_audio_codec_list() const;
  void set_local_audio_codec_list(const ::std::string& value);
  #if LANG_CXX11
  void set_local_audio_codec_list(::std::string&& value);
  #endif
  void set_local_audio_codec_list(const char* value);
  void set_local_audio_codec_list(const char* value, size_t size);
  ::std::string* mutable_local_audio_codec_list();
  ::std::string* release_local_audio_codec_list();
  void set_allocated_local_audio_codec_list(::std::string* local_audio_codec_list);

  // string local_video_codec_list = 9;
  void clear_local_video_codec_list();
  static const int kLocalVideoCodecListFieldNumber = 9;
  const ::std::string& local_video_codec_list() const;
  void set_local_video_codec_list(const ::std::string& value);
  #if LANG_CXX11
  void set_local_video_codec_list(::std::string&& value);
  #endif
  void set_local_video_codec_list(const char* value);
  void set_local_video_codec_list(const char* value, size_t size);
  ::std::string* mutable_local_video_codec_list();
  ::std::string* release_local_video_codec_list();
  void set_allocated_local_video_codec_list(::std::string* local_video_codec_list);

  // .outer.switch.ECallMediaType call_media_type = 1;
  void clear_call_media_type();
  static const int kCallMediaTypeFieldNumber = 1;
  ::outer::switch::ECallMediaType call_media_type() const;
  void set_call_media_type(::outer::switch::ECallMediaType value);

  // uint32 local_audio_port = 6;
  void clear_local_audio_port();
  static const int kLocalAudioPortFieldNumber = 6;
  ::google::protobuf::uint32 local_audio_port() const;
  void set_local_audio_port(::google::protobuf::uint32 value);

  // uint32 local_video_port = 8;
  void clear_local_video_port();
  static const int kLocalVideoPortFieldNumber = 8;
  ::google::protobuf::uint32 local_video_port() const;
  void set_local_video_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.switch.ReinviteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr local_ip_;
  ::google::protobuf::internal::ArenaStringPtr local_audio_codec_list_;
  ::google::protobuf::internal::ArenaStringPtr local_video_codec_list_;
  int call_media_type_;
  ::google::protobuf::uint32 local_audio_port_;
  ::google::protobuf::uint32 local_video_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsReinviteRequestImpl();
};
// -------------------------------------------------------------------

class ReinviteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.ReinviteResponse) */ {
 public:
  ReinviteResponse();
  virtual ~ReinviteResponse();

  ReinviteResponse(const ReinviteResponse& from);

  inline ReinviteResponse& operator=(const ReinviteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReinviteResponse(ReinviteResponse&& from) noexcept
    : ReinviteResponse() {
    *this = ::std::move(from);
  }

  inline ReinviteResponse& operator=(ReinviteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReinviteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReinviteResponse* internal_default_instance() {
    return reinterpret_cast<const ReinviteResponse*>(
               &_ReinviteResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(ReinviteResponse* other);
  friend void swap(ReinviteResponse& a, ReinviteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReinviteResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ReinviteResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReinviteResponse& from);
  void MergeFrom(const ReinviteResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReinviteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mrf_ip = 3;
  void clear_mrf_ip();
  static const int kMrfIpFieldNumber = 3;
  const ::std::string& mrf_ip() const;
  void set_mrf_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_mrf_ip(::std::string&& value);
  #endif
  void set_mrf_ip(const char* value);
  void set_mrf_ip(const char* value, size_t size);
  ::std::string* mutable_mrf_ip();
  ::std::string* release_mrf_ip();
  void set_allocated_mrf_ip(::std::string* mrf_ip);

  // uint64 callid = 2;
  void clear_callid();
  static const int kCallidFieldNumber = 2;
  ::google::protobuf::uint64 callid() const;
  void set_callid(::google::protobuf::uint64 value);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // uint32 mrf_audio_port = 4;
  void clear_mrf_audio_port();
  static const int kMrfAudioPortFieldNumber = 4;
  ::google::protobuf::uint32 mrf_audio_port() const;
  void set_mrf_audio_port(::google::protobuf::uint32 value);

  // uint32 mrf_video_port = 5;
  void clear_mrf_video_port();
  static const int kMrfVideoPortFieldNumber = 5;
  ::google::protobuf::uint32 mrf_video_port() const;
  void set_mrf_video_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.switch.ReinviteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mrf_ip_;
  ::google::protobuf::uint64 callid_;
  int ret_;
  ::google::protobuf::uint32 mrf_audio_port_;
  ::google::protobuf::uint32 mrf_video_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsReinviteResponseImpl();
};
// -------------------------------------------------------------------

class ReinviteMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.ReinviteMessage) */ {
 public:
  ReinviteMessage();
  virtual ~ReinviteMessage();

  ReinviteMessage(const ReinviteMessage& from);

  inline ReinviteMessage& operator=(const ReinviteMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReinviteMessage(ReinviteMessage&& from) noexcept
    : ReinviteMessage() {
    *this = ::std::move(from);
  }

  inline ReinviteMessage& operator=(ReinviteMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReinviteMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReinviteMessage* internal_default_instance() {
    return reinterpret_cast<const ReinviteMessage*>(
               &_ReinviteMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(ReinviteMessage* other);
  friend void swap(ReinviteMessage& a, ReinviteMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReinviteMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ReinviteMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReinviteMessage& from);
  void MergeFrom(const ReinviteMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReinviteMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string callid = 1;
  void clear_callid();
  static const int kCallidFieldNumber = 1;
  const ::std::string& callid() const;
  void set_callid(const ::std::string& value);
  #if LANG_CXX11
  void set_callid(::std::string&& value);
  #endif
  void set_callid(const char* value);
  void set_callid(const char* value, size_t size);
  ::std::string* mutable_callid();
  ::std::string* release_callid();
  void set_allocated_callid(::std::string* callid);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 4;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 4;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string to_username = 5;
  void clear_to_username();
  static const int kToUsernameFieldNumber = 5;
  const ::std::string& to_username() const;
  void set_to_username(const ::std::string& value);
  #if LANG_CXX11
  void set_to_username(::std::string&& value);
  #endif
  void set_to_username(const char* value);
  void set_to_username(const char* value, size_t size);
  ::std::string* mutable_to_username();
  ::std::string* release_to_username();
  void set_allocated_to_username(::std::string* to_username);

  // string remote_audio_codec_list = 6;
  void clear_remote_audio_codec_list();
  static const int kRemoteAudioCodecListFieldNumber = 6;
  const ::std::string& remote_audio_codec_list() const;
  void set_remote_audio_codec_list(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_audio_codec_list(::std::string&& value);
  #endif
  void set_remote_audio_codec_list(const char* value);
  void set_remote_audio_codec_list(const char* value, size_t size);
  ::std::string* mutable_remote_audio_codec_list();
  ::std::string* release_remote_audio_codec_list();
  void set_allocated_remote_audio_codec_list(::std::string* remote_audio_codec_list);

  // string remote_video_codec_list = 7;
  void clear_remote_video_codec_list();
  static const int kRemoteVideoCodecListFieldNumber = 7;
  const ::std::string& remote_video_codec_list() const;
  void set_remote_video_codec_list(const ::std::string& value);
  #if LANG_CXX11
  void set_remote_video_codec_list(::std::string&& value);
  #endif
  void set_remote_video_codec_list(const char* value);
  void set_remote_video_codec_list(const char* value, size_t size);
  ::std::string* mutable_remote_video_codec_list();
  ::std::string* release_remote_video_codec_list();
  void set_allocated_remote_video_codec_list(::std::string* remote_video_codec_list);

  // string mrf_ip = 8;
  void clear_mrf_ip();
  static const int kMrfIpFieldNumber = 8;
  const ::std::string& mrf_ip() const;
  void set_mrf_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_mrf_ip(::std::string&& value);
  #endif
  void set_mrf_ip(const char* value);
  void set_mrf_ip(const char* value, size_t size);
  ::std::string* mutable_mrf_ip();
  ::std::string* release_mrf_ip();
  void set_allocated_mrf_ip(::std::string* mrf_ip);

  // .outer.switch.ECallMediaType call_media_type = 2;
  void clear_call_media_type();
  static const int kCallMediaTypeFieldNumber = 2;
  ::outer::switch::ECallMediaType call_media_type() const;
  void set_call_media_type(::outer::switch::ECallMediaType value);

  // uint32 mrf_audio_port = 9;
  void clear_mrf_audio_port();
  static const int kMrfAudioPortFieldNumber = 9;
  ::google::protobuf::uint32 mrf_audio_port() const;
  void set_mrf_audio_port(::google::protobuf::uint32 value);

  // uint32 mrf_video_port = 10;
  void clear_mrf_video_port();
  static const int kMrfVideoPortFieldNumber = 10;
  ::google::protobuf::uint32 mrf_video_port() const;
  void set_mrf_video_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.switch.ReinviteMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr callid_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr to_username_;
  ::google::protobuf::internal::ArenaStringPtr remote_audio_codec_list_;
  ::google::protobuf::internal::ArenaStringPtr remote_video_codec_list_;
  ::google::protobuf::internal::ArenaStringPtr mrf_ip_;
  int call_media_type_;
  ::google::protobuf::uint32 mrf_audio_port_;
  ::google::protobuf::uint32 mrf_video_port_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsReinviteMessageImpl();
};
// -------------------------------------------------------------------

class CallMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.CallMessage) */ {
 public:
  CallMessage();
  virtual ~CallMessage();

  CallMessage(const CallMessage& from);

  inline CallMessage& operator=(const CallMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CallMessage(CallMessage&& from) noexcept
    : CallMessage() {
    *this = ::std::move(from);
  }

  inline CallMessage& operator=(CallMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallMessage* internal_default_instance() {
    return reinterpret_cast<const CallMessage*>(
               &_CallMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(CallMessage* other);
  friend void swap(CallMessage& a, CallMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CallMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CallMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CallMessage& from);
  void MergeFrom(const CallMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CallMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes call_msg = 2;
  void clear_call_msg();
  static const int kCallMsgFieldNumber = 2;
  const ::std::string& call_msg() const;
  void set_call_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_call_msg(::std::string&& value);
  #endif
  void set_call_msg(const char* value);
  void set_call_msg(const void* value, size_t size);
  ::std::string* mutable_call_msg();
  ::std::string* release_call_msg();
  void set_allocated_call_msg(::std::string* call_msg);

  // .common.enumeration.ECallMsgType call_msg_type = 1;
  void clear_call_msg_type();
  static const int kCallMsgTypeFieldNumber = 1;
  ::common::enumeration::ECallMsgType call_msg_type() const;
  void set_call_msg_type(::common::enumeration::ECallMsgType value);

  // @@protoc_insertion_point(class_scope:outer.switch.CallMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr call_msg_;
  int call_msg_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsCallMessageImpl();
};
// -------------------------------------------------------------------

class SyncCallRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.SyncCallRequest) */ {
 public:
  SyncCallRequest();
  virtual ~SyncCallRequest();

  SyncCallRequest(const SyncCallRequest& from);

  inline SyncCallRequest& operator=(const SyncCallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncCallRequest(SyncCallRequest&& from) noexcept
    : SyncCallRequest() {
    *this = ::std::move(from);
  }

  inline SyncCallRequest& operator=(SyncCallRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncCallRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncCallRequest* internal_default_instance() {
    return reinterpret_cast<const SyncCallRequest*>(
               &_SyncCallRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(SyncCallRequest* other);
  friend void swap(SyncCallRequest& a, SyncCallRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncCallRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SyncCallRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SyncCallRequest& from);
  void MergeFrom(const SyncCallRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SyncCallRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string appkey = 1;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 1;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string from_username = 2;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 2;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string call_msg_guid = 3;
  void clear_call_msg_guid();
  static const int kCallMsgGuidFieldNumber = 3;
  const ::std::string& call_msg_guid() const;
  void set_call_msg_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_call_msg_guid(::std::string&& value);
  #endif
  void set_call_msg_guid(const char* value);
  void set_call_msg_guid(const char* value, size_t size);
  ::std::string* mutable_call_msg_guid();
  ::std::string* release_call_msg_guid();
  void set_allocated_call_msg_guid(::std::string* call_msg_guid);

  // @@protoc_insertion_point(class_scope:outer.switch.SyncCallRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr call_msg_guid_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsSyncCallRequestImpl();
};
// -------------------------------------------------------------------

class SyncCallResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.switch.SyncCallResponse) */ {
 public:
  SyncCallResponse();
  virtual ~SyncCallResponse();

  SyncCallResponse(const SyncCallResponse& from);

  inline SyncCallResponse& operator=(const SyncCallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncCallResponse(SyncCallResponse&& from) noexcept
    : SyncCallResponse() {
    *this = ::std::move(from);
  }

  inline SyncCallResponse& operator=(SyncCallResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncCallResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncCallResponse* internal_default_instance() {
    return reinterpret_cast<const SyncCallResponse*>(
               &_SyncCallResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(SyncCallResponse* other);
  friend void swap(SyncCallResponse& a, SyncCallResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncCallResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SyncCallResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SyncCallResponse& from);
  void MergeFrom(const SyncCallResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SyncCallResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.switch.CallMessage call_message = 2;
  int call_message_size() const;
  void clear_call_message();
  static const int kCallMessageFieldNumber = 2;
  const ::outer::switch::CallMessage& call_message(int index) const;
  ::outer::switch::CallMessage* mutable_call_message(int index);
  ::outer::switch::CallMessage* add_call_message();
  ::google::protobuf::RepeatedPtrField< ::outer::switch::CallMessage >*
      mutable_call_message();
  const ::google::protobuf::RepeatedPtrField< ::outer::switch::CallMessage >&
      call_message() const;

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.switch.SyncCallResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::switch::CallMessage > call_message_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2fswitch_2eproto::TableStruct;
  friend void ::protobuf_outer_2fswitch_2eproto::InitDefaultsSyncCallResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InviteRequest

// .outer.switch.ECallMediaType call_media_type = 1;
inline void InviteRequest::clear_call_media_type() {
  call_media_type_ = 0;
}
inline ::outer::switch::ECallMediaType InviteRequest::call_media_type() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteRequest.call_media_type)
  return static_cast< ::outer::switch::ECallMediaType >(call_media_type_);
}
inline void InviteRequest::set_call_media_type(::outer::switch::ECallMediaType value) {
  
  call_media_type_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.InviteRequest.call_media_type)
}

// string appkey = 2;
inline void InviteRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteRequest.appkey)
  return appkey_.GetNoArena();
}
inline void InviteRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.InviteRequest.appkey)
}
#if LANG_CXX11
inline void InviteRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.InviteRequest.appkey)
}
#endif
inline void InviteRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.InviteRequest.appkey)
}
inline void InviteRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.InviteRequest.appkey)
}
inline ::std::string* InviteRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.InviteRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.switch.InviteRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.InviteRequest.appkey)
}

// string from_username = 3;
inline void InviteRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteRequest.from_username)
  return from_username_.GetNoArena();
}
inline void InviteRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.InviteRequest.from_username)
}
#if LANG_CXX11
inline void InviteRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.InviteRequest.from_username)
}
#endif
inline void InviteRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.InviteRequest.from_username)
}
inline void InviteRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.InviteRequest.from_username)
}
inline ::std::string* InviteRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.InviteRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.switch.InviteRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.InviteRequest.from_username)
}

// string to_username = 4;
inline void InviteRequest::clear_to_username() {
  to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteRequest::to_username() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteRequest.to_username)
  return to_username_.GetNoArena();
}
inline void InviteRequest::set_to_username(const ::std::string& value) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.InviteRequest.to_username)
}
#if LANG_CXX11
inline void InviteRequest::set_to_username(::std::string&& value) {
  
  to_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.InviteRequest.to_username)
}
#endif
inline void InviteRequest::set_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.InviteRequest.to_username)
}
inline void InviteRequest::set_to_username(const char* value, size_t size) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.InviteRequest.to_username)
}
inline ::std::string* InviteRequest::mutable_to_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.InviteRequest.to_username)
  return to_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteRequest::release_to_username() {
  // @@protoc_insertion_point(field_release:outer.switch.InviteRequest.to_username)
  
  return to_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteRequest::set_allocated_to_username(::std::string* to_username) {
  if (to_username != NULL) {
    
  } else {
    
  }
  to_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_username);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.InviteRequest.to_username)
}

// string local_ip = 5;
inline void InviteRequest::clear_local_ip() {
  local_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteRequest::local_ip() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteRequest.local_ip)
  return local_ip_.GetNoArena();
}
inline void InviteRequest::set_local_ip(const ::std::string& value) {
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.InviteRequest.local_ip)
}
#if LANG_CXX11
inline void InviteRequest::set_local_ip(::std::string&& value) {
  
  local_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.InviteRequest.local_ip)
}
#endif
inline void InviteRequest::set_local_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.InviteRequest.local_ip)
}
inline void InviteRequest::set_local_ip(const char* value, size_t size) {
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.InviteRequest.local_ip)
}
inline ::std::string* InviteRequest::mutable_local_ip() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.InviteRequest.local_ip)
  return local_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteRequest::release_local_ip() {
  // @@protoc_insertion_point(field_release:outer.switch.InviteRequest.local_ip)
  
  return local_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteRequest::set_allocated_local_ip(::std::string* local_ip) {
  if (local_ip != NULL) {
    
  } else {
    
  }
  local_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_ip);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.InviteRequest.local_ip)
}

// uint32 local_audio_port = 6;
inline void InviteRequest::clear_local_audio_port() {
  local_audio_port_ = 0u;
}
inline ::google::protobuf::uint32 InviteRequest::local_audio_port() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteRequest.local_audio_port)
  return local_audio_port_;
}
inline void InviteRequest::set_local_audio_port(::google::protobuf::uint32 value) {
  
  local_audio_port_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.InviteRequest.local_audio_port)
}

// string local_audio_codec_list = 7;
inline void InviteRequest::clear_local_audio_codec_list() {
  local_audio_codec_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteRequest::local_audio_codec_list() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteRequest.local_audio_codec_list)
  return local_audio_codec_list_.GetNoArena();
}
inline void InviteRequest::set_local_audio_codec_list(const ::std::string& value) {
  
  local_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.InviteRequest.local_audio_codec_list)
}
#if LANG_CXX11
inline void InviteRequest::set_local_audio_codec_list(::std::string&& value) {
  
  local_audio_codec_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.InviteRequest.local_audio_codec_list)
}
#endif
inline void InviteRequest::set_local_audio_codec_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.InviteRequest.local_audio_codec_list)
}
inline void InviteRequest::set_local_audio_codec_list(const char* value, size_t size) {
  
  local_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.InviteRequest.local_audio_codec_list)
}
inline ::std::string* InviteRequest::mutable_local_audio_codec_list() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.InviteRequest.local_audio_codec_list)
  return local_audio_codec_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteRequest::release_local_audio_codec_list() {
  // @@protoc_insertion_point(field_release:outer.switch.InviteRequest.local_audio_codec_list)
  
  return local_audio_codec_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteRequest::set_allocated_local_audio_codec_list(::std::string* local_audio_codec_list) {
  if (local_audio_codec_list != NULL) {
    
  } else {
    
  }
  local_audio_codec_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_audio_codec_list);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.InviteRequest.local_audio_codec_list)
}

// uint32 local_video_port = 8;
inline void InviteRequest::clear_local_video_port() {
  local_video_port_ = 0u;
}
inline ::google::protobuf::uint32 InviteRequest::local_video_port() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteRequest.local_video_port)
  return local_video_port_;
}
inline void InviteRequest::set_local_video_port(::google::protobuf::uint32 value) {
  
  local_video_port_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.InviteRequest.local_video_port)
}

// string local_video_codec_list = 9;
inline void InviteRequest::clear_local_video_codec_list() {
  local_video_codec_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteRequest::local_video_codec_list() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteRequest.local_video_codec_list)
  return local_video_codec_list_.GetNoArena();
}
inline void InviteRequest::set_local_video_codec_list(const ::std::string& value) {
  
  local_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.InviteRequest.local_video_codec_list)
}
#if LANG_CXX11
inline void InviteRequest::set_local_video_codec_list(::std::string&& value) {
  
  local_video_codec_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.InviteRequest.local_video_codec_list)
}
#endif
inline void InviteRequest::set_local_video_codec_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.InviteRequest.local_video_codec_list)
}
inline void InviteRequest::set_local_video_codec_list(const char* value, size_t size) {
  
  local_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.InviteRequest.local_video_codec_list)
}
inline ::std::string* InviteRequest::mutable_local_video_codec_list() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.InviteRequest.local_video_codec_list)
  return local_video_codec_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteRequest::release_local_video_codec_list() {
  // @@protoc_insertion_point(field_release:outer.switch.InviteRequest.local_video_codec_list)
  
  return local_video_codec_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteRequest::set_allocated_local_video_codec_list(::std::string* local_video_codec_list) {
  if (local_video_codec_list != NULL) {
    
  } else {
    
  }
  local_video_codec_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_video_codec_list);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.InviteRequest.local_video_codec_list)
}

// -------------------------------------------------------------------

// InviteResponse

// .common.errcode.EErrorCode ret = 1;
inline void InviteResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode InviteResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void InviteResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.InviteResponse.ret)
}

// uint64 callid = 2;
inline void InviteResponse::clear_callid() {
  callid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InviteResponse::callid() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteResponse.callid)
  return callid_;
}
inline void InviteResponse::set_callid(::google::protobuf::uint64 value) {
  
  callid_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.InviteResponse.callid)
}

// string mrf_ip = 3;
inline void InviteResponse::clear_mrf_ip() {
  mrf_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteResponse::mrf_ip() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteResponse.mrf_ip)
  return mrf_ip_.GetNoArena();
}
inline void InviteResponse::set_mrf_ip(const ::std::string& value) {
  
  mrf_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.InviteResponse.mrf_ip)
}
#if LANG_CXX11
inline void InviteResponse::set_mrf_ip(::std::string&& value) {
  
  mrf_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.InviteResponse.mrf_ip)
}
#endif
inline void InviteResponse::set_mrf_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mrf_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.InviteResponse.mrf_ip)
}
inline void InviteResponse::set_mrf_ip(const char* value, size_t size) {
  
  mrf_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.InviteResponse.mrf_ip)
}
inline ::std::string* InviteResponse::mutable_mrf_ip() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.InviteResponse.mrf_ip)
  return mrf_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteResponse::release_mrf_ip() {
  // @@protoc_insertion_point(field_release:outer.switch.InviteResponse.mrf_ip)
  
  return mrf_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteResponse::set_allocated_mrf_ip(::std::string* mrf_ip) {
  if (mrf_ip != NULL) {
    
  } else {
    
  }
  mrf_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mrf_ip);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.InviteResponse.mrf_ip)
}

// uint32 mrf_audio_port = 4;
inline void InviteResponse::clear_mrf_audio_port() {
  mrf_audio_port_ = 0u;
}
inline ::google::protobuf::uint32 InviteResponse::mrf_audio_port() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteResponse.mrf_audio_port)
  return mrf_audio_port_;
}
inline void InviteResponse::set_mrf_audio_port(::google::protobuf::uint32 value) {
  
  mrf_audio_port_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.InviteResponse.mrf_audio_port)
}

// uint32 mrf_video_port = 5;
inline void InviteResponse::clear_mrf_video_port() {
  mrf_video_port_ = 0u;
}
inline ::google::protobuf::uint32 InviteResponse::mrf_video_port() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteResponse.mrf_video_port)
  return mrf_video_port_;
}
inline void InviteResponse::set_mrf_video_port(::google::protobuf::uint32 value) {
  
  mrf_video_port_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.InviteResponse.mrf_video_port)
}

// -------------------------------------------------------------------

// InviteMessage

// string callid = 1;
inline void InviteMessage::clear_callid() {
  callid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteMessage::callid() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteMessage.callid)
  return callid_.GetNoArena();
}
inline void InviteMessage::set_callid(const ::std::string& value) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.InviteMessage.callid)
}
#if LANG_CXX11
inline void InviteMessage::set_callid(::std::string&& value) {
  
  callid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.InviteMessage.callid)
}
#endif
inline void InviteMessage::set_callid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.InviteMessage.callid)
}
inline void InviteMessage::set_callid(const char* value, size_t size) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.InviteMessage.callid)
}
inline ::std::string* InviteMessage::mutable_callid() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.InviteMessage.callid)
  return callid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteMessage::release_callid() {
  // @@protoc_insertion_point(field_release:outer.switch.InviteMessage.callid)
  
  return callid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteMessage::set_allocated_callid(::std::string* callid) {
  if (callid != NULL) {
    
  } else {
    
  }
  callid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callid);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.InviteMessage.callid)
}

// .outer.switch.ECallMediaType call_media_type = 2;
inline void InviteMessage::clear_call_media_type() {
  call_media_type_ = 0;
}
inline ::outer::switch::ECallMediaType InviteMessage::call_media_type() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteMessage.call_media_type)
  return static_cast< ::outer::switch::ECallMediaType >(call_media_type_);
}
inline void InviteMessage::set_call_media_type(::outer::switch::ECallMediaType value) {
  
  call_media_type_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.InviteMessage.call_media_type)
}

// string appkey = 3;
inline void InviteMessage::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteMessage::appkey() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteMessage.appkey)
  return appkey_.GetNoArena();
}
inline void InviteMessage::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.InviteMessage.appkey)
}
#if LANG_CXX11
inline void InviteMessage::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.InviteMessage.appkey)
}
#endif
inline void InviteMessage::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.InviteMessage.appkey)
}
inline void InviteMessage::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.InviteMessage.appkey)
}
inline ::std::string* InviteMessage::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.InviteMessage.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteMessage::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.switch.InviteMessage.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteMessage::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.InviteMessage.appkey)
}

// string from_username = 4;
inline void InviteMessage::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteMessage::from_username() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteMessage.from_username)
  return from_username_.GetNoArena();
}
inline void InviteMessage::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.InviteMessage.from_username)
}
#if LANG_CXX11
inline void InviteMessage::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.InviteMessage.from_username)
}
#endif
inline void InviteMessage::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.InviteMessage.from_username)
}
inline void InviteMessage::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.InviteMessage.from_username)
}
inline ::std::string* InviteMessage::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.InviteMessage.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteMessage::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.switch.InviteMessage.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteMessage::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.InviteMessage.from_username)
}

// string to_username = 5;
inline void InviteMessage::clear_to_username() {
  to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteMessage::to_username() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteMessage.to_username)
  return to_username_.GetNoArena();
}
inline void InviteMessage::set_to_username(const ::std::string& value) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.InviteMessage.to_username)
}
#if LANG_CXX11
inline void InviteMessage::set_to_username(::std::string&& value) {
  
  to_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.InviteMessage.to_username)
}
#endif
inline void InviteMessage::set_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.InviteMessage.to_username)
}
inline void InviteMessage::set_to_username(const char* value, size_t size) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.InviteMessage.to_username)
}
inline ::std::string* InviteMessage::mutable_to_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.InviteMessage.to_username)
  return to_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteMessage::release_to_username() {
  // @@protoc_insertion_point(field_release:outer.switch.InviteMessage.to_username)
  
  return to_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteMessage::set_allocated_to_username(::std::string* to_username) {
  if (to_username != NULL) {
    
  } else {
    
  }
  to_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_username);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.InviteMessage.to_username)
}

// string remote_audio_codec_list = 6;
inline void InviteMessage::clear_remote_audio_codec_list() {
  remote_audio_codec_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteMessage::remote_audio_codec_list() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteMessage.remote_audio_codec_list)
  return remote_audio_codec_list_.GetNoArena();
}
inline void InviteMessage::set_remote_audio_codec_list(const ::std::string& value) {
  
  remote_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.InviteMessage.remote_audio_codec_list)
}
#if LANG_CXX11
inline void InviteMessage::set_remote_audio_codec_list(::std::string&& value) {
  
  remote_audio_codec_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.InviteMessage.remote_audio_codec_list)
}
#endif
inline void InviteMessage::set_remote_audio_codec_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.InviteMessage.remote_audio_codec_list)
}
inline void InviteMessage::set_remote_audio_codec_list(const char* value, size_t size) {
  
  remote_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.InviteMessage.remote_audio_codec_list)
}
inline ::std::string* InviteMessage::mutable_remote_audio_codec_list() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.InviteMessage.remote_audio_codec_list)
  return remote_audio_codec_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteMessage::release_remote_audio_codec_list() {
  // @@protoc_insertion_point(field_release:outer.switch.InviteMessage.remote_audio_codec_list)
  
  return remote_audio_codec_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteMessage::set_allocated_remote_audio_codec_list(::std::string* remote_audio_codec_list) {
  if (remote_audio_codec_list != NULL) {
    
  } else {
    
  }
  remote_audio_codec_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_audio_codec_list);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.InviteMessage.remote_audio_codec_list)
}

// string remote_video_codec_list = 7;
inline void InviteMessage::clear_remote_video_codec_list() {
  remote_video_codec_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteMessage::remote_video_codec_list() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteMessage.remote_video_codec_list)
  return remote_video_codec_list_.GetNoArena();
}
inline void InviteMessage::set_remote_video_codec_list(const ::std::string& value) {
  
  remote_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.InviteMessage.remote_video_codec_list)
}
#if LANG_CXX11
inline void InviteMessage::set_remote_video_codec_list(::std::string&& value) {
  
  remote_video_codec_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.InviteMessage.remote_video_codec_list)
}
#endif
inline void InviteMessage::set_remote_video_codec_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.InviteMessage.remote_video_codec_list)
}
inline void InviteMessage::set_remote_video_codec_list(const char* value, size_t size) {
  
  remote_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.InviteMessage.remote_video_codec_list)
}
inline ::std::string* InviteMessage::mutable_remote_video_codec_list() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.InviteMessage.remote_video_codec_list)
  return remote_video_codec_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteMessage::release_remote_video_codec_list() {
  // @@protoc_insertion_point(field_release:outer.switch.InviteMessage.remote_video_codec_list)
  
  return remote_video_codec_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteMessage::set_allocated_remote_video_codec_list(::std::string* remote_video_codec_list) {
  if (remote_video_codec_list != NULL) {
    
  } else {
    
  }
  remote_video_codec_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_video_codec_list);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.InviteMessage.remote_video_codec_list)
}

// string mrf_ip = 8;
inline void InviteMessage::clear_mrf_ip() {
  mrf_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteMessage::mrf_ip() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteMessage.mrf_ip)
  return mrf_ip_.GetNoArena();
}
inline void InviteMessage::set_mrf_ip(const ::std::string& value) {
  
  mrf_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.InviteMessage.mrf_ip)
}
#if LANG_CXX11
inline void InviteMessage::set_mrf_ip(::std::string&& value) {
  
  mrf_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.InviteMessage.mrf_ip)
}
#endif
inline void InviteMessage::set_mrf_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mrf_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.InviteMessage.mrf_ip)
}
inline void InviteMessage::set_mrf_ip(const char* value, size_t size) {
  
  mrf_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.InviteMessage.mrf_ip)
}
inline ::std::string* InviteMessage::mutable_mrf_ip() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.InviteMessage.mrf_ip)
  return mrf_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteMessage::release_mrf_ip() {
  // @@protoc_insertion_point(field_release:outer.switch.InviteMessage.mrf_ip)
  
  return mrf_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteMessage::set_allocated_mrf_ip(::std::string* mrf_ip) {
  if (mrf_ip != NULL) {
    
  } else {
    
  }
  mrf_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mrf_ip);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.InviteMessage.mrf_ip)
}

// uint32 mrf_audio_port = 9;
inline void InviteMessage::clear_mrf_audio_port() {
  mrf_audio_port_ = 0u;
}
inline ::google::protobuf::uint32 InviteMessage::mrf_audio_port() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteMessage.mrf_audio_port)
  return mrf_audio_port_;
}
inline void InviteMessage::set_mrf_audio_port(::google::protobuf::uint32 value) {
  
  mrf_audio_port_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.InviteMessage.mrf_audio_port)
}

// uint32 mrf_video_port = 10;
inline void InviteMessage::clear_mrf_video_port() {
  mrf_video_port_ = 0u;
}
inline ::google::protobuf::uint32 InviteMessage::mrf_video_port() const {
  // @@protoc_insertion_point(field_get:outer.switch.InviteMessage.mrf_video_port)
  return mrf_video_port_;
}
inline void InviteMessage::set_mrf_video_port(::google::protobuf::uint32 value) {
  
  mrf_video_port_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.InviteMessage.mrf_video_port)
}

// -------------------------------------------------------------------

// ConnectRequest

// string callid = 1;
inline void ConnectRequest::clear_callid() {
  callid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectRequest::callid() const {
  // @@protoc_insertion_point(field_get:outer.switch.ConnectRequest.callid)
  return callid_.GetNoArena();
}
inline void ConnectRequest::set_callid(const ::std::string& value) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ConnectRequest.callid)
}
#if LANG_CXX11
inline void ConnectRequest::set_callid(::std::string&& value) {
  
  callid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ConnectRequest.callid)
}
#endif
inline void ConnectRequest::set_callid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ConnectRequest.callid)
}
inline void ConnectRequest::set_callid(const char* value, size_t size) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ConnectRequest.callid)
}
inline ::std::string* ConnectRequest::mutable_callid() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ConnectRequest.callid)
  return callid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectRequest::release_callid() {
  // @@protoc_insertion_point(field_release:outer.switch.ConnectRequest.callid)
  
  return callid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectRequest::set_allocated_callid(::std::string* callid) {
  if (callid != NULL) {
    
  } else {
    
  }
  callid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callid);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ConnectRequest.callid)
}

// string local_ip = 2;
inline void ConnectRequest::clear_local_ip() {
  local_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectRequest::local_ip() const {
  // @@protoc_insertion_point(field_get:outer.switch.ConnectRequest.local_ip)
  return local_ip_.GetNoArena();
}
inline void ConnectRequest::set_local_ip(const ::std::string& value) {
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ConnectRequest.local_ip)
}
#if LANG_CXX11
inline void ConnectRequest::set_local_ip(::std::string&& value) {
  
  local_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ConnectRequest.local_ip)
}
#endif
inline void ConnectRequest::set_local_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ConnectRequest.local_ip)
}
inline void ConnectRequest::set_local_ip(const char* value, size_t size) {
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ConnectRequest.local_ip)
}
inline ::std::string* ConnectRequest::mutable_local_ip() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ConnectRequest.local_ip)
  return local_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectRequest::release_local_ip() {
  // @@protoc_insertion_point(field_release:outer.switch.ConnectRequest.local_ip)
  
  return local_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectRequest::set_allocated_local_ip(::std::string* local_ip) {
  if (local_ip != NULL) {
    
  } else {
    
  }
  local_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_ip);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ConnectRequest.local_ip)
}

// uint32 local_audio_port = 3;
inline void ConnectRequest::clear_local_audio_port() {
  local_audio_port_ = 0u;
}
inline ::google::protobuf::uint32 ConnectRequest::local_audio_port() const {
  // @@protoc_insertion_point(field_get:outer.switch.ConnectRequest.local_audio_port)
  return local_audio_port_;
}
inline void ConnectRequest::set_local_audio_port(::google::protobuf::uint32 value) {
  
  local_audio_port_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.ConnectRequest.local_audio_port)
}

// string local_audio_codec_list = 4;
inline void ConnectRequest::clear_local_audio_codec_list() {
  local_audio_codec_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectRequest::local_audio_codec_list() const {
  // @@protoc_insertion_point(field_get:outer.switch.ConnectRequest.local_audio_codec_list)
  return local_audio_codec_list_.GetNoArena();
}
inline void ConnectRequest::set_local_audio_codec_list(const ::std::string& value) {
  
  local_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ConnectRequest.local_audio_codec_list)
}
#if LANG_CXX11
inline void ConnectRequest::set_local_audio_codec_list(::std::string&& value) {
  
  local_audio_codec_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ConnectRequest.local_audio_codec_list)
}
#endif
inline void ConnectRequest::set_local_audio_codec_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ConnectRequest.local_audio_codec_list)
}
inline void ConnectRequest::set_local_audio_codec_list(const char* value, size_t size) {
  
  local_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ConnectRequest.local_audio_codec_list)
}
inline ::std::string* ConnectRequest::mutable_local_audio_codec_list() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ConnectRequest.local_audio_codec_list)
  return local_audio_codec_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectRequest::release_local_audio_codec_list() {
  // @@protoc_insertion_point(field_release:outer.switch.ConnectRequest.local_audio_codec_list)
  
  return local_audio_codec_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectRequest::set_allocated_local_audio_codec_list(::std::string* local_audio_codec_list) {
  if (local_audio_codec_list != NULL) {
    
  } else {
    
  }
  local_audio_codec_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_audio_codec_list);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ConnectRequest.local_audio_codec_list)
}

// uint32 local_video_port = 5;
inline void ConnectRequest::clear_local_video_port() {
  local_video_port_ = 0u;
}
inline ::google::protobuf::uint32 ConnectRequest::local_video_port() const {
  // @@protoc_insertion_point(field_get:outer.switch.ConnectRequest.local_video_port)
  return local_video_port_;
}
inline void ConnectRequest::set_local_video_port(::google::protobuf::uint32 value) {
  
  local_video_port_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.ConnectRequest.local_video_port)
}

// string local_video_codec_list = 6;
inline void ConnectRequest::clear_local_video_codec_list() {
  local_video_codec_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectRequest::local_video_codec_list() const {
  // @@protoc_insertion_point(field_get:outer.switch.ConnectRequest.local_video_codec_list)
  return local_video_codec_list_.GetNoArena();
}
inline void ConnectRequest::set_local_video_codec_list(const ::std::string& value) {
  
  local_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ConnectRequest.local_video_codec_list)
}
#if LANG_CXX11
inline void ConnectRequest::set_local_video_codec_list(::std::string&& value) {
  
  local_video_codec_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ConnectRequest.local_video_codec_list)
}
#endif
inline void ConnectRequest::set_local_video_codec_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ConnectRequest.local_video_codec_list)
}
inline void ConnectRequest::set_local_video_codec_list(const char* value, size_t size) {
  
  local_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ConnectRequest.local_video_codec_list)
}
inline ::std::string* ConnectRequest::mutable_local_video_codec_list() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ConnectRequest.local_video_codec_list)
  return local_video_codec_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectRequest::release_local_video_codec_list() {
  // @@protoc_insertion_point(field_release:outer.switch.ConnectRequest.local_video_codec_list)
  
  return local_video_codec_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectRequest::set_allocated_local_video_codec_list(::std::string* local_video_codec_list) {
  if (local_video_codec_list != NULL) {
    
  } else {
    
  }
  local_video_codec_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_video_codec_list);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ConnectRequest.local_video_codec_list)
}

// -------------------------------------------------------------------

// ConnectResponse

// .common.errcode.EErrorCode ret = 1;
inline void ConnectResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode ConnectResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.switch.ConnectResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void ConnectResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.ConnectResponse.ret)
}

// -------------------------------------------------------------------

// ConnectMessage

// string callid = 1;
inline void ConnectMessage::clear_callid() {
  callid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectMessage::callid() const {
  // @@protoc_insertion_point(field_get:outer.switch.ConnectMessage.callid)
  return callid_.GetNoArena();
}
inline void ConnectMessage::set_callid(const ::std::string& value) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ConnectMessage.callid)
}
#if LANG_CXX11
inline void ConnectMessage::set_callid(::std::string&& value) {
  
  callid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ConnectMessage.callid)
}
#endif
inline void ConnectMessage::set_callid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ConnectMessage.callid)
}
inline void ConnectMessage::set_callid(const char* value, size_t size) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ConnectMessage.callid)
}
inline ::std::string* ConnectMessage::mutable_callid() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ConnectMessage.callid)
  return callid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectMessage::release_callid() {
  // @@protoc_insertion_point(field_release:outer.switch.ConnectMessage.callid)
  
  return callid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectMessage::set_allocated_callid(::std::string* callid) {
  if (callid != NULL) {
    
  } else {
    
  }
  callid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callid);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ConnectMessage.callid)
}

// string callee_audio_codec_list = 2;
inline void ConnectMessage::clear_callee_audio_codec_list() {
  callee_audio_codec_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectMessage::callee_audio_codec_list() const {
  // @@protoc_insertion_point(field_get:outer.switch.ConnectMessage.callee_audio_codec_list)
  return callee_audio_codec_list_.GetNoArena();
}
inline void ConnectMessage::set_callee_audio_codec_list(const ::std::string& value) {
  
  callee_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ConnectMessage.callee_audio_codec_list)
}
#if LANG_CXX11
inline void ConnectMessage::set_callee_audio_codec_list(::std::string&& value) {
  
  callee_audio_codec_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ConnectMessage.callee_audio_codec_list)
}
#endif
inline void ConnectMessage::set_callee_audio_codec_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callee_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ConnectMessage.callee_audio_codec_list)
}
inline void ConnectMessage::set_callee_audio_codec_list(const char* value, size_t size) {
  
  callee_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ConnectMessage.callee_audio_codec_list)
}
inline ::std::string* ConnectMessage::mutable_callee_audio_codec_list() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ConnectMessage.callee_audio_codec_list)
  return callee_audio_codec_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectMessage::release_callee_audio_codec_list() {
  // @@protoc_insertion_point(field_release:outer.switch.ConnectMessage.callee_audio_codec_list)
  
  return callee_audio_codec_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectMessage::set_allocated_callee_audio_codec_list(::std::string* callee_audio_codec_list) {
  if (callee_audio_codec_list != NULL) {
    
  } else {
    
  }
  callee_audio_codec_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callee_audio_codec_list);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ConnectMessage.callee_audio_codec_list)
}

// string callee_video_codec_list = 3;
inline void ConnectMessage::clear_callee_video_codec_list() {
  callee_video_codec_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectMessage::callee_video_codec_list() const {
  // @@protoc_insertion_point(field_get:outer.switch.ConnectMessage.callee_video_codec_list)
  return callee_video_codec_list_.GetNoArena();
}
inline void ConnectMessage::set_callee_video_codec_list(const ::std::string& value) {
  
  callee_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ConnectMessage.callee_video_codec_list)
}
#if LANG_CXX11
inline void ConnectMessage::set_callee_video_codec_list(::std::string&& value) {
  
  callee_video_codec_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ConnectMessage.callee_video_codec_list)
}
#endif
inline void ConnectMessage::set_callee_video_codec_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callee_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ConnectMessage.callee_video_codec_list)
}
inline void ConnectMessage::set_callee_video_codec_list(const char* value, size_t size) {
  
  callee_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ConnectMessage.callee_video_codec_list)
}
inline ::std::string* ConnectMessage::mutable_callee_video_codec_list() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ConnectMessage.callee_video_codec_list)
  return callee_video_codec_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectMessage::release_callee_video_codec_list() {
  // @@protoc_insertion_point(field_release:outer.switch.ConnectMessage.callee_video_codec_list)
  
  return callee_video_codec_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectMessage::set_allocated_callee_video_codec_list(::std::string* callee_video_codec_list) {
  if (callee_video_codec_list != NULL) {
    
  } else {
    
  }
  callee_video_codec_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callee_video_codec_list);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ConnectMessage.callee_video_codec_list)
}

// -------------------------------------------------------------------

// BusyRequest

// string callid = 1;
inline void BusyRequest::clear_callid() {
  callid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BusyRequest::callid() const {
  // @@protoc_insertion_point(field_get:outer.switch.BusyRequest.callid)
  return callid_.GetNoArena();
}
inline void BusyRequest::set_callid(const ::std::string& value) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.BusyRequest.callid)
}
#if LANG_CXX11
inline void BusyRequest::set_callid(::std::string&& value) {
  
  callid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.BusyRequest.callid)
}
#endif
inline void BusyRequest::set_callid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.BusyRequest.callid)
}
inline void BusyRequest::set_callid(const char* value, size_t size) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.BusyRequest.callid)
}
inline ::std::string* BusyRequest::mutable_callid() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.BusyRequest.callid)
  return callid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BusyRequest::release_callid() {
  // @@protoc_insertion_point(field_release:outer.switch.BusyRequest.callid)
  
  return callid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BusyRequest::set_allocated_callid(::std::string* callid) {
  if (callid != NULL) {
    
  } else {
    
  }
  callid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callid);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.BusyRequest.callid)
}

// string appkey = 2;
inline void BusyRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BusyRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.switch.BusyRequest.appkey)
  return appkey_.GetNoArena();
}
inline void BusyRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.BusyRequest.appkey)
}
#if LANG_CXX11
inline void BusyRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.BusyRequest.appkey)
}
#endif
inline void BusyRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.BusyRequest.appkey)
}
inline void BusyRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.BusyRequest.appkey)
}
inline ::std::string* BusyRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.BusyRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BusyRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.switch.BusyRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BusyRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.BusyRequest.appkey)
}

// string from_username = 3;
inline void BusyRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BusyRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.switch.BusyRequest.from_username)
  return from_username_.GetNoArena();
}
inline void BusyRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.BusyRequest.from_username)
}
#if LANG_CXX11
inline void BusyRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.BusyRequest.from_username)
}
#endif
inline void BusyRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.BusyRequest.from_username)
}
inline void BusyRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.BusyRequest.from_username)
}
inline ::std::string* BusyRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.BusyRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BusyRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.switch.BusyRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BusyRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.BusyRequest.from_username)
}

// -------------------------------------------------------------------

// BusyResponse

// .common.errcode.EErrorCode ret = 1;
inline void BusyResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode BusyResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.switch.BusyResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void BusyResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.BusyResponse.ret)
}

// -------------------------------------------------------------------

// BusyMessage

// string callid = 1;
inline void BusyMessage::clear_callid() {
  callid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BusyMessage::callid() const {
  // @@protoc_insertion_point(field_get:outer.switch.BusyMessage.callid)
  return callid_.GetNoArena();
}
inline void BusyMessage::set_callid(const ::std::string& value) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.BusyMessage.callid)
}
#if LANG_CXX11
inline void BusyMessage::set_callid(::std::string&& value) {
  
  callid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.BusyMessage.callid)
}
#endif
inline void BusyMessage::set_callid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.BusyMessage.callid)
}
inline void BusyMessage::set_callid(const char* value, size_t size) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.BusyMessage.callid)
}
inline ::std::string* BusyMessage::mutable_callid() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.BusyMessage.callid)
  return callid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BusyMessage::release_callid() {
  // @@protoc_insertion_point(field_release:outer.switch.BusyMessage.callid)
  
  return callid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BusyMessage::set_allocated_callid(::std::string* callid) {
  if (callid != NULL) {
    
  } else {
    
  }
  callid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callid);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.BusyMessage.callid)
}

// string appkey = 2;
inline void BusyMessage::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BusyMessage::appkey() const {
  // @@protoc_insertion_point(field_get:outer.switch.BusyMessage.appkey)
  return appkey_.GetNoArena();
}
inline void BusyMessage::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.BusyMessage.appkey)
}
#if LANG_CXX11
inline void BusyMessage::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.BusyMessage.appkey)
}
#endif
inline void BusyMessage::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.BusyMessage.appkey)
}
inline void BusyMessage::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.BusyMessage.appkey)
}
inline ::std::string* BusyMessage::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.BusyMessage.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BusyMessage::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.switch.BusyMessage.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BusyMessage::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.BusyMessage.appkey)
}

// string from_username = 3;
inline void BusyMessage::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BusyMessage::from_username() const {
  // @@protoc_insertion_point(field_get:outer.switch.BusyMessage.from_username)
  return from_username_.GetNoArena();
}
inline void BusyMessage::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.BusyMessage.from_username)
}
#if LANG_CXX11
inline void BusyMessage::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.BusyMessage.from_username)
}
#endif
inline void BusyMessage::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.BusyMessage.from_username)
}
inline void BusyMessage::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.BusyMessage.from_username)
}
inline ::std::string* BusyMessage::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.BusyMessage.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BusyMessage::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.switch.BusyMessage.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BusyMessage::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.BusyMessage.from_username)
}

// -------------------------------------------------------------------

// CancelRequest

// string callid = 1;
inline void CancelRequest::clear_callid() {
  callid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelRequest::callid() const {
  // @@protoc_insertion_point(field_get:outer.switch.CancelRequest.callid)
  return callid_.GetNoArena();
}
inline void CancelRequest::set_callid(const ::std::string& value) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.CancelRequest.callid)
}
#if LANG_CXX11
inline void CancelRequest::set_callid(::std::string&& value) {
  
  callid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.CancelRequest.callid)
}
#endif
inline void CancelRequest::set_callid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.CancelRequest.callid)
}
inline void CancelRequest::set_callid(const char* value, size_t size) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.CancelRequest.callid)
}
inline ::std::string* CancelRequest::mutable_callid() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.CancelRequest.callid)
  return callid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelRequest::release_callid() {
  // @@protoc_insertion_point(field_release:outer.switch.CancelRequest.callid)
  
  return callid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelRequest::set_allocated_callid(::std::string* callid) {
  if (callid != NULL) {
    
  } else {
    
  }
  callid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callid);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.CancelRequest.callid)
}

// string appkey = 2;
inline void CancelRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.switch.CancelRequest.appkey)
  return appkey_.GetNoArena();
}
inline void CancelRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.CancelRequest.appkey)
}
#if LANG_CXX11
inline void CancelRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.CancelRequest.appkey)
}
#endif
inline void CancelRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.CancelRequest.appkey)
}
inline void CancelRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.CancelRequest.appkey)
}
inline ::std::string* CancelRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.CancelRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.switch.CancelRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.CancelRequest.appkey)
}

// string from_username = 3;
inline void CancelRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.switch.CancelRequest.from_username)
  return from_username_.GetNoArena();
}
inline void CancelRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.CancelRequest.from_username)
}
#if LANG_CXX11
inline void CancelRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.CancelRequest.from_username)
}
#endif
inline void CancelRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.CancelRequest.from_username)
}
inline void CancelRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.CancelRequest.from_username)
}
inline ::std::string* CancelRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.CancelRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.switch.CancelRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.CancelRequest.from_username)
}

// -------------------------------------------------------------------

// CancelResponse

// .common.errcode.EErrorCode ret = 1;
inline void CancelResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode CancelResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.switch.CancelResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void CancelResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.CancelResponse.ret)
}

// -------------------------------------------------------------------

// CancelMessage

// string callid = 1;
inline void CancelMessage::clear_callid() {
  callid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelMessage::callid() const {
  // @@protoc_insertion_point(field_get:outer.switch.CancelMessage.callid)
  return callid_.GetNoArena();
}
inline void CancelMessage::set_callid(const ::std::string& value) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.CancelMessage.callid)
}
#if LANG_CXX11
inline void CancelMessage::set_callid(::std::string&& value) {
  
  callid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.CancelMessage.callid)
}
#endif
inline void CancelMessage::set_callid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.CancelMessage.callid)
}
inline void CancelMessage::set_callid(const char* value, size_t size) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.CancelMessage.callid)
}
inline ::std::string* CancelMessage::mutable_callid() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.CancelMessage.callid)
  return callid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelMessage::release_callid() {
  // @@protoc_insertion_point(field_release:outer.switch.CancelMessage.callid)
  
  return callid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelMessage::set_allocated_callid(::std::string* callid) {
  if (callid != NULL) {
    
  } else {
    
  }
  callid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callid);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.CancelMessage.callid)
}

// string appkey = 2;
inline void CancelMessage::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelMessage::appkey() const {
  // @@protoc_insertion_point(field_get:outer.switch.CancelMessage.appkey)
  return appkey_.GetNoArena();
}
inline void CancelMessage::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.CancelMessage.appkey)
}
#if LANG_CXX11
inline void CancelMessage::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.CancelMessage.appkey)
}
#endif
inline void CancelMessage::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.CancelMessage.appkey)
}
inline void CancelMessage::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.CancelMessage.appkey)
}
inline ::std::string* CancelMessage::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.CancelMessage.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelMessage::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.switch.CancelMessage.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelMessage::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.CancelMessage.appkey)
}

// string from_username = 3;
inline void CancelMessage::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelMessage::from_username() const {
  // @@protoc_insertion_point(field_get:outer.switch.CancelMessage.from_username)
  return from_username_.GetNoArena();
}
inline void CancelMessage::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.CancelMessage.from_username)
}
#if LANG_CXX11
inline void CancelMessage::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.CancelMessage.from_username)
}
#endif
inline void CancelMessage::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.CancelMessage.from_username)
}
inline void CancelMessage::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.CancelMessage.from_username)
}
inline ::std::string* CancelMessage::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.CancelMessage.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelMessage::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.switch.CancelMessage.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelMessage::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.CancelMessage.from_username)
}

// -------------------------------------------------------------------

// RefuseRequest

// string callid = 1;
inline void RefuseRequest::clear_callid() {
  callid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefuseRequest::callid() const {
  // @@protoc_insertion_point(field_get:outer.switch.RefuseRequest.callid)
  return callid_.GetNoArena();
}
inline void RefuseRequest::set_callid(const ::std::string& value) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.RefuseRequest.callid)
}
#if LANG_CXX11
inline void RefuseRequest::set_callid(::std::string&& value) {
  
  callid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.RefuseRequest.callid)
}
#endif
inline void RefuseRequest::set_callid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.RefuseRequest.callid)
}
inline void RefuseRequest::set_callid(const char* value, size_t size) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.RefuseRequest.callid)
}
inline ::std::string* RefuseRequest::mutable_callid() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.RefuseRequest.callid)
  return callid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefuseRequest::release_callid() {
  // @@protoc_insertion_point(field_release:outer.switch.RefuseRequest.callid)
  
  return callid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefuseRequest::set_allocated_callid(::std::string* callid) {
  if (callid != NULL) {
    
  } else {
    
  }
  callid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callid);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.RefuseRequest.callid)
}

// string appkey = 2;
inline void RefuseRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefuseRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.switch.RefuseRequest.appkey)
  return appkey_.GetNoArena();
}
inline void RefuseRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.RefuseRequest.appkey)
}
#if LANG_CXX11
inline void RefuseRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.RefuseRequest.appkey)
}
#endif
inline void RefuseRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.RefuseRequest.appkey)
}
inline void RefuseRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.RefuseRequest.appkey)
}
inline ::std::string* RefuseRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.RefuseRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefuseRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.switch.RefuseRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefuseRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.RefuseRequest.appkey)
}

// string from_username = 3;
inline void RefuseRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefuseRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.switch.RefuseRequest.from_username)
  return from_username_.GetNoArena();
}
inline void RefuseRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.RefuseRequest.from_username)
}
#if LANG_CXX11
inline void RefuseRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.RefuseRequest.from_username)
}
#endif
inline void RefuseRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.RefuseRequest.from_username)
}
inline void RefuseRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.RefuseRequest.from_username)
}
inline ::std::string* RefuseRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.RefuseRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefuseRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.switch.RefuseRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefuseRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.RefuseRequest.from_username)
}

// -------------------------------------------------------------------

// RefuseResponse

// .common.errcode.EErrorCode ret = 1;
inline void RefuseResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode RefuseResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.switch.RefuseResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void RefuseResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.RefuseResponse.ret)
}

// -------------------------------------------------------------------

// RefuseMessage

// string callid = 1;
inline void RefuseMessage::clear_callid() {
  callid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefuseMessage::callid() const {
  // @@protoc_insertion_point(field_get:outer.switch.RefuseMessage.callid)
  return callid_.GetNoArena();
}
inline void RefuseMessage::set_callid(const ::std::string& value) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.RefuseMessage.callid)
}
#if LANG_CXX11
inline void RefuseMessage::set_callid(::std::string&& value) {
  
  callid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.RefuseMessage.callid)
}
#endif
inline void RefuseMessage::set_callid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.RefuseMessage.callid)
}
inline void RefuseMessage::set_callid(const char* value, size_t size) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.RefuseMessage.callid)
}
inline ::std::string* RefuseMessage::mutable_callid() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.RefuseMessage.callid)
  return callid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefuseMessage::release_callid() {
  // @@protoc_insertion_point(field_release:outer.switch.RefuseMessage.callid)
  
  return callid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefuseMessage::set_allocated_callid(::std::string* callid) {
  if (callid != NULL) {
    
  } else {
    
  }
  callid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callid);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.RefuseMessage.callid)
}

// string appkey = 2;
inline void RefuseMessage::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefuseMessage::appkey() const {
  // @@protoc_insertion_point(field_get:outer.switch.RefuseMessage.appkey)
  return appkey_.GetNoArena();
}
inline void RefuseMessage::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.RefuseMessage.appkey)
}
#if LANG_CXX11
inline void RefuseMessage::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.RefuseMessage.appkey)
}
#endif
inline void RefuseMessage::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.RefuseMessage.appkey)
}
inline void RefuseMessage::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.RefuseMessage.appkey)
}
inline ::std::string* RefuseMessage::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.RefuseMessage.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefuseMessage::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.switch.RefuseMessage.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefuseMessage::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.RefuseMessage.appkey)
}

// string from_username = 3;
inline void RefuseMessage::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RefuseMessage::from_username() const {
  // @@protoc_insertion_point(field_get:outer.switch.RefuseMessage.from_username)
  return from_username_.GetNoArena();
}
inline void RefuseMessage::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.RefuseMessage.from_username)
}
#if LANG_CXX11
inline void RefuseMessage::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.RefuseMessage.from_username)
}
#endif
inline void RefuseMessage::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.RefuseMessage.from_username)
}
inline void RefuseMessage::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.RefuseMessage.from_username)
}
inline ::std::string* RefuseMessage::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.RefuseMessage.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RefuseMessage::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.switch.RefuseMessage.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RefuseMessage::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.RefuseMessage.from_username)
}

// -------------------------------------------------------------------

// ByeRequest

// string callid = 1;
inline void ByeRequest::clear_callid() {
  callid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ByeRequest::callid() const {
  // @@protoc_insertion_point(field_get:outer.switch.ByeRequest.callid)
  return callid_.GetNoArena();
}
inline void ByeRequest::set_callid(const ::std::string& value) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ByeRequest.callid)
}
#if LANG_CXX11
inline void ByeRequest::set_callid(::std::string&& value) {
  
  callid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ByeRequest.callid)
}
#endif
inline void ByeRequest::set_callid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ByeRequest.callid)
}
inline void ByeRequest::set_callid(const char* value, size_t size) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ByeRequest.callid)
}
inline ::std::string* ByeRequest::mutable_callid() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ByeRequest.callid)
  return callid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ByeRequest::release_callid() {
  // @@protoc_insertion_point(field_release:outer.switch.ByeRequest.callid)
  
  return callid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ByeRequest::set_allocated_callid(::std::string* callid) {
  if (callid != NULL) {
    
  } else {
    
  }
  callid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callid);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ByeRequest.callid)
}

// string appkey = 2;
inline void ByeRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ByeRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.switch.ByeRequest.appkey)
  return appkey_.GetNoArena();
}
inline void ByeRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ByeRequest.appkey)
}
#if LANG_CXX11
inline void ByeRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ByeRequest.appkey)
}
#endif
inline void ByeRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ByeRequest.appkey)
}
inline void ByeRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ByeRequest.appkey)
}
inline ::std::string* ByeRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ByeRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ByeRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.switch.ByeRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ByeRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ByeRequest.appkey)
}

// string from_username = 3;
inline void ByeRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ByeRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.switch.ByeRequest.from_username)
  return from_username_.GetNoArena();
}
inline void ByeRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ByeRequest.from_username)
}
#if LANG_CXX11
inline void ByeRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ByeRequest.from_username)
}
#endif
inline void ByeRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ByeRequest.from_username)
}
inline void ByeRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ByeRequest.from_username)
}
inline ::std::string* ByeRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ByeRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ByeRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.switch.ByeRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ByeRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ByeRequest.from_username)
}

// -------------------------------------------------------------------

// ByeResponse

// .common.errcode.EErrorCode ret = 1;
inline void ByeResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode ByeResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.switch.ByeResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void ByeResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.ByeResponse.ret)
}

// -------------------------------------------------------------------

// ByeMessage

// string callid = 1;
inline void ByeMessage::clear_callid() {
  callid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ByeMessage::callid() const {
  // @@protoc_insertion_point(field_get:outer.switch.ByeMessage.callid)
  return callid_.GetNoArena();
}
inline void ByeMessage::set_callid(const ::std::string& value) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ByeMessage.callid)
}
#if LANG_CXX11
inline void ByeMessage::set_callid(::std::string&& value) {
  
  callid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ByeMessage.callid)
}
#endif
inline void ByeMessage::set_callid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ByeMessage.callid)
}
inline void ByeMessage::set_callid(const char* value, size_t size) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ByeMessage.callid)
}
inline ::std::string* ByeMessage::mutable_callid() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ByeMessage.callid)
  return callid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ByeMessage::release_callid() {
  // @@protoc_insertion_point(field_release:outer.switch.ByeMessage.callid)
  
  return callid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ByeMessage::set_allocated_callid(::std::string* callid) {
  if (callid != NULL) {
    
  } else {
    
  }
  callid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callid);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ByeMessage.callid)
}

// string appkey = 2;
inline void ByeMessage::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ByeMessage::appkey() const {
  // @@protoc_insertion_point(field_get:outer.switch.ByeMessage.appkey)
  return appkey_.GetNoArena();
}
inline void ByeMessage::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ByeMessage.appkey)
}
#if LANG_CXX11
inline void ByeMessage::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ByeMessage.appkey)
}
#endif
inline void ByeMessage::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ByeMessage.appkey)
}
inline void ByeMessage::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ByeMessage.appkey)
}
inline ::std::string* ByeMessage::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ByeMessage.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ByeMessage::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.switch.ByeMessage.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ByeMessage::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ByeMessage.appkey)
}

// string from_username = 3;
inline void ByeMessage::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ByeMessage::from_username() const {
  // @@protoc_insertion_point(field_get:outer.switch.ByeMessage.from_username)
  return from_username_.GetNoArena();
}
inline void ByeMessage::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ByeMessage.from_username)
}
#if LANG_CXX11
inline void ByeMessage::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ByeMessage.from_username)
}
#endif
inline void ByeMessage::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ByeMessage.from_username)
}
inline void ByeMessage::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ByeMessage.from_username)
}
inline ::std::string* ByeMessage::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ByeMessage.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ByeMessage::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.switch.ByeMessage.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ByeMessage::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ByeMessage.from_username)
}

// -------------------------------------------------------------------

// ReinviteRequest

// .outer.switch.ECallMediaType call_media_type = 1;
inline void ReinviteRequest::clear_call_media_type() {
  call_media_type_ = 0;
}
inline ::outer::switch::ECallMediaType ReinviteRequest::call_media_type() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteRequest.call_media_type)
  return static_cast< ::outer::switch::ECallMediaType >(call_media_type_);
}
inline void ReinviteRequest::set_call_media_type(::outer::switch::ECallMediaType value) {
  
  call_media_type_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteRequest.call_media_type)
}

// string appkey = 2;
inline void ReinviteRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReinviteRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteRequest.appkey)
  return appkey_.GetNoArena();
}
inline void ReinviteRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteRequest.appkey)
}
#if LANG_CXX11
inline void ReinviteRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ReinviteRequest.appkey)
}
#endif
inline void ReinviteRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ReinviteRequest.appkey)
}
inline void ReinviteRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ReinviteRequest.appkey)
}
inline ::std::string* ReinviteRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ReinviteRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReinviteRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.switch.ReinviteRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReinviteRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ReinviteRequest.appkey)
}

// string from_username = 3;
inline void ReinviteRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReinviteRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteRequest.from_username)
  return from_username_.GetNoArena();
}
inline void ReinviteRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteRequest.from_username)
}
#if LANG_CXX11
inline void ReinviteRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ReinviteRequest.from_username)
}
#endif
inline void ReinviteRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ReinviteRequest.from_username)
}
inline void ReinviteRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ReinviteRequest.from_username)
}
inline ::std::string* ReinviteRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ReinviteRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReinviteRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.switch.ReinviteRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReinviteRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ReinviteRequest.from_username)
}

// string local_ip = 5;
inline void ReinviteRequest::clear_local_ip() {
  local_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReinviteRequest::local_ip() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteRequest.local_ip)
  return local_ip_.GetNoArena();
}
inline void ReinviteRequest::set_local_ip(const ::std::string& value) {
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteRequest.local_ip)
}
#if LANG_CXX11
inline void ReinviteRequest::set_local_ip(::std::string&& value) {
  
  local_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ReinviteRequest.local_ip)
}
#endif
inline void ReinviteRequest::set_local_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ReinviteRequest.local_ip)
}
inline void ReinviteRequest::set_local_ip(const char* value, size_t size) {
  
  local_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ReinviteRequest.local_ip)
}
inline ::std::string* ReinviteRequest::mutable_local_ip() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ReinviteRequest.local_ip)
  return local_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReinviteRequest::release_local_ip() {
  // @@protoc_insertion_point(field_release:outer.switch.ReinviteRequest.local_ip)
  
  return local_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReinviteRequest::set_allocated_local_ip(::std::string* local_ip) {
  if (local_ip != NULL) {
    
  } else {
    
  }
  local_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_ip);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ReinviteRequest.local_ip)
}

// uint32 local_audio_port = 6;
inline void ReinviteRequest::clear_local_audio_port() {
  local_audio_port_ = 0u;
}
inline ::google::protobuf::uint32 ReinviteRequest::local_audio_port() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteRequest.local_audio_port)
  return local_audio_port_;
}
inline void ReinviteRequest::set_local_audio_port(::google::protobuf::uint32 value) {
  
  local_audio_port_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteRequest.local_audio_port)
}

// string local_audio_codec_list = 7;
inline void ReinviteRequest::clear_local_audio_codec_list() {
  local_audio_codec_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReinviteRequest::local_audio_codec_list() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteRequest.local_audio_codec_list)
  return local_audio_codec_list_.GetNoArena();
}
inline void ReinviteRequest::set_local_audio_codec_list(const ::std::string& value) {
  
  local_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteRequest.local_audio_codec_list)
}
#if LANG_CXX11
inline void ReinviteRequest::set_local_audio_codec_list(::std::string&& value) {
  
  local_audio_codec_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ReinviteRequest.local_audio_codec_list)
}
#endif
inline void ReinviteRequest::set_local_audio_codec_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ReinviteRequest.local_audio_codec_list)
}
inline void ReinviteRequest::set_local_audio_codec_list(const char* value, size_t size) {
  
  local_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ReinviteRequest.local_audio_codec_list)
}
inline ::std::string* ReinviteRequest::mutable_local_audio_codec_list() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ReinviteRequest.local_audio_codec_list)
  return local_audio_codec_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReinviteRequest::release_local_audio_codec_list() {
  // @@protoc_insertion_point(field_release:outer.switch.ReinviteRequest.local_audio_codec_list)
  
  return local_audio_codec_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReinviteRequest::set_allocated_local_audio_codec_list(::std::string* local_audio_codec_list) {
  if (local_audio_codec_list != NULL) {
    
  } else {
    
  }
  local_audio_codec_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_audio_codec_list);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ReinviteRequest.local_audio_codec_list)
}

// uint32 local_video_port = 8;
inline void ReinviteRequest::clear_local_video_port() {
  local_video_port_ = 0u;
}
inline ::google::protobuf::uint32 ReinviteRequest::local_video_port() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteRequest.local_video_port)
  return local_video_port_;
}
inline void ReinviteRequest::set_local_video_port(::google::protobuf::uint32 value) {
  
  local_video_port_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteRequest.local_video_port)
}

// string local_video_codec_list = 9;
inline void ReinviteRequest::clear_local_video_codec_list() {
  local_video_codec_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReinviteRequest::local_video_codec_list() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteRequest.local_video_codec_list)
  return local_video_codec_list_.GetNoArena();
}
inline void ReinviteRequest::set_local_video_codec_list(const ::std::string& value) {
  
  local_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteRequest.local_video_codec_list)
}
#if LANG_CXX11
inline void ReinviteRequest::set_local_video_codec_list(::std::string&& value) {
  
  local_video_codec_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ReinviteRequest.local_video_codec_list)
}
#endif
inline void ReinviteRequest::set_local_video_codec_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  local_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ReinviteRequest.local_video_codec_list)
}
inline void ReinviteRequest::set_local_video_codec_list(const char* value, size_t size) {
  
  local_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ReinviteRequest.local_video_codec_list)
}
inline ::std::string* ReinviteRequest::mutable_local_video_codec_list() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ReinviteRequest.local_video_codec_list)
  return local_video_codec_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReinviteRequest::release_local_video_codec_list() {
  // @@protoc_insertion_point(field_release:outer.switch.ReinviteRequest.local_video_codec_list)
  
  return local_video_codec_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReinviteRequest::set_allocated_local_video_codec_list(::std::string* local_video_codec_list) {
  if (local_video_codec_list != NULL) {
    
  } else {
    
  }
  local_video_codec_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_video_codec_list);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ReinviteRequest.local_video_codec_list)
}

// -------------------------------------------------------------------

// ReinviteResponse

// .common.errcode.EErrorCode ret = 1;
inline void ReinviteResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode ReinviteResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void ReinviteResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteResponse.ret)
}

// uint64 callid = 2;
inline void ReinviteResponse::clear_callid() {
  callid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReinviteResponse::callid() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteResponse.callid)
  return callid_;
}
inline void ReinviteResponse::set_callid(::google::protobuf::uint64 value) {
  
  callid_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteResponse.callid)
}

// string mrf_ip = 3;
inline void ReinviteResponse::clear_mrf_ip() {
  mrf_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReinviteResponse::mrf_ip() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteResponse.mrf_ip)
  return mrf_ip_.GetNoArena();
}
inline void ReinviteResponse::set_mrf_ip(const ::std::string& value) {
  
  mrf_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteResponse.mrf_ip)
}
#if LANG_CXX11
inline void ReinviteResponse::set_mrf_ip(::std::string&& value) {
  
  mrf_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ReinviteResponse.mrf_ip)
}
#endif
inline void ReinviteResponse::set_mrf_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mrf_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ReinviteResponse.mrf_ip)
}
inline void ReinviteResponse::set_mrf_ip(const char* value, size_t size) {
  
  mrf_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ReinviteResponse.mrf_ip)
}
inline ::std::string* ReinviteResponse::mutable_mrf_ip() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ReinviteResponse.mrf_ip)
  return mrf_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReinviteResponse::release_mrf_ip() {
  // @@protoc_insertion_point(field_release:outer.switch.ReinviteResponse.mrf_ip)
  
  return mrf_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReinviteResponse::set_allocated_mrf_ip(::std::string* mrf_ip) {
  if (mrf_ip != NULL) {
    
  } else {
    
  }
  mrf_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mrf_ip);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ReinviteResponse.mrf_ip)
}

// uint32 mrf_audio_port = 4;
inline void ReinviteResponse::clear_mrf_audio_port() {
  mrf_audio_port_ = 0u;
}
inline ::google::protobuf::uint32 ReinviteResponse::mrf_audio_port() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteResponse.mrf_audio_port)
  return mrf_audio_port_;
}
inline void ReinviteResponse::set_mrf_audio_port(::google::protobuf::uint32 value) {
  
  mrf_audio_port_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteResponse.mrf_audio_port)
}

// uint32 mrf_video_port = 5;
inline void ReinviteResponse::clear_mrf_video_port() {
  mrf_video_port_ = 0u;
}
inline ::google::protobuf::uint32 ReinviteResponse::mrf_video_port() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteResponse.mrf_video_port)
  return mrf_video_port_;
}
inline void ReinviteResponse::set_mrf_video_port(::google::protobuf::uint32 value) {
  
  mrf_video_port_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteResponse.mrf_video_port)
}

// -------------------------------------------------------------------

// ReinviteMessage

// string callid = 1;
inline void ReinviteMessage::clear_callid() {
  callid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReinviteMessage::callid() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteMessage.callid)
  return callid_.GetNoArena();
}
inline void ReinviteMessage::set_callid(const ::std::string& value) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteMessage.callid)
}
#if LANG_CXX11
inline void ReinviteMessage::set_callid(::std::string&& value) {
  
  callid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ReinviteMessage.callid)
}
#endif
inline void ReinviteMessage::set_callid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ReinviteMessage.callid)
}
inline void ReinviteMessage::set_callid(const char* value, size_t size) {
  
  callid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ReinviteMessage.callid)
}
inline ::std::string* ReinviteMessage::mutable_callid() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ReinviteMessage.callid)
  return callid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReinviteMessage::release_callid() {
  // @@protoc_insertion_point(field_release:outer.switch.ReinviteMessage.callid)
  
  return callid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReinviteMessage::set_allocated_callid(::std::string* callid) {
  if (callid != NULL) {
    
  } else {
    
  }
  callid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callid);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ReinviteMessage.callid)
}

// .outer.switch.ECallMediaType call_media_type = 2;
inline void ReinviteMessage::clear_call_media_type() {
  call_media_type_ = 0;
}
inline ::outer::switch::ECallMediaType ReinviteMessage::call_media_type() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteMessage.call_media_type)
  return static_cast< ::outer::switch::ECallMediaType >(call_media_type_);
}
inline void ReinviteMessage::set_call_media_type(::outer::switch::ECallMediaType value) {
  
  call_media_type_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteMessage.call_media_type)
}

// string appkey = 3;
inline void ReinviteMessage::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReinviteMessage::appkey() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteMessage.appkey)
  return appkey_.GetNoArena();
}
inline void ReinviteMessage::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteMessage.appkey)
}
#if LANG_CXX11
inline void ReinviteMessage::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ReinviteMessage.appkey)
}
#endif
inline void ReinviteMessage::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ReinviteMessage.appkey)
}
inline void ReinviteMessage::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ReinviteMessage.appkey)
}
inline ::std::string* ReinviteMessage::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ReinviteMessage.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReinviteMessage::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.switch.ReinviteMessage.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReinviteMessage::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ReinviteMessage.appkey)
}

// string from_username = 4;
inline void ReinviteMessage::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReinviteMessage::from_username() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteMessage.from_username)
  return from_username_.GetNoArena();
}
inline void ReinviteMessage::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteMessage.from_username)
}
#if LANG_CXX11
inline void ReinviteMessage::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ReinviteMessage.from_username)
}
#endif
inline void ReinviteMessage::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ReinviteMessage.from_username)
}
inline void ReinviteMessage::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ReinviteMessage.from_username)
}
inline ::std::string* ReinviteMessage::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ReinviteMessage.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReinviteMessage::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.switch.ReinviteMessage.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReinviteMessage::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ReinviteMessage.from_username)
}

// string to_username = 5;
inline void ReinviteMessage::clear_to_username() {
  to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReinviteMessage::to_username() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteMessage.to_username)
  return to_username_.GetNoArena();
}
inline void ReinviteMessage::set_to_username(const ::std::string& value) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteMessage.to_username)
}
#if LANG_CXX11
inline void ReinviteMessage::set_to_username(::std::string&& value) {
  
  to_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ReinviteMessage.to_username)
}
#endif
inline void ReinviteMessage::set_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ReinviteMessage.to_username)
}
inline void ReinviteMessage::set_to_username(const char* value, size_t size) {
  
  to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ReinviteMessage.to_username)
}
inline ::std::string* ReinviteMessage::mutable_to_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ReinviteMessage.to_username)
  return to_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReinviteMessage::release_to_username() {
  // @@protoc_insertion_point(field_release:outer.switch.ReinviteMessage.to_username)
  
  return to_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReinviteMessage::set_allocated_to_username(::std::string* to_username) {
  if (to_username != NULL) {
    
  } else {
    
  }
  to_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_username);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ReinviteMessage.to_username)
}

// string remote_audio_codec_list = 6;
inline void ReinviteMessage::clear_remote_audio_codec_list() {
  remote_audio_codec_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReinviteMessage::remote_audio_codec_list() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteMessage.remote_audio_codec_list)
  return remote_audio_codec_list_.GetNoArena();
}
inline void ReinviteMessage::set_remote_audio_codec_list(const ::std::string& value) {
  
  remote_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteMessage.remote_audio_codec_list)
}
#if LANG_CXX11
inline void ReinviteMessage::set_remote_audio_codec_list(::std::string&& value) {
  
  remote_audio_codec_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ReinviteMessage.remote_audio_codec_list)
}
#endif
inline void ReinviteMessage::set_remote_audio_codec_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ReinviteMessage.remote_audio_codec_list)
}
inline void ReinviteMessage::set_remote_audio_codec_list(const char* value, size_t size) {
  
  remote_audio_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ReinviteMessage.remote_audio_codec_list)
}
inline ::std::string* ReinviteMessage::mutable_remote_audio_codec_list() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ReinviteMessage.remote_audio_codec_list)
  return remote_audio_codec_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReinviteMessage::release_remote_audio_codec_list() {
  // @@protoc_insertion_point(field_release:outer.switch.ReinviteMessage.remote_audio_codec_list)
  
  return remote_audio_codec_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReinviteMessage::set_allocated_remote_audio_codec_list(::std::string* remote_audio_codec_list) {
  if (remote_audio_codec_list != NULL) {
    
  } else {
    
  }
  remote_audio_codec_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_audio_codec_list);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ReinviteMessage.remote_audio_codec_list)
}

// string remote_video_codec_list = 7;
inline void ReinviteMessage::clear_remote_video_codec_list() {
  remote_video_codec_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReinviteMessage::remote_video_codec_list() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteMessage.remote_video_codec_list)
  return remote_video_codec_list_.GetNoArena();
}
inline void ReinviteMessage::set_remote_video_codec_list(const ::std::string& value) {
  
  remote_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteMessage.remote_video_codec_list)
}
#if LANG_CXX11
inline void ReinviteMessage::set_remote_video_codec_list(::std::string&& value) {
  
  remote_video_codec_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ReinviteMessage.remote_video_codec_list)
}
#endif
inline void ReinviteMessage::set_remote_video_codec_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  remote_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ReinviteMessage.remote_video_codec_list)
}
inline void ReinviteMessage::set_remote_video_codec_list(const char* value, size_t size) {
  
  remote_video_codec_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ReinviteMessage.remote_video_codec_list)
}
inline ::std::string* ReinviteMessage::mutable_remote_video_codec_list() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ReinviteMessage.remote_video_codec_list)
  return remote_video_codec_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReinviteMessage::release_remote_video_codec_list() {
  // @@protoc_insertion_point(field_release:outer.switch.ReinviteMessage.remote_video_codec_list)
  
  return remote_video_codec_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReinviteMessage::set_allocated_remote_video_codec_list(::std::string* remote_video_codec_list) {
  if (remote_video_codec_list != NULL) {
    
  } else {
    
  }
  remote_video_codec_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remote_video_codec_list);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ReinviteMessage.remote_video_codec_list)
}

// string mrf_ip = 8;
inline void ReinviteMessage::clear_mrf_ip() {
  mrf_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReinviteMessage::mrf_ip() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteMessage.mrf_ip)
  return mrf_ip_.GetNoArena();
}
inline void ReinviteMessage::set_mrf_ip(const ::std::string& value) {
  
  mrf_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteMessage.mrf_ip)
}
#if LANG_CXX11
inline void ReinviteMessage::set_mrf_ip(::std::string&& value) {
  
  mrf_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.ReinviteMessage.mrf_ip)
}
#endif
inline void ReinviteMessage::set_mrf_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mrf_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.ReinviteMessage.mrf_ip)
}
inline void ReinviteMessage::set_mrf_ip(const char* value, size_t size) {
  
  mrf_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.ReinviteMessage.mrf_ip)
}
inline ::std::string* ReinviteMessage::mutable_mrf_ip() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.ReinviteMessage.mrf_ip)
  return mrf_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReinviteMessage::release_mrf_ip() {
  // @@protoc_insertion_point(field_release:outer.switch.ReinviteMessage.mrf_ip)
  
  return mrf_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReinviteMessage::set_allocated_mrf_ip(::std::string* mrf_ip) {
  if (mrf_ip != NULL) {
    
  } else {
    
  }
  mrf_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mrf_ip);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.ReinviteMessage.mrf_ip)
}

// uint32 mrf_audio_port = 9;
inline void ReinviteMessage::clear_mrf_audio_port() {
  mrf_audio_port_ = 0u;
}
inline ::google::protobuf::uint32 ReinviteMessage::mrf_audio_port() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteMessage.mrf_audio_port)
  return mrf_audio_port_;
}
inline void ReinviteMessage::set_mrf_audio_port(::google::protobuf::uint32 value) {
  
  mrf_audio_port_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteMessage.mrf_audio_port)
}

// uint32 mrf_video_port = 10;
inline void ReinviteMessage::clear_mrf_video_port() {
  mrf_video_port_ = 0u;
}
inline ::google::protobuf::uint32 ReinviteMessage::mrf_video_port() const {
  // @@protoc_insertion_point(field_get:outer.switch.ReinviteMessage.mrf_video_port)
  return mrf_video_port_;
}
inline void ReinviteMessage::set_mrf_video_port(::google::protobuf::uint32 value) {
  
  mrf_video_port_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.ReinviteMessage.mrf_video_port)
}

// -------------------------------------------------------------------

// CallMessage

// .common.enumeration.ECallMsgType call_msg_type = 1;
inline void CallMessage::clear_call_msg_type() {
  call_msg_type_ = 0;
}
inline ::common::enumeration::ECallMsgType CallMessage::call_msg_type() const {
  // @@protoc_insertion_point(field_get:outer.switch.CallMessage.call_msg_type)
  return static_cast< ::common::enumeration::ECallMsgType >(call_msg_type_);
}
inline void CallMessage::set_call_msg_type(::common::enumeration::ECallMsgType value) {
  
  call_msg_type_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.CallMessage.call_msg_type)
}

// bytes call_msg = 2;
inline void CallMessage::clear_call_msg() {
  call_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CallMessage::call_msg() const {
  // @@protoc_insertion_point(field_get:outer.switch.CallMessage.call_msg)
  return call_msg_.GetNoArena();
}
inline void CallMessage::set_call_msg(const ::std::string& value) {
  
  call_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.CallMessage.call_msg)
}
#if LANG_CXX11
inline void CallMessage::set_call_msg(::std::string&& value) {
  
  call_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.CallMessage.call_msg)
}
#endif
inline void CallMessage::set_call_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  call_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.CallMessage.call_msg)
}
inline void CallMessage::set_call_msg(const void* value, size_t size) {
  
  call_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.CallMessage.call_msg)
}
inline ::std::string* CallMessage::mutable_call_msg() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.CallMessage.call_msg)
  return call_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallMessage::release_call_msg() {
  // @@protoc_insertion_point(field_release:outer.switch.CallMessage.call_msg)
  
  return call_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallMessage::set_allocated_call_msg(::std::string* call_msg) {
  if (call_msg != NULL) {
    
  } else {
    
  }
  call_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), call_msg);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.CallMessage.call_msg)
}

// -------------------------------------------------------------------

// SyncCallRequest

// string appkey = 1;
inline void SyncCallRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncCallRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.switch.SyncCallRequest.appkey)
  return appkey_.GetNoArena();
}
inline void SyncCallRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.SyncCallRequest.appkey)
}
#if LANG_CXX11
inline void SyncCallRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.SyncCallRequest.appkey)
}
#endif
inline void SyncCallRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.SyncCallRequest.appkey)
}
inline void SyncCallRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.SyncCallRequest.appkey)
}
inline ::std::string* SyncCallRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.SyncCallRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncCallRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.switch.SyncCallRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncCallRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.SyncCallRequest.appkey)
}

// string from_username = 2;
inline void SyncCallRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncCallRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.switch.SyncCallRequest.from_username)
  return from_username_.GetNoArena();
}
inline void SyncCallRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.SyncCallRequest.from_username)
}
#if LANG_CXX11
inline void SyncCallRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.SyncCallRequest.from_username)
}
#endif
inline void SyncCallRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.SyncCallRequest.from_username)
}
inline void SyncCallRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.SyncCallRequest.from_username)
}
inline ::std::string* SyncCallRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.SyncCallRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncCallRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.switch.SyncCallRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncCallRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.SyncCallRequest.from_username)
}

// string call_msg_guid = 3;
inline void SyncCallRequest::clear_call_msg_guid() {
  call_msg_guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncCallRequest::call_msg_guid() const {
  // @@protoc_insertion_point(field_get:outer.switch.SyncCallRequest.call_msg_guid)
  return call_msg_guid_.GetNoArena();
}
inline void SyncCallRequest::set_call_msg_guid(const ::std::string& value) {
  
  call_msg_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.switch.SyncCallRequest.call_msg_guid)
}
#if LANG_CXX11
inline void SyncCallRequest::set_call_msg_guid(::std::string&& value) {
  
  call_msg_guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.switch.SyncCallRequest.call_msg_guid)
}
#endif
inline void SyncCallRequest::set_call_msg_guid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  call_msg_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.switch.SyncCallRequest.call_msg_guid)
}
inline void SyncCallRequest::set_call_msg_guid(const char* value, size_t size) {
  
  call_msg_guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.switch.SyncCallRequest.call_msg_guid)
}
inline ::std::string* SyncCallRequest::mutable_call_msg_guid() {
  
  // @@protoc_insertion_point(field_mutable:outer.switch.SyncCallRequest.call_msg_guid)
  return call_msg_guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncCallRequest::release_call_msg_guid() {
  // @@protoc_insertion_point(field_release:outer.switch.SyncCallRequest.call_msg_guid)
  
  return call_msg_guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncCallRequest::set_allocated_call_msg_guid(::std::string* call_msg_guid) {
  if (call_msg_guid != NULL) {
    
  } else {
    
  }
  call_msg_guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), call_msg_guid);
  // @@protoc_insertion_point(field_set_allocated:outer.switch.SyncCallRequest.call_msg_guid)
}

// -------------------------------------------------------------------

// SyncCallResponse

// .common.errcode.EErrorCode ret = 1;
inline void SyncCallResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode SyncCallResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.switch.SyncCallResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void SyncCallResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.switch.SyncCallResponse.ret)
}

// repeated .outer.switch.CallMessage call_message = 2;
inline int SyncCallResponse::call_message_size() const {
  return call_message_.size();
}
inline void SyncCallResponse::clear_call_message() {
  call_message_.Clear();
}
inline const ::outer::switch::CallMessage& SyncCallResponse::call_message(int index) const {
  // @@protoc_insertion_point(field_get:outer.switch.SyncCallResponse.call_message)
  return call_message_.Get(index);
}
inline ::outer::switch::CallMessage* SyncCallResponse::mutable_call_message(int index) {
  // @@protoc_insertion_point(field_mutable:outer.switch.SyncCallResponse.call_message)
  return call_message_.Mutable(index);
}
inline ::outer::switch::CallMessage* SyncCallResponse::add_call_message() {
  // @@protoc_insertion_point(field_add:outer.switch.SyncCallResponse.call_message)
  return call_message_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::switch::CallMessage >*
SyncCallResponse::mutable_call_message() {
  // @@protoc_insertion_point(field_mutable_list:outer.switch.SyncCallResponse.call_message)
  return &call_message_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::switch::CallMessage >&
SyncCallResponse::call_message() const {
  // @@protoc_insertion_point(field_list:outer.switch.SyncCallResponse.call_message)
  return call_message_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace switch
}  // namespace outer

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::outer::switch::ECallMediaType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::outer::switch::ECallMediaType>() {
  return ::outer::switch::ECallMediaType_descriptor();
}
template <> struct is_proto_enum< ::outer::switch::ECallState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::outer::switch::ECallState>() {
  return ::outer::switch::ECallState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_outer_2fswitch_2eproto__INCLUDED
