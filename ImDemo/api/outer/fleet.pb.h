// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: outer/fleet.proto

#ifndef PROTOBUF_outer_2ffleet_2eproto__INCLUDED
#define PROTOBUF_outer_2ffleet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/msg.pb.h"
#include "common/errcode.pb.h"
#include "common/enumeration.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_outer_2ffleet_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[58];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFleetInfoImpl();
void InitDefaultsFleetInfo();
void InitDefaultsFleetCrewImpl();
void InitDefaultsFleetCrew();
void InitDefaultsInvitationNoticeInfoImpl();
void InitDefaultsInvitationNoticeInfo();
void InitDefaultsFleetSignalImpl();
void InitDefaultsFleetSignal();
void InitDefaultsFleetMessageImpl();
void InitDefaultsFleetMessage();
void InitDefaultsSendFleetMessageRequestImpl();
void InitDefaultsSendFleetMessageRequest();
void InitDefaultsSendFleetMessageResponseImpl();
void InitDefaultsSendFleetMessageResponse();
void InitDefaultsCreateFleetRequestImpl();
void InitDefaultsCreateFleetRequest();
void InitDefaultsCreateFleetResponseImpl();
void InitDefaultsCreateFleetResponse();
void InitDefaultsFleetCreatedSignalImpl();
void InitDefaultsFleetCreatedSignal();
void InitDefaultsInvitingToFleetSignalImpl();
void InitDefaultsInvitingToFleetSignal();
void InitDefaultsAcceptFleetInvitationRequestImpl();
void InitDefaultsAcceptFleetInvitationRequest();
void InitDefaultsAcceptFleetInvitationResponseImpl();
void InitDefaultsAcceptFleetInvitationResponse();
void InitDefaultsAcceptFleetInvitationSignalImpl();
void InitDefaultsAcceptFleetInvitationSignal();
void InitDefaultsInviteeJoinFleetSignalImpl();
void InitDefaultsInviteeJoinFleetSignal();
void InitDefaultsDeclineFleetInvitationRequestImpl();
void InitDefaultsDeclineFleetInvitationRequest();
void InitDefaultsDeclineFleetInvitationResponseImpl();
void InitDefaultsDeclineFleetInvitationResponse();
void InitDefaultsFleetInvitationDeclinedSignalImpl();
void InitDefaultsFleetInvitationDeclinedSignal();
void InitDefaultsAddFleetMemberRequestImpl();
void InitDefaultsAddFleetMemberRequest();
void InitDefaultsAddFleetMemberResponseImpl();
void InitDefaultsAddFleetMemberResponse();
void InitDefaultsJoinFleetSignalImpl();
void InitDefaultsJoinFleetSignal();
void InitDefaultsKickFleetMemberRequestImpl();
void InitDefaultsKickFleetMemberRequest();
void InitDefaultsKickFleetMemberResponseImpl();
void InitDefaultsKickFleetMemberResponse();
void InitDefaultsFleetMemberKickedSignalImpl();
void InitDefaultsFleetMemberKickedSignal();
void InitDefaultsFleetMemberExitRequestImpl();
void InitDefaultsFleetMemberExitRequest();
void InitDefaultsFleetMemberExitResponseImpl();
void InitDefaultsFleetMemberExitResponse();
void InitDefaultsFleetMemberExitedSignalImpl();
void InitDefaultsFleetMemberExitedSignal();
void InitDefaultsDestroyFleetRequestImpl();
void InitDefaultsDestroyFleetRequest();
void InitDefaultsDestroyFleetResponseImpl();
void InitDefaultsDestroyFleetResponse();
void InitDefaultsFleetDestroyedSignalImpl();
void InitDefaultsFleetDestroyedSignal();
void InitDefaultsHandoverCaptainRequestImpl();
void InitDefaultsHandoverCaptainRequest();
void InitDefaultsHandoverCaptainResponseImpl();
void InitDefaultsHandoverCaptainResponse();
void InitDefaultsCaptainChangedSignalImpl();
void InitDefaultsCaptainChangedSignal();
void InitDefaultsFleetMemberChangeNickRequestImpl();
void InitDefaultsFleetMemberChangeNickRequest();
void InitDefaultsFleetMemberChangeNickResponseImpl();
void InitDefaultsFleetMemberChangeNickResponse();
void InitDefaultsFleetMemberNickChangedSignalImpl();
void InitDefaultsFleetMemberNickChangedSignal();
void InitDefaultsChangeLocationAuthorizationRequestImpl();
void InitDefaultsChangeLocationAuthorizationRequest();
void InitDefaultsChangeLocationAuthorizationResponseImpl();
void InitDefaultsChangeLocationAuthorizationResponse();
void InitDefaultsChangeLocationAuthorizationSignalImpl();
void InitDefaultsChangeLocationAuthorizationSignal();
void InitDefaultsGetMyFleetRequestImpl();
void InitDefaultsGetMyFleetRequest();
void InitDefaultsGetMyFleetResponseImpl();
void InitDefaultsGetMyFleetResponse();
void InitDefaultsGetFleetCrewListRequestImpl();
void InitDefaultsGetFleetCrewListRequest();
void InitDefaultsGetFleetCrewListResponseImpl();
void InitDefaultsGetFleetCrewListResponse();
void InitDefaultsSetFleetAssemblyPointRequestImpl();
void InitDefaultsSetFleetAssemblyPointRequest();
void InitDefaultsSetFleetAssemblyPointResponseImpl();
void InitDefaultsSetFleetAssemblyPointResponse();
void InitDefaultsAssemblyPointChangedSignalImpl();
void InitDefaultsAssemblyPointChangedSignal();
void InitDefaultsGetFleetAssemblyPointRequestImpl();
void InitDefaultsGetFleetAssemblyPointRequest();
void InitDefaultsGetFleetAssemblyPointResponseImpl();
void InitDefaultsGetFleetAssemblyPointResponse();
void InitDefaultsGetFleetInfoRequestImpl();
void InitDefaultsGetFleetInfoRequest();
void InitDefaultsGetFleetInfoResponseImpl();
void InitDefaultsGetFleetInfoResponse();
void InitDefaultsGetFleetInvitationListRequestImpl();
void InitDefaultsGetFleetInvitationListRequest();
void InitDefaultsGetFleetInvitationListResponseImpl();
void InitDefaultsGetFleetInvitationListResponse();
void InitDefaultsSetFleetNameRequestImpl();
void InitDefaultsSetFleetNameRequest();
void InitDefaultsSetFleetNameResponseImpl();
void InitDefaultsSetFleetNameResponse();
void InitDefaultsFleetNameChangedSignalImpl();
void InitDefaultsFleetNameChangedSignal();
void InitDefaultsSetFleetDescRequestImpl();
void InitDefaultsSetFleetDescRequest();
void InitDefaultsSetFleetDescResponseImpl();
void InitDefaultsSetFleetDescResponse();
void InitDefaultsFleetDescChangedSignalImpl();
void InitDefaultsFleetDescChangedSignal();
inline void InitDefaults() {
  InitDefaultsFleetInfo();
  InitDefaultsFleetCrew();
  InitDefaultsInvitationNoticeInfo();
  InitDefaultsFleetSignal();
  InitDefaultsFleetMessage();
  InitDefaultsSendFleetMessageRequest();
  InitDefaultsSendFleetMessageResponse();
  InitDefaultsCreateFleetRequest();
  InitDefaultsCreateFleetResponse();
  InitDefaultsFleetCreatedSignal();
  InitDefaultsInvitingToFleetSignal();
  InitDefaultsAcceptFleetInvitationRequest();
  InitDefaultsAcceptFleetInvitationResponse();
  InitDefaultsAcceptFleetInvitationSignal();
  InitDefaultsInviteeJoinFleetSignal();
  InitDefaultsDeclineFleetInvitationRequest();
  InitDefaultsDeclineFleetInvitationResponse();
  InitDefaultsFleetInvitationDeclinedSignal();
  InitDefaultsAddFleetMemberRequest();
  InitDefaultsAddFleetMemberResponse();
  InitDefaultsJoinFleetSignal();
  InitDefaultsKickFleetMemberRequest();
  InitDefaultsKickFleetMemberResponse();
  InitDefaultsFleetMemberKickedSignal();
  InitDefaultsFleetMemberExitRequest();
  InitDefaultsFleetMemberExitResponse();
  InitDefaultsFleetMemberExitedSignal();
  InitDefaultsDestroyFleetRequest();
  InitDefaultsDestroyFleetResponse();
  InitDefaultsFleetDestroyedSignal();
  InitDefaultsHandoverCaptainRequest();
  InitDefaultsHandoverCaptainResponse();
  InitDefaultsCaptainChangedSignal();
  InitDefaultsFleetMemberChangeNickRequest();
  InitDefaultsFleetMemberChangeNickResponse();
  InitDefaultsFleetMemberNickChangedSignal();
  InitDefaultsChangeLocationAuthorizationRequest();
  InitDefaultsChangeLocationAuthorizationResponse();
  InitDefaultsChangeLocationAuthorizationSignal();
  InitDefaultsGetMyFleetRequest();
  InitDefaultsGetMyFleetResponse();
  InitDefaultsGetFleetCrewListRequest();
  InitDefaultsGetFleetCrewListResponse();
  InitDefaultsSetFleetAssemblyPointRequest();
  InitDefaultsSetFleetAssemblyPointResponse();
  InitDefaultsAssemblyPointChangedSignal();
  InitDefaultsGetFleetAssemblyPointRequest();
  InitDefaultsGetFleetAssemblyPointResponse();
  InitDefaultsGetFleetInfoRequest();
  InitDefaultsGetFleetInfoResponse();
  InitDefaultsGetFleetInvitationListRequest();
  InitDefaultsGetFleetInvitationListResponse();
  InitDefaultsSetFleetNameRequest();
  InitDefaultsSetFleetNameResponse();
  InitDefaultsFleetNameChangedSignal();
  InitDefaultsSetFleetDescRequest();
  InitDefaultsSetFleetDescResponse();
  InitDefaultsFleetDescChangedSignal();
}
}  // namespace protobuf_outer_2ffleet_2eproto
namespace outer {
namespace fleet {
class AcceptFleetInvitationRequest;
class AcceptFleetInvitationRequestDefaultTypeInternal;
extern AcceptFleetInvitationRequestDefaultTypeInternal _AcceptFleetInvitationRequest_default_instance_;
class AcceptFleetInvitationResponse;
class AcceptFleetInvitationResponseDefaultTypeInternal;
extern AcceptFleetInvitationResponseDefaultTypeInternal _AcceptFleetInvitationResponse_default_instance_;
class AcceptFleetInvitationSignal;
class AcceptFleetInvitationSignalDefaultTypeInternal;
extern AcceptFleetInvitationSignalDefaultTypeInternal _AcceptFleetInvitationSignal_default_instance_;
class AddFleetMemberRequest;
class AddFleetMemberRequestDefaultTypeInternal;
extern AddFleetMemberRequestDefaultTypeInternal _AddFleetMemberRequest_default_instance_;
class AddFleetMemberResponse;
class AddFleetMemberResponseDefaultTypeInternal;
extern AddFleetMemberResponseDefaultTypeInternal _AddFleetMemberResponse_default_instance_;
class AssemblyPointChangedSignal;
class AssemblyPointChangedSignalDefaultTypeInternal;
extern AssemblyPointChangedSignalDefaultTypeInternal _AssemblyPointChangedSignal_default_instance_;
class CaptainChangedSignal;
class CaptainChangedSignalDefaultTypeInternal;
extern CaptainChangedSignalDefaultTypeInternal _CaptainChangedSignal_default_instance_;
class ChangeLocationAuthorizationRequest;
class ChangeLocationAuthorizationRequestDefaultTypeInternal;
extern ChangeLocationAuthorizationRequestDefaultTypeInternal _ChangeLocationAuthorizationRequest_default_instance_;
class ChangeLocationAuthorizationResponse;
class ChangeLocationAuthorizationResponseDefaultTypeInternal;
extern ChangeLocationAuthorizationResponseDefaultTypeInternal _ChangeLocationAuthorizationResponse_default_instance_;
class ChangeLocationAuthorizationSignal;
class ChangeLocationAuthorizationSignalDefaultTypeInternal;
extern ChangeLocationAuthorizationSignalDefaultTypeInternal _ChangeLocationAuthorizationSignal_default_instance_;
class CreateFleetRequest;
class CreateFleetRequestDefaultTypeInternal;
extern CreateFleetRequestDefaultTypeInternal _CreateFleetRequest_default_instance_;
class CreateFleetResponse;
class CreateFleetResponseDefaultTypeInternal;
extern CreateFleetResponseDefaultTypeInternal _CreateFleetResponse_default_instance_;
class DeclineFleetInvitationRequest;
class DeclineFleetInvitationRequestDefaultTypeInternal;
extern DeclineFleetInvitationRequestDefaultTypeInternal _DeclineFleetInvitationRequest_default_instance_;
class DeclineFleetInvitationResponse;
class DeclineFleetInvitationResponseDefaultTypeInternal;
extern DeclineFleetInvitationResponseDefaultTypeInternal _DeclineFleetInvitationResponse_default_instance_;
class DestroyFleetRequest;
class DestroyFleetRequestDefaultTypeInternal;
extern DestroyFleetRequestDefaultTypeInternal _DestroyFleetRequest_default_instance_;
class DestroyFleetResponse;
class DestroyFleetResponseDefaultTypeInternal;
extern DestroyFleetResponseDefaultTypeInternal _DestroyFleetResponse_default_instance_;
class FleetCreatedSignal;
class FleetCreatedSignalDefaultTypeInternal;
extern FleetCreatedSignalDefaultTypeInternal _FleetCreatedSignal_default_instance_;
class FleetCrew;
class FleetCrewDefaultTypeInternal;
extern FleetCrewDefaultTypeInternal _FleetCrew_default_instance_;
class FleetDescChangedSignal;
class FleetDescChangedSignalDefaultTypeInternal;
extern FleetDescChangedSignalDefaultTypeInternal _FleetDescChangedSignal_default_instance_;
class FleetDestroyedSignal;
class FleetDestroyedSignalDefaultTypeInternal;
extern FleetDestroyedSignalDefaultTypeInternal _FleetDestroyedSignal_default_instance_;
class FleetInfo;
class FleetInfoDefaultTypeInternal;
extern FleetInfoDefaultTypeInternal _FleetInfo_default_instance_;
class FleetInvitationDeclinedSignal;
class FleetInvitationDeclinedSignalDefaultTypeInternal;
extern FleetInvitationDeclinedSignalDefaultTypeInternal _FleetInvitationDeclinedSignal_default_instance_;
class FleetMemberChangeNickRequest;
class FleetMemberChangeNickRequestDefaultTypeInternal;
extern FleetMemberChangeNickRequestDefaultTypeInternal _FleetMemberChangeNickRequest_default_instance_;
class FleetMemberChangeNickResponse;
class FleetMemberChangeNickResponseDefaultTypeInternal;
extern FleetMemberChangeNickResponseDefaultTypeInternal _FleetMemberChangeNickResponse_default_instance_;
class FleetMemberExitRequest;
class FleetMemberExitRequestDefaultTypeInternal;
extern FleetMemberExitRequestDefaultTypeInternal _FleetMemberExitRequest_default_instance_;
class FleetMemberExitResponse;
class FleetMemberExitResponseDefaultTypeInternal;
extern FleetMemberExitResponseDefaultTypeInternal _FleetMemberExitResponse_default_instance_;
class FleetMemberExitedSignal;
class FleetMemberExitedSignalDefaultTypeInternal;
extern FleetMemberExitedSignalDefaultTypeInternal _FleetMemberExitedSignal_default_instance_;
class FleetMemberKickedSignal;
class FleetMemberKickedSignalDefaultTypeInternal;
extern FleetMemberKickedSignalDefaultTypeInternal _FleetMemberKickedSignal_default_instance_;
class FleetMemberNickChangedSignal;
class FleetMemberNickChangedSignalDefaultTypeInternal;
extern FleetMemberNickChangedSignalDefaultTypeInternal _FleetMemberNickChangedSignal_default_instance_;
class FleetMessage;
class FleetMessageDefaultTypeInternal;
extern FleetMessageDefaultTypeInternal _FleetMessage_default_instance_;
class FleetNameChangedSignal;
class FleetNameChangedSignalDefaultTypeInternal;
extern FleetNameChangedSignalDefaultTypeInternal _FleetNameChangedSignal_default_instance_;
class FleetSignal;
class FleetSignalDefaultTypeInternal;
extern FleetSignalDefaultTypeInternal _FleetSignal_default_instance_;
class GetFleetAssemblyPointRequest;
class GetFleetAssemblyPointRequestDefaultTypeInternal;
extern GetFleetAssemblyPointRequestDefaultTypeInternal _GetFleetAssemblyPointRequest_default_instance_;
class GetFleetAssemblyPointResponse;
class GetFleetAssemblyPointResponseDefaultTypeInternal;
extern GetFleetAssemblyPointResponseDefaultTypeInternal _GetFleetAssemblyPointResponse_default_instance_;
class GetFleetCrewListRequest;
class GetFleetCrewListRequestDefaultTypeInternal;
extern GetFleetCrewListRequestDefaultTypeInternal _GetFleetCrewListRequest_default_instance_;
class GetFleetCrewListResponse;
class GetFleetCrewListResponseDefaultTypeInternal;
extern GetFleetCrewListResponseDefaultTypeInternal _GetFleetCrewListResponse_default_instance_;
class GetFleetInfoRequest;
class GetFleetInfoRequestDefaultTypeInternal;
extern GetFleetInfoRequestDefaultTypeInternal _GetFleetInfoRequest_default_instance_;
class GetFleetInfoResponse;
class GetFleetInfoResponseDefaultTypeInternal;
extern GetFleetInfoResponseDefaultTypeInternal _GetFleetInfoResponse_default_instance_;
class GetFleetInvitationListRequest;
class GetFleetInvitationListRequestDefaultTypeInternal;
extern GetFleetInvitationListRequestDefaultTypeInternal _GetFleetInvitationListRequest_default_instance_;
class GetFleetInvitationListResponse;
class GetFleetInvitationListResponseDefaultTypeInternal;
extern GetFleetInvitationListResponseDefaultTypeInternal _GetFleetInvitationListResponse_default_instance_;
class GetMyFleetRequest;
class GetMyFleetRequestDefaultTypeInternal;
extern GetMyFleetRequestDefaultTypeInternal _GetMyFleetRequest_default_instance_;
class GetMyFleetResponse;
class GetMyFleetResponseDefaultTypeInternal;
extern GetMyFleetResponseDefaultTypeInternal _GetMyFleetResponse_default_instance_;
class HandoverCaptainRequest;
class HandoverCaptainRequestDefaultTypeInternal;
extern HandoverCaptainRequestDefaultTypeInternal _HandoverCaptainRequest_default_instance_;
class HandoverCaptainResponse;
class HandoverCaptainResponseDefaultTypeInternal;
extern HandoverCaptainResponseDefaultTypeInternal _HandoverCaptainResponse_default_instance_;
class InvitationNoticeInfo;
class InvitationNoticeInfoDefaultTypeInternal;
extern InvitationNoticeInfoDefaultTypeInternal _InvitationNoticeInfo_default_instance_;
class InviteeJoinFleetSignal;
class InviteeJoinFleetSignalDefaultTypeInternal;
extern InviteeJoinFleetSignalDefaultTypeInternal _InviteeJoinFleetSignal_default_instance_;
class InvitingToFleetSignal;
class InvitingToFleetSignalDefaultTypeInternal;
extern InvitingToFleetSignalDefaultTypeInternal _InvitingToFleetSignal_default_instance_;
class JoinFleetSignal;
class JoinFleetSignalDefaultTypeInternal;
extern JoinFleetSignalDefaultTypeInternal _JoinFleetSignal_default_instance_;
class KickFleetMemberRequest;
class KickFleetMemberRequestDefaultTypeInternal;
extern KickFleetMemberRequestDefaultTypeInternal _KickFleetMemberRequest_default_instance_;
class KickFleetMemberResponse;
class KickFleetMemberResponseDefaultTypeInternal;
extern KickFleetMemberResponseDefaultTypeInternal _KickFleetMemberResponse_default_instance_;
class SendFleetMessageRequest;
class SendFleetMessageRequestDefaultTypeInternal;
extern SendFleetMessageRequestDefaultTypeInternal _SendFleetMessageRequest_default_instance_;
class SendFleetMessageResponse;
class SendFleetMessageResponseDefaultTypeInternal;
extern SendFleetMessageResponseDefaultTypeInternal _SendFleetMessageResponse_default_instance_;
class SetFleetAssemblyPointRequest;
class SetFleetAssemblyPointRequestDefaultTypeInternal;
extern SetFleetAssemblyPointRequestDefaultTypeInternal _SetFleetAssemblyPointRequest_default_instance_;
class SetFleetAssemblyPointResponse;
class SetFleetAssemblyPointResponseDefaultTypeInternal;
extern SetFleetAssemblyPointResponseDefaultTypeInternal _SetFleetAssemblyPointResponse_default_instance_;
class SetFleetDescRequest;
class SetFleetDescRequestDefaultTypeInternal;
extern SetFleetDescRequestDefaultTypeInternal _SetFleetDescRequest_default_instance_;
class SetFleetDescResponse;
class SetFleetDescResponseDefaultTypeInternal;
extern SetFleetDescResponseDefaultTypeInternal _SetFleetDescResponse_default_instance_;
class SetFleetNameRequest;
class SetFleetNameRequestDefaultTypeInternal;
extern SetFleetNameRequestDefaultTypeInternal _SetFleetNameRequest_default_instance_;
class SetFleetNameResponse;
class SetFleetNameResponseDefaultTypeInternal;
extern SetFleetNameResponseDefaultTypeInternal _SetFleetNameResponse_default_instance_;
}  // namespace fleet
}  // namespace outer
namespace outer {
namespace fleet {

enum FleetSignalType {
  UNKNOWNFLEETSIGNALTYPE = 0,
  INVITING_SIGNAL = 1,
  INVITATION_ACCEPTED_SIGNAL = 2,
  INVITEE_JOIN_FLEET_SIGNAL = 3,
  INVITATION_DECLINED_SIGNAL = 4,
  BE_KICKED_SIGNAL = 5,
  EXITED_SIGNAL = 6,
  FLEET_DESTROYED_SIGNAL = 7,
  OWNER_CHANGED_SIGNAL = 8,
  NICK_CHANGED_SIGNAL = 9,
  AGGREGATION_POINT_CHANGE = 10,
  INVITING_SIGNAL_INVALID = 11,
  FLEET_CREATED_SIGNAL = 12,
  SHARE_LOCATION_CHANGE = 13,
  LOCATION_AUTHORIZATION_CHANGE = 14,
  JOIN_FLEET_SIGNAL = 15,
  FLEET_NAME_CHANGED_SIGNAL = 16,
  FLEET_DESC_CHANGED_SIGNAL = 17,
  FleetSignalType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FleetSignalType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FleetSignalType_IsValid(int value);
const FleetSignalType FleetSignalType_MIN = UNKNOWNFLEETSIGNALTYPE;
const FleetSignalType FleetSignalType_MAX = FLEET_DESC_CHANGED_SIGNAL;
const int FleetSignalType_ARRAYSIZE = FleetSignalType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FleetSignalType_descriptor();
inline const ::std::string& FleetSignalType_Name(FleetSignalType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FleetSignalType_descriptor(), value);
}
inline bool FleetSignalType_Parse(
    const ::std::string& name, FleetSignalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FleetSignalType>(
    FleetSignalType_descriptor(), name, value);
}
// ===================================================================

class FleetInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.FleetInfo) */ {
 public:
  FleetInfo();
  virtual ~FleetInfo();

  FleetInfo(const FleetInfo& from);

  inline FleetInfo& operator=(const FleetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleetInfo(FleetInfo&& from) noexcept
    : FleetInfo() {
    *this = ::std::move(from);
  }

  inline FleetInfo& operator=(FleetInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FleetInfo* internal_default_instance() {
    return reinterpret_cast<const FleetInfo*>(
               &_FleetInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FleetInfo* other);
  friend void swap(FleetInfo& a, FleetInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleetInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FleetInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleetInfo& from);
  void MergeFrom(const FleetInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleetInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fleet_uri = 1;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 1;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string fleet_name = 3;
  void clear_fleet_name();
  static const int kFleetNameFieldNumber = 3;
  const ::std::string& fleet_name() const;
  void set_fleet_name(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_name(::std::string&& value);
  #endif
  void set_fleet_name(const char* value);
  void set_fleet_name(const char* value, size_t size);
  ::std::string* mutable_fleet_name();
  ::std::string* release_fleet_name();
  void set_allocated_fleet_name(::std::string* fleet_name);

  // string desc = 6;
  void clear_desc();
  static const int kDescFieldNumber = 6;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // .common.msg.LocationMessage assembly_point = 7;
  bool has_assembly_point() const;
  void clear_assembly_point();
  static const int kAssemblyPointFieldNumber = 7;
  const ::common::msg::LocationMessage& assembly_point() const;
  ::common::msg::LocationMessage* release_assembly_point();
  ::common::msg::LocationMessage* mutable_assembly_point();
  void set_allocated_assembly_point(::common::msg::LocationMessage* assembly_point);

  // uint64 created = 5;
  void clear_created();
  static const int kCreatedFieldNumber = 5;
  ::google::protobuf::uint64 created() const;
  void set_created(::google::protobuf::uint64 value);

  // uint32 crew_count = 4;
  void clear_crew_count();
  static const int kCrewCountFieldNumber = 4;
  ::google::protobuf::uint32 crew_count() const;
  void set_crew_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.fleet.FleetInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr fleet_name_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::common::msg::LocationMessage* assembly_point_;
  ::google::protobuf::uint64 created_;
  ::google::protobuf::uint32 crew_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsFleetInfoImpl();
};
// -------------------------------------------------------------------

class FleetCrew : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.FleetCrew) */ {
 public:
  FleetCrew();
  virtual ~FleetCrew();

  FleetCrew(const FleetCrew& from);

  inline FleetCrew& operator=(const FleetCrew& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleetCrew(FleetCrew&& from) noexcept
    : FleetCrew() {
    *this = ::std::move(from);
  }

  inline FleetCrew& operator=(FleetCrew&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleetCrew& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FleetCrew* internal_default_instance() {
    return reinterpret_cast<const FleetCrew*>(
               &_FleetCrew_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FleetCrew* other);
  friend void swap(FleetCrew& a, FleetCrew& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleetCrew* New() const PROTOBUF_FINAL { return New(NULL); }

  FleetCrew* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleetCrew& from);
  void MergeFrom(const FleetCrew& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleetCrew* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string nick = 3;
  void clear_nick();
  static const int kNickFieldNumber = 3;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // string fleet_uri = 9;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 9;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // uint64 created = 5;
  void clear_created();
  static const int kCreatedFieldNumber = 5;
  ::google::protobuf::uint64 created() const;
  void set_created(::google::protobuf::uint64 value);

  // .common.enumeration.EEnable enable = 6;
  void clear_enable();
  static const int kEnableFieldNumber = 6;
  ::common::enumeration::EEnable enable() const;
  void set_enable(::common::enumeration::EEnable value);

  // bool is_captain = 4;
  void clear_is_captain();
  static const int kIsCaptainFieldNumber = 4;
  bool is_captain() const;
  void set_is_captain(bool value);

  // bool is_authorization = 8;
  void clear_is_authorization();
  static const int kIsAuthorizationFieldNumber = 8;
  bool is_authorization() const;
  void set_is_authorization(bool value);

  // uint64 modified = 7;
  void clear_modified();
  static const int kModifiedFieldNumber = 7;
  ::google::protobuf::uint64 modified() const;
  void set_modified(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.fleet.FleetCrew)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::uint64 created_;
  int enable_;
  bool is_captain_;
  bool is_authorization_;
  ::google::protobuf::uint64 modified_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsFleetCrewImpl();
};
// -------------------------------------------------------------------

class InvitationNoticeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.InvitationNoticeInfo) */ {
 public:
  InvitationNoticeInfo();
  virtual ~InvitationNoticeInfo();

  InvitationNoticeInfo(const InvitationNoticeInfo& from);

  inline InvitationNoticeInfo& operator=(const InvitationNoticeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InvitationNoticeInfo(InvitationNoticeInfo&& from) noexcept
    : InvitationNoticeInfo() {
    *this = ::std::move(from);
  }

  inline InvitationNoticeInfo& operator=(InvitationNoticeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InvitationNoticeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvitationNoticeInfo* internal_default_instance() {
    return reinterpret_cast<const InvitationNoticeInfo*>(
               &_InvitationNoticeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(InvitationNoticeInfo* other);
  friend void swap(InvitationNoticeInfo& a, InvitationNoticeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InvitationNoticeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InvitationNoticeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InvitationNoticeInfo& from);
  void MergeFrom(const InvitationNoticeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InvitationNoticeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fleet_uri = 1;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 1;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string invitee_username = 3;
  void clear_invitee_username();
  static const int kInviteeUsernameFieldNumber = 3;
  const ::std::string& invitee_username() const;
  void set_invitee_username(const ::std::string& value);
  #if LANG_CXX11
  void set_invitee_username(::std::string&& value);
  #endif
  void set_invitee_username(const char* value);
  void set_invitee_username(const char* value, size_t size);
  ::std::string* mutable_invitee_username();
  ::std::string* release_invitee_username();
  void set_allocated_invitee_username(::std::string* invitee_username);

  // string invitee_nick = 4;
  void clear_invitee_nick();
  static const int kInviteeNickFieldNumber = 4;
  const ::std::string& invitee_nick() const;
  void set_invitee_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_invitee_nick(::std::string&& value);
  #endif
  void set_invitee_nick(const char* value);
  void set_invitee_nick(const char* value, size_t size);
  ::std::string* mutable_invitee_nick();
  ::std::string* release_invitee_nick();
  void set_allocated_invitee_nick(::std::string* invitee_nick);

  // string inviter_username = 5;
  void clear_inviter_username();
  static const int kInviterUsernameFieldNumber = 5;
  const ::std::string& inviter_username() const;
  void set_inviter_username(const ::std::string& value);
  #if LANG_CXX11
  void set_inviter_username(::std::string&& value);
  #endif
  void set_inviter_username(const char* value);
  void set_inviter_username(const char* value, size_t size);
  ::std::string* mutable_inviter_username();
  ::std::string* release_inviter_username();
  void set_allocated_inviter_username(::std::string* inviter_username);

  // string inviter_nick = 6;
  void clear_inviter_nick();
  static const int kInviterNickFieldNumber = 6;
  const ::std::string& inviter_nick() const;
  void set_inviter_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_inviter_nick(::std::string&& value);
  #endif
  void set_inviter_nick(const char* value);
  void set_inviter_nick(const char* value, size_t size);
  ::std::string* mutable_inviter_nick();
  ::std::string* release_inviter_nick();
  void set_allocated_inviter_nick(::std::string* inviter_nick);

  // string fleet_name = 10;
  void clear_fleet_name();
  static const int kFleetNameFieldNumber = 10;
  const ::std::string& fleet_name() const;
  void set_fleet_name(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_name(::std::string&& value);
  #endif
  void set_fleet_name(const char* value);
  void set_fleet_name(const char* value, size_t size);
  ::std::string* mutable_fleet_name();
  ::std::string* release_fleet_name();
  void set_allocated_fleet_name(::std::string* fleet_name);

  // string invite_reason = 12;
  void clear_invite_reason();
  static const int kInviteReasonFieldNumber = 12;
  const ::std::string& invite_reason() const;
  void set_invite_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_invite_reason(::std::string&& value);
  #endif
  void set_invite_reason(const char* value);
  void set_invite_reason(const char* value, size_t size);
  ::std::string* mutable_invite_reason();
  ::std::string* release_invite_reason();
  void set_allocated_invite_reason(::std::string* invite_reason);

  // uint64 created = 8;
  void clear_created();
  static const int kCreatedFieldNumber = 8;
  ::google::protobuf::uint64 created() const;
  void set_created(::google::protobuf::uint64 value);

  // uint64 modified = 9;
  void clear_modified();
  static const int kModifiedFieldNumber = 9;
  ::google::protobuf::uint64 modified() const;
  void set_modified(::google::protobuf::uint64 value);

  // .common.enumeration.EInvitationNoticeStatus status = 7;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  ::common::enumeration::EInvitationNoticeStatus status() const;
  void set_status(::common::enumeration::EInvitationNoticeStatus value);

  // .common.enumeration.EEnable enable = 11;
  void clear_enable();
  static const int kEnableFieldNumber = 11;
  ::common::enumeration::EEnable enable() const;
  void set_enable(::common::enumeration::EEnable value);

  // @@protoc_insertion_point(class_scope:outer.fleet.InvitationNoticeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr invitee_username_;
  ::google::protobuf::internal::ArenaStringPtr invitee_nick_;
  ::google::protobuf::internal::ArenaStringPtr inviter_username_;
  ::google::protobuf::internal::ArenaStringPtr inviter_nick_;
  ::google::protobuf::internal::ArenaStringPtr fleet_name_;
  ::google::protobuf::internal::ArenaStringPtr invite_reason_;
  ::google::protobuf::uint64 created_;
  ::google::protobuf::uint64 modified_;
  int status_;
  int enable_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsInvitationNoticeInfoImpl();
};
// -------------------------------------------------------------------

class FleetSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.FleetSignal) */ {
 public:
  FleetSignal();
  virtual ~FleetSignal();

  FleetSignal(const FleetSignal& from);

  inline FleetSignal& operator=(const FleetSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleetSignal(FleetSignal&& from) noexcept
    : FleetSignal() {
    *this = ::std::move(from);
  }

  inline FleetSignal& operator=(FleetSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleetSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FleetSignal* internal_default_instance() {
    return reinterpret_cast<const FleetSignal*>(
               &_FleetSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FleetSignal* other);
  friend void swap(FleetSignal& a, FleetSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleetSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  FleetSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleetSignal& from);
  void MergeFrom(const FleetSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleetSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string receiver = 5;
  int receiver_size() const;
  void clear_receiver();
  static const int kReceiverFieldNumber = 5;
  const ::std::string& receiver(int index) const;
  ::std::string* mutable_receiver(int index);
  void set_receiver(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_receiver(int index, ::std::string&& value);
  #endif
  void set_receiver(int index, const char* value);
  void set_receiver(int index, const char* value, size_t size);
  ::std::string* add_receiver();
  void add_receiver(const ::std::string& value);
  #if LANG_CXX11
  void add_receiver(::std::string&& value);
  #endif
  void add_receiver(const char* value);
  void add_receiver(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& receiver() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_receiver();

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .outer.fleet.FleetInfo Fleet_info = 3;
  bool has_fleet_info() const;
  void clear_fleet_info();
  static const int kFleetInfoFieldNumber = 3;
  const ::outer::fleet::FleetInfo& fleet_info() const;
  ::outer::fleet::FleetInfo* release_fleet_info();
  ::outer::fleet::FleetInfo* mutable_fleet_info();
  void set_allocated_fleet_info(::outer::fleet::FleetInfo* fleet_info);

  // uint64 guid = 4;
  void clear_guid();
  static const int kGuidFieldNumber = 4;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // .outer.fleet.FleetSignalType signal_type = 1;
  void clear_signal_type();
  static const int kSignalTypeFieldNumber = 1;
  ::outer::fleet::FleetSignalType signal_type() const;
  void set_signal_type(::outer::fleet::FleetSignalType value);

  // @@protoc_insertion_point(class_scope:outer.fleet.FleetSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> receiver_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::outer::fleet::FleetInfo* fleet_info_;
  ::google::protobuf::uint64 guid_;
  int signal_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsFleetSignalImpl();
};
// -------------------------------------------------------------------

class FleetMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.FleetMessage) */ {
 public:
  FleetMessage();
  virtual ~FleetMessage();

  FleetMessage(const FleetMessage& from);

  inline FleetMessage& operator=(const FleetMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleetMessage(FleetMessage&& from) noexcept
    : FleetMessage() {
    *this = ::std::move(from);
  }

  inline FleetMessage& operator=(FleetMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleetMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FleetMessage* internal_default_instance() {
    return reinterpret_cast<const FleetMessage*>(
               &_FleetMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FleetMessage* other);
  friend void swap(FleetMessage& a, FleetMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleetMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  FleetMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleetMessage& from);
  void MergeFrom(const FleetMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleetMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string from_nick = 2;
  void clear_from_nick();
  static const int kFromNickFieldNumber = 2;
  const ::std::string& from_nick() const;
  void set_from_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_from_nick(::std::string&& value);
  #endif
  void set_from_nick(const char* value);
  void set_from_nick(const char* value, size_t size);
  ::std::string* mutable_from_nick();
  ::std::string* release_from_nick();
  void set_allocated_from_nick(::std::string* from_nick);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string fleet_uri = 4;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 4;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // bytes data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string msg_id = 8;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 8;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // string fleet_name = 9;
  void clear_fleet_name();
  static const int kFleetNameFieldNumber = 9;
  const ::std::string& fleet_name() const;
  void set_fleet_name(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_name(::std::string&& value);
  #endif
  void set_fleet_name(const char* value);
  void set_fleet_name(const char* value, size_t size);
  ::std::string* mutable_fleet_name();
  ::std::string* release_fleet_name();
  void set_allocated_fleet_name(::std::string* fleet_name);

  // uint64 guid = 7;
  void clear_guid();
  static const int kGuidFieldNumber = 7;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // .common.msg.EMsgContentType msg_content_type = 5;
  void clear_msg_content_type();
  static const int kMsgContentTypeFieldNumber = 5;
  ::common::msg::EMsgContentType msg_content_type() const;
  void set_msg_content_type(::common::msg::EMsgContentType value);

  // bool is_read = 10;
  void clear_is_read();
  static const int kIsReadFieldNumber = 10;
  bool is_read() const;
  void set_is_read(bool value);

  // @@protoc_insertion_point(class_scope:outer.fleet.FleetMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr from_nick_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::internal::ArenaStringPtr fleet_name_;
  ::google::protobuf::uint64 guid_;
  int msg_content_type_;
  bool is_read_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsFleetMessageImpl();
};
// -------------------------------------------------------------------

class SendFleetMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.SendFleetMessageRequest) */ {
 public:
  SendFleetMessageRequest();
  virtual ~SendFleetMessageRequest();

  SendFleetMessageRequest(const SendFleetMessageRequest& from);

  inline SendFleetMessageRequest& operator=(const SendFleetMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendFleetMessageRequest(SendFleetMessageRequest&& from) noexcept
    : SendFleetMessageRequest() {
    *this = ::std::move(from);
  }

  inline SendFleetMessageRequest& operator=(SendFleetMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendFleetMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendFleetMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SendFleetMessageRequest*>(
               &_SendFleetMessageRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SendFleetMessageRequest* other);
  friend void swap(SendFleetMessageRequest& a, SendFleetMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendFleetMessageRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SendFleetMessageRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendFleetMessageRequest& from);
  void MergeFrom(const SendFleetMessageRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendFleetMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from_username = 1;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 1;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string fleet_uri = 3;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 3;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // bytes data = 5;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string msg_id = 6;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 6;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.msg.EMsgContentType msg_content_type = 4;
  void clear_msg_content_type();
  static const int kMsgContentTypeFieldNumber = 4;
  ::common::msg::EMsgContentType msg_content_type() const;
  void set_msg_content_type(::common::msg::EMsgContentType value);

  // @@protoc_insertion_point(class_scope:outer.fleet.SendFleetMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int msg_content_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsSendFleetMessageRequestImpl();
};
// -------------------------------------------------------------------

class SendFleetMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.SendFleetMessageResponse) */ {
 public:
  SendFleetMessageResponse();
  virtual ~SendFleetMessageResponse();

  SendFleetMessageResponse(const SendFleetMessageResponse& from);

  inline SendFleetMessageResponse& operator=(const SendFleetMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendFleetMessageResponse(SendFleetMessageResponse&& from) noexcept
    : SendFleetMessageResponse() {
    *this = ::std::move(from);
  }

  inline SendFleetMessageResponse& operator=(SendFleetMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendFleetMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendFleetMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SendFleetMessageResponse*>(
               &_SendFleetMessageResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SendFleetMessageResponse* other);
  friend void swap(SendFleetMessageResponse& a, SendFleetMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendFleetMessageResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SendFleetMessageResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendFleetMessageResponse& from);
  void MergeFrom(const SendFleetMessageResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendFleetMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // uint64 guid = 2;
  void clear_guid();
  static const int kGuidFieldNumber = 2;
  ::google::protobuf::uint64 guid() const;
  void set_guid(::google::protobuf::uint64 value);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.SendFleetMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::uint64 guid_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsSendFleetMessageResponseImpl();
};
// -------------------------------------------------------------------

class CreateFleetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.CreateFleetRequest) */ {
 public:
  CreateFleetRequest();
  virtual ~CreateFleetRequest();

  CreateFleetRequest(const CreateFleetRequest& from);

  inline CreateFleetRequest& operator=(const CreateFleetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateFleetRequest(CreateFleetRequest&& from) noexcept
    : CreateFleetRequest() {
    *this = ::std::move(from);
  }

  inline CreateFleetRequest& operator=(CreateFleetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateFleetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateFleetRequest* internal_default_instance() {
    return reinterpret_cast<const CreateFleetRequest*>(
               &_CreateFleetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CreateFleetRequest* other);
  friend void swap(CreateFleetRequest& a, CreateFleetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateFleetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateFleetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateFleetRequest& from);
  void MergeFrom(const CreateFleetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateFleetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string invitee_username = 4;
  int invitee_username_size() const;
  void clear_invitee_username();
  static const int kInviteeUsernameFieldNumber = 4;
  const ::std::string& invitee_username(int index) const;
  ::std::string* mutable_invitee_username(int index);
  void set_invitee_username(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_invitee_username(int index, ::std::string&& value);
  #endif
  void set_invitee_username(int index, const char* value);
  void set_invitee_username(int index, const char* value, size_t size);
  ::std::string* add_invitee_username();
  void add_invitee_username(const ::std::string& value);
  #if LANG_CXX11
  void add_invitee_username(::std::string&& value);
  #endif
  void add_invitee_username(const char* value);
  void add_invitee_username(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& invitee_username() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_invitee_username();

  // repeated string member_username = 5;
  int member_username_size() const;
  void clear_member_username();
  static const int kMemberUsernameFieldNumber = 5;
  const ::std::string& member_username(int index) const;
  ::std::string* mutable_member_username(int index);
  void set_member_username(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_member_username(int index, ::std::string&& value);
  #endif
  void set_member_username(int index, const char* value);
  void set_member_username(int index, const char* value, size_t size);
  ::std::string* add_member_username();
  void add_member_username(const ::std::string& value);
  #if LANG_CXX11
  void add_member_username(::std::string&& value);
  #endif
  void add_member_username(const char* value);
  void add_member_username(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& member_username() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_member_username();

  // string fleet_name = 1;
  void clear_fleet_name();
  static const int kFleetNameFieldNumber = 1;
  const ::std::string& fleet_name() const;
  void set_fleet_name(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_name(::std::string&& value);
  #endif
  void set_fleet_name(const char* value);
  void set_fleet_name(const char* value, size_t size);
  ::std::string* mutable_fleet_name();
  ::std::string* release_fleet_name();
  void set_allocated_fleet_name(::std::string* fleet_name);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string captain_username = 3;
  void clear_captain_username();
  static const int kCaptainUsernameFieldNumber = 3;
  const ::std::string& captain_username() const;
  void set_captain_username(const ::std::string& value);
  #if LANG_CXX11
  void set_captain_username(::std::string&& value);
  #endif
  void set_captain_username(const char* value);
  void set_captain_username(const char* value, size_t size);
  ::std::string* mutable_captain_username();
  ::std::string* release_captain_username();
  void set_allocated_captain_username(::std::string* captain_username);

  // string invite_reason = 6;
  void clear_invite_reason();
  static const int kInviteReasonFieldNumber = 6;
  const ::std::string& invite_reason() const;
  void set_invite_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_invite_reason(::std::string&& value);
  #endif
  void set_invite_reason(const char* value);
  void set_invite_reason(const char* value, size_t size);
  ::std::string* mutable_invite_reason();
  ::std::string* release_invite_reason();
  void set_allocated_invite_reason(::std::string* invite_reason);

  // string msg_id = 7;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 7;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.fleet.CreateFleetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> invitee_username_;
  ::google::protobuf::RepeatedPtrField< ::std::string> member_username_;
  ::google::protobuf::internal::ArenaStringPtr fleet_name_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr captain_username_;
  ::google::protobuf::internal::ArenaStringPtr invite_reason_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsCreateFleetRequestImpl();
};
// -------------------------------------------------------------------

class CreateFleetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.CreateFleetResponse) */ {
 public:
  CreateFleetResponse();
  virtual ~CreateFleetResponse();

  CreateFleetResponse(const CreateFleetResponse& from);

  inline CreateFleetResponse& operator=(const CreateFleetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateFleetResponse(CreateFleetResponse&& from) noexcept
    : CreateFleetResponse() {
    *this = ::std::move(from);
  }

  inline CreateFleetResponse& operator=(CreateFleetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateFleetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateFleetResponse* internal_default_instance() {
    return reinterpret_cast<const CreateFleetResponse*>(
               &_CreateFleetResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CreateFleetResponse* other);
  friend void swap(CreateFleetResponse& a, CreateFleetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateFleetResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateFleetResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateFleetResponse& from);
  void MergeFrom(const CreateFleetResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateFleetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .outer.fleet.FleetInfo Fleet_info = 2;
  bool has_fleet_info() const;
  void clear_fleet_info();
  static const int kFleetInfoFieldNumber = 2;
  const ::outer::fleet::FleetInfo& fleet_info() const;
  ::outer::fleet::FleetInfo* release_fleet_info();
  ::outer::fleet::FleetInfo* mutable_fleet_info();
  void set_allocated_fleet_info(::outer::fleet::FleetInfo* fleet_info);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.CreateFleetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::outer::fleet::FleetInfo* fleet_info_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsCreateFleetResponseImpl();
};
// -------------------------------------------------------------------

class FleetCreatedSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.FleetCreatedSignal) */ {
 public:
  FleetCreatedSignal();
  virtual ~FleetCreatedSignal();

  FleetCreatedSignal(const FleetCreatedSignal& from);

  inline FleetCreatedSignal& operator=(const FleetCreatedSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleetCreatedSignal(FleetCreatedSignal&& from) noexcept
    : FleetCreatedSignal() {
    *this = ::std::move(from);
  }

  inline FleetCreatedSignal& operator=(FleetCreatedSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleetCreatedSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FleetCreatedSignal* internal_default_instance() {
    return reinterpret_cast<const FleetCreatedSignal*>(
               &_FleetCreatedSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(FleetCreatedSignal* other);
  friend void swap(FleetCreatedSignal& a, FleetCreatedSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleetCreatedSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  FleetCreatedSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleetCreatedSignal& from);
  void MergeFrom(const FleetCreatedSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleetCreatedSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.fleet.FleetCrew member = 2;
  int member_size() const;
  void clear_member();
  static const int kMemberFieldNumber = 2;
  const ::outer::fleet::FleetCrew& member(int index) const;
  ::outer::fleet::FleetCrew* mutable_member(int index);
  ::outer::fleet::FleetCrew* add_member();
  ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew >*
      mutable_member();
  const ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew >&
      member() const;

  // .outer.fleet.FleetCrew captain = 1;
  bool has_captain() const;
  void clear_captain();
  static const int kCaptainFieldNumber = 1;
  const ::outer::fleet::FleetCrew& captain() const;
  ::outer::fleet::FleetCrew* release_captain();
  ::outer::fleet::FleetCrew* mutable_captain();
  void set_allocated_captain(::outer::fleet::FleetCrew* captain);

  // @@protoc_insertion_point(class_scope:outer.fleet.FleetCreatedSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew > member_;
  ::outer::fleet::FleetCrew* captain_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsFleetCreatedSignalImpl();
};
// -------------------------------------------------------------------

class InvitingToFleetSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.InvitingToFleetSignal) */ {
 public:
  InvitingToFleetSignal();
  virtual ~InvitingToFleetSignal();

  InvitingToFleetSignal(const InvitingToFleetSignal& from);

  inline InvitingToFleetSignal& operator=(const InvitingToFleetSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InvitingToFleetSignal(InvitingToFleetSignal&& from) noexcept
    : InvitingToFleetSignal() {
    *this = ::std::move(from);
  }

  inline InvitingToFleetSignal& operator=(InvitingToFleetSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InvitingToFleetSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvitingToFleetSignal* internal_default_instance() {
    return reinterpret_cast<const InvitingToFleetSignal*>(
               &_InvitingToFleetSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(InvitingToFleetSignal* other);
  friend void swap(InvitingToFleetSignal& a, InvitingToFleetSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InvitingToFleetSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  InvitingToFleetSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InvitingToFleetSignal& from);
  void MergeFrom(const InvitingToFleetSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InvitingToFleetSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .outer.fleet.FleetCrew from_crew = 1;
  bool has_from_crew() const;
  void clear_from_crew();
  static const int kFromCrewFieldNumber = 1;
  const ::outer::fleet::FleetCrew& from_crew() const;
  ::outer::fleet::FleetCrew* release_from_crew();
  ::outer::fleet::FleetCrew* mutable_from_crew();
  void set_allocated_from_crew(::outer::fleet::FleetCrew* from_crew);

  // uint64 invite_time = 3;
  void clear_invite_time();
  static const int kInviteTimeFieldNumber = 3;
  ::google::protobuf::uint64 invite_time() const;
  void set_invite_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.fleet.InvitingToFleetSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::outer::fleet::FleetCrew* from_crew_;
  ::google::protobuf::uint64 invite_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsInvitingToFleetSignalImpl();
};
// -------------------------------------------------------------------

class AcceptFleetInvitationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.AcceptFleetInvitationRequest) */ {
 public:
  AcceptFleetInvitationRequest();
  virtual ~AcceptFleetInvitationRequest();

  AcceptFleetInvitationRequest(const AcceptFleetInvitationRequest& from);

  inline AcceptFleetInvitationRequest& operator=(const AcceptFleetInvitationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcceptFleetInvitationRequest(AcceptFleetInvitationRequest&& from) noexcept
    : AcceptFleetInvitationRequest() {
    *this = ::std::move(from);
  }

  inline AcceptFleetInvitationRequest& operator=(AcceptFleetInvitationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptFleetInvitationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptFleetInvitationRequest* internal_default_instance() {
    return reinterpret_cast<const AcceptFleetInvitationRequest*>(
               &_AcceptFleetInvitationRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(AcceptFleetInvitationRequest* other);
  friend void swap(AcceptFleetInvitationRequest& a, AcceptFleetInvitationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcceptFleetInvitationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AcceptFleetInvitationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcceptFleetInvitationRequest& from);
  void MergeFrom(const AcceptFleetInvitationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcceptFleetInvitationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fleet_uri = 1;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 1;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string accept_to_username = 3;
  void clear_accept_to_username();
  static const int kAcceptToUsernameFieldNumber = 3;
  const ::std::string& accept_to_username() const;
  void set_accept_to_username(const ::std::string& value);
  #if LANG_CXX11
  void set_accept_to_username(::std::string&& value);
  #endif
  void set_accept_to_username(const char* value);
  void set_accept_to_username(const char* value, size_t size);
  ::std::string* mutable_accept_to_username();
  ::std::string* release_accept_to_username();
  void set_allocated_accept_to_username(::std::string* accept_to_username);

  // string appkey = 4;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 4;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.fleet.AcceptFleetInvitationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr accept_to_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsAcceptFleetInvitationRequestImpl();
};
// -------------------------------------------------------------------

class AcceptFleetInvitationResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.AcceptFleetInvitationResponse) */ {
 public:
  AcceptFleetInvitationResponse();
  virtual ~AcceptFleetInvitationResponse();

  AcceptFleetInvitationResponse(const AcceptFleetInvitationResponse& from);

  inline AcceptFleetInvitationResponse& operator=(const AcceptFleetInvitationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcceptFleetInvitationResponse(AcceptFleetInvitationResponse&& from) noexcept
    : AcceptFleetInvitationResponse() {
    *this = ::std::move(from);
  }

  inline AcceptFleetInvitationResponse& operator=(AcceptFleetInvitationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptFleetInvitationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptFleetInvitationResponse* internal_default_instance() {
    return reinterpret_cast<const AcceptFleetInvitationResponse*>(
               &_AcceptFleetInvitationResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(AcceptFleetInvitationResponse* other);
  friend void swap(AcceptFleetInvitationResponse& a, AcceptFleetInvitationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcceptFleetInvitationResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AcceptFleetInvitationResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcceptFleetInvitationResponse& from);
  void MergeFrom(const AcceptFleetInvitationResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcceptFleetInvitationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.AcceptFleetInvitationResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsAcceptFleetInvitationResponseImpl();
};
// -------------------------------------------------------------------

class AcceptFleetInvitationSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.AcceptFleetInvitationSignal) */ {
 public:
  AcceptFleetInvitationSignal();
  virtual ~AcceptFleetInvitationSignal();

  AcceptFleetInvitationSignal(const AcceptFleetInvitationSignal& from);

  inline AcceptFleetInvitationSignal& operator=(const AcceptFleetInvitationSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcceptFleetInvitationSignal(AcceptFleetInvitationSignal&& from) noexcept
    : AcceptFleetInvitationSignal() {
    *this = ::std::move(from);
  }

  inline AcceptFleetInvitationSignal& operator=(AcceptFleetInvitationSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptFleetInvitationSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptFleetInvitationSignal* internal_default_instance() {
    return reinterpret_cast<const AcceptFleetInvitationSignal*>(
               &_AcceptFleetInvitationSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(AcceptFleetInvitationSignal* other);
  friend void swap(AcceptFleetInvitationSignal& a, AcceptFleetInvitationSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcceptFleetInvitationSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  AcceptFleetInvitationSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcceptFleetInvitationSignal& from);
  void MergeFrom(const AcceptFleetInvitationSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcceptFleetInvitationSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .outer.fleet.FleetCrew accept_from = 1;
  bool has_accept_from() const;
  void clear_accept_from();
  static const int kAcceptFromFieldNumber = 1;
  const ::outer::fleet::FleetCrew& accept_from() const;
  ::outer::fleet::FleetCrew* release_accept_from();
  ::outer::fleet::FleetCrew* mutable_accept_from();
  void set_allocated_accept_from(::outer::fleet::FleetCrew* accept_from);

  // @@protoc_insertion_point(class_scope:outer.fleet.AcceptFleetInvitationSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::outer::fleet::FleetCrew* accept_from_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsAcceptFleetInvitationSignalImpl();
};
// -------------------------------------------------------------------

class InviteeJoinFleetSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.InviteeJoinFleetSignal) */ {
 public:
  InviteeJoinFleetSignal();
  virtual ~InviteeJoinFleetSignal();

  InviteeJoinFleetSignal(const InviteeJoinFleetSignal& from);

  inline InviteeJoinFleetSignal& operator=(const InviteeJoinFleetSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InviteeJoinFleetSignal(InviteeJoinFleetSignal&& from) noexcept
    : InviteeJoinFleetSignal() {
    *this = ::std::move(from);
  }

  inline InviteeJoinFleetSignal& operator=(InviteeJoinFleetSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteeJoinFleetSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InviteeJoinFleetSignal* internal_default_instance() {
    return reinterpret_cast<const InviteeJoinFleetSignal*>(
               &_InviteeJoinFleetSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(InviteeJoinFleetSignal* other);
  friend void swap(InviteeJoinFleetSignal& a, InviteeJoinFleetSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InviteeJoinFleetSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  InviteeJoinFleetSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InviteeJoinFleetSignal& from);
  void MergeFrom(const InviteeJoinFleetSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InviteeJoinFleetSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .outer.fleet.FleetCrew invitee = 2;
  bool has_invitee() const;
  void clear_invitee();
  static const int kInviteeFieldNumber = 2;
  const ::outer::fleet::FleetCrew& invitee() const;
  ::outer::fleet::FleetCrew* release_invitee();
  ::outer::fleet::FleetCrew* mutable_invitee();
  void set_allocated_invitee(::outer::fleet::FleetCrew* invitee);

  // .outer.fleet.FleetCrew inviter = 3;
  bool has_inviter() const;
  void clear_inviter();
  static const int kInviterFieldNumber = 3;
  const ::outer::fleet::FleetCrew& inviter() const;
  ::outer::fleet::FleetCrew* release_inviter();
  ::outer::fleet::FleetCrew* mutable_inviter();
  void set_allocated_inviter(::outer::fleet::FleetCrew* inviter);

  // @@protoc_insertion_point(class_scope:outer.fleet.InviteeJoinFleetSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::outer::fleet::FleetCrew* invitee_;
  ::outer::fleet::FleetCrew* inviter_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsInviteeJoinFleetSignalImpl();
};
// -------------------------------------------------------------------

class DeclineFleetInvitationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.DeclineFleetInvitationRequest) */ {
 public:
  DeclineFleetInvitationRequest();
  virtual ~DeclineFleetInvitationRequest();

  DeclineFleetInvitationRequest(const DeclineFleetInvitationRequest& from);

  inline DeclineFleetInvitationRequest& operator=(const DeclineFleetInvitationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeclineFleetInvitationRequest(DeclineFleetInvitationRequest&& from) noexcept
    : DeclineFleetInvitationRequest() {
    *this = ::std::move(from);
  }

  inline DeclineFleetInvitationRequest& operator=(DeclineFleetInvitationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeclineFleetInvitationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeclineFleetInvitationRequest* internal_default_instance() {
    return reinterpret_cast<const DeclineFleetInvitationRequest*>(
               &_DeclineFleetInvitationRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(DeclineFleetInvitationRequest* other);
  friend void swap(DeclineFleetInvitationRequest& a, DeclineFleetInvitationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeclineFleetInvitationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeclineFleetInvitationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeclineFleetInvitationRequest& from);
  void MergeFrom(const DeclineFleetInvitationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeclineFleetInvitationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fleet_uri = 1;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 1;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string username = 2;
  void clear_username();
  static const int kUsernameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string decline_to_username = 3;
  void clear_decline_to_username();
  static const int kDeclineToUsernameFieldNumber = 3;
  const ::std::string& decline_to_username() const;
  void set_decline_to_username(const ::std::string& value);
  #if LANG_CXX11
  void set_decline_to_username(::std::string&& value);
  #endif
  void set_decline_to_username(const char* value);
  void set_decline_to_username(const char* value, size_t size);
  ::std::string* mutable_decline_to_username();
  ::std::string* release_decline_to_username();
  void set_allocated_decline_to_username(::std::string* decline_to_username);

  // string appkey = 4;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 4;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string decline_reason = 5;
  void clear_decline_reason();
  static const int kDeclineReasonFieldNumber = 5;
  const ::std::string& decline_reason() const;
  void set_decline_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_decline_reason(::std::string&& value);
  #endif
  void set_decline_reason(const char* value);
  void set_decline_reason(const char* value, size_t size);
  ::std::string* mutable_decline_reason();
  ::std::string* release_decline_reason();
  void set_allocated_decline_reason(::std::string* decline_reason);

  // string msg_id = 6;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 6;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.fleet.DeclineFleetInvitationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr decline_to_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr decline_reason_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsDeclineFleetInvitationRequestImpl();
};
// -------------------------------------------------------------------

class DeclineFleetInvitationResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.DeclineFleetInvitationResponse) */ {
 public:
  DeclineFleetInvitationResponse();
  virtual ~DeclineFleetInvitationResponse();

  DeclineFleetInvitationResponse(const DeclineFleetInvitationResponse& from);

  inline DeclineFleetInvitationResponse& operator=(const DeclineFleetInvitationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeclineFleetInvitationResponse(DeclineFleetInvitationResponse&& from) noexcept
    : DeclineFleetInvitationResponse() {
    *this = ::std::move(from);
  }

  inline DeclineFleetInvitationResponse& operator=(DeclineFleetInvitationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeclineFleetInvitationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeclineFleetInvitationResponse* internal_default_instance() {
    return reinterpret_cast<const DeclineFleetInvitationResponse*>(
               &_DeclineFleetInvitationResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(DeclineFleetInvitationResponse* other);
  friend void swap(DeclineFleetInvitationResponse& a, DeclineFleetInvitationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeclineFleetInvitationResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DeclineFleetInvitationResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeclineFleetInvitationResponse& from);
  void MergeFrom(const DeclineFleetInvitationResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeclineFleetInvitationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.DeclineFleetInvitationResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsDeclineFleetInvitationResponseImpl();
};
// -------------------------------------------------------------------

class FleetInvitationDeclinedSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.FleetInvitationDeclinedSignal) */ {
 public:
  FleetInvitationDeclinedSignal();
  virtual ~FleetInvitationDeclinedSignal();

  FleetInvitationDeclinedSignal(const FleetInvitationDeclinedSignal& from);

  inline FleetInvitationDeclinedSignal& operator=(const FleetInvitationDeclinedSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleetInvitationDeclinedSignal(FleetInvitationDeclinedSignal&& from) noexcept
    : FleetInvitationDeclinedSignal() {
    *this = ::std::move(from);
  }

  inline FleetInvitationDeclinedSignal& operator=(FleetInvitationDeclinedSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleetInvitationDeclinedSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FleetInvitationDeclinedSignal* internal_default_instance() {
    return reinterpret_cast<const FleetInvitationDeclinedSignal*>(
               &_FleetInvitationDeclinedSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(FleetInvitationDeclinedSignal* other);
  friend void swap(FleetInvitationDeclinedSignal& a, FleetInvitationDeclinedSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleetInvitationDeclinedSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  FleetInvitationDeclinedSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleetInvitationDeclinedSignal& from);
  void MergeFrom(const FleetInvitationDeclinedSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleetInvitationDeclinedSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string decline_reason = 3;
  void clear_decline_reason();
  static const int kDeclineReasonFieldNumber = 3;
  const ::std::string& decline_reason() const;
  void set_decline_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_decline_reason(::std::string&& value);
  #endif
  void set_decline_reason(const char* value);
  void set_decline_reason(const char* value, size_t size);
  ::std::string* mutable_decline_reason();
  ::std::string* release_decline_reason();
  void set_allocated_decline_reason(::std::string* decline_reason);

  // .outer.fleet.FleetCrew decline_from = 2;
  bool has_decline_from() const;
  void clear_decline_from();
  static const int kDeclineFromFieldNumber = 2;
  const ::outer::fleet::FleetCrew& decline_from() const;
  ::outer::fleet::FleetCrew* release_decline_from();
  ::outer::fleet::FleetCrew* mutable_decline_from();
  void set_allocated_decline_from(::outer::fleet::FleetCrew* decline_from);

  // @@protoc_insertion_point(class_scope:outer.fleet.FleetInvitationDeclinedSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr decline_reason_;
  ::outer::fleet::FleetCrew* decline_from_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsFleetInvitationDeclinedSignalImpl();
};
// -------------------------------------------------------------------

class AddFleetMemberRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.AddFleetMemberRequest) */ {
 public:
  AddFleetMemberRequest();
  virtual ~AddFleetMemberRequest();

  AddFleetMemberRequest(const AddFleetMemberRequest& from);

  inline AddFleetMemberRequest& operator=(const AddFleetMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddFleetMemberRequest(AddFleetMemberRequest&& from) noexcept
    : AddFleetMemberRequest() {
    *this = ::std::move(from);
  }

  inline AddFleetMemberRequest& operator=(AddFleetMemberRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFleetMemberRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFleetMemberRequest* internal_default_instance() {
    return reinterpret_cast<const AddFleetMemberRequest*>(
               &_AddFleetMemberRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(AddFleetMemberRequest* other);
  friend void swap(AddFleetMemberRequest& a, AddFleetMemberRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddFleetMemberRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddFleetMemberRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddFleetMemberRequest& from);
  void MergeFrom(const AddFleetMemberRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddFleetMemberRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string member_username = 4;
  int member_username_size() const;
  void clear_member_username();
  static const int kMemberUsernameFieldNumber = 4;
  const ::std::string& member_username(int index) const;
  ::std::string* mutable_member_username(int index);
  void set_member_username(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_member_username(int index, ::std::string&& value);
  #endif
  void set_member_username(int index, const char* value);
  void set_member_username(int index, const char* value, size_t size);
  ::std::string* add_member_username();
  void add_member_username(const ::std::string& value);
  #if LANG_CXX11
  void add_member_username(::std::string&& value);
  #endif
  void add_member_username(const char* value);
  void add_member_username(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& member_username() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_member_username();

  // string fleet_uri = 1;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 1;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string from_username = 2;
  void clear_from_username();
  static const int kFromUsernameFieldNumber = 2;
  const ::std::string& from_username() const;
  void set_from_username(const ::std::string& value);
  #if LANG_CXX11
  void set_from_username(::std::string&& value);
  #endif
  void set_from_username(const char* value);
  void set_from_username(const char* value, size_t size);
  ::std::string* mutable_from_username();
  ::std::string* release_from_username();
  void set_allocated_from_username(::std::string* from_username);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // string invite_reason = 7;
  void clear_invite_reason();
  static const int kInviteReasonFieldNumber = 7;
  const ::std::string& invite_reason() const;
  void set_invite_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_invite_reason(::std::string&& value);
  #endif
  void set_invite_reason(const char* value);
  void set_invite_reason(const char* value, size_t size);
  ::std::string* mutable_invite_reason();
  ::std::string* release_invite_reason();
  void set_allocated_invite_reason(::std::string* invite_reason);

  // bool is_direct_pull = 6;
  void clear_is_direct_pull();
  static const int kIsDirectPullFieldNumber = 6;
  bool is_direct_pull() const;
  void set_is_direct_pull(bool value);

  // @@protoc_insertion_point(class_scope:outer.fleet.AddFleetMemberRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> member_username_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr from_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::internal::ArenaStringPtr invite_reason_;
  bool is_direct_pull_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsAddFleetMemberRequestImpl();
};
// -------------------------------------------------------------------

class AddFleetMemberResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.AddFleetMemberResponse) */ {
 public:
  AddFleetMemberResponse();
  virtual ~AddFleetMemberResponse();

  AddFleetMemberResponse(const AddFleetMemberResponse& from);

  inline AddFleetMemberResponse& operator=(const AddFleetMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddFleetMemberResponse(AddFleetMemberResponse&& from) noexcept
    : AddFleetMemberResponse() {
    *this = ::std::move(from);
  }

  inline AddFleetMemberResponse& operator=(AddFleetMemberResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFleetMemberResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddFleetMemberResponse* internal_default_instance() {
    return reinterpret_cast<const AddFleetMemberResponse*>(
               &_AddFleetMemberResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(AddFleetMemberResponse* other);
  friend void swap(AddFleetMemberResponse& a, AddFleetMemberResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddFleetMemberResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AddFleetMemberResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddFleetMemberResponse& from);
  void MergeFrom(const AddFleetMemberResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddFleetMemberResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.AddFleetMemberResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsAddFleetMemberResponseImpl();
};
// -------------------------------------------------------------------

class JoinFleetSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.JoinFleetSignal) */ {
 public:
  JoinFleetSignal();
  virtual ~JoinFleetSignal();

  JoinFleetSignal(const JoinFleetSignal& from);

  inline JoinFleetSignal& operator=(const JoinFleetSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoinFleetSignal(JoinFleetSignal&& from) noexcept
    : JoinFleetSignal() {
    *this = ::std::move(from);
  }

  inline JoinFleetSignal& operator=(JoinFleetSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinFleetSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinFleetSignal* internal_default_instance() {
    return reinterpret_cast<const JoinFleetSignal*>(
               &_JoinFleetSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(JoinFleetSignal* other);
  friend void swap(JoinFleetSignal& a, JoinFleetSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinFleetSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinFleetSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JoinFleetSignal& from);
  void MergeFrom(const JoinFleetSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinFleetSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.fleet.FleetCrew new_member = 1;
  int new_member_size() const;
  void clear_new_member();
  static const int kNewMemberFieldNumber = 1;
  const ::outer::fleet::FleetCrew& new_member(int index) const;
  ::outer::fleet::FleetCrew* mutable_new_member(int index);
  ::outer::fleet::FleetCrew* add_new_member();
  ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew >*
      mutable_new_member();
  const ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew >&
      new_member() const;

  // .outer.fleet.FleetCrew actor = 2;
  bool has_actor() const;
  void clear_actor();
  static const int kActorFieldNumber = 2;
  const ::outer::fleet::FleetCrew& actor() const;
  ::outer::fleet::FleetCrew* release_actor();
  ::outer::fleet::FleetCrew* mutable_actor();
  void set_allocated_actor(::outer::fleet::FleetCrew* actor);

  // @@protoc_insertion_point(class_scope:outer.fleet.JoinFleetSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew > new_member_;
  ::outer::fleet::FleetCrew* actor_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsJoinFleetSignalImpl();
};
// -------------------------------------------------------------------

class KickFleetMemberRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.KickFleetMemberRequest) */ {
 public:
  KickFleetMemberRequest();
  virtual ~KickFleetMemberRequest();

  KickFleetMemberRequest(const KickFleetMemberRequest& from);

  inline KickFleetMemberRequest& operator=(const KickFleetMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KickFleetMemberRequest(KickFleetMemberRequest&& from) noexcept
    : KickFleetMemberRequest() {
    *this = ::std::move(from);
  }

  inline KickFleetMemberRequest& operator=(KickFleetMemberRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KickFleetMemberRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickFleetMemberRequest* internal_default_instance() {
    return reinterpret_cast<const KickFleetMemberRequest*>(
               &_KickFleetMemberRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(KickFleetMemberRequest* other);
  friend void swap(KickFleetMemberRequest& a, KickFleetMemberRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KickFleetMemberRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  KickFleetMemberRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KickFleetMemberRequest& from);
  void MergeFrom(const KickFleetMemberRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KickFleetMemberRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string bekicked_username = 4;
  int bekicked_username_size() const;
  void clear_bekicked_username();
  static const int kBekickedUsernameFieldNumber = 4;
  const ::std::string& bekicked_username(int index) const;
  ::std::string* mutable_bekicked_username(int index);
  void set_bekicked_username(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_bekicked_username(int index, ::std::string&& value);
  #endif
  void set_bekicked_username(int index, const char* value);
  void set_bekicked_username(int index, const char* value, size_t size);
  ::std::string* add_bekicked_username();
  void add_bekicked_username(const ::std::string& value);
  #if LANG_CXX11
  void add_bekicked_username(::std::string&& value);
  #endif
  void add_bekicked_username(const char* value);
  void add_bekicked_username(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bekicked_username() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bekicked_username();

  // string fleet_uri = 1;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 1;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string kicker_username = 2;
  void clear_kicker_username();
  static const int kKickerUsernameFieldNumber = 2;
  const ::std::string& kicker_username() const;
  void set_kicker_username(const ::std::string& value);
  #if LANG_CXX11
  void set_kicker_username(::std::string&& value);
  #endif
  void set_kicker_username(const char* value);
  void set_kicker_username(const char* value, size_t size);
  ::std::string* mutable_kicker_username();
  ::std::string* release_kicker_username();
  void set_allocated_kicker_username(::std::string* kicker_username);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.fleet.KickFleetMemberRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bekicked_username_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr kicker_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsKickFleetMemberRequestImpl();
};
// -------------------------------------------------------------------

class KickFleetMemberResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.KickFleetMemberResponse) */ {
 public:
  KickFleetMemberResponse();
  virtual ~KickFleetMemberResponse();

  KickFleetMemberResponse(const KickFleetMemberResponse& from);

  inline KickFleetMemberResponse& operator=(const KickFleetMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KickFleetMemberResponse(KickFleetMemberResponse&& from) noexcept
    : KickFleetMemberResponse() {
    *this = ::std::move(from);
  }

  inline KickFleetMemberResponse& operator=(KickFleetMemberResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KickFleetMemberResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickFleetMemberResponse* internal_default_instance() {
    return reinterpret_cast<const KickFleetMemberResponse*>(
               &_KickFleetMemberResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(KickFleetMemberResponse* other);
  friend void swap(KickFleetMemberResponse& a, KickFleetMemberResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KickFleetMemberResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  KickFleetMemberResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KickFleetMemberResponse& from);
  void MergeFrom(const KickFleetMemberResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KickFleetMemberResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.KickFleetMemberResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsKickFleetMemberResponseImpl();
};
// -------------------------------------------------------------------

class FleetMemberKickedSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.FleetMemberKickedSignal) */ {
 public:
  FleetMemberKickedSignal();
  virtual ~FleetMemberKickedSignal();

  FleetMemberKickedSignal(const FleetMemberKickedSignal& from);

  inline FleetMemberKickedSignal& operator=(const FleetMemberKickedSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleetMemberKickedSignal(FleetMemberKickedSignal&& from) noexcept
    : FleetMemberKickedSignal() {
    *this = ::std::move(from);
  }

  inline FleetMemberKickedSignal& operator=(FleetMemberKickedSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleetMemberKickedSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FleetMemberKickedSignal* internal_default_instance() {
    return reinterpret_cast<const FleetMemberKickedSignal*>(
               &_FleetMemberKickedSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(FleetMemberKickedSignal* other);
  friend void swap(FleetMemberKickedSignal& a, FleetMemberKickedSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleetMemberKickedSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  FleetMemberKickedSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleetMemberKickedSignal& from);
  void MergeFrom(const FleetMemberKickedSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleetMemberKickedSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.fleet.FleetCrew be_kicked = 1;
  int be_kicked_size() const;
  void clear_be_kicked();
  static const int kBeKickedFieldNumber = 1;
  const ::outer::fleet::FleetCrew& be_kicked(int index) const;
  ::outer::fleet::FleetCrew* mutable_be_kicked(int index);
  ::outer::fleet::FleetCrew* add_be_kicked();
  ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew >*
      mutable_be_kicked();
  const ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew >&
      be_kicked() const;

  // .outer.fleet.FleetCrew kicker = 2;
  bool has_kicker() const;
  void clear_kicker();
  static const int kKickerFieldNumber = 2;
  const ::outer::fleet::FleetCrew& kicker() const;
  ::outer::fleet::FleetCrew* release_kicker();
  ::outer::fleet::FleetCrew* mutable_kicker();
  void set_allocated_kicker(::outer::fleet::FleetCrew* kicker);

  // @@protoc_insertion_point(class_scope:outer.fleet.FleetMemberKickedSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew > be_kicked_;
  ::outer::fleet::FleetCrew* kicker_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsFleetMemberKickedSignalImpl();
};
// -------------------------------------------------------------------

class FleetMemberExitRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.FleetMemberExitRequest) */ {
 public:
  FleetMemberExitRequest();
  virtual ~FleetMemberExitRequest();

  FleetMemberExitRequest(const FleetMemberExitRequest& from);

  inline FleetMemberExitRequest& operator=(const FleetMemberExitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleetMemberExitRequest(FleetMemberExitRequest&& from) noexcept
    : FleetMemberExitRequest() {
    *this = ::std::move(from);
  }

  inline FleetMemberExitRequest& operator=(FleetMemberExitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleetMemberExitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FleetMemberExitRequest* internal_default_instance() {
    return reinterpret_cast<const FleetMemberExitRequest*>(
               &_FleetMemberExitRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(FleetMemberExitRequest* other);
  friend void swap(FleetMemberExitRequest& a, FleetMemberExitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleetMemberExitRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  FleetMemberExitRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleetMemberExitRequest& from);
  void MergeFrom(const FleetMemberExitRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleetMemberExitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fleet_uri = 1;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 1;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string exiter_username = 2;
  void clear_exiter_username();
  static const int kExiterUsernameFieldNumber = 2;
  const ::std::string& exiter_username() const;
  void set_exiter_username(const ::std::string& value);
  #if LANG_CXX11
  void set_exiter_username(::std::string&& value);
  #endif
  void set_exiter_username(const char* value);
  void set_exiter_username(const char* value, size_t size);
  ::std::string* mutable_exiter_username();
  ::std::string* release_exiter_username();
  void set_allocated_exiter_username(::std::string* exiter_username);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string msg_id = 4;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 4;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.fleet.FleetMemberExitRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr exiter_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsFleetMemberExitRequestImpl();
};
// -------------------------------------------------------------------

class FleetMemberExitResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.FleetMemberExitResponse) */ {
 public:
  FleetMemberExitResponse();
  virtual ~FleetMemberExitResponse();

  FleetMemberExitResponse(const FleetMemberExitResponse& from);

  inline FleetMemberExitResponse& operator=(const FleetMemberExitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleetMemberExitResponse(FleetMemberExitResponse&& from) noexcept
    : FleetMemberExitResponse() {
    *this = ::std::move(from);
  }

  inline FleetMemberExitResponse& operator=(FleetMemberExitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleetMemberExitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FleetMemberExitResponse* internal_default_instance() {
    return reinterpret_cast<const FleetMemberExitResponse*>(
               &_FleetMemberExitResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(FleetMemberExitResponse* other);
  friend void swap(FleetMemberExitResponse& a, FleetMemberExitResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleetMemberExitResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  FleetMemberExitResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleetMemberExitResponse& from);
  void MergeFrom(const FleetMemberExitResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleetMemberExitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.FleetMemberExitResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsFleetMemberExitResponseImpl();
};
// -------------------------------------------------------------------

class FleetMemberExitedSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.FleetMemberExitedSignal) */ {
 public:
  FleetMemberExitedSignal();
  virtual ~FleetMemberExitedSignal();

  FleetMemberExitedSignal(const FleetMemberExitedSignal& from);

  inline FleetMemberExitedSignal& operator=(const FleetMemberExitedSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleetMemberExitedSignal(FleetMemberExitedSignal&& from) noexcept
    : FleetMemberExitedSignal() {
    *this = ::std::move(from);
  }

  inline FleetMemberExitedSignal& operator=(FleetMemberExitedSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleetMemberExitedSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FleetMemberExitedSignal* internal_default_instance() {
    return reinterpret_cast<const FleetMemberExitedSignal*>(
               &_FleetMemberExitedSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(FleetMemberExitedSignal* other);
  friend void swap(FleetMemberExitedSignal& a, FleetMemberExitedSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleetMemberExitedSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  FleetMemberExitedSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleetMemberExitedSignal& from);
  void MergeFrom(const FleetMemberExitedSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleetMemberExitedSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .outer.fleet.FleetCrew exiter = 1;
  bool has_exiter() const;
  void clear_exiter();
  static const int kExiterFieldNumber = 1;
  const ::outer::fleet::FleetCrew& exiter() const;
  ::outer::fleet::FleetCrew* release_exiter();
  ::outer::fleet::FleetCrew* mutable_exiter();
  void set_allocated_exiter(::outer::fleet::FleetCrew* exiter);

  // @@protoc_insertion_point(class_scope:outer.fleet.FleetMemberExitedSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::outer::fleet::FleetCrew* exiter_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsFleetMemberExitedSignalImpl();
};
// -------------------------------------------------------------------

class DestroyFleetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.DestroyFleetRequest) */ {
 public:
  DestroyFleetRequest();
  virtual ~DestroyFleetRequest();

  DestroyFleetRequest(const DestroyFleetRequest& from);

  inline DestroyFleetRequest& operator=(const DestroyFleetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DestroyFleetRequest(DestroyFleetRequest&& from) noexcept
    : DestroyFleetRequest() {
    *this = ::std::move(from);
  }

  inline DestroyFleetRequest& operator=(DestroyFleetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DestroyFleetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DestroyFleetRequest* internal_default_instance() {
    return reinterpret_cast<const DestroyFleetRequest*>(
               &_DestroyFleetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(DestroyFleetRequest* other);
  friend void swap(DestroyFleetRequest& a, DestroyFleetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DestroyFleetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DestroyFleetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DestroyFleetRequest& from);
  void MergeFrom(const DestroyFleetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DestroyFleetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fleet_uri = 1;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 1;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string destroy_username = 2;
  void clear_destroy_username();
  static const int kDestroyUsernameFieldNumber = 2;
  const ::std::string& destroy_username() const;
  void set_destroy_username(const ::std::string& value);
  #if LANG_CXX11
  void set_destroy_username(::std::string&& value);
  #endif
  void set_destroy_username(const char* value);
  void set_destroy_username(const char* value, size_t size);
  ::std::string* mutable_destroy_username();
  ::std::string* release_destroy_username();
  void set_allocated_destroy_username(::std::string* destroy_username);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string msg_id = 4;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 4;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.fleet.DestroyFleetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr destroy_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsDestroyFleetRequestImpl();
};
// -------------------------------------------------------------------

class DestroyFleetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.DestroyFleetResponse) */ {
 public:
  DestroyFleetResponse();
  virtual ~DestroyFleetResponse();

  DestroyFleetResponse(const DestroyFleetResponse& from);

  inline DestroyFleetResponse& operator=(const DestroyFleetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DestroyFleetResponse(DestroyFleetResponse&& from) noexcept
    : DestroyFleetResponse() {
    *this = ::std::move(from);
  }

  inline DestroyFleetResponse& operator=(DestroyFleetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DestroyFleetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DestroyFleetResponse* internal_default_instance() {
    return reinterpret_cast<const DestroyFleetResponse*>(
               &_DestroyFleetResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(DestroyFleetResponse* other);
  friend void swap(DestroyFleetResponse& a, DestroyFleetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DestroyFleetResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DestroyFleetResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DestroyFleetResponse& from);
  void MergeFrom(const DestroyFleetResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DestroyFleetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.DestroyFleetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsDestroyFleetResponseImpl();
};
// -------------------------------------------------------------------

class FleetDestroyedSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.FleetDestroyedSignal) */ {
 public:
  FleetDestroyedSignal();
  virtual ~FleetDestroyedSignal();

  FleetDestroyedSignal(const FleetDestroyedSignal& from);

  inline FleetDestroyedSignal& operator=(const FleetDestroyedSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleetDestroyedSignal(FleetDestroyedSignal&& from) noexcept
    : FleetDestroyedSignal() {
    *this = ::std::move(from);
  }

  inline FleetDestroyedSignal& operator=(FleetDestroyedSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleetDestroyedSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FleetDestroyedSignal* internal_default_instance() {
    return reinterpret_cast<const FleetDestroyedSignal*>(
               &_FleetDestroyedSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(FleetDestroyedSignal* other);
  friend void swap(FleetDestroyedSignal& a, FleetDestroyedSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleetDestroyedSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  FleetDestroyedSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleetDestroyedSignal& from);
  void MergeFrom(const FleetDestroyedSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleetDestroyedSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .outer.fleet.FleetCrew destroyer = 1;
  bool has_destroyer() const;
  void clear_destroyer();
  static const int kDestroyerFieldNumber = 1;
  const ::outer::fleet::FleetCrew& destroyer() const;
  ::outer::fleet::FleetCrew* release_destroyer();
  ::outer::fleet::FleetCrew* mutable_destroyer();
  void set_allocated_destroyer(::outer::fleet::FleetCrew* destroyer);

  // @@protoc_insertion_point(class_scope:outer.fleet.FleetDestroyedSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::outer::fleet::FleetCrew* destroyer_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsFleetDestroyedSignalImpl();
};
// -------------------------------------------------------------------

class HandoverCaptainRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.HandoverCaptainRequest) */ {
 public:
  HandoverCaptainRequest();
  virtual ~HandoverCaptainRequest();

  HandoverCaptainRequest(const HandoverCaptainRequest& from);

  inline HandoverCaptainRequest& operator=(const HandoverCaptainRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HandoverCaptainRequest(HandoverCaptainRequest&& from) noexcept
    : HandoverCaptainRequest() {
    *this = ::std::move(from);
  }

  inline HandoverCaptainRequest& operator=(HandoverCaptainRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HandoverCaptainRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HandoverCaptainRequest* internal_default_instance() {
    return reinterpret_cast<const HandoverCaptainRequest*>(
               &_HandoverCaptainRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(HandoverCaptainRequest* other);
  friend void swap(HandoverCaptainRequest& a, HandoverCaptainRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HandoverCaptainRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  HandoverCaptainRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HandoverCaptainRequest& from);
  void MergeFrom(const HandoverCaptainRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HandoverCaptainRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fleet_uri = 1;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 1;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string actor_username = 2;
  void clear_actor_username();
  static const int kActorUsernameFieldNumber = 2;
  const ::std::string& actor_username() const;
  void set_actor_username(const ::std::string& value);
  #if LANG_CXX11
  void set_actor_username(::std::string&& value);
  #endif
  void set_actor_username(const char* value);
  void set_actor_username(const char* value, size_t size);
  ::std::string* mutable_actor_username();
  ::std::string* release_actor_username();
  void set_allocated_actor_username(::std::string* actor_username);

  // string new_captain_username = 3;
  void clear_new_captain_username();
  static const int kNewCaptainUsernameFieldNumber = 3;
  const ::std::string& new_captain_username() const;
  void set_new_captain_username(const ::std::string& value);
  #if LANG_CXX11
  void set_new_captain_username(::std::string&& value);
  #endif
  void set_new_captain_username(const char* value);
  void set_new_captain_username(const char* value, size_t size);
  ::std::string* mutable_new_captain_username();
  ::std::string* release_new_captain_username();
  void set_allocated_new_captain_username(::std::string* new_captain_username);

  // string appkey = 4;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 4;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.fleet.HandoverCaptainRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr actor_username_;
  ::google::protobuf::internal::ArenaStringPtr new_captain_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsHandoverCaptainRequestImpl();
};
// -------------------------------------------------------------------

class HandoverCaptainResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.HandoverCaptainResponse) */ {
 public:
  HandoverCaptainResponse();
  virtual ~HandoverCaptainResponse();

  HandoverCaptainResponse(const HandoverCaptainResponse& from);

  inline HandoverCaptainResponse& operator=(const HandoverCaptainResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HandoverCaptainResponse(HandoverCaptainResponse&& from) noexcept
    : HandoverCaptainResponse() {
    *this = ::std::move(from);
  }

  inline HandoverCaptainResponse& operator=(HandoverCaptainResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HandoverCaptainResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HandoverCaptainResponse* internal_default_instance() {
    return reinterpret_cast<const HandoverCaptainResponse*>(
               &_HandoverCaptainResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(HandoverCaptainResponse* other);
  friend void swap(HandoverCaptainResponse& a, HandoverCaptainResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HandoverCaptainResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  HandoverCaptainResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HandoverCaptainResponse& from);
  void MergeFrom(const HandoverCaptainResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HandoverCaptainResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.HandoverCaptainResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsHandoverCaptainResponseImpl();
};
// -------------------------------------------------------------------

class CaptainChangedSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.CaptainChangedSignal) */ {
 public:
  CaptainChangedSignal();
  virtual ~CaptainChangedSignal();

  CaptainChangedSignal(const CaptainChangedSignal& from);

  inline CaptainChangedSignal& operator=(const CaptainChangedSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CaptainChangedSignal(CaptainChangedSignal&& from) noexcept
    : CaptainChangedSignal() {
    *this = ::std::move(from);
  }

  inline CaptainChangedSignal& operator=(CaptainChangedSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CaptainChangedSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaptainChangedSignal* internal_default_instance() {
    return reinterpret_cast<const CaptainChangedSignal*>(
               &_CaptainChangedSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(CaptainChangedSignal* other);
  friend void swap(CaptainChangedSignal& a, CaptainChangedSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CaptainChangedSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  CaptainChangedSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CaptainChangedSignal& from);
  void MergeFrom(const CaptainChangedSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CaptainChangedSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .outer.fleet.FleetCrew new_captain = 1;
  bool has_new_captain() const;
  void clear_new_captain();
  static const int kNewCaptainFieldNumber = 1;
  const ::outer::fleet::FleetCrew& new_captain() const;
  ::outer::fleet::FleetCrew* release_new_captain();
  ::outer::fleet::FleetCrew* mutable_new_captain();
  void set_allocated_new_captain(::outer::fleet::FleetCrew* new_captain);

  // @@protoc_insertion_point(class_scope:outer.fleet.CaptainChangedSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::outer::fleet::FleetCrew* new_captain_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsCaptainChangedSignalImpl();
};
// -------------------------------------------------------------------

class FleetMemberChangeNickRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.FleetMemberChangeNickRequest) */ {
 public:
  FleetMemberChangeNickRequest();
  virtual ~FleetMemberChangeNickRequest();

  FleetMemberChangeNickRequest(const FleetMemberChangeNickRequest& from);

  inline FleetMemberChangeNickRequest& operator=(const FleetMemberChangeNickRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleetMemberChangeNickRequest(FleetMemberChangeNickRequest&& from) noexcept
    : FleetMemberChangeNickRequest() {
    *this = ::std::move(from);
  }

  inline FleetMemberChangeNickRequest& operator=(FleetMemberChangeNickRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleetMemberChangeNickRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FleetMemberChangeNickRequest* internal_default_instance() {
    return reinterpret_cast<const FleetMemberChangeNickRequest*>(
               &_FleetMemberChangeNickRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(FleetMemberChangeNickRequest* other);
  friend void swap(FleetMemberChangeNickRequest& a, FleetMemberChangeNickRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleetMemberChangeNickRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  FleetMemberChangeNickRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleetMemberChangeNickRequest& from);
  void MergeFrom(const FleetMemberChangeNickRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleetMemberChangeNickRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fleet_uri = 1;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 1;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string actor_username = 2;
  void clear_actor_username();
  static const int kActorUsernameFieldNumber = 2;
  const ::std::string& actor_username() const;
  void set_actor_username(const ::std::string& value);
  #if LANG_CXX11
  void set_actor_username(::std::string&& value);
  #endif
  void set_actor_username(const char* value);
  void set_actor_username(const char* value, size_t size);
  ::std::string* mutable_actor_username();
  ::std::string* release_actor_username();
  void set_allocated_actor_username(::std::string* actor_username);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string nick = 4;
  void clear_nick();
  static const int kNickFieldNumber = 4;
  const ::std::string& nick() const;
  void set_nick(const ::std::string& value);
  #if LANG_CXX11
  void set_nick(::std::string&& value);
  #endif
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  ::std::string* mutable_nick();
  ::std::string* release_nick();
  void set_allocated_nick(::std::string* nick);

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.fleet.FleetMemberChangeNickRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr actor_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr nick_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsFleetMemberChangeNickRequestImpl();
};
// -------------------------------------------------------------------

class FleetMemberChangeNickResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.FleetMemberChangeNickResponse) */ {
 public:
  FleetMemberChangeNickResponse();
  virtual ~FleetMemberChangeNickResponse();

  FleetMemberChangeNickResponse(const FleetMemberChangeNickResponse& from);

  inline FleetMemberChangeNickResponse& operator=(const FleetMemberChangeNickResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleetMemberChangeNickResponse(FleetMemberChangeNickResponse&& from) noexcept
    : FleetMemberChangeNickResponse() {
    *this = ::std::move(from);
  }

  inline FleetMemberChangeNickResponse& operator=(FleetMemberChangeNickResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleetMemberChangeNickResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FleetMemberChangeNickResponse* internal_default_instance() {
    return reinterpret_cast<const FleetMemberChangeNickResponse*>(
               &_FleetMemberChangeNickResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(FleetMemberChangeNickResponse* other);
  friend void swap(FleetMemberChangeNickResponse& a, FleetMemberChangeNickResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleetMemberChangeNickResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  FleetMemberChangeNickResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleetMemberChangeNickResponse& from);
  void MergeFrom(const FleetMemberChangeNickResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleetMemberChangeNickResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.FleetMemberChangeNickResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsFleetMemberChangeNickResponseImpl();
};
// -------------------------------------------------------------------

class FleetMemberNickChangedSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.FleetMemberNickChangedSignal) */ {
 public:
  FleetMemberNickChangedSignal();
  virtual ~FleetMemberNickChangedSignal();

  FleetMemberNickChangedSignal(const FleetMemberNickChangedSignal& from);

  inline FleetMemberNickChangedSignal& operator=(const FleetMemberNickChangedSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleetMemberNickChangedSignal(FleetMemberNickChangedSignal&& from) noexcept
    : FleetMemberNickChangedSignal() {
    *this = ::std::move(from);
  }

  inline FleetMemberNickChangedSignal& operator=(FleetMemberNickChangedSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleetMemberNickChangedSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FleetMemberNickChangedSignal* internal_default_instance() {
    return reinterpret_cast<const FleetMemberNickChangedSignal*>(
               &_FleetMemberNickChangedSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(FleetMemberNickChangedSignal* other);
  friend void swap(FleetMemberNickChangedSignal& a, FleetMemberNickChangedSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleetMemberNickChangedSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  FleetMemberNickChangedSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleetMemberNickChangedSignal& from);
  void MergeFrom(const FleetMemberNickChangedSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleetMemberNickChangedSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .outer.fleet.FleetCrew nick_changed_crew = 1;
  bool has_nick_changed_crew() const;
  void clear_nick_changed_crew();
  static const int kNickChangedCrewFieldNumber = 1;
  const ::outer::fleet::FleetCrew& nick_changed_crew() const;
  ::outer::fleet::FleetCrew* release_nick_changed_crew();
  ::outer::fleet::FleetCrew* mutable_nick_changed_crew();
  void set_allocated_nick_changed_crew(::outer::fleet::FleetCrew* nick_changed_crew);

  // @@protoc_insertion_point(class_scope:outer.fleet.FleetMemberNickChangedSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::outer::fleet::FleetCrew* nick_changed_crew_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsFleetMemberNickChangedSignalImpl();
};
// -------------------------------------------------------------------

class ChangeLocationAuthorizationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.ChangeLocationAuthorizationRequest) */ {
 public:
  ChangeLocationAuthorizationRequest();
  virtual ~ChangeLocationAuthorizationRequest();

  ChangeLocationAuthorizationRequest(const ChangeLocationAuthorizationRequest& from);

  inline ChangeLocationAuthorizationRequest& operator=(const ChangeLocationAuthorizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeLocationAuthorizationRequest(ChangeLocationAuthorizationRequest&& from) noexcept
    : ChangeLocationAuthorizationRequest() {
    *this = ::std::move(from);
  }

  inline ChangeLocationAuthorizationRequest& operator=(ChangeLocationAuthorizationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeLocationAuthorizationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeLocationAuthorizationRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeLocationAuthorizationRequest*>(
               &_ChangeLocationAuthorizationRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(ChangeLocationAuthorizationRequest* other);
  friend void swap(ChangeLocationAuthorizationRequest& a, ChangeLocationAuthorizationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeLocationAuthorizationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ChangeLocationAuthorizationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChangeLocationAuthorizationRequest& from);
  void MergeFrom(const ChangeLocationAuthorizationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChangeLocationAuthorizationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fleet_uri = 1;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 1;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string actor_username = 2;
  void clear_actor_username();
  static const int kActorUsernameFieldNumber = 2;
  const ::std::string& actor_username() const;
  void set_actor_username(const ::std::string& value);
  #if LANG_CXX11
  void set_actor_username(::std::string&& value);
  #endif
  void set_actor_username(const char* value);
  void set_actor_username(const char* value, size_t size);
  ::std::string* mutable_actor_username();
  ::std::string* release_actor_username();
  void set_allocated_actor_username(::std::string* actor_username);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // bool is_authorization = 4;
  void clear_is_authorization();
  static const int kIsAuthorizationFieldNumber = 4;
  bool is_authorization() const;
  void set_is_authorization(bool value);

  // @@protoc_insertion_point(class_scope:outer.fleet.ChangeLocationAuthorizationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr actor_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  bool is_authorization_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsChangeLocationAuthorizationRequestImpl();
};
// -------------------------------------------------------------------

class ChangeLocationAuthorizationResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.ChangeLocationAuthorizationResponse) */ {
 public:
  ChangeLocationAuthorizationResponse();
  virtual ~ChangeLocationAuthorizationResponse();

  ChangeLocationAuthorizationResponse(const ChangeLocationAuthorizationResponse& from);

  inline ChangeLocationAuthorizationResponse& operator=(const ChangeLocationAuthorizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeLocationAuthorizationResponse(ChangeLocationAuthorizationResponse&& from) noexcept
    : ChangeLocationAuthorizationResponse() {
    *this = ::std::move(from);
  }

  inline ChangeLocationAuthorizationResponse& operator=(ChangeLocationAuthorizationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeLocationAuthorizationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeLocationAuthorizationResponse* internal_default_instance() {
    return reinterpret_cast<const ChangeLocationAuthorizationResponse*>(
               &_ChangeLocationAuthorizationResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(ChangeLocationAuthorizationResponse* other);
  friend void swap(ChangeLocationAuthorizationResponse& a, ChangeLocationAuthorizationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeLocationAuthorizationResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ChangeLocationAuthorizationResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChangeLocationAuthorizationResponse& from);
  void MergeFrom(const ChangeLocationAuthorizationResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChangeLocationAuthorizationResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.ChangeLocationAuthorizationResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsChangeLocationAuthorizationResponseImpl();
};
// -------------------------------------------------------------------

class ChangeLocationAuthorizationSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.ChangeLocationAuthorizationSignal) */ {
 public:
  ChangeLocationAuthorizationSignal();
  virtual ~ChangeLocationAuthorizationSignal();

  ChangeLocationAuthorizationSignal(const ChangeLocationAuthorizationSignal& from);

  inline ChangeLocationAuthorizationSignal& operator=(const ChangeLocationAuthorizationSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeLocationAuthorizationSignal(ChangeLocationAuthorizationSignal&& from) noexcept
    : ChangeLocationAuthorizationSignal() {
    *this = ::std::move(from);
  }

  inline ChangeLocationAuthorizationSignal& operator=(ChangeLocationAuthorizationSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeLocationAuthorizationSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeLocationAuthorizationSignal* internal_default_instance() {
    return reinterpret_cast<const ChangeLocationAuthorizationSignal*>(
               &_ChangeLocationAuthorizationSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(ChangeLocationAuthorizationSignal* other);
  friend void swap(ChangeLocationAuthorizationSignal& a, ChangeLocationAuthorizationSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeLocationAuthorizationSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  ChangeLocationAuthorizationSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChangeLocationAuthorizationSignal& from);
  void MergeFrom(const ChangeLocationAuthorizationSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChangeLocationAuthorizationSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .outer.fleet.FleetCrew location_authorization_changed_crew = 1;
  bool has_location_authorization_changed_crew() const;
  void clear_location_authorization_changed_crew();
  static const int kLocationAuthorizationChangedCrewFieldNumber = 1;
  const ::outer::fleet::FleetCrew& location_authorization_changed_crew() const;
  ::outer::fleet::FleetCrew* release_location_authorization_changed_crew();
  ::outer::fleet::FleetCrew* mutable_location_authorization_changed_crew();
  void set_allocated_location_authorization_changed_crew(::outer::fleet::FleetCrew* location_authorization_changed_crew);

  // bool is_authorization = 2;
  void clear_is_authorization();
  static const int kIsAuthorizationFieldNumber = 2;
  bool is_authorization() const;
  void set_is_authorization(bool value);

  // @@protoc_insertion_point(class_scope:outer.fleet.ChangeLocationAuthorizationSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::outer::fleet::FleetCrew* location_authorization_changed_crew_;
  bool is_authorization_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsChangeLocationAuthorizationSignalImpl();
};
// -------------------------------------------------------------------

class GetMyFleetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.GetMyFleetRequest) */ {
 public:
  GetMyFleetRequest();
  virtual ~GetMyFleetRequest();

  GetMyFleetRequest(const GetMyFleetRequest& from);

  inline GetMyFleetRequest& operator=(const GetMyFleetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMyFleetRequest(GetMyFleetRequest&& from) noexcept
    : GetMyFleetRequest() {
    *this = ::std::move(from);
  }

  inline GetMyFleetRequest& operator=(GetMyFleetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMyFleetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMyFleetRequest* internal_default_instance() {
    return reinterpret_cast<const GetMyFleetRequest*>(
               &_GetMyFleetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(GetMyFleetRequest* other);
  friend void swap(GetMyFleetRequest& a, GetMyFleetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMyFleetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMyFleetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMyFleetRequest& from);
  void MergeFrom(const GetMyFleetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMyFleetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.fleet.GetMyFleetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsGetMyFleetRequestImpl();
};
// -------------------------------------------------------------------

class GetMyFleetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.GetMyFleetResponse) */ {
 public:
  GetMyFleetResponse();
  virtual ~GetMyFleetResponse();

  GetMyFleetResponse(const GetMyFleetResponse& from);

  inline GetMyFleetResponse& operator=(const GetMyFleetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMyFleetResponse(GetMyFleetResponse&& from) noexcept
    : GetMyFleetResponse() {
    *this = ::std::move(from);
  }

  inline GetMyFleetResponse& operator=(GetMyFleetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMyFleetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMyFleetResponse* internal_default_instance() {
    return reinterpret_cast<const GetMyFleetResponse*>(
               &_GetMyFleetResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(GetMyFleetResponse* other);
  friend void swap(GetMyFleetResponse& a, GetMyFleetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMyFleetResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMyFleetResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMyFleetResponse& from);
  void MergeFrom(const GetMyFleetResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMyFleetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.fleet.FleetInfo fleet_info = 2;
  int fleet_info_size() const;
  void clear_fleet_info();
  static const int kFleetInfoFieldNumber = 2;
  const ::outer::fleet::FleetInfo& fleet_info(int index) const;
  ::outer::fleet::FleetInfo* mutable_fleet_info(int index);
  ::outer::fleet::FleetInfo* add_fleet_info();
  ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetInfo >*
      mutable_fleet_info();
  const ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetInfo >&
      fleet_info() const;

  // string msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.GetMyFleetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetInfo > fleet_info_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsGetMyFleetResponseImpl();
};
// -------------------------------------------------------------------

class GetFleetCrewListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.GetFleetCrewListRequest) */ {
 public:
  GetFleetCrewListRequest();
  virtual ~GetFleetCrewListRequest();

  GetFleetCrewListRequest(const GetFleetCrewListRequest& from);

  inline GetFleetCrewListRequest& operator=(const GetFleetCrewListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFleetCrewListRequest(GetFleetCrewListRequest&& from) noexcept
    : GetFleetCrewListRequest() {
    *this = ::std::move(from);
  }

  inline GetFleetCrewListRequest& operator=(GetFleetCrewListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFleetCrewListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFleetCrewListRequest* internal_default_instance() {
    return reinterpret_cast<const GetFleetCrewListRequest*>(
               &_GetFleetCrewListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(GetFleetCrewListRequest* other);
  friend void swap(GetFleetCrewListRequest& a, GetFleetCrewListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFleetCrewListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetFleetCrewListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetFleetCrewListRequest& from);
  void MergeFrom(const GetFleetCrewListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetFleetCrewListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fleet_uri = 1;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 1;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // uint64 modified = 4;
  void clear_modified();
  static const int kModifiedFieldNumber = 4;
  ::google::protobuf::uint64 modified() const;
  void set_modified(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:outer.fleet.GetFleetCrewListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::uint64 modified_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsGetFleetCrewListRequestImpl();
};
// -------------------------------------------------------------------

class GetFleetCrewListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.GetFleetCrewListResponse) */ {
 public:
  GetFleetCrewListResponse();
  virtual ~GetFleetCrewListResponse();

  GetFleetCrewListResponse(const GetFleetCrewListResponse& from);

  inline GetFleetCrewListResponse& operator=(const GetFleetCrewListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFleetCrewListResponse(GetFleetCrewListResponse&& from) noexcept
    : GetFleetCrewListResponse() {
    *this = ::std::move(from);
  }

  inline GetFleetCrewListResponse& operator=(GetFleetCrewListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFleetCrewListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFleetCrewListResponse* internal_default_instance() {
    return reinterpret_cast<const GetFleetCrewListResponse*>(
               &_GetFleetCrewListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(GetFleetCrewListResponse* other);
  friend void swap(GetFleetCrewListResponse& a, GetFleetCrewListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFleetCrewListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetFleetCrewListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetFleetCrewListResponse& from);
  void MergeFrom(const GetFleetCrewListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetFleetCrewListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.fleet.FleetCrew crews = 2;
  int crews_size() const;
  void clear_crews();
  static const int kCrewsFieldNumber = 2;
  const ::outer::fleet::FleetCrew& crews(int index) const;
  ::outer::fleet::FleetCrew* mutable_crews(int index);
  ::outer::fleet::FleetCrew* add_crews();
  ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew >*
      mutable_crews();
  const ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew >&
      crews() const;

  // string msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.GetFleetCrewListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew > crews_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsGetFleetCrewListResponseImpl();
};
// -------------------------------------------------------------------

class SetFleetAssemblyPointRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.SetFleetAssemblyPointRequest) */ {
 public:
  SetFleetAssemblyPointRequest();
  virtual ~SetFleetAssemblyPointRequest();

  SetFleetAssemblyPointRequest(const SetFleetAssemblyPointRequest& from);

  inline SetFleetAssemblyPointRequest& operator=(const SetFleetAssemblyPointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetFleetAssemblyPointRequest(SetFleetAssemblyPointRequest&& from) noexcept
    : SetFleetAssemblyPointRequest() {
    *this = ::std::move(from);
  }

  inline SetFleetAssemblyPointRequest& operator=(SetFleetAssemblyPointRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetFleetAssemblyPointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetFleetAssemblyPointRequest* internal_default_instance() {
    return reinterpret_cast<const SetFleetAssemblyPointRequest*>(
               &_SetFleetAssemblyPointRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(SetFleetAssemblyPointRequest* other);
  friend void swap(SetFleetAssemblyPointRequest& a, SetFleetAssemblyPointRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetFleetAssemblyPointRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetFleetAssemblyPointRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetFleetAssemblyPointRequest& from);
  void MergeFrom(const SetFleetAssemblyPointRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetFleetAssemblyPointRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string setter_username = 1;
  void clear_setter_username();
  static const int kSetterUsernameFieldNumber = 1;
  const ::std::string& setter_username() const;
  void set_setter_username(const ::std::string& value);
  #if LANG_CXX11
  void set_setter_username(::std::string&& value);
  #endif
  void set_setter_username(const char* value);
  void set_setter_username(const char* value, size_t size);
  ::std::string* mutable_setter_username();
  ::std::string* release_setter_username();
  void set_allocated_setter_username(::std::string* setter_username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string fleet_uri = 3;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 3;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.msg.LocationMessage assembly_point = 4;
  bool has_assembly_point() const;
  void clear_assembly_point();
  static const int kAssemblyPointFieldNumber = 4;
  const ::common::msg::LocationMessage& assembly_point() const;
  ::common::msg::LocationMessage* release_assembly_point();
  ::common::msg::LocationMessage* mutable_assembly_point();
  void set_allocated_assembly_point(::common::msg::LocationMessage* assembly_point);

  // @@protoc_insertion_point(class_scope:outer.fleet.SetFleetAssemblyPointRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr setter_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::common::msg::LocationMessage* assembly_point_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsSetFleetAssemblyPointRequestImpl();
};
// -------------------------------------------------------------------

class SetFleetAssemblyPointResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.SetFleetAssemblyPointResponse) */ {
 public:
  SetFleetAssemblyPointResponse();
  virtual ~SetFleetAssemblyPointResponse();

  SetFleetAssemblyPointResponse(const SetFleetAssemblyPointResponse& from);

  inline SetFleetAssemblyPointResponse& operator=(const SetFleetAssemblyPointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetFleetAssemblyPointResponse(SetFleetAssemblyPointResponse&& from) noexcept
    : SetFleetAssemblyPointResponse() {
    *this = ::std::move(from);
  }

  inline SetFleetAssemblyPointResponse& operator=(SetFleetAssemblyPointResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetFleetAssemblyPointResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetFleetAssemblyPointResponse* internal_default_instance() {
    return reinterpret_cast<const SetFleetAssemblyPointResponse*>(
               &_SetFleetAssemblyPointResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(SetFleetAssemblyPointResponse* other);
  friend void swap(SetFleetAssemblyPointResponse& a, SetFleetAssemblyPointResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetFleetAssemblyPointResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SetFleetAssemblyPointResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetFleetAssemblyPointResponse& from);
  void MergeFrom(const SetFleetAssemblyPointResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetFleetAssemblyPointResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.SetFleetAssemblyPointResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsSetFleetAssemblyPointResponseImpl();
};
// -------------------------------------------------------------------

class AssemblyPointChangedSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.AssemblyPointChangedSignal) */ {
 public:
  AssemblyPointChangedSignal();
  virtual ~AssemblyPointChangedSignal();

  AssemblyPointChangedSignal(const AssemblyPointChangedSignal& from);

  inline AssemblyPointChangedSignal& operator=(const AssemblyPointChangedSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AssemblyPointChangedSignal(AssemblyPointChangedSignal&& from) noexcept
    : AssemblyPointChangedSignal() {
    *this = ::std::move(from);
  }

  inline AssemblyPointChangedSignal& operator=(AssemblyPointChangedSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AssemblyPointChangedSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssemblyPointChangedSignal* internal_default_instance() {
    return reinterpret_cast<const AssemblyPointChangedSignal*>(
               &_AssemblyPointChangedSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(AssemblyPointChangedSignal* other);
  friend void swap(AssemblyPointChangedSignal& a, AssemblyPointChangedSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AssemblyPointChangedSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  AssemblyPointChangedSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AssemblyPointChangedSignal& from);
  void MergeFrom(const AssemblyPointChangedSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AssemblyPointChangedSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.msg.LocationMessage assembly_point = 1;
  bool has_assembly_point() const;
  void clear_assembly_point();
  static const int kAssemblyPointFieldNumber = 1;
  const ::common::msg::LocationMessage& assembly_point() const;
  ::common::msg::LocationMessage* release_assembly_point();
  ::common::msg::LocationMessage* mutable_assembly_point();
  void set_allocated_assembly_point(::common::msg::LocationMessage* assembly_point);

  // .outer.fleet.FleetCrew setter = 2;
  bool has_setter() const;
  void clear_setter();
  static const int kSetterFieldNumber = 2;
  const ::outer::fleet::FleetCrew& setter() const;
  ::outer::fleet::FleetCrew* release_setter();
  ::outer::fleet::FleetCrew* mutable_setter();
  void set_allocated_setter(::outer::fleet::FleetCrew* setter);

  // @@protoc_insertion_point(class_scope:outer.fleet.AssemblyPointChangedSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::msg::LocationMessage* assembly_point_;
  ::outer::fleet::FleetCrew* setter_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsAssemblyPointChangedSignalImpl();
};
// -------------------------------------------------------------------

class GetFleetAssemblyPointRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.GetFleetAssemblyPointRequest) */ {
 public:
  GetFleetAssemblyPointRequest();
  virtual ~GetFleetAssemblyPointRequest();

  GetFleetAssemblyPointRequest(const GetFleetAssemblyPointRequest& from);

  inline GetFleetAssemblyPointRequest& operator=(const GetFleetAssemblyPointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFleetAssemblyPointRequest(GetFleetAssemblyPointRequest&& from) noexcept
    : GetFleetAssemblyPointRequest() {
    *this = ::std::move(from);
  }

  inline GetFleetAssemblyPointRequest& operator=(GetFleetAssemblyPointRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFleetAssemblyPointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFleetAssemblyPointRequest* internal_default_instance() {
    return reinterpret_cast<const GetFleetAssemblyPointRequest*>(
               &_GetFleetAssemblyPointRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(GetFleetAssemblyPointRequest* other);
  friend void swap(GetFleetAssemblyPointRequest& a, GetFleetAssemblyPointRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFleetAssemblyPointRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetFleetAssemblyPointRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetFleetAssemblyPointRequest& from);
  void MergeFrom(const GetFleetAssemblyPointRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetFleetAssemblyPointRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string fleet_uri = 3;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 3;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string msg_id = 4;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 4;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.fleet.GetFleetAssemblyPointRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsGetFleetAssemblyPointRequestImpl();
};
// -------------------------------------------------------------------

class GetFleetAssemblyPointResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.GetFleetAssemblyPointResponse) */ {
 public:
  GetFleetAssemblyPointResponse();
  virtual ~GetFleetAssemblyPointResponse();

  GetFleetAssemblyPointResponse(const GetFleetAssemblyPointResponse& from);

  inline GetFleetAssemblyPointResponse& operator=(const GetFleetAssemblyPointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFleetAssemblyPointResponse(GetFleetAssemblyPointResponse&& from) noexcept
    : GetFleetAssemblyPointResponse() {
    *this = ::std::move(from);
  }

  inline GetFleetAssemblyPointResponse& operator=(GetFleetAssemblyPointResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFleetAssemblyPointResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFleetAssemblyPointResponse* internal_default_instance() {
    return reinterpret_cast<const GetFleetAssemblyPointResponse*>(
               &_GetFleetAssemblyPointResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(GetFleetAssemblyPointResponse* other);
  friend void swap(GetFleetAssemblyPointResponse& a, GetFleetAssemblyPointResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFleetAssemblyPointResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetFleetAssemblyPointResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetFleetAssemblyPointResponse& from);
  void MergeFrom(const GetFleetAssemblyPointResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetFleetAssemblyPointResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.msg.LocationMessage assembly_point = 2;
  bool has_assembly_point() const;
  void clear_assembly_point();
  static const int kAssemblyPointFieldNumber = 2;
  const ::common::msg::LocationMessage& assembly_point() const;
  ::common::msg::LocationMessage* release_assembly_point();
  ::common::msg::LocationMessage* mutable_assembly_point();
  void set_allocated_assembly_point(::common::msg::LocationMessage* assembly_point);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.GetFleetAssemblyPointResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::common::msg::LocationMessage* assembly_point_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsGetFleetAssemblyPointResponseImpl();
};
// -------------------------------------------------------------------

class GetFleetInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.GetFleetInfoRequest) */ {
 public:
  GetFleetInfoRequest();
  virtual ~GetFleetInfoRequest();

  GetFleetInfoRequest(const GetFleetInfoRequest& from);

  inline GetFleetInfoRequest& operator=(const GetFleetInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFleetInfoRequest(GetFleetInfoRequest&& from) noexcept
    : GetFleetInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetFleetInfoRequest& operator=(GetFleetInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFleetInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFleetInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetFleetInfoRequest*>(
               &_GetFleetInfoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(GetFleetInfoRequest* other);
  friend void swap(GetFleetInfoRequest& a, GetFleetInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFleetInfoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetFleetInfoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetFleetInfoRequest& from);
  void MergeFrom(const GetFleetInfoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetFleetInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string fleet_uri = 3;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 3;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string msg_id = 4;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 4;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.fleet.GetFleetInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsGetFleetInfoRequestImpl();
};
// -------------------------------------------------------------------

class GetFleetInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.GetFleetInfoResponse) */ {
 public:
  GetFleetInfoResponse();
  virtual ~GetFleetInfoResponse();

  GetFleetInfoResponse(const GetFleetInfoResponse& from);

  inline GetFleetInfoResponse& operator=(const GetFleetInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFleetInfoResponse(GetFleetInfoResponse&& from) noexcept
    : GetFleetInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetFleetInfoResponse& operator=(GetFleetInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFleetInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFleetInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetFleetInfoResponse*>(
               &_GetFleetInfoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(GetFleetInfoResponse* other);
  friend void swap(GetFleetInfoResponse& a, GetFleetInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFleetInfoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetFleetInfoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetFleetInfoResponse& from);
  void MergeFrom(const GetFleetInfoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetFleetInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .outer.fleet.FleetInfo fleet_info = 2;
  bool has_fleet_info() const;
  void clear_fleet_info();
  static const int kFleetInfoFieldNumber = 2;
  const ::outer::fleet::FleetInfo& fleet_info() const;
  ::outer::fleet::FleetInfo* release_fleet_info();
  ::outer::fleet::FleetInfo* mutable_fleet_info();
  void set_allocated_fleet_info(::outer::fleet::FleetInfo* fleet_info);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.GetFleetInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::outer::fleet::FleetInfo* fleet_info_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsGetFleetInfoResponseImpl();
};
// -------------------------------------------------------------------

class GetFleetInvitationListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.GetFleetInvitationListRequest) */ {
 public:
  GetFleetInvitationListRequest();
  virtual ~GetFleetInvitationListRequest();

  GetFleetInvitationListRequest(const GetFleetInvitationListRequest& from);

  inline GetFleetInvitationListRequest& operator=(const GetFleetInvitationListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFleetInvitationListRequest(GetFleetInvitationListRequest&& from) noexcept
    : GetFleetInvitationListRequest() {
    *this = ::std::move(from);
  }

  inline GetFleetInvitationListRequest& operator=(GetFleetInvitationListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFleetInvitationListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFleetInvitationListRequest* internal_default_instance() {
    return reinterpret_cast<const GetFleetInvitationListRequest*>(
               &_GetFleetInvitationListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(GetFleetInvitationListRequest* other);
  friend void swap(GetFleetInvitationListRequest& a, GetFleetInvitationListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFleetInvitationListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetFleetInvitationListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetFleetInvitationListRequest& from);
  void MergeFrom(const GetFleetInvitationListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetFleetInvitationListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string appkey = 2;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 2;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string msg_id = 3;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 3;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // uint32 page_index = 4;
  void clear_page_index();
  static const int kPageIndexFieldNumber = 4;
  ::google::protobuf::uint32 page_index() const;
  void set_page_index(::google::protobuf::uint32 value);

  // uint32 page_size = 5;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 5;
  ::google::protobuf::uint32 page_size() const;
  void set_page_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:outer.fleet.GetFleetInvitationListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::uint32 page_index_;
  ::google::protobuf::uint32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsGetFleetInvitationListRequestImpl();
};
// -------------------------------------------------------------------

class GetFleetInvitationListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.GetFleetInvitationListResponse) */ {
 public:
  GetFleetInvitationListResponse();
  virtual ~GetFleetInvitationListResponse();

  GetFleetInvitationListResponse(const GetFleetInvitationListResponse& from);

  inline GetFleetInvitationListResponse& operator=(const GetFleetInvitationListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetFleetInvitationListResponse(GetFleetInvitationListResponse&& from) noexcept
    : GetFleetInvitationListResponse() {
    *this = ::std::move(from);
  }

  inline GetFleetInvitationListResponse& operator=(GetFleetInvitationListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFleetInvitationListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFleetInvitationListResponse* internal_default_instance() {
    return reinterpret_cast<const GetFleetInvitationListResponse*>(
               &_GetFleetInvitationListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(GetFleetInvitationListResponse* other);
  friend void swap(GetFleetInvitationListResponse& a, GetFleetInvitationListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFleetInvitationListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetFleetInvitationListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetFleetInvitationListResponse& from);
  void MergeFrom(const GetFleetInvitationListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetFleetInvitationListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .outer.fleet.InvitationNoticeInfo invitation_notice_info = 2;
  int invitation_notice_info_size() const;
  void clear_invitation_notice_info();
  static const int kInvitationNoticeInfoFieldNumber = 2;
  const ::outer::fleet::InvitationNoticeInfo& invitation_notice_info(int index) const;
  ::outer::fleet::InvitationNoticeInfo* mutable_invitation_notice_info(int index);
  ::outer::fleet::InvitationNoticeInfo* add_invitation_notice_info();
  ::google::protobuf::RepeatedPtrField< ::outer::fleet::InvitationNoticeInfo >*
      mutable_invitation_notice_info();
  const ::google::protobuf::RepeatedPtrField< ::outer::fleet::InvitationNoticeInfo >&
      invitation_notice_info() const;

  // string msg_id = 4;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 4;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // uint64 total = 3;
  void clear_total();
  static const int kTotalFieldNumber = 3;
  ::google::protobuf::uint64 total() const;
  void set_total(::google::protobuf::uint64 value);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.GetFleetInvitationListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::outer::fleet::InvitationNoticeInfo > invitation_notice_info_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  ::google::protobuf::uint64 total_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsGetFleetInvitationListResponseImpl();
};
// -------------------------------------------------------------------

class SetFleetNameRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.SetFleetNameRequest) */ {
 public:
  SetFleetNameRequest();
  virtual ~SetFleetNameRequest();

  SetFleetNameRequest(const SetFleetNameRequest& from);

  inline SetFleetNameRequest& operator=(const SetFleetNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetFleetNameRequest(SetFleetNameRequest&& from) noexcept
    : SetFleetNameRequest() {
    *this = ::std::move(from);
  }

  inline SetFleetNameRequest& operator=(SetFleetNameRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetFleetNameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetFleetNameRequest* internal_default_instance() {
    return reinterpret_cast<const SetFleetNameRequest*>(
               &_SetFleetNameRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(SetFleetNameRequest* other);
  friend void swap(SetFleetNameRequest& a, SetFleetNameRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetFleetNameRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetFleetNameRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetFleetNameRequest& from);
  void MergeFrom(const SetFleetNameRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetFleetNameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fleet_uri = 1;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 1;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string actor_username = 2;
  void clear_actor_username();
  static const int kActorUsernameFieldNumber = 2;
  const ::std::string& actor_username() const;
  void set_actor_username(const ::std::string& value);
  #if LANG_CXX11
  void set_actor_username(::std::string&& value);
  #endif
  void set_actor_username(const char* value);
  void set_actor_username(const char* value, size_t size);
  ::std::string* mutable_actor_username();
  ::std::string* release_actor_username();
  void set_allocated_actor_username(::std::string* actor_username);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string fleet_name = 4;
  void clear_fleet_name();
  static const int kFleetNameFieldNumber = 4;
  const ::std::string& fleet_name() const;
  void set_fleet_name(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_name(::std::string&& value);
  #endif
  void set_fleet_name(const char* value);
  void set_fleet_name(const char* value, size_t size);
  ::std::string* mutable_fleet_name();
  ::std::string* release_fleet_name();
  void set_allocated_fleet_name(::std::string* fleet_name);

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.fleet.SetFleetNameRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr actor_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr fleet_name_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsSetFleetNameRequestImpl();
};
// -------------------------------------------------------------------

class SetFleetNameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.SetFleetNameResponse) */ {
 public:
  SetFleetNameResponse();
  virtual ~SetFleetNameResponse();

  SetFleetNameResponse(const SetFleetNameResponse& from);

  inline SetFleetNameResponse& operator=(const SetFleetNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetFleetNameResponse(SetFleetNameResponse&& from) noexcept
    : SetFleetNameResponse() {
    *this = ::std::move(from);
  }

  inline SetFleetNameResponse& operator=(SetFleetNameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetFleetNameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetFleetNameResponse* internal_default_instance() {
    return reinterpret_cast<const SetFleetNameResponse*>(
               &_SetFleetNameResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(SetFleetNameResponse* other);
  friend void swap(SetFleetNameResponse& a, SetFleetNameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetFleetNameResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SetFleetNameResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetFleetNameResponse& from);
  void MergeFrom(const SetFleetNameResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetFleetNameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.SetFleetNameResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsSetFleetNameResponseImpl();
};
// -------------------------------------------------------------------

class FleetNameChangedSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.FleetNameChangedSignal) */ {
 public:
  FleetNameChangedSignal();
  virtual ~FleetNameChangedSignal();

  FleetNameChangedSignal(const FleetNameChangedSignal& from);

  inline FleetNameChangedSignal& operator=(const FleetNameChangedSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleetNameChangedSignal(FleetNameChangedSignal&& from) noexcept
    : FleetNameChangedSignal() {
    *this = ::std::move(from);
  }

  inline FleetNameChangedSignal& operator=(FleetNameChangedSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleetNameChangedSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FleetNameChangedSignal* internal_default_instance() {
    return reinterpret_cast<const FleetNameChangedSignal*>(
               &_FleetNameChangedSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(FleetNameChangedSignal* other);
  friend void swap(FleetNameChangedSignal& a, FleetNameChangedSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleetNameChangedSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  FleetNameChangedSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleetNameChangedSignal& from);
  void MergeFrom(const FleetNameChangedSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleetNameChangedSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fleet_name = 1;
  void clear_fleet_name();
  static const int kFleetNameFieldNumber = 1;
  const ::std::string& fleet_name() const;
  void set_fleet_name(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_name(::std::string&& value);
  #endif
  void set_fleet_name(const char* value);
  void set_fleet_name(const char* value, size_t size);
  ::std::string* mutable_fleet_name();
  ::std::string* release_fleet_name();
  void set_allocated_fleet_name(::std::string* fleet_name);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // .outer.fleet.FleetCrew actor = 2;
  bool has_actor() const;
  void clear_actor();
  static const int kActorFieldNumber = 2;
  const ::outer::fleet::FleetCrew& actor() const;
  ::outer::fleet::FleetCrew* release_actor();
  ::outer::fleet::FleetCrew* mutable_actor();
  void set_allocated_actor(::outer::fleet::FleetCrew* actor);

  // @@protoc_insertion_point(class_scope:outer.fleet.FleetNameChangedSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fleet_name_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::outer::fleet::FleetCrew* actor_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsFleetNameChangedSignalImpl();
};
// -------------------------------------------------------------------

class SetFleetDescRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.SetFleetDescRequest) */ {
 public:
  SetFleetDescRequest();
  virtual ~SetFleetDescRequest();

  SetFleetDescRequest(const SetFleetDescRequest& from);

  inline SetFleetDescRequest& operator=(const SetFleetDescRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetFleetDescRequest(SetFleetDescRequest&& from) noexcept
    : SetFleetDescRequest() {
    *this = ::std::move(from);
  }

  inline SetFleetDescRequest& operator=(SetFleetDescRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetFleetDescRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetFleetDescRequest* internal_default_instance() {
    return reinterpret_cast<const SetFleetDescRequest*>(
               &_SetFleetDescRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(SetFleetDescRequest* other);
  friend void swap(SetFleetDescRequest& a, SetFleetDescRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetFleetDescRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetFleetDescRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetFleetDescRequest& from);
  void MergeFrom(const SetFleetDescRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetFleetDescRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fleet_uri = 1;
  void clear_fleet_uri();
  static const int kFleetUriFieldNumber = 1;
  const ::std::string& fleet_uri() const;
  void set_fleet_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_fleet_uri(::std::string&& value);
  #endif
  void set_fleet_uri(const char* value);
  void set_fleet_uri(const char* value, size_t size);
  ::std::string* mutable_fleet_uri();
  ::std::string* release_fleet_uri();
  void set_allocated_fleet_uri(::std::string* fleet_uri);

  // string actor_username = 2;
  void clear_actor_username();
  static const int kActorUsernameFieldNumber = 2;
  const ::std::string& actor_username() const;
  void set_actor_username(const ::std::string& value);
  #if LANG_CXX11
  void set_actor_username(::std::string&& value);
  #endif
  void set_actor_username(const char* value);
  void set_actor_username(const char* value, size_t size);
  ::std::string* mutable_actor_username();
  ::std::string* release_actor_username();
  void set_allocated_actor_username(::std::string* actor_username);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // string desc = 4;
  void clear_desc();
  static const int kDescFieldNumber = 4;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // string msg_id = 5;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // @@protoc_insertion_point(class_scope:outer.fleet.SetFleetDescRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr fleet_uri_;
  ::google::protobuf::internal::ArenaStringPtr actor_username_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsSetFleetDescRequestImpl();
};
// -------------------------------------------------------------------

class SetFleetDescResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.SetFleetDescResponse) */ {
 public:
  SetFleetDescResponse();
  virtual ~SetFleetDescResponse();

  SetFleetDescResponse(const SetFleetDescResponse& from);

  inline SetFleetDescResponse& operator=(const SetFleetDescResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetFleetDescResponse(SetFleetDescResponse&& from) noexcept
    : SetFleetDescResponse() {
    *this = ::std::move(from);
  }

  inline SetFleetDescResponse& operator=(SetFleetDescResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetFleetDescResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetFleetDescResponse* internal_default_instance() {
    return reinterpret_cast<const SetFleetDescResponse*>(
               &_SetFleetDescResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(SetFleetDescResponse* other);
  friend void swap(SetFleetDescResponse& a, SetFleetDescResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetFleetDescResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SetFleetDescResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetFleetDescResponse& from);
  void MergeFrom(const SetFleetDescResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetFleetDescResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg_id = 2;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  const ::std::string& msg_id() const;
  void set_msg_id(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_id(::std::string&& value);
  #endif
  void set_msg_id(const char* value);
  void set_msg_id(const char* value, size_t size);
  ::std::string* mutable_msg_id();
  ::std::string* release_msg_id();
  void set_allocated_msg_id(::std::string* msg_id);

  // .common.errcode.EErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::common::errcode::EErrorCode ret() const;
  void set_ret(::common::errcode::EErrorCode value);

  // @@protoc_insertion_point(class_scope:outer.fleet.SetFleetDescResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_id_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsSetFleetDescResponseImpl();
};
// -------------------------------------------------------------------

class FleetDescChangedSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:outer.fleet.FleetDescChangedSignal) */ {
 public:
  FleetDescChangedSignal();
  virtual ~FleetDescChangedSignal();

  FleetDescChangedSignal(const FleetDescChangedSignal& from);

  inline FleetDescChangedSignal& operator=(const FleetDescChangedSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleetDescChangedSignal(FleetDescChangedSignal&& from) noexcept
    : FleetDescChangedSignal() {
    *this = ::std::move(from);
  }

  inline FleetDescChangedSignal& operator=(FleetDescChangedSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleetDescChangedSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FleetDescChangedSignal* internal_default_instance() {
    return reinterpret_cast<const FleetDescChangedSignal*>(
               &_FleetDescChangedSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(FleetDescChangedSignal* other);
  friend void swap(FleetDescChangedSignal& a, FleetDescChangedSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleetDescChangedSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  FleetDescChangedSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleetDescChangedSignal& from);
  void MergeFrom(const FleetDescChangedSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleetDescChangedSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string desc = 1;
  void clear_desc();
  static const int kDescFieldNumber = 1;
  const ::std::string& desc() const;
  void set_desc(const ::std::string& value);
  #if LANG_CXX11
  void set_desc(::std::string&& value);
  #endif
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  ::std::string* mutable_desc();
  ::std::string* release_desc();
  void set_allocated_desc(::std::string* desc);

  // string appkey = 3;
  void clear_appkey();
  static const int kAppkeyFieldNumber = 3;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // .outer.fleet.FleetCrew actor = 2;
  bool has_actor() const;
  void clear_actor();
  static const int kActorFieldNumber = 2;
  const ::outer::fleet::FleetCrew& actor() const;
  ::outer::fleet::FleetCrew* release_actor();
  ::outer::fleet::FleetCrew* mutable_actor();
  void set_allocated_actor(::outer::fleet::FleetCrew* actor);

  // @@protoc_insertion_point(class_scope:outer.fleet.FleetDescChangedSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr desc_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::outer::fleet::FleetCrew* actor_;
  mutable int _cached_size_;
  friend struct ::protobuf_outer_2ffleet_2eproto::TableStruct;
  friend void ::protobuf_outer_2ffleet_2eproto::InitDefaultsFleetDescChangedSignalImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FleetInfo

// string fleet_uri = 1;
inline void FleetInfo::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetInfo::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetInfo.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void FleetInfo::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetInfo.fleet_uri)
}
#if LANG_CXX11
inline void FleetInfo::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetInfo.fleet_uri)
}
#endif
inline void FleetInfo::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetInfo.fleet_uri)
}
inline void FleetInfo::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetInfo.fleet_uri)
}
inline ::std::string* FleetInfo::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetInfo.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetInfo::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetInfo.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetInfo::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetInfo.fleet_uri)
}

// string appkey = 2;
inline void FleetInfo::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetInfo::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetInfo.appkey)
  return appkey_.GetNoArena();
}
inline void FleetInfo::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetInfo.appkey)
}
#if LANG_CXX11
inline void FleetInfo::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetInfo.appkey)
}
#endif
inline void FleetInfo::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetInfo.appkey)
}
inline void FleetInfo::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetInfo.appkey)
}
inline ::std::string* FleetInfo::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetInfo.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetInfo::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetInfo.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetInfo::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetInfo.appkey)
}

// string fleet_name = 3;
inline void FleetInfo::clear_fleet_name() {
  fleet_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetInfo::fleet_name() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetInfo.fleet_name)
  return fleet_name_.GetNoArena();
}
inline void FleetInfo::set_fleet_name(const ::std::string& value) {
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetInfo.fleet_name)
}
#if LANG_CXX11
inline void FleetInfo::set_fleet_name(::std::string&& value) {
  
  fleet_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetInfo.fleet_name)
}
#endif
inline void FleetInfo::set_fleet_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetInfo.fleet_name)
}
inline void FleetInfo::set_fleet_name(const char* value, size_t size) {
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetInfo.fleet_name)
}
inline ::std::string* FleetInfo::mutable_fleet_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetInfo.fleet_name)
  return fleet_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetInfo::release_fleet_name() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetInfo.fleet_name)
  
  return fleet_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetInfo::set_allocated_fleet_name(::std::string* fleet_name) {
  if (fleet_name != NULL) {
    
  } else {
    
  }
  fleet_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_name);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetInfo.fleet_name)
}

// uint32 crew_count = 4;
inline void FleetInfo::clear_crew_count() {
  crew_count_ = 0u;
}
inline ::google::protobuf::uint32 FleetInfo::crew_count() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetInfo.crew_count)
  return crew_count_;
}
inline void FleetInfo::set_crew_count(::google::protobuf::uint32 value) {
  
  crew_count_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.FleetInfo.crew_count)
}

// uint64 created = 5;
inline void FleetInfo::clear_created() {
  created_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FleetInfo::created() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetInfo.created)
  return created_;
}
inline void FleetInfo::set_created(::google::protobuf::uint64 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.FleetInfo.created)
}

// string desc = 6;
inline void FleetInfo::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetInfo::desc() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetInfo.desc)
  return desc_.GetNoArena();
}
inline void FleetInfo::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetInfo.desc)
}
#if LANG_CXX11
inline void FleetInfo::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetInfo.desc)
}
#endif
inline void FleetInfo::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetInfo.desc)
}
inline void FleetInfo::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetInfo.desc)
}
inline ::std::string* FleetInfo::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetInfo.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetInfo::release_desc() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetInfo.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetInfo::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetInfo.desc)
}

// .common.msg.LocationMessage assembly_point = 7;
inline bool FleetInfo::has_assembly_point() const {
  return this != internal_default_instance() && assembly_point_ != NULL;
}
inline const ::common::msg::LocationMessage& FleetInfo::assembly_point() const {
  const ::common::msg::LocationMessage* p = assembly_point_;
  // @@protoc_insertion_point(field_get:outer.fleet.FleetInfo.assembly_point)
  return p != NULL ? *p : *reinterpret_cast<const ::common::msg::LocationMessage*>(
      &::common::msg::_LocationMessage_default_instance_);
}
inline ::common::msg::LocationMessage* FleetInfo::release_assembly_point() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetInfo.assembly_point)
  
  ::common::msg::LocationMessage* temp = assembly_point_;
  assembly_point_ = NULL;
  return temp;
}
inline ::common::msg::LocationMessage* FleetInfo::mutable_assembly_point() {
  
  if (assembly_point_ == NULL) {
    assembly_point_ = new ::common::msg::LocationMessage;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetInfo.assembly_point)
  return assembly_point_;
}
inline void FleetInfo::set_allocated_assembly_point(::common::msg::LocationMessage* assembly_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(assembly_point_);
  }
  if (assembly_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      assembly_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, assembly_point, submessage_arena);
    }
    
  } else {
    
  }
  assembly_point_ = assembly_point;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetInfo.assembly_point)
}

// -------------------------------------------------------------------

// FleetCrew

// string username = 1;
inline void FleetCrew::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetCrew::username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetCrew.username)
  return username_.GetNoArena();
}
inline void FleetCrew::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetCrew.username)
}
#if LANG_CXX11
inline void FleetCrew::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetCrew.username)
}
#endif
inline void FleetCrew::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetCrew.username)
}
inline void FleetCrew::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetCrew.username)
}
inline ::std::string* FleetCrew::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetCrew.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetCrew::release_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetCrew.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetCrew::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetCrew.username)
}

// string appkey = 2;
inline void FleetCrew::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetCrew::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetCrew.appkey)
  return appkey_.GetNoArena();
}
inline void FleetCrew::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetCrew.appkey)
}
#if LANG_CXX11
inline void FleetCrew::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetCrew.appkey)
}
#endif
inline void FleetCrew::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetCrew.appkey)
}
inline void FleetCrew::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetCrew.appkey)
}
inline ::std::string* FleetCrew::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetCrew.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetCrew::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetCrew.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetCrew::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetCrew.appkey)
}

// string nick = 3;
inline void FleetCrew::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetCrew::nick() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetCrew.nick)
  return nick_.GetNoArena();
}
inline void FleetCrew::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetCrew.nick)
}
#if LANG_CXX11
inline void FleetCrew::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetCrew.nick)
}
#endif
inline void FleetCrew::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetCrew.nick)
}
inline void FleetCrew::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetCrew.nick)
}
inline ::std::string* FleetCrew::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetCrew.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetCrew::release_nick() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetCrew.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetCrew::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetCrew.nick)
}

// bool is_captain = 4;
inline void FleetCrew::clear_is_captain() {
  is_captain_ = false;
}
inline bool FleetCrew::is_captain() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetCrew.is_captain)
  return is_captain_;
}
inline void FleetCrew::set_is_captain(bool value) {
  
  is_captain_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.FleetCrew.is_captain)
}

// uint64 created = 5;
inline void FleetCrew::clear_created() {
  created_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FleetCrew::created() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetCrew.created)
  return created_;
}
inline void FleetCrew::set_created(::google::protobuf::uint64 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.FleetCrew.created)
}

// .common.enumeration.EEnable enable = 6;
inline void FleetCrew::clear_enable() {
  enable_ = 0;
}
inline ::common::enumeration::EEnable FleetCrew::enable() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetCrew.enable)
  return static_cast< ::common::enumeration::EEnable >(enable_);
}
inline void FleetCrew::set_enable(::common::enumeration::EEnable value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.FleetCrew.enable)
}

// uint64 modified = 7;
inline void FleetCrew::clear_modified() {
  modified_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FleetCrew::modified() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetCrew.modified)
  return modified_;
}
inline void FleetCrew::set_modified(::google::protobuf::uint64 value) {
  
  modified_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.FleetCrew.modified)
}

// bool is_authorization = 8;
inline void FleetCrew::clear_is_authorization() {
  is_authorization_ = false;
}
inline bool FleetCrew::is_authorization() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetCrew.is_authorization)
  return is_authorization_;
}
inline void FleetCrew::set_is_authorization(bool value) {
  
  is_authorization_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.FleetCrew.is_authorization)
}

// string fleet_uri = 9;
inline void FleetCrew::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetCrew::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetCrew.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void FleetCrew::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetCrew.fleet_uri)
}
#if LANG_CXX11
inline void FleetCrew::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetCrew.fleet_uri)
}
#endif
inline void FleetCrew::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetCrew.fleet_uri)
}
inline void FleetCrew::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetCrew.fleet_uri)
}
inline ::std::string* FleetCrew::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetCrew.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetCrew::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetCrew.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetCrew::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetCrew.fleet_uri)
}

// -------------------------------------------------------------------

// InvitationNoticeInfo

// string fleet_uri = 1;
inline void InvitationNoticeInfo::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvitationNoticeInfo::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.InvitationNoticeInfo.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void InvitationNoticeInfo::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.InvitationNoticeInfo.fleet_uri)
}
#if LANG_CXX11
inline void InvitationNoticeInfo::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.InvitationNoticeInfo.fleet_uri)
}
#endif
inline void InvitationNoticeInfo::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.InvitationNoticeInfo.fleet_uri)
}
inline void InvitationNoticeInfo::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.InvitationNoticeInfo.fleet_uri)
}
inline ::std::string* InvitationNoticeInfo::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.InvitationNoticeInfo.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvitationNoticeInfo::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.InvitationNoticeInfo.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvitationNoticeInfo::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.InvitationNoticeInfo.fleet_uri)
}

// string appkey = 2;
inline void InvitationNoticeInfo::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvitationNoticeInfo::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.InvitationNoticeInfo.appkey)
  return appkey_.GetNoArena();
}
inline void InvitationNoticeInfo::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.InvitationNoticeInfo.appkey)
}
#if LANG_CXX11
inline void InvitationNoticeInfo::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.InvitationNoticeInfo.appkey)
}
#endif
inline void InvitationNoticeInfo::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.InvitationNoticeInfo.appkey)
}
inline void InvitationNoticeInfo::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.InvitationNoticeInfo.appkey)
}
inline ::std::string* InvitationNoticeInfo::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.InvitationNoticeInfo.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvitationNoticeInfo::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.InvitationNoticeInfo.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvitationNoticeInfo::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.InvitationNoticeInfo.appkey)
}

// string invitee_username = 3;
inline void InvitationNoticeInfo::clear_invitee_username() {
  invitee_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvitationNoticeInfo::invitee_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.InvitationNoticeInfo.invitee_username)
  return invitee_username_.GetNoArena();
}
inline void InvitationNoticeInfo::set_invitee_username(const ::std::string& value) {
  
  invitee_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.InvitationNoticeInfo.invitee_username)
}
#if LANG_CXX11
inline void InvitationNoticeInfo::set_invitee_username(::std::string&& value) {
  
  invitee_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.InvitationNoticeInfo.invitee_username)
}
#endif
inline void InvitationNoticeInfo::set_invitee_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  invitee_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.InvitationNoticeInfo.invitee_username)
}
inline void InvitationNoticeInfo::set_invitee_username(const char* value, size_t size) {
  
  invitee_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.InvitationNoticeInfo.invitee_username)
}
inline ::std::string* InvitationNoticeInfo::mutable_invitee_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.InvitationNoticeInfo.invitee_username)
  return invitee_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvitationNoticeInfo::release_invitee_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.InvitationNoticeInfo.invitee_username)
  
  return invitee_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvitationNoticeInfo::set_allocated_invitee_username(::std::string* invitee_username) {
  if (invitee_username != NULL) {
    
  } else {
    
  }
  invitee_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invitee_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.InvitationNoticeInfo.invitee_username)
}

// string invitee_nick = 4;
inline void InvitationNoticeInfo::clear_invitee_nick() {
  invitee_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvitationNoticeInfo::invitee_nick() const {
  // @@protoc_insertion_point(field_get:outer.fleet.InvitationNoticeInfo.invitee_nick)
  return invitee_nick_.GetNoArena();
}
inline void InvitationNoticeInfo::set_invitee_nick(const ::std::string& value) {
  
  invitee_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.InvitationNoticeInfo.invitee_nick)
}
#if LANG_CXX11
inline void InvitationNoticeInfo::set_invitee_nick(::std::string&& value) {
  
  invitee_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.InvitationNoticeInfo.invitee_nick)
}
#endif
inline void InvitationNoticeInfo::set_invitee_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  invitee_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.InvitationNoticeInfo.invitee_nick)
}
inline void InvitationNoticeInfo::set_invitee_nick(const char* value, size_t size) {
  
  invitee_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.InvitationNoticeInfo.invitee_nick)
}
inline ::std::string* InvitationNoticeInfo::mutable_invitee_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.InvitationNoticeInfo.invitee_nick)
  return invitee_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvitationNoticeInfo::release_invitee_nick() {
  // @@protoc_insertion_point(field_release:outer.fleet.InvitationNoticeInfo.invitee_nick)
  
  return invitee_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvitationNoticeInfo::set_allocated_invitee_nick(::std::string* invitee_nick) {
  if (invitee_nick != NULL) {
    
  } else {
    
  }
  invitee_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invitee_nick);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.InvitationNoticeInfo.invitee_nick)
}

// string inviter_username = 5;
inline void InvitationNoticeInfo::clear_inviter_username() {
  inviter_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvitationNoticeInfo::inviter_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.InvitationNoticeInfo.inviter_username)
  return inviter_username_.GetNoArena();
}
inline void InvitationNoticeInfo::set_inviter_username(const ::std::string& value) {
  
  inviter_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.InvitationNoticeInfo.inviter_username)
}
#if LANG_CXX11
inline void InvitationNoticeInfo::set_inviter_username(::std::string&& value) {
  
  inviter_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.InvitationNoticeInfo.inviter_username)
}
#endif
inline void InvitationNoticeInfo::set_inviter_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inviter_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.InvitationNoticeInfo.inviter_username)
}
inline void InvitationNoticeInfo::set_inviter_username(const char* value, size_t size) {
  
  inviter_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.InvitationNoticeInfo.inviter_username)
}
inline ::std::string* InvitationNoticeInfo::mutable_inviter_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.InvitationNoticeInfo.inviter_username)
  return inviter_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvitationNoticeInfo::release_inviter_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.InvitationNoticeInfo.inviter_username)
  
  return inviter_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvitationNoticeInfo::set_allocated_inviter_username(::std::string* inviter_username) {
  if (inviter_username != NULL) {
    
  } else {
    
  }
  inviter_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviter_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.InvitationNoticeInfo.inviter_username)
}

// string inviter_nick = 6;
inline void InvitationNoticeInfo::clear_inviter_nick() {
  inviter_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvitationNoticeInfo::inviter_nick() const {
  // @@protoc_insertion_point(field_get:outer.fleet.InvitationNoticeInfo.inviter_nick)
  return inviter_nick_.GetNoArena();
}
inline void InvitationNoticeInfo::set_inviter_nick(const ::std::string& value) {
  
  inviter_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.InvitationNoticeInfo.inviter_nick)
}
#if LANG_CXX11
inline void InvitationNoticeInfo::set_inviter_nick(::std::string&& value) {
  
  inviter_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.InvitationNoticeInfo.inviter_nick)
}
#endif
inline void InvitationNoticeInfo::set_inviter_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inviter_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.InvitationNoticeInfo.inviter_nick)
}
inline void InvitationNoticeInfo::set_inviter_nick(const char* value, size_t size) {
  
  inviter_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.InvitationNoticeInfo.inviter_nick)
}
inline ::std::string* InvitationNoticeInfo::mutable_inviter_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.InvitationNoticeInfo.inviter_nick)
  return inviter_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvitationNoticeInfo::release_inviter_nick() {
  // @@protoc_insertion_point(field_release:outer.fleet.InvitationNoticeInfo.inviter_nick)
  
  return inviter_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvitationNoticeInfo::set_allocated_inviter_nick(::std::string* inviter_nick) {
  if (inviter_nick != NULL) {
    
  } else {
    
  }
  inviter_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviter_nick);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.InvitationNoticeInfo.inviter_nick)
}

// .common.enumeration.EInvitationNoticeStatus status = 7;
inline void InvitationNoticeInfo::clear_status() {
  status_ = 0;
}
inline ::common::enumeration::EInvitationNoticeStatus InvitationNoticeInfo::status() const {
  // @@protoc_insertion_point(field_get:outer.fleet.InvitationNoticeInfo.status)
  return static_cast< ::common::enumeration::EInvitationNoticeStatus >(status_);
}
inline void InvitationNoticeInfo::set_status(::common::enumeration::EInvitationNoticeStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.InvitationNoticeInfo.status)
}

// uint64 created = 8;
inline void InvitationNoticeInfo::clear_created() {
  created_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InvitationNoticeInfo::created() const {
  // @@protoc_insertion_point(field_get:outer.fleet.InvitationNoticeInfo.created)
  return created_;
}
inline void InvitationNoticeInfo::set_created(::google::protobuf::uint64 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.InvitationNoticeInfo.created)
}

// uint64 modified = 9;
inline void InvitationNoticeInfo::clear_modified() {
  modified_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InvitationNoticeInfo::modified() const {
  // @@protoc_insertion_point(field_get:outer.fleet.InvitationNoticeInfo.modified)
  return modified_;
}
inline void InvitationNoticeInfo::set_modified(::google::protobuf::uint64 value) {
  
  modified_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.InvitationNoticeInfo.modified)
}

// string fleet_name = 10;
inline void InvitationNoticeInfo::clear_fleet_name() {
  fleet_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvitationNoticeInfo::fleet_name() const {
  // @@protoc_insertion_point(field_get:outer.fleet.InvitationNoticeInfo.fleet_name)
  return fleet_name_.GetNoArena();
}
inline void InvitationNoticeInfo::set_fleet_name(const ::std::string& value) {
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.InvitationNoticeInfo.fleet_name)
}
#if LANG_CXX11
inline void InvitationNoticeInfo::set_fleet_name(::std::string&& value) {
  
  fleet_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.InvitationNoticeInfo.fleet_name)
}
#endif
inline void InvitationNoticeInfo::set_fleet_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.InvitationNoticeInfo.fleet_name)
}
inline void InvitationNoticeInfo::set_fleet_name(const char* value, size_t size) {
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.InvitationNoticeInfo.fleet_name)
}
inline ::std::string* InvitationNoticeInfo::mutable_fleet_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.InvitationNoticeInfo.fleet_name)
  return fleet_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvitationNoticeInfo::release_fleet_name() {
  // @@protoc_insertion_point(field_release:outer.fleet.InvitationNoticeInfo.fleet_name)
  
  return fleet_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvitationNoticeInfo::set_allocated_fleet_name(::std::string* fleet_name) {
  if (fleet_name != NULL) {
    
  } else {
    
  }
  fleet_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_name);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.InvitationNoticeInfo.fleet_name)
}

// .common.enumeration.EEnable enable = 11;
inline void InvitationNoticeInfo::clear_enable() {
  enable_ = 0;
}
inline ::common::enumeration::EEnable InvitationNoticeInfo::enable() const {
  // @@protoc_insertion_point(field_get:outer.fleet.InvitationNoticeInfo.enable)
  return static_cast< ::common::enumeration::EEnable >(enable_);
}
inline void InvitationNoticeInfo::set_enable(::common::enumeration::EEnable value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.InvitationNoticeInfo.enable)
}

// string invite_reason = 12;
inline void InvitationNoticeInfo::clear_invite_reason() {
  invite_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvitationNoticeInfo::invite_reason() const {
  // @@protoc_insertion_point(field_get:outer.fleet.InvitationNoticeInfo.invite_reason)
  return invite_reason_.GetNoArena();
}
inline void InvitationNoticeInfo::set_invite_reason(const ::std::string& value) {
  
  invite_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.InvitationNoticeInfo.invite_reason)
}
#if LANG_CXX11
inline void InvitationNoticeInfo::set_invite_reason(::std::string&& value) {
  
  invite_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.InvitationNoticeInfo.invite_reason)
}
#endif
inline void InvitationNoticeInfo::set_invite_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  invite_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.InvitationNoticeInfo.invite_reason)
}
inline void InvitationNoticeInfo::set_invite_reason(const char* value, size_t size) {
  
  invite_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.InvitationNoticeInfo.invite_reason)
}
inline ::std::string* InvitationNoticeInfo::mutable_invite_reason() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.InvitationNoticeInfo.invite_reason)
  return invite_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvitationNoticeInfo::release_invite_reason() {
  // @@protoc_insertion_point(field_release:outer.fleet.InvitationNoticeInfo.invite_reason)
  
  return invite_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvitationNoticeInfo::set_allocated_invite_reason(::std::string* invite_reason) {
  if (invite_reason != NULL) {
    
  } else {
    
  }
  invite_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invite_reason);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.InvitationNoticeInfo.invite_reason)
}

// -------------------------------------------------------------------

// FleetSignal

// .outer.fleet.FleetSignalType signal_type = 1;
inline void FleetSignal::clear_signal_type() {
  signal_type_ = 0;
}
inline ::outer::fleet::FleetSignalType FleetSignal::signal_type() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetSignal.signal_type)
  return static_cast< ::outer::fleet::FleetSignalType >(signal_type_);
}
inline void FleetSignal::set_signal_type(::outer::fleet::FleetSignalType value) {
  
  signal_type_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.FleetSignal.signal_type)
}

// bytes data = 2;
inline void FleetSignal::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetSignal::data() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetSignal.data)
  return data_.GetNoArena();
}
inline void FleetSignal::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetSignal.data)
}
#if LANG_CXX11
inline void FleetSignal::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetSignal.data)
}
#endif
inline void FleetSignal::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetSignal.data)
}
inline void FleetSignal::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetSignal.data)
}
inline ::std::string* FleetSignal::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetSignal.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetSignal::release_data() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetSignal.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetSignal::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetSignal.data)
}

// .outer.fleet.FleetInfo Fleet_info = 3;
inline bool FleetSignal::has_fleet_info() const {
  return this != internal_default_instance() && fleet_info_ != NULL;
}
inline void FleetSignal::clear_fleet_info() {
  if (GetArenaNoVirtual() == NULL && fleet_info_ != NULL) {
    delete fleet_info_;
  }
  fleet_info_ = NULL;
}
inline const ::outer::fleet::FleetInfo& FleetSignal::fleet_info() const {
  const ::outer::fleet::FleetInfo* p = fleet_info_;
  // @@protoc_insertion_point(field_get:outer.fleet.FleetSignal.Fleet_info)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetInfo*>(
      &::outer::fleet::_FleetInfo_default_instance_);
}
inline ::outer::fleet::FleetInfo* FleetSignal::release_fleet_info() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetSignal.Fleet_info)
  
  ::outer::fleet::FleetInfo* temp = fleet_info_;
  fleet_info_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetInfo* FleetSignal::mutable_fleet_info() {
  
  if (fleet_info_ == NULL) {
    fleet_info_ = new ::outer::fleet::FleetInfo;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetSignal.Fleet_info)
  return fleet_info_;
}
inline void FleetSignal::set_allocated_fleet_info(::outer::fleet::FleetInfo* fleet_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fleet_info_;
  }
  if (fleet_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fleet_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fleet_info, submessage_arena);
    }
    
  } else {
    
  }
  fleet_info_ = fleet_info;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetSignal.Fleet_info)
}

// uint64 guid = 4;
inline void FleetSignal::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FleetSignal::guid() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetSignal.guid)
  return guid_;
}
inline void FleetSignal::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.FleetSignal.guid)
}

// repeated string receiver = 5;
inline int FleetSignal::receiver_size() const {
  return receiver_.size();
}
inline void FleetSignal::clear_receiver() {
  receiver_.Clear();
}
inline const ::std::string& FleetSignal::receiver(int index) const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetSignal.receiver)
  return receiver_.Get(index);
}
inline ::std::string* FleetSignal::mutable_receiver(int index) {
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetSignal.receiver)
  return receiver_.Mutable(index);
}
inline void FleetSignal::set_receiver(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.fleet.FleetSignal.receiver)
  receiver_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FleetSignal::set_receiver(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.fleet.FleetSignal.receiver)
  receiver_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FleetSignal::set_receiver(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  receiver_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetSignal.receiver)
}
inline void FleetSignal::set_receiver(int index, const char* value, size_t size) {
  receiver_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetSignal.receiver)
}
inline ::std::string* FleetSignal::add_receiver() {
  // @@protoc_insertion_point(field_add_mutable:outer.fleet.FleetSignal.receiver)
  return receiver_.Add();
}
inline void FleetSignal::add_receiver(const ::std::string& value) {
  receiver_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.fleet.FleetSignal.receiver)
}
#if LANG_CXX11
inline void FleetSignal::add_receiver(::std::string&& value) {
  receiver_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.fleet.FleetSignal.receiver)
}
#endif
inline void FleetSignal::add_receiver(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  receiver_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.fleet.FleetSignal.receiver)
}
inline void FleetSignal::add_receiver(const char* value, size_t size) {
  receiver_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.fleet.FleetSignal.receiver)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FleetSignal::receiver() const {
  // @@protoc_insertion_point(field_list:outer.fleet.FleetSignal.receiver)
  return receiver_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FleetSignal::mutable_receiver() {
  // @@protoc_insertion_point(field_mutable_list:outer.fleet.FleetSignal.receiver)
  return &receiver_;
}

// -------------------------------------------------------------------

// FleetMessage

// string from_username = 1;
inline void FleetMessage::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMessage::from_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMessage.from_username)
  return from_username_.GetNoArena();
}
inline void FleetMessage::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMessage.from_username)
}
#if LANG_CXX11
inline void FleetMessage::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMessage.from_username)
}
#endif
inline void FleetMessage::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMessage.from_username)
}
inline void FleetMessage::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMessage.from_username)
}
inline ::std::string* FleetMessage::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMessage.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMessage::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMessage.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMessage::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMessage.from_username)
}

// string from_nick = 2;
inline void FleetMessage::clear_from_nick() {
  from_nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMessage::from_nick() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMessage.from_nick)
  return from_nick_.GetNoArena();
}
inline void FleetMessage::set_from_nick(const ::std::string& value) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMessage.from_nick)
}
#if LANG_CXX11
inline void FleetMessage::set_from_nick(::std::string&& value) {
  
  from_nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMessage.from_nick)
}
#endif
inline void FleetMessage::set_from_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMessage.from_nick)
}
inline void FleetMessage::set_from_nick(const char* value, size_t size) {
  
  from_nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMessage.from_nick)
}
inline ::std::string* FleetMessage::mutable_from_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMessage.from_nick)
  return from_nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMessage::release_from_nick() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMessage.from_nick)
  
  return from_nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMessage::set_allocated_from_nick(::std::string* from_nick) {
  if (from_nick != NULL) {
    
  } else {
    
  }
  from_nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_nick);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMessage.from_nick)
}

// string appkey = 3;
inline void FleetMessage::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMessage::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMessage.appkey)
  return appkey_.GetNoArena();
}
inline void FleetMessage::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMessage.appkey)
}
#if LANG_CXX11
inline void FleetMessage::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMessage.appkey)
}
#endif
inline void FleetMessage::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMessage.appkey)
}
inline void FleetMessage::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMessage.appkey)
}
inline ::std::string* FleetMessage::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMessage.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMessage::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMessage.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMessage::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMessage.appkey)
}

// string fleet_uri = 4;
inline void FleetMessage::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMessage::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMessage.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void FleetMessage::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMessage.fleet_uri)
}
#if LANG_CXX11
inline void FleetMessage::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMessage.fleet_uri)
}
#endif
inline void FleetMessage::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMessage.fleet_uri)
}
inline void FleetMessage::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMessage.fleet_uri)
}
inline ::std::string* FleetMessage::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMessage.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMessage::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMessage.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMessage::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMessage.fleet_uri)
}

// .common.msg.EMsgContentType msg_content_type = 5;
inline void FleetMessage::clear_msg_content_type() {
  msg_content_type_ = 0;
}
inline ::common::msg::EMsgContentType FleetMessage::msg_content_type() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMessage.msg_content_type)
  return static_cast< ::common::msg::EMsgContentType >(msg_content_type_);
}
inline void FleetMessage::set_msg_content_type(::common::msg::EMsgContentType value) {
  
  msg_content_type_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMessage.msg_content_type)
}

// bytes data = 6;
inline void FleetMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMessage::data() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMessage.data)
  return data_.GetNoArena();
}
inline void FleetMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMessage.data)
}
#if LANG_CXX11
inline void FleetMessage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMessage.data)
}
#endif
inline void FleetMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMessage.data)
}
inline void FleetMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMessage.data)
}
inline ::std::string* FleetMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMessage::release_data() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMessage.data)
}

// uint64 guid = 7;
inline void FleetMessage::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FleetMessage::guid() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMessage.guid)
  return guid_;
}
inline void FleetMessage::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMessage.guid)
}

// string msg_id = 8;
inline void FleetMessage::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMessage::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMessage.msg_id)
  return msg_id_.GetNoArena();
}
inline void FleetMessage::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMessage.msg_id)
}
#if LANG_CXX11
inline void FleetMessage::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMessage.msg_id)
}
#endif
inline void FleetMessage::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMessage.msg_id)
}
inline void FleetMessage::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMessage.msg_id)
}
inline ::std::string* FleetMessage::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMessage.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMessage::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMessage.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMessage::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMessage.msg_id)
}

// string fleet_name = 9;
inline void FleetMessage::clear_fleet_name() {
  fleet_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMessage::fleet_name() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMessage.fleet_name)
  return fleet_name_.GetNoArena();
}
inline void FleetMessage::set_fleet_name(const ::std::string& value) {
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMessage.fleet_name)
}
#if LANG_CXX11
inline void FleetMessage::set_fleet_name(::std::string&& value) {
  
  fleet_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMessage.fleet_name)
}
#endif
inline void FleetMessage::set_fleet_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMessage.fleet_name)
}
inline void FleetMessage::set_fleet_name(const char* value, size_t size) {
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMessage.fleet_name)
}
inline ::std::string* FleetMessage::mutable_fleet_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMessage.fleet_name)
  return fleet_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMessage::release_fleet_name() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMessage.fleet_name)
  
  return fleet_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMessage::set_allocated_fleet_name(::std::string* fleet_name) {
  if (fleet_name != NULL) {
    
  } else {
    
  }
  fleet_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_name);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMessage.fleet_name)
}

// bool is_read = 10;
inline void FleetMessage::clear_is_read() {
  is_read_ = false;
}
inline bool FleetMessage::is_read() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMessage.is_read)
  return is_read_;
}
inline void FleetMessage::set_is_read(bool value) {
  
  is_read_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMessage.is_read)
}

// -------------------------------------------------------------------

// SendFleetMessageRequest

// string from_username = 1;
inline void SendFleetMessageRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendFleetMessageRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SendFleetMessageRequest.from_username)
  return from_username_.GetNoArena();
}
inline void SendFleetMessageRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SendFleetMessageRequest.from_username)
}
#if LANG_CXX11
inline void SendFleetMessageRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SendFleetMessageRequest.from_username)
}
#endif
inline void SendFleetMessageRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SendFleetMessageRequest.from_username)
}
inline void SendFleetMessageRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SendFleetMessageRequest.from_username)
}
inline ::std::string* SendFleetMessageRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SendFleetMessageRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendFleetMessageRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.SendFleetMessageRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendFleetMessageRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SendFleetMessageRequest.from_username)
}

// string appkey = 2;
inline void SendFleetMessageRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendFleetMessageRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SendFleetMessageRequest.appkey)
  return appkey_.GetNoArena();
}
inline void SendFleetMessageRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SendFleetMessageRequest.appkey)
}
#if LANG_CXX11
inline void SendFleetMessageRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SendFleetMessageRequest.appkey)
}
#endif
inline void SendFleetMessageRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SendFleetMessageRequest.appkey)
}
inline void SendFleetMessageRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SendFleetMessageRequest.appkey)
}
inline ::std::string* SendFleetMessageRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SendFleetMessageRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendFleetMessageRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.SendFleetMessageRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendFleetMessageRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SendFleetMessageRequest.appkey)
}

// string fleet_uri = 3;
inline void SendFleetMessageRequest::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendFleetMessageRequest::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SendFleetMessageRequest.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void SendFleetMessageRequest::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SendFleetMessageRequest.fleet_uri)
}
#if LANG_CXX11
inline void SendFleetMessageRequest::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SendFleetMessageRequest.fleet_uri)
}
#endif
inline void SendFleetMessageRequest::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SendFleetMessageRequest.fleet_uri)
}
inline void SendFleetMessageRequest::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SendFleetMessageRequest.fleet_uri)
}
inline ::std::string* SendFleetMessageRequest::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SendFleetMessageRequest.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendFleetMessageRequest::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.SendFleetMessageRequest.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendFleetMessageRequest::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SendFleetMessageRequest.fleet_uri)
}

// .common.msg.EMsgContentType msg_content_type = 4;
inline void SendFleetMessageRequest::clear_msg_content_type() {
  msg_content_type_ = 0;
}
inline ::common::msg::EMsgContentType SendFleetMessageRequest::msg_content_type() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SendFleetMessageRequest.msg_content_type)
  return static_cast< ::common::msg::EMsgContentType >(msg_content_type_);
}
inline void SendFleetMessageRequest::set_msg_content_type(::common::msg::EMsgContentType value) {
  
  msg_content_type_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.SendFleetMessageRequest.msg_content_type)
}

// bytes data = 5;
inline void SendFleetMessageRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendFleetMessageRequest::data() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SendFleetMessageRequest.data)
  return data_.GetNoArena();
}
inline void SendFleetMessageRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SendFleetMessageRequest.data)
}
#if LANG_CXX11
inline void SendFleetMessageRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SendFleetMessageRequest.data)
}
#endif
inline void SendFleetMessageRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SendFleetMessageRequest.data)
}
inline void SendFleetMessageRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SendFleetMessageRequest.data)
}
inline ::std::string* SendFleetMessageRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SendFleetMessageRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendFleetMessageRequest::release_data() {
  // @@protoc_insertion_point(field_release:outer.fleet.SendFleetMessageRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendFleetMessageRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SendFleetMessageRequest.data)
}

// string msg_id = 6;
inline void SendFleetMessageRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendFleetMessageRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SendFleetMessageRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void SendFleetMessageRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SendFleetMessageRequest.msg_id)
}
#if LANG_CXX11
inline void SendFleetMessageRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SendFleetMessageRequest.msg_id)
}
#endif
inline void SendFleetMessageRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SendFleetMessageRequest.msg_id)
}
inline void SendFleetMessageRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SendFleetMessageRequest.msg_id)
}
inline ::std::string* SendFleetMessageRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SendFleetMessageRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendFleetMessageRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.SendFleetMessageRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendFleetMessageRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SendFleetMessageRequest.msg_id)
}

// -------------------------------------------------------------------

// SendFleetMessageResponse

// .common.errcode.EErrorCode ret = 1;
inline void SendFleetMessageResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode SendFleetMessageResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SendFleetMessageResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void SendFleetMessageResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.SendFleetMessageResponse.ret)
}

// uint64 guid = 2;
inline void SendFleetMessageResponse::clear_guid() {
  guid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SendFleetMessageResponse::guid() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SendFleetMessageResponse.guid)
  return guid_;
}
inline void SendFleetMessageResponse::set_guid(::google::protobuf::uint64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.SendFleetMessageResponse.guid)
}

// string msg_id = 3;
inline void SendFleetMessageResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendFleetMessageResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SendFleetMessageResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void SendFleetMessageResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SendFleetMessageResponse.msg_id)
}
#if LANG_CXX11
inline void SendFleetMessageResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SendFleetMessageResponse.msg_id)
}
#endif
inline void SendFleetMessageResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SendFleetMessageResponse.msg_id)
}
inline void SendFleetMessageResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SendFleetMessageResponse.msg_id)
}
inline ::std::string* SendFleetMessageResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SendFleetMessageResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendFleetMessageResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.SendFleetMessageResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendFleetMessageResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SendFleetMessageResponse.msg_id)
}

// -------------------------------------------------------------------

// CreateFleetRequest

// string fleet_name = 1;
inline void CreateFleetRequest::clear_fleet_name() {
  fleet_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateFleetRequest::fleet_name() const {
  // @@protoc_insertion_point(field_get:outer.fleet.CreateFleetRequest.fleet_name)
  return fleet_name_.GetNoArena();
}
inline void CreateFleetRequest::set_fleet_name(const ::std::string& value) {
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.CreateFleetRequest.fleet_name)
}
#if LANG_CXX11
inline void CreateFleetRequest::set_fleet_name(::std::string&& value) {
  
  fleet_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.CreateFleetRequest.fleet_name)
}
#endif
inline void CreateFleetRequest::set_fleet_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.CreateFleetRequest.fleet_name)
}
inline void CreateFleetRequest::set_fleet_name(const char* value, size_t size) {
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.CreateFleetRequest.fleet_name)
}
inline ::std::string* CreateFleetRequest::mutable_fleet_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.CreateFleetRequest.fleet_name)
  return fleet_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateFleetRequest::release_fleet_name() {
  // @@protoc_insertion_point(field_release:outer.fleet.CreateFleetRequest.fleet_name)
  
  return fleet_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateFleetRequest::set_allocated_fleet_name(::std::string* fleet_name) {
  if (fleet_name != NULL) {
    
  } else {
    
  }
  fleet_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_name);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.CreateFleetRequest.fleet_name)
}

// string appkey = 2;
inline void CreateFleetRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateFleetRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.CreateFleetRequest.appkey)
  return appkey_.GetNoArena();
}
inline void CreateFleetRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.CreateFleetRequest.appkey)
}
#if LANG_CXX11
inline void CreateFleetRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.CreateFleetRequest.appkey)
}
#endif
inline void CreateFleetRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.CreateFleetRequest.appkey)
}
inline void CreateFleetRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.CreateFleetRequest.appkey)
}
inline ::std::string* CreateFleetRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.CreateFleetRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateFleetRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.CreateFleetRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateFleetRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.CreateFleetRequest.appkey)
}

// string captain_username = 3;
inline void CreateFleetRequest::clear_captain_username() {
  captain_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateFleetRequest::captain_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.CreateFleetRequest.captain_username)
  return captain_username_.GetNoArena();
}
inline void CreateFleetRequest::set_captain_username(const ::std::string& value) {
  
  captain_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.CreateFleetRequest.captain_username)
}
#if LANG_CXX11
inline void CreateFleetRequest::set_captain_username(::std::string&& value) {
  
  captain_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.CreateFleetRequest.captain_username)
}
#endif
inline void CreateFleetRequest::set_captain_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  captain_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.CreateFleetRequest.captain_username)
}
inline void CreateFleetRequest::set_captain_username(const char* value, size_t size) {
  
  captain_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.CreateFleetRequest.captain_username)
}
inline ::std::string* CreateFleetRequest::mutable_captain_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.CreateFleetRequest.captain_username)
  return captain_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateFleetRequest::release_captain_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.CreateFleetRequest.captain_username)
  
  return captain_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateFleetRequest::set_allocated_captain_username(::std::string* captain_username) {
  if (captain_username != NULL) {
    
  } else {
    
  }
  captain_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), captain_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.CreateFleetRequest.captain_username)
}

// repeated string invitee_username = 4;
inline int CreateFleetRequest::invitee_username_size() const {
  return invitee_username_.size();
}
inline void CreateFleetRequest::clear_invitee_username() {
  invitee_username_.Clear();
}
inline const ::std::string& CreateFleetRequest::invitee_username(int index) const {
  // @@protoc_insertion_point(field_get:outer.fleet.CreateFleetRequest.invitee_username)
  return invitee_username_.Get(index);
}
inline ::std::string* CreateFleetRequest::mutable_invitee_username(int index) {
  // @@protoc_insertion_point(field_mutable:outer.fleet.CreateFleetRequest.invitee_username)
  return invitee_username_.Mutable(index);
}
inline void CreateFleetRequest::set_invitee_username(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.fleet.CreateFleetRequest.invitee_username)
  invitee_username_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CreateFleetRequest::set_invitee_username(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.fleet.CreateFleetRequest.invitee_username)
  invitee_username_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CreateFleetRequest::set_invitee_username(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  invitee_username_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.fleet.CreateFleetRequest.invitee_username)
}
inline void CreateFleetRequest::set_invitee_username(int index, const char* value, size_t size) {
  invitee_username_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.CreateFleetRequest.invitee_username)
}
inline ::std::string* CreateFleetRequest::add_invitee_username() {
  // @@protoc_insertion_point(field_add_mutable:outer.fleet.CreateFleetRequest.invitee_username)
  return invitee_username_.Add();
}
inline void CreateFleetRequest::add_invitee_username(const ::std::string& value) {
  invitee_username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.fleet.CreateFleetRequest.invitee_username)
}
#if LANG_CXX11
inline void CreateFleetRequest::add_invitee_username(::std::string&& value) {
  invitee_username_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.fleet.CreateFleetRequest.invitee_username)
}
#endif
inline void CreateFleetRequest::add_invitee_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  invitee_username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.fleet.CreateFleetRequest.invitee_username)
}
inline void CreateFleetRequest::add_invitee_username(const char* value, size_t size) {
  invitee_username_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.fleet.CreateFleetRequest.invitee_username)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateFleetRequest::invitee_username() const {
  // @@protoc_insertion_point(field_list:outer.fleet.CreateFleetRequest.invitee_username)
  return invitee_username_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateFleetRequest::mutable_invitee_username() {
  // @@protoc_insertion_point(field_mutable_list:outer.fleet.CreateFleetRequest.invitee_username)
  return &invitee_username_;
}

// repeated string member_username = 5;
inline int CreateFleetRequest::member_username_size() const {
  return member_username_.size();
}
inline void CreateFleetRequest::clear_member_username() {
  member_username_.Clear();
}
inline const ::std::string& CreateFleetRequest::member_username(int index) const {
  // @@protoc_insertion_point(field_get:outer.fleet.CreateFleetRequest.member_username)
  return member_username_.Get(index);
}
inline ::std::string* CreateFleetRequest::mutable_member_username(int index) {
  // @@protoc_insertion_point(field_mutable:outer.fleet.CreateFleetRequest.member_username)
  return member_username_.Mutable(index);
}
inline void CreateFleetRequest::set_member_username(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.fleet.CreateFleetRequest.member_username)
  member_username_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CreateFleetRequest::set_member_username(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.fleet.CreateFleetRequest.member_username)
  member_username_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CreateFleetRequest::set_member_username(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  member_username_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.fleet.CreateFleetRequest.member_username)
}
inline void CreateFleetRequest::set_member_username(int index, const char* value, size_t size) {
  member_username_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.CreateFleetRequest.member_username)
}
inline ::std::string* CreateFleetRequest::add_member_username() {
  // @@protoc_insertion_point(field_add_mutable:outer.fleet.CreateFleetRequest.member_username)
  return member_username_.Add();
}
inline void CreateFleetRequest::add_member_username(const ::std::string& value) {
  member_username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.fleet.CreateFleetRequest.member_username)
}
#if LANG_CXX11
inline void CreateFleetRequest::add_member_username(::std::string&& value) {
  member_username_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.fleet.CreateFleetRequest.member_username)
}
#endif
inline void CreateFleetRequest::add_member_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  member_username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.fleet.CreateFleetRequest.member_username)
}
inline void CreateFleetRequest::add_member_username(const char* value, size_t size) {
  member_username_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.fleet.CreateFleetRequest.member_username)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateFleetRequest::member_username() const {
  // @@protoc_insertion_point(field_list:outer.fleet.CreateFleetRequest.member_username)
  return member_username_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateFleetRequest::mutable_member_username() {
  // @@protoc_insertion_point(field_mutable_list:outer.fleet.CreateFleetRequest.member_username)
  return &member_username_;
}

// string invite_reason = 6;
inline void CreateFleetRequest::clear_invite_reason() {
  invite_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateFleetRequest::invite_reason() const {
  // @@protoc_insertion_point(field_get:outer.fleet.CreateFleetRequest.invite_reason)
  return invite_reason_.GetNoArena();
}
inline void CreateFleetRequest::set_invite_reason(const ::std::string& value) {
  
  invite_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.CreateFleetRequest.invite_reason)
}
#if LANG_CXX11
inline void CreateFleetRequest::set_invite_reason(::std::string&& value) {
  
  invite_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.CreateFleetRequest.invite_reason)
}
#endif
inline void CreateFleetRequest::set_invite_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  invite_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.CreateFleetRequest.invite_reason)
}
inline void CreateFleetRequest::set_invite_reason(const char* value, size_t size) {
  
  invite_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.CreateFleetRequest.invite_reason)
}
inline ::std::string* CreateFleetRequest::mutable_invite_reason() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.CreateFleetRequest.invite_reason)
  return invite_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateFleetRequest::release_invite_reason() {
  // @@protoc_insertion_point(field_release:outer.fleet.CreateFleetRequest.invite_reason)
  
  return invite_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateFleetRequest::set_allocated_invite_reason(::std::string* invite_reason) {
  if (invite_reason != NULL) {
    
  } else {
    
  }
  invite_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invite_reason);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.CreateFleetRequest.invite_reason)
}

// string msg_id = 7;
inline void CreateFleetRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateFleetRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.CreateFleetRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void CreateFleetRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.CreateFleetRequest.msg_id)
}
#if LANG_CXX11
inline void CreateFleetRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.CreateFleetRequest.msg_id)
}
#endif
inline void CreateFleetRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.CreateFleetRequest.msg_id)
}
inline void CreateFleetRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.CreateFleetRequest.msg_id)
}
inline ::std::string* CreateFleetRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.CreateFleetRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateFleetRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.CreateFleetRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateFleetRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.CreateFleetRequest.msg_id)
}

// -------------------------------------------------------------------

// CreateFleetResponse

// .common.errcode.EErrorCode ret = 1;
inline void CreateFleetResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode CreateFleetResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.CreateFleetResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void CreateFleetResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.CreateFleetResponse.ret)
}

// .outer.fleet.FleetInfo Fleet_info = 2;
inline bool CreateFleetResponse::has_fleet_info() const {
  return this != internal_default_instance() && fleet_info_ != NULL;
}
inline void CreateFleetResponse::clear_fleet_info() {
  if (GetArenaNoVirtual() == NULL && fleet_info_ != NULL) {
    delete fleet_info_;
  }
  fleet_info_ = NULL;
}
inline const ::outer::fleet::FleetInfo& CreateFleetResponse::fleet_info() const {
  const ::outer::fleet::FleetInfo* p = fleet_info_;
  // @@protoc_insertion_point(field_get:outer.fleet.CreateFleetResponse.Fleet_info)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetInfo*>(
      &::outer::fleet::_FleetInfo_default_instance_);
}
inline ::outer::fleet::FleetInfo* CreateFleetResponse::release_fleet_info() {
  // @@protoc_insertion_point(field_release:outer.fleet.CreateFleetResponse.Fleet_info)
  
  ::outer::fleet::FleetInfo* temp = fleet_info_;
  fleet_info_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetInfo* CreateFleetResponse::mutable_fleet_info() {
  
  if (fleet_info_ == NULL) {
    fleet_info_ = new ::outer::fleet::FleetInfo;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.CreateFleetResponse.Fleet_info)
  return fleet_info_;
}
inline void CreateFleetResponse::set_allocated_fleet_info(::outer::fleet::FleetInfo* fleet_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fleet_info_;
  }
  if (fleet_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fleet_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fleet_info, submessage_arena);
    }
    
  } else {
    
  }
  fleet_info_ = fleet_info;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.CreateFleetResponse.Fleet_info)
}

// string msg_id = 3;
inline void CreateFleetResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateFleetResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.CreateFleetResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void CreateFleetResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.CreateFleetResponse.msg_id)
}
#if LANG_CXX11
inline void CreateFleetResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.CreateFleetResponse.msg_id)
}
#endif
inline void CreateFleetResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.CreateFleetResponse.msg_id)
}
inline void CreateFleetResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.CreateFleetResponse.msg_id)
}
inline ::std::string* CreateFleetResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.CreateFleetResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateFleetResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.CreateFleetResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateFleetResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.CreateFleetResponse.msg_id)
}

// -------------------------------------------------------------------

// FleetCreatedSignal

// .outer.fleet.FleetCrew captain = 1;
inline bool FleetCreatedSignal::has_captain() const {
  return this != internal_default_instance() && captain_ != NULL;
}
inline void FleetCreatedSignal::clear_captain() {
  if (GetArenaNoVirtual() == NULL && captain_ != NULL) {
    delete captain_;
  }
  captain_ = NULL;
}
inline const ::outer::fleet::FleetCrew& FleetCreatedSignal::captain() const {
  const ::outer::fleet::FleetCrew* p = captain_;
  // @@protoc_insertion_point(field_get:outer.fleet.FleetCreatedSignal.captain)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetCrew*>(
      &::outer::fleet::_FleetCrew_default_instance_);
}
inline ::outer::fleet::FleetCrew* FleetCreatedSignal::release_captain() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetCreatedSignal.captain)
  
  ::outer::fleet::FleetCrew* temp = captain_;
  captain_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetCrew* FleetCreatedSignal::mutable_captain() {
  
  if (captain_ == NULL) {
    captain_ = new ::outer::fleet::FleetCrew;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetCreatedSignal.captain)
  return captain_;
}
inline void FleetCreatedSignal::set_allocated_captain(::outer::fleet::FleetCrew* captain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete captain_;
  }
  if (captain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      captain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, captain, submessage_arena);
    }
    
  } else {
    
  }
  captain_ = captain;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetCreatedSignal.captain)
}

// repeated .outer.fleet.FleetCrew member = 2;
inline int FleetCreatedSignal::member_size() const {
  return member_.size();
}
inline void FleetCreatedSignal::clear_member() {
  member_.Clear();
}
inline const ::outer::fleet::FleetCrew& FleetCreatedSignal::member(int index) const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetCreatedSignal.member)
  return member_.Get(index);
}
inline ::outer::fleet::FleetCrew* FleetCreatedSignal::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetCreatedSignal.member)
  return member_.Mutable(index);
}
inline ::outer::fleet::FleetCrew* FleetCreatedSignal::add_member() {
  // @@protoc_insertion_point(field_add:outer.fleet.FleetCreatedSignal.member)
  return member_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew >*
FleetCreatedSignal::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:outer.fleet.FleetCreatedSignal.member)
  return &member_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew >&
FleetCreatedSignal::member() const {
  // @@protoc_insertion_point(field_list:outer.fleet.FleetCreatedSignal.member)
  return member_;
}

// -------------------------------------------------------------------

// InvitingToFleetSignal

// .outer.fleet.FleetCrew from_crew = 1;
inline bool InvitingToFleetSignal::has_from_crew() const {
  return this != internal_default_instance() && from_crew_ != NULL;
}
inline void InvitingToFleetSignal::clear_from_crew() {
  if (GetArenaNoVirtual() == NULL && from_crew_ != NULL) {
    delete from_crew_;
  }
  from_crew_ = NULL;
}
inline const ::outer::fleet::FleetCrew& InvitingToFleetSignal::from_crew() const {
  const ::outer::fleet::FleetCrew* p = from_crew_;
  // @@protoc_insertion_point(field_get:outer.fleet.InvitingToFleetSignal.from_crew)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetCrew*>(
      &::outer::fleet::_FleetCrew_default_instance_);
}
inline ::outer::fleet::FleetCrew* InvitingToFleetSignal::release_from_crew() {
  // @@protoc_insertion_point(field_release:outer.fleet.InvitingToFleetSignal.from_crew)
  
  ::outer::fleet::FleetCrew* temp = from_crew_;
  from_crew_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetCrew* InvitingToFleetSignal::mutable_from_crew() {
  
  if (from_crew_ == NULL) {
    from_crew_ = new ::outer::fleet::FleetCrew;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.InvitingToFleetSignal.from_crew)
  return from_crew_;
}
inline void InvitingToFleetSignal::set_allocated_from_crew(::outer::fleet::FleetCrew* from_crew) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete from_crew_;
  }
  if (from_crew) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from_crew = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from_crew, submessage_arena);
    }
    
  } else {
    
  }
  from_crew_ = from_crew;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.InvitingToFleetSignal.from_crew)
}

// string reason = 2;
inline void InvitingToFleetSignal::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InvitingToFleetSignal::reason() const {
  // @@protoc_insertion_point(field_get:outer.fleet.InvitingToFleetSignal.reason)
  return reason_.GetNoArena();
}
inline void InvitingToFleetSignal::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.InvitingToFleetSignal.reason)
}
#if LANG_CXX11
inline void InvitingToFleetSignal::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.InvitingToFleetSignal.reason)
}
#endif
inline void InvitingToFleetSignal::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.InvitingToFleetSignal.reason)
}
inline void InvitingToFleetSignal::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.InvitingToFleetSignal.reason)
}
inline ::std::string* InvitingToFleetSignal::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.InvitingToFleetSignal.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InvitingToFleetSignal::release_reason() {
  // @@protoc_insertion_point(field_release:outer.fleet.InvitingToFleetSignal.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InvitingToFleetSignal::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.InvitingToFleetSignal.reason)
}

// uint64 invite_time = 3;
inline void InvitingToFleetSignal::clear_invite_time() {
  invite_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InvitingToFleetSignal::invite_time() const {
  // @@protoc_insertion_point(field_get:outer.fleet.InvitingToFleetSignal.invite_time)
  return invite_time_;
}
inline void InvitingToFleetSignal::set_invite_time(::google::protobuf::uint64 value) {
  
  invite_time_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.InvitingToFleetSignal.invite_time)
}

// -------------------------------------------------------------------

// AcceptFleetInvitationRequest

// string fleet_uri = 1;
inline void AcceptFleetInvitationRequest::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcceptFleetInvitationRequest::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.AcceptFleetInvitationRequest.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void AcceptFleetInvitationRequest::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.AcceptFleetInvitationRequest.fleet_uri)
}
#if LANG_CXX11
inline void AcceptFleetInvitationRequest::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.AcceptFleetInvitationRequest.fleet_uri)
}
#endif
inline void AcceptFleetInvitationRequest::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.AcceptFleetInvitationRequest.fleet_uri)
}
inline void AcceptFleetInvitationRequest::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.AcceptFleetInvitationRequest.fleet_uri)
}
inline ::std::string* AcceptFleetInvitationRequest::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.AcceptFleetInvitationRequest.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcceptFleetInvitationRequest::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.AcceptFleetInvitationRequest.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcceptFleetInvitationRequest::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.AcceptFleetInvitationRequest.fleet_uri)
}

// string username = 2;
inline void AcceptFleetInvitationRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcceptFleetInvitationRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.AcceptFleetInvitationRequest.username)
  return username_.GetNoArena();
}
inline void AcceptFleetInvitationRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.AcceptFleetInvitationRequest.username)
}
#if LANG_CXX11
inline void AcceptFleetInvitationRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.AcceptFleetInvitationRequest.username)
}
#endif
inline void AcceptFleetInvitationRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.AcceptFleetInvitationRequest.username)
}
inline void AcceptFleetInvitationRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.AcceptFleetInvitationRequest.username)
}
inline ::std::string* AcceptFleetInvitationRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.AcceptFleetInvitationRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcceptFleetInvitationRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.AcceptFleetInvitationRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcceptFleetInvitationRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.AcceptFleetInvitationRequest.username)
}

// string accept_to_username = 3;
inline void AcceptFleetInvitationRequest::clear_accept_to_username() {
  accept_to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcceptFleetInvitationRequest::accept_to_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.AcceptFleetInvitationRequest.accept_to_username)
  return accept_to_username_.GetNoArena();
}
inline void AcceptFleetInvitationRequest::set_accept_to_username(const ::std::string& value) {
  
  accept_to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.AcceptFleetInvitationRequest.accept_to_username)
}
#if LANG_CXX11
inline void AcceptFleetInvitationRequest::set_accept_to_username(::std::string&& value) {
  
  accept_to_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.AcceptFleetInvitationRequest.accept_to_username)
}
#endif
inline void AcceptFleetInvitationRequest::set_accept_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accept_to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.AcceptFleetInvitationRequest.accept_to_username)
}
inline void AcceptFleetInvitationRequest::set_accept_to_username(const char* value, size_t size) {
  
  accept_to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.AcceptFleetInvitationRequest.accept_to_username)
}
inline ::std::string* AcceptFleetInvitationRequest::mutable_accept_to_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.AcceptFleetInvitationRequest.accept_to_username)
  return accept_to_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcceptFleetInvitationRequest::release_accept_to_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.AcceptFleetInvitationRequest.accept_to_username)
  
  return accept_to_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcceptFleetInvitationRequest::set_allocated_accept_to_username(::std::string* accept_to_username) {
  if (accept_to_username != NULL) {
    
  } else {
    
  }
  accept_to_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accept_to_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.AcceptFleetInvitationRequest.accept_to_username)
}

// string appkey = 4;
inline void AcceptFleetInvitationRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcceptFleetInvitationRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.AcceptFleetInvitationRequest.appkey)
  return appkey_.GetNoArena();
}
inline void AcceptFleetInvitationRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.AcceptFleetInvitationRequest.appkey)
}
#if LANG_CXX11
inline void AcceptFleetInvitationRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.AcceptFleetInvitationRequest.appkey)
}
#endif
inline void AcceptFleetInvitationRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.AcceptFleetInvitationRequest.appkey)
}
inline void AcceptFleetInvitationRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.AcceptFleetInvitationRequest.appkey)
}
inline ::std::string* AcceptFleetInvitationRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.AcceptFleetInvitationRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcceptFleetInvitationRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.AcceptFleetInvitationRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcceptFleetInvitationRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.AcceptFleetInvitationRequest.appkey)
}

// string msg_id = 5;
inline void AcceptFleetInvitationRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcceptFleetInvitationRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.AcceptFleetInvitationRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void AcceptFleetInvitationRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.AcceptFleetInvitationRequest.msg_id)
}
#if LANG_CXX11
inline void AcceptFleetInvitationRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.AcceptFleetInvitationRequest.msg_id)
}
#endif
inline void AcceptFleetInvitationRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.AcceptFleetInvitationRequest.msg_id)
}
inline void AcceptFleetInvitationRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.AcceptFleetInvitationRequest.msg_id)
}
inline ::std::string* AcceptFleetInvitationRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.AcceptFleetInvitationRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcceptFleetInvitationRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.AcceptFleetInvitationRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcceptFleetInvitationRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.AcceptFleetInvitationRequest.msg_id)
}

// -------------------------------------------------------------------

// AcceptFleetInvitationResponse

// .common.errcode.EErrorCode ret = 1;
inline void AcceptFleetInvitationResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode AcceptFleetInvitationResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.AcceptFleetInvitationResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void AcceptFleetInvitationResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.AcceptFleetInvitationResponse.ret)
}

// string msg_id = 2;
inline void AcceptFleetInvitationResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcceptFleetInvitationResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.AcceptFleetInvitationResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void AcceptFleetInvitationResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.AcceptFleetInvitationResponse.msg_id)
}
#if LANG_CXX11
inline void AcceptFleetInvitationResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.AcceptFleetInvitationResponse.msg_id)
}
#endif
inline void AcceptFleetInvitationResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.AcceptFleetInvitationResponse.msg_id)
}
inline void AcceptFleetInvitationResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.AcceptFleetInvitationResponse.msg_id)
}
inline ::std::string* AcceptFleetInvitationResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.AcceptFleetInvitationResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcceptFleetInvitationResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.AcceptFleetInvitationResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcceptFleetInvitationResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.AcceptFleetInvitationResponse.msg_id)
}

// -------------------------------------------------------------------

// AcceptFleetInvitationSignal

// .outer.fleet.FleetCrew accept_from = 1;
inline bool AcceptFleetInvitationSignal::has_accept_from() const {
  return this != internal_default_instance() && accept_from_ != NULL;
}
inline void AcceptFleetInvitationSignal::clear_accept_from() {
  if (GetArenaNoVirtual() == NULL && accept_from_ != NULL) {
    delete accept_from_;
  }
  accept_from_ = NULL;
}
inline const ::outer::fleet::FleetCrew& AcceptFleetInvitationSignal::accept_from() const {
  const ::outer::fleet::FleetCrew* p = accept_from_;
  // @@protoc_insertion_point(field_get:outer.fleet.AcceptFleetInvitationSignal.accept_from)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetCrew*>(
      &::outer::fleet::_FleetCrew_default_instance_);
}
inline ::outer::fleet::FleetCrew* AcceptFleetInvitationSignal::release_accept_from() {
  // @@protoc_insertion_point(field_release:outer.fleet.AcceptFleetInvitationSignal.accept_from)
  
  ::outer::fleet::FleetCrew* temp = accept_from_;
  accept_from_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetCrew* AcceptFleetInvitationSignal::mutable_accept_from() {
  
  if (accept_from_ == NULL) {
    accept_from_ = new ::outer::fleet::FleetCrew;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.AcceptFleetInvitationSignal.accept_from)
  return accept_from_;
}
inline void AcceptFleetInvitationSignal::set_allocated_accept_from(::outer::fleet::FleetCrew* accept_from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete accept_from_;
  }
  if (accept_from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      accept_from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, accept_from, submessage_arena);
    }
    
  } else {
    
  }
  accept_from_ = accept_from;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.AcceptFleetInvitationSignal.accept_from)
}

// -------------------------------------------------------------------

// InviteeJoinFleetSignal

// .outer.fleet.FleetCrew invitee = 2;
inline bool InviteeJoinFleetSignal::has_invitee() const {
  return this != internal_default_instance() && invitee_ != NULL;
}
inline void InviteeJoinFleetSignal::clear_invitee() {
  if (GetArenaNoVirtual() == NULL && invitee_ != NULL) {
    delete invitee_;
  }
  invitee_ = NULL;
}
inline const ::outer::fleet::FleetCrew& InviteeJoinFleetSignal::invitee() const {
  const ::outer::fleet::FleetCrew* p = invitee_;
  // @@protoc_insertion_point(field_get:outer.fleet.InviteeJoinFleetSignal.invitee)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetCrew*>(
      &::outer::fleet::_FleetCrew_default_instance_);
}
inline ::outer::fleet::FleetCrew* InviteeJoinFleetSignal::release_invitee() {
  // @@protoc_insertion_point(field_release:outer.fleet.InviteeJoinFleetSignal.invitee)
  
  ::outer::fleet::FleetCrew* temp = invitee_;
  invitee_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetCrew* InviteeJoinFleetSignal::mutable_invitee() {
  
  if (invitee_ == NULL) {
    invitee_ = new ::outer::fleet::FleetCrew;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.InviteeJoinFleetSignal.invitee)
  return invitee_;
}
inline void InviteeJoinFleetSignal::set_allocated_invitee(::outer::fleet::FleetCrew* invitee) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete invitee_;
  }
  if (invitee) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      invitee = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, invitee, submessage_arena);
    }
    
  } else {
    
  }
  invitee_ = invitee;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.InviteeJoinFleetSignal.invitee)
}

// .outer.fleet.FleetCrew inviter = 3;
inline bool InviteeJoinFleetSignal::has_inviter() const {
  return this != internal_default_instance() && inviter_ != NULL;
}
inline void InviteeJoinFleetSignal::clear_inviter() {
  if (GetArenaNoVirtual() == NULL && inviter_ != NULL) {
    delete inviter_;
  }
  inviter_ = NULL;
}
inline const ::outer::fleet::FleetCrew& InviteeJoinFleetSignal::inviter() const {
  const ::outer::fleet::FleetCrew* p = inviter_;
  // @@protoc_insertion_point(field_get:outer.fleet.InviteeJoinFleetSignal.inviter)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetCrew*>(
      &::outer::fleet::_FleetCrew_default_instance_);
}
inline ::outer::fleet::FleetCrew* InviteeJoinFleetSignal::release_inviter() {
  // @@protoc_insertion_point(field_release:outer.fleet.InviteeJoinFleetSignal.inviter)
  
  ::outer::fleet::FleetCrew* temp = inviter_;
  inviter_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetCrew* InviteeJoinFleetSignal::mutable_inviter() {
  
  if (inviter_ == NULL) {
    inviter_ = new ::outer::fleet::FleetCrew;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.InviteeJoinFleetSignal.inviter)
  return inviter_;
}
inline void InviteeJoinFleetSignal::set_allocated_inviter(::outer::fleet::FleetCrew* inviter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inviter_;
  }
  if (inviter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inviter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inviter, submessage_arena);
    }
    
  } else {
    
  }
  inviter_ = inviter;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.InviteeJoinFleetSignal.inviter)
}

// -------------------------------------------------------------------

// DeclineFleetInvitationRequest

// string fleet_uri = 1;
inline void DeclineFleetInvitationRequest::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeclineFleetInvitationRequest::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.DeclineFleetInvitationRequest.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void DeclineFleetInvitationRequest::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.DeclineFleetInvitationRequest.fleet_uri)
}
#if LANG_CXX11
inline void DeclineFleetInvitationRequest::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.DeclineFleetInvitationRequest.fleet_uri)
}
#endif
inline void DeclineFleetInvitationRequest::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.DeclineFleetInvitationRequest.fleet_uri)
}
inline void DeclineFleetInvitationRequest::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.DeclineFleetInvitationRequest.fleet_uri)
}
inline ::std::string* DeclineFleetInvitationRequest::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.DeclineFleetInvitationRequest.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeclineFleetInvitationRequest::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.DeclineFleetInvitationRequest.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeclineFleetInvitationRequest::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.DeclineFleetInvitationRequest.fleet_uri)
}

// string username = 2;
inline void DeclineFleetInvitationRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeclineFleetInvitationRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.DeclineFleetInvitationRequest.username)
  return username_.GetNoArena();
}
inline void DeclineFleetInvitationRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.DeclineFleetInvitationRequest.username)
}
#if LANG_CXX11
inline void DeclineFleetInvitationRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.DeclineFleetInvitationRequest.username)
}
#endif
inline void DeclineFleetInvitationRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.DeclineFleetInvitationRequest.username)
}
inline void DeclineFleetInvitationRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.DeclineFleetInvitationRequest.username)
}
inline ::std::string* DeclineFleetInvitationRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.DeclineFleetInvitationRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeclineFleetInvitationRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.DeclineFleetInvitationRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeclineFleetInvitationRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.DeclineFleetInvitationRequest.username)
}

// string decline_to_username = 3;
inline void DeclineFleetInvitationRequest::clear_decline_to_username() {
  decline_to_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeclineFleetInvitationRequest::decline_to_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.DeclineFleetInvitationRequest.decline_to_username)
  return decline_to_username_.GetNoArena();
}
inline void DeclineFleetInvitationRequest::set_decline_to_username(const ::std::string& value) {
  
  decline_to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.DeclineFleetInvitationRequest.decline_to_username)
}
#if LANG_CXX11
inline void DeclineFleetInvitationRequest::set_decline_to_username(::std::string&& value) {
  
  decline_to_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.DeclineFleetInvitationRequest.decline_to_username)
}
#endif
inline void DeclineFleetInvitationRequest::set_decline_to_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  decline_to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.DeclineFleetInvitationRequest.decline_to_username)
}
inline void DeclineFleetInvitationRequest::set_decline_to_username(const char* value, size_t size) {
  
  decline_to_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.DeclineFleetInvitationRequest.decline_to_username)
}
inline ::std::string* DeclineFleetInvitationRequest::mutable_decline_to_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.DeclineFleetInvitationRequest.decline_to_username)
  return decline_to_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeclineFleetInvitationRequest::release_decline_to_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.DeclineFleetInvitationRequest.decline_to_username)
  
  return decline_to_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeclineFleetInvitationRequest::set_allocated_decline_to_username(::std::string* decline_to_username) {
  if (decline_to_username != NULL) {
    
  } else {
    
  }
  decline_to_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), decline_to_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.DeclineFleetInvitationRequest.decline_to_username)
}

// string appkey = 4;
inline void DeclineFleetInvitationRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeclineFleetInvitationRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.DeclineFleetInvitationRequest.appkey)
  return appkey_.GetNoArena();
}
inline void DeclineFleetInvitationRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.DeclineFleetInvitationRequest.appkey)
}
#if LANG_CXX11
inline void DeclineFleetInvitationRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.DeclineFleetInvitationRequest.appkey)
}
#endif
inline void DeclineFleetInvitationRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.DeclineFleetInvitationRequest.appkey)
}
inline void DeclineFleetInvitationRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.DeclineFleetInvitationRequest.appkey)
}
inline ::std::string* DeclineFleetInvitationRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.DeclineFleetInvitationRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeclineFleetInvitationRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.DeclineFleetInvitationRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeclineFleetInvitationRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.DeclineFleetInvitationRequest.appkey)
}

// string decline_reason = 5;
inline void DeclineFleetInvitationRequest::clear_decline_reason() {
  decline_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeclineFleetInvitationRequest::decline_reason() const {
  // @@protoc_insertion_point(field_get:outer.fleet.DeclineFleetInvitationRequest.decline_reason)
  return decline_reason_.GetNoArena();
}
inline void DeclineFleetInvitationRequest::set_decline_reason(const ::std::string& value) {
  
  decline_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.DeclineFleetInvitationRequest.decline_reason)
}
#if LANG_CXX11
inline void DeclineFleetInvitationRequest::set_decline_reason(::std::string&& value) {
  
  decline_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.DeclineFleetInvitationRequest.decline_reason)
}
#endif
inline void DeclineFleetInvitationRequest::set_decline_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  decline_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.DeclineFleetInvitationRequest.decline_reason)
}
inline void DeclineFleetInvitationRequest::set_decline_reason(const char* value, size_t size) {
  
  decline_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.DeclineFleetInvitationRequest.decline_reason)
}
inline ::std::string* DeclineFleetInvitationRequest::mutable_decline_reason() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.DeclineFleetInvitationRequest.decline_reason)
  return decline_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeclineFleetInvitationRequest::release_decline_reason() {
  // @@protoc_insertion_point(field_release:outer.fleet.DeclineFleetInvitationRequest.decline_reason)
  
  return decline_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeclineFleetInvitationRequest::set_allocated_decline_reason(::std::string* decline_reason) {
  if (decline_reason != NULL) {
    
  } else {
    
  }
  decline_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), decline_reason);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.DeclineFleetInvitationRequest.decline_reason)
}

// string msg_id = 6;
inline void DeclineFleetInvitationRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeclineFleetInvitationRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.DeclineFleetInvitationRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void DeclineFleetInvitationRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.DeclineFleetInvitationRequest.msg_id)
}
#if LANG_CXX11
inline void DeclineFleetInvitationRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.DeclineFleetInvitationRequest.msg_id)
}
#endif
inline void DeclineFleetInvitationRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.DeclineFleetInvitationRequest.msg_id)
}
inline void DeclineFleetInvitationRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.DeclineFleetInvitationRequest.msg_id)
}
inline ::std::string* DeclineFleetInvitationRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.DeclineFleetInvitationRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeclineFleetInvitationRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.DeclineFleetInvitationRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeclineFleetInvitationRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.DeclineFleetInvitationRequest.msg_id)
}

// -------------------------------------------------------------------

// DeclineFleetInvitationResponse

// .common.errcode.EErrorCode ret = 1;
inline void DeclineFleetInvitationResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode DeclineFleetInvitationResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.DeclineFleetInvitationResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void DeclineFleetInvitationResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.DeclineFleetInvitationResponse.ret)
}

// string msg_id = 2;
inline void DeclineFleetInvitationResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeclineFleetInvitationResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.DeclineFleetInvitationResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void DeclineFleetInvitationResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.DeclineFleetInvitationResponse.msg_id)
}
#if LANG_CXX11
inline void DeclineFleetInvitationResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.DeclineFleetInvitationResponse.msg_id)
}
#endif
inline void DeclineFleetInvitationResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.DeclineFleetInvitationResponse.msg_id)
}
inline void DeclineFleetInvitationResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.DeclineFleetInvitationResponse.msg_id)
}
inline ::std::string* DeclineFleetInvitationResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.DeclineFleetInvitationResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeclineFleetInvitationResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.DeclineFleetInvitationResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeclineFleetInvitationResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.DeclineFleetInvitationResponse.msg_id)
}

// -------------------------------------------------------------------

// FleetInvitationDeclinedSignal

// .outer.fleet.FleetCrew decline_from = 2;
inline bool FleetInvitationDeclinedSignal::has_decline_from() const {
  return this != internal_default_instance() && decline_from_ != NULL;
}
inline void FleetInvitationDeclinedSignal::clear_decline_from() {
  if (GetArenaNoVirtual() == NULL && decline_from_ != NULL) {
    delete decline_from_;
  }
  decline_from_ = NULL;
}
inline const ::outer::fleet::FleetCrew& FleetInvitationDeclinedSignal::decline_from() const {
  const ::outer::fleet::FleetCrew* p = decline_from_;
  // @@protoc_insertion_point(field_get:outer.fleet.FleetInvitationDeclinedSignal.decline_from)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetCrew*>(
      &::outer::fleet::_FleetCrew_default_instance_);
}
inline ::outer::fleet::FleetCrew* FleetInvitationDeclinedSignal::release_decline_from() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetInvitationDeclinedSignal.decline_from)
  
  ::outer::fleet::FleetCrew* temp = decline_from_;
  decline_from_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetCrew* FleetInvitationDeclinedSignal::mutable_decline_from() {
  
  if (decline_from_ == NULL) {
    decline_from_ = new ::outer::fleet::FleetCrew;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetInvitationDeclinedSignal.decline_from)
  return decline_from_;
}
inline void FleetInvitationDeclinedSignal::set_allocated_decline_from(::outer::fleet::FleetCrew* decline_from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete decline_from_;
  }
  if (decline_from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      decline_from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, decline_from, submessage_arena);
    }
    
  } else {
    
  }
  decline_from_ = decline_from;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetInvitationDeclinedSignal.decline_from)
}

// string decline_reason = 3;
inline void FleetInvitationDeclinedSignal::clear_decline_reason() {
  decline_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetInvitationDeclinedSignal::decline_reason() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetInvitationDeclinedSignal.decline_reason)
  return decline_reason_.GetNoArena();
}
inline void FleetInvitationDeclinedSignal::set_decline_reason(const ::std::string& value) {
  
  decline_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetInvitationDeclinedSignal.decline_reason)
}
#if LANG_CXX11
inline void FleetInvitationDeclinedSignal::set_decline_reason(::std::string&& value) {
  
  decline_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetInvitationDeclinedSignal.decline_reason)
}
#endif
inline void FleetInvitationDeclinedSignal::set_decline_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  decline_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetInvitationDeclinedSignal.decline_reason)
}
inline void FleetInvitationDeclinedSignal::set_decline_reason(const char* value, size_t size) {
  
  decline_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetInvitationDeclinedSignal.decline_reason)
}
inline ::std::string* FleetInvitationDeclinedSignal::mutable_decline_reason() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetInvitationDeclinedSignal.decline_reason)
  return decline_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetInvitationDeclinedSignal::release_decline_reason() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetInvitationDeclinedSignal.decline_reason)
  
  return decline_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetInvitationDeclinedSignal::set_allocated_decline_reason(::std::string* decline_reason) {
  if (decline_reason != NULL) {
    
  } else {
    
  }
  decline_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), decline_reason);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetInvitationDeclinedSignal.decline_reason)
}

// -------------------------------------------------------------------

// AddFleetMemberRequest

// string fleet_uri = 1;
inline void AddFleetMemberRequest::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFleetMemberRequest::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.AddFleetMemberRequest.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void AddFleetMemberRequest::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.AddFleetMemberRequest.fleet_uri)
}
#if LANG_CXX11
inline void AddFleetMemberRequest::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.AddFleetMemberRequest.fleet_uri)
}
#endif
inline void AddFleetMemberRequest::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.AddFleetMemberRequest.fleet_uri)
}
inline void AddFleetMemberRequest::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.AddFleetMemberRequest.fleet_uri)
}
inline ::std::string* AddFleetMemberRequest::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.AddFleetMemberRequest.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFleetMemberRequest::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.AddFleetMemberRequest.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFleetMemberRequest::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.AddFleetMemberRequest.fleet_uri)
}

// string from_username = 2;
inline void AddFleetMemberRequest::clear_from_username() {
  from_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFleetMemberRequest::from_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.AddFleetMemberRequest.from_username)
  return from_username_.GetNoArena();
}
inline void AddFleetMemberRequest::set_from_username(const ::std::string& value) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.AddFleetMemberRequest.from_username)
}
#if LANG_CXX11
inline void AddFleetMemberRequest::set_from_username(::std::string&& value) {
  
  from_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.AddFleetMemberRequest.from_username)
}
#endif
inline void AddFleetMemberRequest::set_from_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.AddFleetMemberRequest.from_username)
}
inline void AddFleetMemberRequest::set_from_username(const char* value, size_t size) {
  
  from_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.AddFleetMemberRequest.from_username)
}
inline ::std::string* AddFleetMemberRequest::mutable_from_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.AddFleetMemberRequest.from_username)
  return from_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFleetMemberRequest::release_from_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.AddFleetMemberRequest.from_username)
  
  return from_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFleetMemberRequest::set_allocated_from_username(::std::string* from_username) {
  if (from_username != NULL) {
    
  } else {
    
  }
  from_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.AddFleetMemberRequest.from_username)
}

// string appkey = 3;
inline void AddFleetMemberRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFleetMemberRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.AddFleetMemberRequest.appkey)
  return appkey_.GetNoArena();
}
inline void AddFleetMemberRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.AddFleetMemberRequest.appkey)
}
#if LANG_CXX11
inline void AddFleetMemberRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.AddFleetMemberRequest.appkey)
}
#endif
inline void AddFleetMemberRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.AddFleetMemberRequest.appkey)
}
inline void AddFleetMemberRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.AddFleetMemberRequest.appkey)
}
inline ::std::string* AddFleetMemberRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.AddFleetMemberRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFleetMemberRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.AddFleetMemberRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFleetMemberRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.AddFleetMemberRequest.appkey)
}

// repeated string member_username = 4;
inline int AddFleetMemberRequest::member_username_size() const {
  return member_username_.size();
}
inline void AddFleetMemberRequest::clear_member_username() {
  member_username_.Clear();
}
inline const ::std::string& AddFleetMemberRequest::member_username(int index) const {
  // @@protoc_insertion_point(field_get:outer.fleet.AddFleetMemberRequest.member_username)
  return member_username_.Get(index);
}
inline ::std::string* AddFleetMemberRequest::mutable_member_username(int index) {
  // @@protoc_insertion_point(field_mutable:outer.fleet.AddFleetMemberRequest.member_username)
  return member_username_.Mutable(index);
}
inline void AddFleetMemberRequest::set_member_username(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.fleet.AddFleetMemberRequest.member_username)
  member_username_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AddFleetMemberRequest::set_member_username(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.fleet.AddFleetMemberRequest.member_username)
  member_username_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AddFleetMemberRequest::set_member_username(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  member_username_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.fleet.AddFleetMemberRequest.member_username)
}
inline void AddFleetMemberRequest::set_member_username(int index, const char* value, size_t size) {
  member_username_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.AddFleetMemberRequest.member_username)
}
inline ::std::string* AddFleetMemberRequest::add_member_username() {
  // @@protoc_insertion_point(field_add_mutable:outer.fleet.AddFleetMemberRequest.member_username)
  return member_username_.Add();
}
inline void AddFleetMemberRequest::add_member_username(const ::std::string& value) {
  member_username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.fleet.AddFleetMemberRequest.member_username)
}
#if LANG_CXX11
inline void AddFleetMemberRequest::add_member_username(::std::string&& value) {
  member_username_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.fleet.AddFleetMemberRequest.member_username)
}
#endif
inline void AddFleetMemberRequest::add_member_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  member_username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.fleet.AddFleetMemberRequest.member_username)
}
inline void AddFleetMemberRequest::add_member_username(const char* value, size_t size) {
  member_username_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.fleet.AddFleetMemberRequest.member_username)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddFleetMemberRequest::member_username() const {
  // @@protoc_insertion_point(field_list:outer.fleet.AddFleetMemberRequest.member_username)
  return member_username_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AddFleetMemberRequest::mutable_member_username() {
  // @@protoc_insertion_point(field_mutable_list:outer.fleet.AddFleetMemberRequest.member_username)
  return &member_username_;
}

// string msg_id = 5;
inline void AddFleetMemberRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFleetMemberRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.AddFleetMemberRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void AddFleetMemberRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.AddFleetMemberRequest.msg_id)
}
#if LANG_CXX11
inline void AddFleetMemberRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.AddFleetMemberRequest.msg_id)
}
#endif
inline void AddFleetMemberRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.AddFleetMemberRequest.msg_id)
}
inline void AddFleetMemberRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.AddFleetMemberRequest.msg_id)
}
inline ::std::string* AddFleetMemberRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.AddFleetMemberRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFleetMemberRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.AddFleetMemberRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFleetMemberRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.AddFleetMemberRequest.msg_id)
}

// bool is_direct_pull = 6;
inline void AddFleetMemberRequest::clear_is_direct_pull() {
  is_direct_pull_ = false;
}
inline bool AddFleetMemberRequest::is_direct_pull() const {
  // @@protoc_insertion_point(field_get:outer.fleet.AddFleetMemberRequest.is_direct_pull)
  return is_direct_pull_;
}
inline void AddFleetMemberRequest::set_is_direct_pull(bool value) {
  
  is_direct_pull_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.AddFleetMemberRequest.is_direct_pull)
}

// string invite_reason = 7;
inline void AddFleetMemberRequest::clear_invite_reason() {
  invite_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFleetMemberRequest::invite_reason() const {
  // @@protoc_insertion_point(field_get:outer.fleet.AddFleetMemberRequest.invite_reason)
  return invite_reason_.GetNoArena();
}
inline void AddFleetMemberRequest::set_invite_reason(const ::std::string& value) {
  
  invite_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.AddFleetMemberRequest.invite_reason)
}
#if LANG_CXX11
inline void AddFleetMemberRequest::set_invite_reason(::std::string&& value) {
  
  invite_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.AddFleetMemberRequest.invite_reason)
}
#endif
inline void AddFleetMemberRequest::set_invite_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  invite_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.AddFleetMemberRequest.invite_reason)
}
inline void AddFleetMemberRequest::set_invite_reason(const char* value, size_t size) {
  
  invite_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.AddFleetMemberRequest.invite_reason)
}
inline ::std::string* AddFleetMemberRequest::mutable_invite_reason() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.AddFleetMemberRequest.invite_reason)
  return invite_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFleetMemberRequest::release_invite_reason() {
  // @@protoc_insertion_point(field_release:outer.fleet.AddFleetMemberRequest.invite_reason)
  
  return invite_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFleetMemberRequest::set_allocated_invite_reason(::std::string* invite_reason) {
  if (invite_reason != NULL) {
    
  } else {
    
  }
  invite_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invite_reason);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.AddFleetMemberRequest.invite_reason)
}

// -------------------------------------------------------------------

// AddFleetMemberResponse

// .common.errcode.EErrorCode ret = 1;
inline void AddFleetMemberResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode AddFleetMemberResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.AddFleetMemberResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void AddFleetMemberResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.AddFleetMemberResponse.ret)
}

// string msg_id = 2;
inline void AddFleetMemberResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFleetMemberResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.AddFleetMemberResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void AddFleetMemberResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.AddFleetMemberResponse.msg_id)
}
#if LANG_CXX11
inline void AddFleetMemberResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.AddFleetMemberResponse.msg_id)
}
#endif
inline void AddFleetMemberResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.AddFleetMemberResponse.msg_id)
}
inline void AddFleetMemberResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.AddFleetMemberResponse.msg_id)
}
inline ::std::string* AddFleetMemberResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.AddFleetMemberResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFleetMemberResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.AddFleetMemberResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFleetMemberResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.AddFleetMemberResponse.msg_id)
}

// -------------------------------------------------------------------

// JoinFleetSignal

// repeated .outer.fleet.FleetCrew new_member = 1;
inline int JoinFleetSignal::new_member_size() const {
  return new_member_.size();
}
inline void JoinFleetSignal::clear_new_member() {
  new_member_.Clear();
}
inline const ::outer::fleet::FleetCrew& JoinFleetSignal::new_member(int index) const {
  // @@protoc_insertion_point(field_get:outer.fleet.JoinFleetSignal.new_member)
  return new_member_.Get(index);
}
inline ::outer::fleet::FleetCrew* JoinFleetSignal::mutable_new_member(int index) {
  // @@protoc_insertion_point(field_mutable:outer.fleet.JoinFleetSignal.new_member)
  return new_member_.Mutable(index);
}
inline ::outer::fleet::FleetCrew* JoinFleetSignal::add_new_member() {
  // @@protoc_insertion_point(field_add:outer.fleet.JoinFleetSignal.new_member)
  return new_member_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew >*
JoinFleetSignal::mutable_new_member() {
  // @@protoc_insertion_point(field_mutable_list:outer.fleet.JoinFleetSignal.new_member)
  return &new_member_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew >&
JoinFleetSignal::new_member() const {
  // @@protoc_insertion_point(field_list:outer.fleet.JoinFleetSignal.new_member)
  return new_member_;
}

// .outer.fleet.FleetCrew actor = 2;
inline bool JoinFleetSignal::has_actor() const {
  return this != internal_default_instance() && actor_ != NULL;
}
inline void JoinFleetSignal::clear_actor() {
  if (GetArenaNoVirtual() == NULL && actor_ != NULL) {
    delete actor_;
  }
  actor_ = NULL;
}
inline const ::outer::fleet::FleetCrew& JoinFleetSignal::actor() const {
  const ::outer::fleet::FleetCrew* p = actor_;
  // @@protoc_insertion_point(field_get:outer.fleet.JoinFleetSignal.actor)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetCrew*>(
      &::outer::fleet::_FleetCrew_default_instance_);
}
inline ::outer::fleet::FleetCrew* JoinFleetSignal::release_actor() {
  // @@protoc_insertion_point(field_release:outer.fleet.JoinFleetSignal.actor)
  
  ::outer::fleet::FleetCrew* temp = actor_;
  actor_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetCrew* JoinFleetSignal::mutable_actor() {
  
  if (actor_ == NULL) {
    actor_ = new ::outer::fleet::FleetCrew;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.JoinFleetSignal.actor)
  return actor_;
}
inline void JoinFleetSignal::set_allocated_actor(::outer::fleet::FleetCrew* actor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete actor_;
  }
  if (actor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      actor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.JoinFleetSignal.actor)
}

// -------------------------------------------------------------------

// KickFleetMemberRequest

// string fleet_uri = 1;
inline void KickFleetMemberRequest::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KickFleetMemberRequest::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.KickFleetMemberRequest.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void KickFleetMemberRequest::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.KickFleetMemberRequest.fleet_uri)
}
#if LANG_CXX11
inline void KickFleetMemberRequest::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.KickFleetMemberRequest.fleet_uri)
}
#endif
inline void KickFleetMemberRequest::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.KickFleetMemberRequest.fleet_uri)
}
inline void KickFleetMemberRequest::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.KickFleetMemberRequest.fleet_uri)
}
inline ::std::string* KickFleetMemberRequest::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.KickFleetMemberRequest.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KickFleetMemberRequest::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.KickFleetMemberRequest.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KickFleetMemberRequest::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.KickFleetMemberRequest.fleet_uri)
}

// string kicker_username = 2;
inline void KickFleetMemberRequest::clear_kicker_username() {
  kicker_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KickFleetMemberRequest::kicker_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.KickFleetMemberRequest.kicker_username)
  return kicker_username_.GetNoArena();
}
inline void KickFleetMemberRequest::set_kicker_username(const ::std::string& value) {
  
  kicker_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.KickFleetMemberRequest.kicker_username)
}
#if LANG_CXX11
inline void KickFleetMemberRequest::set_kicker_username(::std::string&& value) {
  
  kicker_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.KickFleetMemberRequest.kicker_username)
}
#endif
inline void KickFleetMemberRequest::set_kicker_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  kicker_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.KickFleetMemberRequest.kicker_username)
}
inline void KickFleetMemberRequest::set_kicker_username(const char* value, size_t size) {
  
  kicker_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.KickFleetMemberRequest.kicker_username)
}
inline ::std::string* KickFleetMemberRequest::mutable_kicker_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.KickFleetMemberRequest.kicker_username)
  return kicker_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KickFleetMemberRequest::release_kicker_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.KickFleetMemberRequest.kicker_username)
  
  return kicker_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KickFleetMemberRequest::set_allocated_kicker_username(::std::string* kicker_username) {
  if (kicker_username != NULL) {
    
  } else {
    
  }
  kicker_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kicker_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.KickFleetMemberRequest.kicker_username)
}

// string appkey = 3;
inline void KickFleetMemberRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KickFleetMemberRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.KickFleetMemberRequest.appkey)
  return appkey_.GetNoArena();
}
inline void KickFleetMemberRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.KickFleetMemberRequest.appkey)
}
#if LANG_CXX11
inline void KickFleetMemberRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.KickFleetMemberRequest.appkey)
}
#endif
inline void KickFleetMemberRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.KickFleetMemberRequest.appkey)
}
inline void KickFleetMemberRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.KickFleetMemberRequest.appkey)
}
inline ::std::string* KickFleetMemberRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.KickFleetMemberRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KickFleetMemberRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.KickFleetMemberRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KickFleetMemberRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.KickFleetMemberRequest.appkey)
}

// repeated string bekicked_username = 4;
inline int KickFleetMemberRequest::bekicked_username_size() const {
  return bekicked_username_.size();
}
inline void KickFleetMemberRequest::clear_bekicked_username() {
  bekicked_username_.Clear();
}
inline const ::std::string& KickFleetMemberRequest::bekicked_username(int index) const {
  // @@protoc_insertion_point(field_get:outer.fleet.KickFleetMemberRequest.bekicked_username)
  return bekicked_username_.Get(index);
}
inline ::std::string* KickFleetMemberRequest::mutable_bekicked_username(int index) {
  // @@protoc_insertion_point(field_mutable:outer.fleet.KickFleetMemberRequest.bekicked_username)
  return bekicked_username_.Mutable(index);
}
inline void KickFleetMemberRequest::set_bekicked_username(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:outer.fleet.KickFleetMemberRequest.bekicked_username)
  bekicked_username_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void KickFleetMemberRequest::set_bekicked_username(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:outer.fleet.KickFleetMemberRequest.bekicked_username)
  bekicked_username_.Mutable(index)->assign(std::move(value));
}
#endif
inline void KickFleetMemberRequest::set_bekicked_username(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bekicked_username_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:outer.fleet.KickFleetMemberRequest.bekicked_username)
}
inline void KickFleetMemberRequest::set_bekicked_username(int index, const char* value, size_t size) {
  bekicked_username_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.KickFleetMemberRequest.bekicked_username)
}
inline ::std::string* KickFleetMemberRequest::add_bekicked_username() {
  // @@protoc_insertion_point(field_add_mutable:outer.fleet.KickFleetMemberRequest.bekicked_username)
  return bekicked_username_.Add();
}
inline void KickFleetMemberRequest::add_bekicked_username(const ::std::string& value) {
  bekicked_username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:outer.fleet.KickFleetMemberRequest.bekicked_username)
}
#if LANG_CXX11
inline void KickFleetMemberRequest::add_bekicked_username(::std::string&& value) {
  bekicked_username_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:outer.fleet.KickFleetMemberRequest.bekicked_username)
}
#endif
inline void KickFleetMemberRequest::add_bekicked_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bekicked_username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:outer.fleet.KickFleetMemberRequest.bekicked_username)
}
inline void KickFleetMemberRequest::add_bekicked_username(const char* value, size_t size) {
  bekicked_username_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:outer.fleet.KickFleetMemberRequest.bekicked_username)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
KickFleetMemberRequest::bekicked_username() const {
  // @@protoc_insertion_point(field_list:outer.fleet.KickFleetMemberRequest.bekicked_username)
  return bekicked_username_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
KickFleetMemberRequest::mutable_bekicked_username() {
  // @@protoc_insertion_point(field_mutable_list:outer.fleet.KickFleetMemberRequest.bekicked_username)
  return &bekicked_username_;
}

// string msg_id = 5;
inline void KickFleetMemberRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KickFleetMemberRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.KickFleetMemberRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void KickFleetMemberRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.KickFleetMemberRequest.msg_id)
}
#if LANG_CXX11
inline void KickFleetMemberRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.KickFleetMemberRequest.msg_id)
}
#endif
inline void KickFleetMemberRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.KickFleetMemberRequest.msg_id)
}
inline void KickFleetMemberRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.KickFleetMemberRequest.msg_id)
}
inline ::std::string* KickFleetMemberRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.KickFleetMemberRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KickFleetMemberRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.KickFleetMemberRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KickFleetMemberRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.KickFleetMemberRequest.msg_id)
}

// -------------------------------------------------------------------

// KickFleetMemberResponse

// .common.errcode.EErrorCode ret = 1;
inline void KickFleetMemberResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode KickFleetMemberResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.KickFleetMemberResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void KickFleetMemberResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.KickFleetMemberResponse.ret)
}

// string msg_id = 2;
inline void KickFleetMemberResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KickFleetMemberResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.KickFleetMemberResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void KickFleetMemberResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.KickFleetMemberResponse.msg_id)
}
#if LANG_CXX11
inline void KickFleetMemberResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.KickFleetMemberResponse.msg_id)
}
#endif
inline void KickFleetMemberResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.KickFleetMemberResponse.msg_id)
}
inline void KickFleetMemberResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.KickFleetMemberResponse.msg_id)
}
inline ::std::string* KickFleetMemberResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.KickFleetMemberResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KickFleetMemberResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.KickFleetMemberResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KickFleetMemberResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.KickFleetMemberResponse.msg_id)
}

// -------------------------------------------------------------------

// FleetMemberKickedSignal

// repeated .outer.fleet.FleetCrew be_kicked = 1;
inline int FleetMemberKickedSignal::be_kicked_size() const {
  return be_kicked_.size();
}
inline void FleetMemberKickedSignal::clear_be_kicked() {
  be_kicked_.Clear();
}
inline const ::outer::fleet::FleetCrew& FleetMemberKickedSignal::be_kicked(int index) const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberKickedSignal.be_kicked)
  return be_kicked_.Get(index);
}
inline ::outer::fleet::FleetCrew* FleetMemberKickedSignal::mutable_be_kicked(int index) {
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMemberKickedSignal.be_kicked)
  return be_kicked_.Mutable(index);
}
inline ::outer::fleet::FleetCrew* FleetMemberKickedSignal::add_be_kicked() {
  // @@protoc_insertion_point(field_add:outer.fleet.FleetMemberKickedSignal.be_kicked)
  return be_kicked_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew >*
FleetMemberKickedSignal::mutable_be_kicked() {
  // @@protoc_insertion_point(field_mutable_list:outer.fleet.FleetMemberKickedSignal.be_kicked)
  return &be_kicked_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew >&
FleetMemberKickedSignal::be_kicked() const {
  // @@protoc_insertion_point(field_list:outer.fleet.FleetMemberKickedSignal.be_kicked)
  return be_kicked_;
}

// .outer.fleet.FleetCrew kicker = 2;
inline bool FleetMemberKickedSignal::has_kicker() const {
  return this != internal_default_instance() && kicker_ != NULL;
}
inline void FleetMemberKickedSignal::clear_kicker() {
  if (GetArenaNoVirtual() == NULL && kicker_ != NULL) {
    delete kicker_;
  }
  kicker_ = NULL;
}
inline const ::outer::fleet::FleetCrew& FleetMemberKickedSignal::kicker() const {
  const ::outer::fleet::FleetCrew* p = kicker_;
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberKickedSignal.kicker)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetCrew*>(
      &::outer::fleet::_FleetCrew_default_instance_);
}
inline ::outer::fleet::FleetCrew* FleetMemberKickedSignal::release_kicker() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMemberKickedSignal.kicker)
  
  ::outer::fleet::FleetCrew* temp = kicker_;
  kicker_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetCrew* FleetMemberKickedSignal::mutable_kicker() {
  
  if (kicker_ == NULL) {
    kicker_ = new ::outer::fleet::FleetCrew;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMemberKickedSignal.kicker)
  return kicker_;
}
inline void FleetMemberKickedSignal::set_allocated_kicker(::outer::fleet::FleetCrew* kicker) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete kicker_;
  }
  if (kicker) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kicker = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kicker, submessage_arena);
    }
    
  } else {
    
  }
  kicker_ = kicker;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMemberKickedSignal.kicker)
}

// -------------------------------------------------------------------

// FleetMemberExitRequest

// string fleet_uri = 1;
inline void FleetMemberExitRequest::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMemberExitRequest::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberExitRequest.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void FleetMemberExitRequest::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMemberExitRequest.fleet_uri)
}
#if LANG_CXX11
inline void FleetMemberExitRequest::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMemberExitRequest.fleet_uri)
}
#endif
inline void FleetMemberExitRequest::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMemberExitRequest.fleet_uri)
}
inline void FleetMemberExitRequest::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMemberExitRequest.fleet_uri)
}
inline ::std::string* FleetMemberExitRequest::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMemberExitRequest.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMemberExitRequest::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMemberExitRequest.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMemberExitRequest::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMemberExitRequest.fleet_uri)
}

// string exiter_username = 2;
inline void FleetMemberExitRequest::clear_exiter_username() {
  exiter_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMemberExitRequest::exiter_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberExitRequest.exiter_username)
  return exiter_username_.GetNoArena();
}
inline void FleetMemberExitRequest::set_exiter_username(const ::std::string& value) {
  
  exiter_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMemberExitRequest.exiter_username)
}
#if LANG_CXX11
inline void FleetMemberExitRequest::set_exiter_username(::std::string&& value) {
  
  exiter_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMemberExitRequest.exiter_username)
}
#endif
inline void FleetMemberExitRequest::set_exiter_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exiter_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMemberExitRequest.exiter_username)
}
inline void FleetMemberExitRequest::set_exiter_username(const char* value, size_t size) {
  
  exiter_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMemberExitRequest.exiter_username)
}
inline ::std::string* FleetMemberExitRequest::mutable_exiter_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMemberExitRequest.exiter_username)
  return exiter_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMemberExitRequest::release_exiter_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMemberExitRequest.exiter_username)
  
  return exiter_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMemberExitRequest::set_allocated_exiter_username(::std::string* exiter_username) {
  if (exiter_username != NULL) {
    
  } else {
    
  }
  exiter_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exiter_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMemberExitRequest.exiter_username)
}

// string appkey = 3;
inline void FleetMemberExitRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMemberExitRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberExitRequest.appkey)
  return appkey_.GetNoArena();
}
inline void FleetMemberExitRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMemberExitRequest.appkey)
}
#if LANG_CXX11
inline void FleetMemberExitRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMemberExitRequest.appkey)
}
#endif
inline void FleetMemberExitRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMemberExitRequest.appkey)
}
inline void FleetMemberExitRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMemberExitRequest.appkey)
}
inline ::std::string* FleetMemberExitRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMemberExitRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMemberExitRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMemberExitRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMemberExitRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMemberExitRequest.appkey)
}

// string msg_id = 4;
inline void FleetMemberExitRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMemberExitRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberExitRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void FleetMemberExitRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMemberExitRequest.msg_id)
}
#if LANG_CXX11
inline void FleetMemberExitRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMemberExitRequest.msg_id)
}
#endif
inline void FleetMemberExitRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMemberExitRequest.msg_id)
}
inline void FleetMemberExitRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMemberExitRequest.msg_id)
}
inline ::std::string* FleetMemberExitRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMemberExitRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMemberExitRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMemberExitRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMemberExitRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMemberExitRequest.msg_id)
}

// -------------------------------------------------------------------

// FleetMemberExitResponse

// .common.errcode.EErrorCode ret = 1;
inline void FleetMemberExitResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode FleetMemberExitResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberExitResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void FleetMemberExitResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMemberExitResponse.ret)
}

// string msg_id = 2;
inline void FleetMemberExitResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMemberExitResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberExitResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void FleetMemberExitResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMemberExitResponse.msg_id)
}
#if LANG_CXX11
inline void FleetMemberExitResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMemberExitResponse.msg_id)
}
#endif
inline void FleetMemberExitResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMemberExitResponse.msg_id)
}
inline void FleetMemberExitResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMemberExitResponse.msg_id)
}
inline ::std::string* FleetMemberExitResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMemberExitResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMemberExitResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMemberExitResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMemberExitResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMemberExitResponse.msg_id)
}

// -------------------------------------------------------------------

// FleetMemberExitedSignal

// .outer.fleet.FleetCrew exiter = 1;
inline bool FleetMemberExitedSignal::has_exiter() const {
  return this != internal_default_instance() && exiter_ != NULL;
}
inline void FleetMemberExitedSignal::clear_exiter() {
  if (GetArenaNoVirtual() == NULL && exiter_ != NULL) {
    delete exiter_;
  }
  exiter_ = NULL;
}
inline const ::outer::fleet::FleetCrew& FleetMemberExitedSignal::exiter() const {
  const ::outer::fleet::FleetCrew* p = exiter_;
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberExitedSignal.exiter)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetCrew*>(
      &::outer::fleet::_FleetCrew_default_instance_);
}
inline ::outer::fleet::FleetCrew* FleetMemberExitedSignal::release_exiter() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMemberExitedSignal.exiter)
  
  ::outer::fleet::FleetCrew* temp = exiter_;
  exiter_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetCrew* FleetMemberExitedSignal::mutable_exiter() {
  
  if (exiter_ == NULL) {
    exiter_ = new ::outer::fleet::FleetCrew;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMemberExitedSignal.exiter)
  return exiter_;
}
inline void FleetMemberExitedSignal::set_allocated_exiter(::outer::fleet::FleetCrew* exiter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete exiter_;
  }
  if (exiter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exiter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exiter, submessage_arena);
    }
    
  } else {
    
  }
  exiter_ = exiter;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMemberExitedSignal.exiter)
}

// -------------------------------------------------------------------

// DestroyFleetRequest

// string fleet_uri = 1;
inline void DestroyFleetRequest::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DestroyFleetRequest::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.DestroyFleetRequest.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void DestroyFleetRequest::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.DestroyFleetRequest.fleet_uri)
}
#if LANG_CXX11
inline void DestroyFleetRequest::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.DestroyFleetRequest.fleet_uri)
}
#endif
inline void DestroyFleetRequest::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.DestroyFleetRequest.fleet_uri)
}
inline void DestroyFleetRequest::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.DestroyFleetRequest.fleet_uri)
}
inline ::std::string* DestroyFleetRequest::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.DestroyFleetRequest.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DestroyFleetRequest::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.DestroyFleetRequest.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DestroyFleetRequest::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.DestroyFleetRequest.fleet_uri)
}

// string destroy_username = 2;
inline void DestroyFleetRequest::clear_destroy_username() {
  destroy_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DestroyFleetRequest::destroy_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.DestroyFleetRequest.destroy_username)
  return destroy_username_.GetNoArena();
}
inline void DestroyFleetRequest::set_destroy_username(const ::std::string& value) {
  
  destroy_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.DestroyFleetRequest.destroy_username)
}
#if LANG_CXX11
inline void DestroyFleetRequest::set_destroy_username(::std::string&& value) {
  
  destroy_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.DestroyFleetRequest.destroy_username)
}
#endif
inline void DestroyFleetRequest::set_destroy_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  destroy_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.DestroyFleetRequest.destroy_username)
}
inline void DestroyFleetRequest::set_destroy_username(const char* value, size_t size) {
  
  destroy_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.DestroyFleetRequest.destroy_username)
}
inline ::std::string* DestroyFleetRequest::mutable_destroy_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.DestroyFleetRequest.destroy_username)
  return destroy_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DestroyFleetRequest::release_destroy_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.DestroyFleetRequest.destroy_username)
  
  return destroy_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DestroyFleetRequest::set_allocated_destroy_username(::std::string* destroy_username) {
  if (destroy_username != NULL) {
    
  } else {
    
  }
  destroy_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destroy_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.DestroyFleetRequest.destroy_username)
}

// string appkey = 3;
inline void DestroyFleetRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DestroyFleetRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.DestroyFleetRequest.appkey)
  return appkey_.GetNoArena();
}
inline void DestroyFleetRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.DestroyFleetRequest.appkey)
}
#if LANG_CXX11
inline void DestroyFleetRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.DestroyFleetRequest.appkey)
}
#endif
inline void DestroyFleetRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.DestroyFleetRequest.appkey)
}
inline void DestroyFleetRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.DestroyFleetRequest.appkey)
}
inline ::std::string* DestroyFleetRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.DestroyFleetRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DestroyFleetRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.DestroyFleetRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DestroyFleetRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.DestroyFleetRequest.appkey)
}

// string msg_id = 4;
inline void DestroyFleetRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DestroyFleetRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.DestroyFleetRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void DestroyFleetRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.DestroyFleetRequest.msg_id)
}
#if LANG_CXX11
inline void DestroyFleetRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.DestroyFleetRequest.msg_id)
}
#endif
inline void DestroyFleetRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.DestroyFleetRequest.msg_id)
}
inline void DestroyFleetRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.DestroyFleetRequest.msg_id)
}
inline ::std::string* DestroyFleetRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.DestroyFleetRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DestroyFleetRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.DestroyFleetRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DestroyFleetRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.DestroyFleetRequest.msg_id)
}

// -------------------------------------------------------------------

// DestroyFleetResponse

// .common.errcode.EErrorCode ret = 1;
inline void DestroyFleetResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode DestroyFleetResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.DestroyFleetResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void DestroyFleetResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.DestroyFleetResponse.ret)
}

// string msg_id = 2;
inline void DestroyFleetResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DestroyFleetResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.DestroyFleetResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void DestroyFleetResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.DestroyFleetResponse.msg_id)
}
#if LANG_CXX11
inline void DestroyFleetResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.DestroyFleetResponse.msg_id)
}
#endif
inline void DestroyFleetResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.DestroyFleetResponse.msg_id)
}
inline void DestroyFleetResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.DestroyFleetResponse.msg_id)
}
inline ::std::string* DestroyFleetResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.DestroyFleetResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DestroyFleetResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.DestroyFleetResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DestroyFleetResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.DestroyFleetResponse.msg_id)
}

// -------------------------------------------------------------------

// FleetDestroyedSignal

// .outer.fleet.FleetCrew destroyer = 1;
inline bool FleetDestroyedSignal::has_destroyer() const {
  return this != internal_default_instance() && destroyer_ != NULL;
}
inline void FleetDestroyedSignal::clear_destroyer() {
  if (GetArenaNoVirtual() == NULL && destroyer_ != NULL) {
    delete destroyer_;
  }
  destroyer_ = NULL;
}
inline const ::outer::fleet::FleetCrew& FleetDestroyedSignal::destroyer() const {
  const ::outer::fleet::FleetCrew* p = destroyer_;
  // @@protoc_insertion_point(field_get:outer.fleet.FleetDestroyedSignal.destroyer)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetCrew*>(
      &::outer::fleet::_FleetCrew_default_instance_);
}
inline ::outer::fleet::FleetCrew* FleetDestroyedSignal::release_destroyer() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetDestroyedSignal.destroyer)
  
  ::outer::fleet::FleetCrew* temp = destroyer_;
  destroyer_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetCrew* FleetDestroyedSignal::mutable_destroyer() {
  
  if (destroyer_ == NULL) {
    destroyer_ = new ::outer::fleet::FleetCrew;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetDestroyedSignal.destroyer)
  return destroyer_;
}
inline void FleetDestroyedSignal::set_allocated_destroyer(::outer::fleet::FleetCrew* destroyer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete destroyer_;
  }
  if (destroyer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destroyer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destroyer, submessage_arena);
    }
    
  } else {
    
  }
  destroyer_ = destroyer;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetDestroyedSignal.destroyer)
}

// -------------------------------------------------------------------

// HandoverCaptainRequest

// string fleet_uri = 1;
inline void HandoverCaptainRequest::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HandoverCaptainRequest::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.HandoverCaptainRequest.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void HandoverCaptainRequest::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.HandoverCaptainRequest.fleet_uri)
}
#if LANG_CXX11
inline void HandoverCaptainRequest::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.HandoverCaptainRequest.fleet_uri)
}
#endif
inline void HandoverCaptainRequest::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.HandoverCaptainRequest.fleet_uri)
}
inline void HandoverCaptainRequest::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.HandoverCaptainRequest.fleet_uri)
}
inline ::std::string* HandoverCaptainRequest::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.HandoverCaptainRequest.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HandoverCaptainRequest::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.HandoverCaptainRequest.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HandoverCaptainRequest::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.HandoverCaptainRequest.fleet_uri)
}

// string actor_username = 2;
inline void HandoverCaptainRequest::clear_actor_username() {
  actor_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HandoverCaptainRequest::actor_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.HandoverCaptainRequest.actor_username)
  return actor_username_.GetNoArena();
}
inline void HandoverCaptainRequest::set_actor_username(const ::std::string& value) {
  
  actor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.HandoverCaptainRequest.actor_username)
}
#if LANG_CXX11
inline void HandoverCaptainRequest::set_actor_username(::std::string&& value) {
  
  actor_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.HandoverCaptainRequest.actor_username)
}
#endif
inline void HandoverCaptainRequest::set_actor_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  actor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.HandoverCaptainRequest.actor_username)
}
inline void HandoverCaptainRequest::set_actor_username(const char* value, size_t size) {
  
  actor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.HandoverCaptainRequest.actor_username)
}
inline ::std::string* HandoverCaptainRequest::mutable_actor_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.HandoverCaptainRequest.actor_username)
  return actor_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HandoverCaptainRequest::release_actor_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.HandoverCaptainRequest.actor_username)
  
  return actor_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HandoverCaptainRequest::set_allocated_actor_username(::std::string* actor_username) {
  if (actor_username != NULL) {
    
  } else {
    
  }
  actor_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actor_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.HandoverCaptainRequest.actor_username)
}

// string new_captain_username = 3;
inline void HandoverCaptainRequest::clear_new_captain_username() {
  new_captain_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HandoverCaptainRequest::new_captain_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.HandoverCaptainRequest.new_captain_username)
  return new_captain_username_.GetNoArena();
}
inline void HandoverCaptainRequest::set_new_captain_username(const ::std::string& value) {
  
  new_captain_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.HandoverCaptainRequest.new_captain_username)
}
#if LANG_CXX11
inline void HandoverCaptainRequest::set_new_captain_username(::std::string&& value) {
  
  new_captain_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.HandoverCaptainRequest.new_captain_username)
}
#endif
inline void HandoverCaptainRequest::set_new_captain_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  new_captain_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.HandoverCaptainRequest.new_captain_username)
}
inline void HandoverCaptainRequest::set_new_captain_username(const char* value, size_t size) {
  
  new_captain_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.HandoverCaptainRequest.new_captain_username)
}
inline ::std::string* HandoverCaptainRequest::mutable_new_captain_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.HandoverCaptainRequest.new_captain_username)
  return new_captain_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HandoverCaptainRequest::release_new_captain_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.HandoverCaptainRequest.new_captain_username)
  
  return new_captain_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HandoverCaptainRequest::set_allocated_new_captain_username(::std::string* new_captain_username) {
  if (new_captain_username != NULL) {
    
  } else {
    
  }
  new_captain_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_captain_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.HandoverCaptainRequest.new_captain_username)
}

// string appkey = 4;
inline void HandoverCaptainRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HandoverCaptainRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.HandoverCaptainRequest.appkey)
  return appkey_.GetNoArena();
}
inline void HandoverCaptainRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.HandoverCaptainRequest.appkey)
}
#if LANG_CXX11
inline void HandoverCaptainRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.HandoverCaptainRequest.appkey)
}
#endif
inline void HandoverCaptainRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.HandoverCaptainRequest.appkey)
}
inline void HandoverCaptainRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.HandoverCaptainRequest.appkey)
}
inline ::std::string* HandoverCaptainRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.HandoverCaptainRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HandoverCaptainRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.HandoverCaptainRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HandoverCaptainRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.HandoverCaptainRequest.appkey)
}

// string msg_id = 5;
inline void HandoverCaptainRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HandoverCaptainRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.HandoverCaptainRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void HandoverCaptainRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.HandoverCaptainRequest.msg_id)
}
#if LANG_CXX11
inline void HandoverCaptainRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.HandoverCaptainRequest.msg_id)
}
#endif
inline void HandoverCaptainRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.HandoverCaptainRequest.msg_id)
}
inline void HandoverCaptainRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.HandoverCaptainRequest.msg_id)
}
inline ::std::string* HandoverCaptainRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.HandoverCaptainRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HandoverCaptainRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.HandoverCaptainRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HandoverCaptainRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.HandoverCaptainRequest.msg_id)
}

// -------------------------------------------------------------------

// HandoverCaptainResponse

// .common.errcode.EErrorCode ret = 1;
inline void HandoverCaptainResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode HandoverCaptainResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.HandoverCaptainResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void HandoverCaptainResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.HandoverCaptainResponse.ret)
}

// string msg_id = 2;
inline void HandoverCaptainResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HandoverCaptainResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.HandoverCaptainResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void HandoverCaptainResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.HandoverCaptainResponse.msg_id)
}
#if LANG_CXX11
inline void HandoverCaptainResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.HandoverCaptainResponse.msg_id)
}
#endif
inline void HandoverCaptainResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.HandoverCaptainResponse.msg_id)
}
inline void HandoverCaptainResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.HandoverCaptainResponse.msg_id)
}
inline ::std::string* HandoverCaptainResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.HandoverCaptainResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HandoverCaptainResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.HandoverCaptainResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HandoverCaptainResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.HandoverCaptainResponse.msg_id)
}

// -------------------------------------------------------------------

// CaptainChangedSignal

// .outer.fleet.FleetCrew new_captain = 1;
inline bool CaptainChangedSignal::has_new_captain() const {
  return this != internal_default_instance() && new_captain_ != NULL;
}
inline void CaptainChangedSignal::clear_new_captain() {
  if (GetArenaNoVirtual() == NULL && new_captain_ != NULL) {
    delete new_captain_;
  }
  new_captain_ = NULL;
}
inline const ::outer::fleet::FleetCrew& CaptainChangedSignal::new_captain() const {
  const ::outer::fleet::FleetCrew* p = new_captain_;
  // @@protoc_insertion_point(field_get:outer.fleet.CaptainChangedSignal.new_captain)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetCrew*>(
      &::outer::fleet::_FleetCrew_default_instance_);
}
inline ::outer::fleet::FleetCrew* CaptainChangedSignal::release_new_captain() {
  // @@protoc_insertion_point(field_release:outer.fleet.CaptainChangedSignal.new_captain)
  
  ::outer::fleet::FleetCrew* temp = new_captain_;
  new_captain_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetCrew* CaptainChangedSignal::mutable_new_captain() {
  
  if (new_captain_ == NULL) {
    new_captain_ = new ::outer::fleet::FleetCrew;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.CaptainChangedSignal.new_captain)
  return new_captain_;
}
inline void CaptainChangedSignal::set_allocated_new_captain(::outer::fleet::FleetCrew* new_captain) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete new_captain_;
  }
  if (new_captain) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_captain = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_captain, submessage_arena);
    }
    
  } else {
    
  }
  new_captain_ = new_captain;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.CaptainChangedSignal.new_captain)
}

// -------------------------------------------------------------------

// FleetMemberChangeNickRequest

// string fleet_uri = 1;
inline void FleetMemberChangeNickRequest::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMemberChangeNickRequest::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberChangeNickRequest.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void FleetMemberChangeNickRequest::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMemberChangeNickRequest.fleet_uri)
}
#if LANG_CXX11
inline void FleetMemberChangeNickRequest::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMemberChangeNickRequest.fleet_uri)
}
#endif
inline void FleetMemberChangeNickRequest::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMemberChangeNickRequest.fleet_uri)
}
inline void FleetMemberChangeNickRequest::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMemberChangeNickRequest.fleet_uri)
}
inline ::std::string* FleetMemberChangeNickRequest::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMemberChangeNickRequest.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMemberChangeNickRequest::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMemberChangeNickRequest.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMemberChangeNickRequest::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMemberChangeNickRequest.fleet_uri)
}

// string actor_username = 2;
inline void FleetMemberChangeNickRequest::clear_actor_username() {
  actor_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMemberChangeNickRequest::actor_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberChangeNickRequest.actor_username)
  return actor_username_.GetNoArena();
}
inline void FleetMemberChangeNickRequest::set_actor_username(const ::std::string& value) {
  
  actor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMemberChangeNickRequest.actor_username)
}
#if LANG_CXX11
inline void FleetMemberChangeNickRequest::set_actor_username(::std::string&& value) {
  
  actor_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMemberChangeNickRequest.actor_username)
}
#endif
inline void FleetMemberChangeNickRequest::set_actor_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  actor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMemberChangeNickRequest.actor_username)
}
inline void FleetMemberChangeNickRequest::set_actor_username(const char* value, size_t size) {
  
  actor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMemberChangeNickRequest.actor_username)
}
inline ::std::string* FleetMemberChangeNickRequest::mutable_actor_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMemberChangeNickRequest.actor_username)
  return actor_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMemberChangeNickRequest::release_actor_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMemberChangeNickRequest.actor_username)
  
  return actor_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMemberChangeNickRequest::set_allocated_actor_username(::std::string* actor_username) {
  if (actor_username != NULL) {
    
  } else {
    
  }
  actor_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actor_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMemberChangeNickRequest.actor_username)
}

// string appkey = 3;
inline void FleetMemberChangeNickRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMemberChangeNickRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberChangeNickRequest.appkey)
  return appkey_.GetNoArena();
}
inline void FleetMemberChangeNickRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMemberChangeNickRequest.appkey)
}
#if LANG_CXX11
inline void FleetMemberChangeNickRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMemberChangeNickRequest.appkey)
}
#endif
inline void FleetMemberChangeNickRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMemberChangeNickRequest.appkey)
}
inline void FleetMemberChangeNickRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMemberChangeNickRequest.appkey)
}
inline ::std::string* FleetMemberChangeNickRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMemberChangeNickRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMemberChangeNickRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMemberChangeNickRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMemberChangeNickRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMemberChangeNickRequest.appkey)
}

// string nick = 4;
inline void FleetMemberChangeNickRequest::clear_nick() {
  nick_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMemberChangeNickRequest::nick() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberChangeNickRequest.nick)
  return nick_.GetNoArena();
}
inline void FleetMemberChangeNickRequest::set_nick(const ::std::string& value) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMemberChangeNickRequest.nick)
}
#if LANG_CXX11
inline void FleetMemberChangeNickRequest::set_nick(::std::string&& value) {
  
  nick_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMemberChangeNickRequest.nick)
}
#endif
inline void FleetMemberChangeNickRequest::set_nick(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMemberChangeNickRequest.nick)
}
inline void FleetMemberChangeNickRequest::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMemberChangeNickRequest.nick)
}
inline ::std::string* FleetMemberChangeNickRequest::mutable_nick() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMemberChangeNickRequest.nick)
  return nick_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMemberChangeNickRequest::release_nick() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMemberChangeNickRequest.nick)
  
  return nick_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMemberChangeNickRequest::set_allocated_nick(::std::string* nick) {
  if (nick != NULL) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMemberChangeNickRequest.nick)
}

// string msg_id = 5;
inline void FleetMemberChangeNickRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMemberChangeNickRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberChangeNickRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void FleetMemberChangeNickRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMemberChangeNickRequest.msg_id)
}
#if LANG_CXX11
inline void FleetMemberChangeNickRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMemberChangeNickRequest.msg_id)
}
#endif
inline void FleetMemberChangeNickRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMemberChangeNickRequest.msg_id)
}
inline void FleetMemberChangeNickRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMemberChangeNickRequest.msg_id)
}
inline ::std::string* FleetMemberChangeNickRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMemberChangeNickRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMemberChangeNickRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMemberChangeNickRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMemberChangeNickRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMemberChangeNickRequest.msg_id)
}

// -------------------------------------------------------------------

// FleetMemberChangeNickResponse

// .common.errcode.EErrorCode ret = 1;
inline void FleetMemberChangeNickResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode FleetMemberChangeNickResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberChangeNickResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void FleetMemberChangeNickResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMemberChangeNickResponse.ret)
}

// string msg_id = 2;
inline void FleetMemberChangeNickResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetMemberChangeNickResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberChangeNickResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void FleetMemberChangeNickResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetMemberChangeNickResponse.msg_id)
}
#if LANG_CXX11
inline void FleetMemberChangeNickResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetMemberChangeNickResponse.msg_id)
}
#endif
inline void FleetMemberChangeNickResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetMemberChangeNickResponse.msg_id)
}
inline void FleetMemberChangeNickResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetMemberChangeNickResponse.msg_id)
}
inline ::std::string* FleetMemberChangeNickResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMemberChangeNickResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetMemberChangeNickResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMemberChangeNickResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetMemberChangeNickResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMemberChangeNickResponse.msg_id)
}

// -------------------------------------------------------------------

// FleetMemberNickChangedSignal

// .outer.fleet.FleetCrew nick_changed_crew = 1;
inline bool FleetMemberNickChangedSignal::has_nick_changed_crew() const {
  return this != internal_default_instance() && nick_changed_crew_ != NULL;
}
inline void FleetMemberNickChangedSignal::clear_nick_changed_crew() {
  if (GetArenaNoVirtual() == NULL && nick_changed_crew_ != NULL) {
    delete nick_changed_crew_;
  }
  nick_changed_crew_ = NULL;
}
inline const ::outer::fleet::FleetCrew& FleetMemberNickChangedSignal::nick_changed_crew() const {
  const ::outer::fleet::FleetCrew* p = nick_changed_crew_;
  // @@protoc_insertion_point(field_get:outer.fleet.FleetMemberNickChangedSignal.nick_changed_crew)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetCrew*>(
      &::outer::fleet::_FleetCrew_default_instance_);
}
inline ::outer::fleet::FleetCrew* FleetMemberNickChangedSignal::release_nick_changed_crew() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetMemberNickChangedSignal.nick_changed_crew)
  
  ::outer::fleet::FleetCrew* temp = nick_changed_crew_;
  nick_changed_crew_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetCrew* FleetMemberNickChangedSignal::mutable_nick_changed_crew() {
  
  if (nick_changed_crew_ == NULL) {
    nick_changed_crew_ = new ::outer::fleet::FleetCrew;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetMemberNickChangedSignal.nick_changed_crew)
  return nick_changed_crew_;
}
inline void FleetMemberNickChangedSignal::set_allocated_nick_changed_crew(::outer::fleet::FleetCrew* nick_changed_crew) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete nick_changed_crew_;
  }
  if (nick_changed_crew) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nick_changed_crew = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nick_changed_crew, submessage_arena);
    }
    
  } else {
    
  }
  nick_changed_crew_ = nick_changed_crew;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetMemberNickChangedSignal.nick_changed_crew)
}

// -------------------------------------------------------------------

// ChangeLocationAuthorizationRequest

// string fleet_uri = 1;
inline void ChangeLocationAuthorizationRequest::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChangeLocationAuthorizationRequest::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.ChangeLocationAuthorizationRequest.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void ChangeLocationAuthorizationRequest::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.ChangeLocationAuthorizationRequest.fleet_uri)
}
#if LANG_CXX11
inline void ChangeLocationAuthorizationRequest::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.ChangeLocationAuthorizationRequest.fleet_uri)
}
#endif
inline void ChangeLocationAuthorizationRequest::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.ChangeLocationAuthorizationRequest.fleet_uri)
}
inline void ChangeLocationAuthorizationRequest::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.ChangeLocationAuthorizationRequest.fleet_uri)
}
inline ::std::string* ChangeLocationAuthorizationRequest::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.ChangeLocationAuthorizationRequest.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeLocationAuthorizationRequest::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.ChangeLocationAuthorizationRequest.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeLocationAuthorizationRequest::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.ChangeLocationAuthorizationRequest.fleet_uri)
}

// string actor_username = 2;
inline void ChangeLocationAuthorizationRequest::clear_actor_username() {
  actor_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChangeLocationAuthorizationRequest::actor_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.ChangeLocationAuthorizationRequest.actor_username)
  return actor_username_.GetNoArena();
}
inline void ChangeLocationAuthorizationRequest::set_actor_username(const ::std::string& value) {
  
  actor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.ChangeLocationAuthorizationRequest.actor_username)
}
#if LANG_CXX11
inline void ChangeLocationAuthorizationRequest::set_actor_username(::std::string&& value) {
  
  actor_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.ChangeLocationAuthorizationRequest.actor_username)
}
#endif
inline void ChangeLocationAuthorizationRequest::set_actor_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  actor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.ChangeLocationAuthorizationRequest.actor_username)
}
inline void ChangeLocationAuthorizationRequest::set_actor_username(const char* value, size_t size) {
  
  actor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.ChangeLocationAuthorizationRequest.actor_username)
}
inline ::std::string* ChangeLocationAuthorizationRequest::mutable_actor_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.ChangeLocationAuthorizationRequest.actor_username)
  return actor_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeLocationAuthorizationRequest::release_actor_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.ChangeLocationAuthorizationRequest.actor_username)
  
  return actor_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeLocationAuthorizationRequest::set_allocated_actor_username(::std::string* actor_username) {
  if (actor_username != NULL) {
    
  } else {
    
  }
  actor_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actor_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.ChangeLocationAuthorizationRequest.actor_username)
}

// string appkey = 3;
inline void ChangeLocationAuthorizationRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChangeLocationAuthorizationRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.ChangeLocationAuthorizationRequest.appkey)
  return appkey_.GetNoArena();
}
inline void ChangeLocationAuthorizationRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.ChangeLocationAuthorizationRequest.appkey)
}
#if LANG_CXX11
inline void ChangeLocationAuthorizationRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.ChangeLocationAuthorizationRequest.appkey)
}
#endif
inline void ChangeLocationAuthorizationRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.ChangeLocationAuthorizationRequest.appkey)
}
inline void ChangeLocationAuthorizationRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.ChangeLocationAuthorizationRequest.appkey)
}
inline ::std::string* ChangeLocationAuthorizationRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.ChangeLocationAuthorizationRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeLocationAuthorizationRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.ChangeLocationAuthorizationRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeLocationAuthorizationRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.ChangeLocationAuthorizationRequest.appkey)
}

// bool is_authorization = 4;
inline void ChangeLocationAuthorizationRequest::clear_is_authorization() {
  is_authorization_ = false;
}
inline bool ChangeLocationAuthorizationRequest::is_authorization() const {
  // @@protoc_insertion_point(field_get:outer.fleet.ChangeLocationAuthorizationRequest.is_authorization)
  return is_authorization_;
}
inline void ChangeLocationAuthorizationRequest::set_is_authorization(bool value) {
  
  is_authorization_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.ChangeLocationAuthorizationRequest.is_authorization)
}

// string msg_id = 5;
inline void ChangeLocationAuthorizationRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChangeLocationAuthorizationRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.ChangeLocationAuthorizationRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void ChangeLocationAuthorizationRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.ChangeLocationAuthorizationRequest.msg_id)
}
#if LANG_CXX11
inline void ChangeLocationAuthorizationRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.ChangeLocationAuthorizationRequest.msg_id)
}
#endif
inline void ChangeLocationAuthorizationRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.ChangeLocationAuthorizationRequest.msg_id)
}
inline void ChangeLocationAuthorizationRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.ChangeLocationAuthorizationRequest.msg_id)
}
inline ::std::string* ChangeLocationAuthorizationRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.ChangeLocationAuthorizationRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeLocationAuthorizationRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.ChangeLocationAuthorizationRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeLocationAuthorizationRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.ChangeLocationAuthorizationRequest.msg_id)
}

// -------------------------------------------------------------------

// ChangeLocationAuthorizationResponse

// .common.errcode.EErrorCode ret = 1;
inline void ChangeLocationAuthorizationResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode ChangeLocationAuthorizationResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.ChangeLocationAuthorizationResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void ChangeLocationAuthorizationResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.ChangeLocationAuthorizationResponse.ret)
}

// string msg_id = 2;
inline void ChangeLocationAuthorizationResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChangeLocationAuthorizationResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.ChangeLocationAuthorizationResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void ChangeLocationAuthorizationResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.ChangeLocationAuthorizationResponse.msg_id)
}
#if LANG_CXX11
inline void ChangeLocationAuthorizationResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.ChangeLocationAuthorizationResponse.msg_id)
}
#endif
inline void ChangeLocationAuthorizationResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.ChangeLocationAuthorizationResponse.msg_id)
}
inline void ChangeLocationAuthorizationResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.ChangeLocationAuthorizationResponse.msg_id)
}
inline ::std::string* ChangeLocationAuthorizationResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.ChangeLocationAuthorizationResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeLocationAuthorizationResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.ChangeLocationAuthorizationResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeLocationAuthorizationResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.ChangeLocationAuthorizationResponse.msg_id)
}

// -------------------------------------------------------------------

// ChangeLocationAuthorizationSignal

// .outer.fleet.FleetCrew location_authorization_changed_crew = 1;
inline bool ChangeLocationAuthorizationSignal::has_location_authorization_changed_crew() const {
  return this != internal_default_instance() && location_authorization_changed_crew_ != NULL;
}
inline void ChangeLocationAuthorizationSignal::clear_location_authorization_changed_crew() {
  if (GetArenaNoVirtual() == NULL && location_authorization_changed_crew_ != NULL) {
    delete location_authorization_changed_crew_;
  }
  location_authorization_changed_crew_ = NULL;
}
inline const ::outer::fleet::FleetCrew& ChangeLocationAuthorizationSignal::location_authorization_changed_crew() const {
  const ::outer::fleet::FleetCrew* p = location_authorization_changed_crew_;
  // @@protoc_insertion_point(field_get:outer.fleet.ChangeLocationAuthorizationSignal.location_authorization_changed_crew)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetCrew*>(
      &::outer::fleet::_FleetCrew_default_instance_);
}
inline ::outer::fleet::FleetCrew* ChangeLocationAuthorizationSignal::release_location_authorization_changed_crew() {
  // @@protoc_insertion_point(field_release:outer.fleet.ChangeLocationAuthorizationSignal.location_authorization_changed_crew)
  
  ::outer::fleet::FleetCrew* temp = location_authorization_changed_crew_;
  location_authorization_changed_crew_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetCrew* ChangeLocationAuthorizationSignal::mutable_location_authorization_changed_crew() {
  
  if (location_authorization_changed_crew_ == NULL) {
    location_authorization_changed_crew_ = new ::outer::fleet::FleetCrew;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.ChangeLocationAuthorizationSignal.location_authorization_changed_crew)
  return location_authorization_changed_crew_;
}
inline void ChangeLocationAuthorizationSignal::set_allocated_location_authorization_changed_crew(::outer::fleet::FleetCrew* location_authorization_changed_crew) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_authorization_changed_crew_;
  }
  if (location_authorization_changed_crew) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location_authorization_changed_crew = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location_authorization_changed_crew, submessage_arena);
    }
    
  } else {
    
  }
  location_authorization_changed_crew_ = location_authorization_changed_crew;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.ChangeLocationAuthorizationSignal.location_authorization_changed_crew)
}

// bool is_authorization = 2;
inline void ChangeLocationAuthorizationSignal::clear_is_authorization() {
  is_authorization_ = false;
}
inline bool ChangeLocationAuthorizationSignal::is_authorization() const {
  // @@protoc_insertion_point(field_get:outer.fleet.ChangeLocationAuthorizationSignal.is_authorization)
  return is_authorization_;
}
inline void ChangeLocationAuthorizationSignal::set_is_authorization(bool value) {
  
  is_authorization_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.ChangeLocationAuthorizationSignal.is_authorization)
}

// -------------------------------------------------------------------

// GetMyFleetRequest

// string username = 1;
inline void GetMyFleetRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMyFleetRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetMyFleetRequest.username)
  return username_.GetNoArena();
}
inline void GetMyFleetRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetMyFleetRequest.username)
}
#if LANG_CXX11
inline void GetMyFleetRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetMyFleetRequest.username)
}
#endif
inline void GetMyFleetRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetMyFleetRequest.username)
}
inline void GetMyFleetRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetMyFleetRequest.username)
}
inline ::std::string* GetMyFleetRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetMyFleetRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMyFleetRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetMyFleetRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMyFleetRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetMyFleetRequest.username)
}

// string appkey = 2;
inline void GetMyFleetRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMyFleetRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetMyFleetRequest.appkey)
  return appkey_.GetNoArena();
}
inline void GetMyFleetRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetMyFleetRequest.appkey)
}
#if LANG_CXX11
inline void GetMyFleetRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetMyFleetRequest.appkey)
}
#endif
inline void GetMyFleetRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetMyFleetRequest.appkey)
}
inline void GetMyFleetRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetMyFleetRequest.appkey)
}
inline ::std::string* GetMyFleetRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetMyFleetRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMyFleetRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetMyFleetRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMyFleetRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetMyFleetRequest.appkey)
}

// string msg_id = 3;
inline void GetMyFleetRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMyFleetRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetMyFleetRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void GetMyFleetRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetMyFleetRequest.msg_id)
}
#if LANG_CXX11
inline void GetMyFleetRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetMyFleetRequest.msg_id)
}
#endif
inline void GetMyFleetRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetMyFleetRequest.msg_id)
}
inline void GetMyFleetRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetMyFleetRequest.msg_id)
}
inline ::std::string* GetMyFleetRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetMyFleetRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMyFleetRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetMyFleetRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMyFleetRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetMyFleetRequest.msg_id)
}

// -------------------------------------------------------------------

// GetMyFleetResponse

// .common.errcode.EErrorCode ret = 1;
inline void GetMyFleetResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode GetMyFleetResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetMyFleetResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void GetMyFleetResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.GetMyFleetResponse.ret)
}

// repeated .outer.fleet.FleetInfo fleet_info = 2;
inline int GetMyFleetResponse::fleet_info_size() const {
  return fleet_info_.size();
}
inline void GetMyFleetResponse::clear_fleet_info() {
  fleet_info_.Clear();
}
inline const ::outer::fleet::FleetInfo& GetMyFleetResponse::fleet_info(int index) const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetMyFleetResponse.fleet_info)
  return fleet_info_.Get(index);
}
inline ::outer::fleet::FleetInfo* GetMyFleetResponse::mutable_fleet_info(int index) {
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetMyFleetResponse.fleet_info)
  return fleet_info_.Mutable(index);
}
inline ::outer::fleet::FleetInfo* GetMyFleetResponse::add_fleet_info() {
  // @@protoc_insertion_point(field_add:outer.fleet.GetMyFleetResponse.fleet_info)
  return fleet_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetInfo >*
GetMyFleetResponse::mutable_fleet_info() {
  // @@protoc_insertion_point(field_mutable_list:outer.fleet.GetMyFleetResponse.fleet_info)
  return &fleet_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetInfo >&
GetMyFleetResponse::fleet_info() const {
  // @@protoc_insertion_point(field_list:outer.fleet.GetMyFleetResponse.fleet_info)
  return fleet_info_;
}

// string msg_id = 3;
inline void GetMyFleetResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetMyFleetResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetMyFleetResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void GetMyFleetResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetMyFleetResponse.msg_id)
}
#if LANG_CXX11
inline void GetMyFleetResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetMyFleetResponse.msg_id)
}
#endif
inline void GetMyFleetResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetMyFleetResponse.msg_id)
}
inline void GetMyFleetResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetMyFleetResponse.msg_id)
}
inline ::std::string* GetMyFleetResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetMyFleetResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMyFleetResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetMyFleetResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMyFleetResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetMyFleetResponse.msg_id)
}

// -------------------------------------------------------------------

// GetFleetCrewListRequest

// string fleet_uri = 1;
inline void GetFleetCrewListRequest::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetCrewListRequest::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetCrewListRequest.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void GetFleetCrewListRequest::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetCrewListRequest.fleet_uri)
}
#if LANG_CXX11
inline void GetFleetCrewListRequest::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetCrewListRequest.fleet_uri)
}
#endif
inline void GetFleetCrewListRequest::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetCrewListRequest.fleet_uri)
}
inline void GetFleetCrewListRequest::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetCrewListRequest.fleet_uri)
}
inline ::std::string* GetFleetCrewListRequest::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetCrewListRequest.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetCrewListRequest::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetCrewListRequest.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetCrewListRequest::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetCrewListRequest.fleet_uri)
}

// string appkey = 2;
inline void GetFleetCrewListRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetCrewListRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetCrewListRequest.appkey)
  return appkey_.GetNoArena();
}
inline void GetFleetCrewListRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetCrewListRequest.appkey)
}
#if LANG_CXX11
inline void GetFleetCrewListRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetCrewListRequest.appkey)
}
#endif
inline void GetFleetCrewListRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetCrewListRequest.appkey)
}
inline void GetFleetCrewListRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetCrewListRequest.appkey)
}
inline ::std::string* GetFleetCrewListRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetCrewListRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetCrewListRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetCrewListRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetCrewListRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetCrewListRequest.appkey)
}

// string username = 3;
inline void GetFleetCrewListRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetCrewListRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetCrewListRequest.username)
  return username_.GetNoArena();
}
inline void GetFleetCrewListRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetCrewListRequest.username)
}
#if LANG_CXX11
inline void GetFleetCrewListRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetCrewListRequest.username)
}
#endif
inline void GetFleetCrewListRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetCrewListRequest.username)
}
inline void GetFleetCrewListRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetCrewListRequest.username)
}
inline ::std::string* GetFleetCrewListRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetCrewListRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetCrewListRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetCrewListRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetCrewListRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetCrewListRequest.username)
}

// uint64 modified = 4;
inline void GetFleetCrewListRequest::clear_modified() {
  modified_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetFleetCrewListRequest::modified() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetCrewListRequest.modified)
  return modified_;
}
inline void GetFleetCrewListRequest::set_modified(::google::protobuf::uint64 value) {
  
  modified_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetCrewListRequest.modified)
}

// string msg_id = 5;
inline void GetFleetCrewListRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetCrewListRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetCrewListRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void GetFleetCrewListRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetCrewListRequest.msg_id)
}
#if LANG_CXX11
inline void GetFleetCrewListRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetCrewListRequest.msg_id)
}
#endif
inline void GetFleetCrewListRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetCrewListRequest.msg_id)
}
inline void GetFleetCrewListRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetCrewListRequest.msg_id)
}
inline ::std::string* GetFleetCrewListRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetCrewListRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetCrewListRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetCrewListRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetCrewListRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetCrewListRequest.msg_id)
}

// -------------------------------------------------------------------

// GetFleetCrewListResponse

// .common.errcode.EErrorCode ret = 1;
inline void GetFleetCrewListResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode GetFleetCrewListResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetCrewListResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void GetFleetCrewListResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetCrewListResponse.ret)
}

// repeated .outer.fleet.FleetCrew crews = 2;
inline int GetFleetCrewListResponse::crews_size() const {
  return crews_.size();
}
inline void GetFleetCrewListResponse::clear_crews() {
  crews_.Clear();
}
inline const ::outer::fleet::FleetCrew& GetFleetCrewListResponse::crews(int index) const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetCrewListResponse.crews)
  return crews_.Get(index);
}
inline ::outer::fleet::FleetCrew* GetFleetCrewListResponse::mutable_crews(int index) {
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetCrewListResponse.crews)
  return crews_.Mutable(index);
}
inline ::outer::fleet::FleetCrew* GetFleetCrewListResponse::add_crews() {
  // @@protoc_insertion_point(field_add:outer.fleet.GetFleetCrewListResponse.crews)
  return crews_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew >*
GetFleetCrewListResponse::mutable_crews() {
  // @@protoc_insertion_point(field_mutable_list:outer.fleet.GetFleetCrewListResponse.crews)
  return &crews_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::fleet::FleetCrew >&
GetFleetCrewListResponse::crews() const {
  // @@protoc_insertion_point(field_list:outer.fleet.GetFleetCrewListResponse.crews)
  return crews_;
}

// string msg_id = 3;
inline void GetFleetCrewListResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetCrewListResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetCrewListResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void GetFleetCrewListResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetCrewListResponse.msg_id)
}
#if LANG_CXX11
inline void GetFleetCrewListResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetCrewListResponse.msg_id)
}
#endif
inline void GetFleetCrewListResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetCrewListResponse.msg_id)
}
inline void GetFleetCrewListResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetCrewListResponse.msg_id)
}
inline ::std::string* GetFleetCrewListResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetCrewListResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetCrewListResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetCrewListResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetCrewListResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetCrewListResponse.msg_id)
}

// -------------------------------------------------------------------

// SetFleetAssemblyPointRequest

// string setter_username = 1;
inline void SetFleetAssemblyPointRequest::clear_setter_username() {
  setter_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetAssemblyPointRequest::setter_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetAssemblyPointRequest.setter_username)
  return setter_username_.GetNoArena();
}
inline void SetFleetAssemblyPointRequest::set_setter_username(const ::std::string& value) {
  
  setter_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetAssemblyPointRequest.setter_username)
}
#if LANG_CXX11
inline void SetFleetAssemblyPointRequest::set_setter_username(::std::string&& value) {
  
  setter_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetAssemblyPointRequest.setter_username)
}
#endif
inline void SetFleetAssemblyPointRequest::set_setter_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  setter_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetAssemblyPointRequest.setter_username)
}
inline void SetFleetAssemblyPointRequest::set_setter_username(const char* value, size_t size) {
  
  setter_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetAssemblyPointRequest.setter_username)
}
inline ::std::string* SetFleetAssemblyPointRequest::mutable_setter_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetAssemblyPointRequest.setter_username)
  return setter_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetAssemblyPointRequest::release_setter_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetAssemblyPointRequest.setter_username)
  
  return setter_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetAssemblyPointRequest::set_allocated_setter_username(::std::string* setter_username) {
  if (setter_username != NULL) {
    
  } else {
    
  }
  setter_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), setter_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetAssemblyPointRequest.setter_username)
}

// string appkey = 2;
inline void SetFleetAssemblyPointRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetAssemblyPointRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetAssemblyPointRequest.appkey)
  return appkey_.GetNoArena();
}
inline void SetFleetAssemblyPointRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetAssemblyPointRequest.appkey)
}
#if LANG_CXX11
inline void SetFleetAssemblyPointRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetAssemblyPointRequest.appkey)
}
#endif
inline void SetFleetAssemblyPointRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetAssemblyPointRequest.appkey)
}
inline void SetFleetAssemblyPointRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetAssemblyPointRequest.appkey)
}
inline ::std::string* SetFleetAssemblyPointRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetAssemblyPointRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetAssemblyPointRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetAssemblyPointRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetAssemblyPointRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetAssemblyPointRequest.appkey)
}

// string fleet_uri = 3;
inline void SetFleetAssemblyPointRequest::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetAssemblyPointRequest::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetAssemblyPointRequest.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void SetFleetAssemblyPointRequest::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetAssemblyPointRequest.fleet_uri)
}
#if LANG_CXX11
inline void SetFleetAssemblyPointRequest::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetAssemblyPointRequest.fleet_uri)
}
#endif
inline void SetFleetAssemblyPointRequest::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetAssemblyPointRequest.fleet_uri)
}
inline void SetFleetAssemblyPointRequest::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetAssemblyPointRequest.fleet_uri)
}
inline ::std::string* SetFleetAssemblyPointRequest::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetAssemblyPointRequest.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetAssemblyPointRequest::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetAssemblyPointRequest.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetAssemblyPointRequest::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetAssemblyPointRequest.fleet_uri)
}

// .common.msg.LocationMessage assembly_point = 4;
inline bool SetFleetAssemblyPointRequest::has_assembly_point() const {
  return this != internal_default_instance() && assembly_point_ != NULL;
}
inline const ::common::msg::LocationMessage& SetFleetAssemblyPointRequest::assembly_point() const {
  const ::common::msg::LocationMessage* p = assembly_point_;
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetAssemblyPointRequest.assembly_point)
  return p != NULL ? *p : *reinterpret_cast<const ::common::msg::LocationMessage*>(
      &::common::msg::_LocationMessage_default_instance_);
}
inline ::common::msg::LocationMessage* SetFleetAssemblyPointRequest::release_assembly_point() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetAssemblyPointRequest.assembly_point)
  
  ::common::msg::LocationMessage* temp = assembly_point_;
  assembly_point_ = NULL;
  return temp;
}
inline ::common::msg::LocationMessage* SetFleetAssemblyPointRequest::mutable_assembly_point() {
  
  if (assembly_point_ == NULL) {
    assembly_point_ = new ::common::msg::LocationMessage;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetAssemblyPointRequest.assembly_point)
  return assembly_point_;
}
inline void SetFleetAssemblyPointRequest::set_allocated_assembly_point(::common::msg::LocationMessage* assembly_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(assembly_point_);
  }
  if (assembly_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      assembly_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, assembly_point, submessage_arena);
    }
    
  } else {
    
  }
  assembly_point_ = assembly_point;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetAssemblyPointRequest.assembly_point)
}

// string msg_id = 5;
inline void SetFleetAssemblyPointRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetAssemblyPointRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetAssemblyPointRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void SetFleetAssemblyPointRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetAssemblyPointRequest.msg_id)
}
#if LANG_CXX11
inline void SetFleetAssemblyPointRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetAssemblyPointRequest.msg_id)
}
#endif
inline void SetFleetAssemblyPointRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetAssemblyPointRequest.msg_id)
}
inline void SetFleetAssemblyPointRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetAssemblyPointRequest.msg_id)
}
inline ::std::string* SetFleetAssemblyPointRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetAssemblyPointRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetAssemblyPointRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetAssemblyPointRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetAssemblyPointRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetAssemblyPointRequest.msg_id)
}

// -------------------------------------------------------------------

// SetFleetAssemblyPointResponse

// .common.errcode.EErrorCode ret = 1;
inline void SetFleetAssemblyPointResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode SetFleetAssemblyPointResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetAssemblyPointResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void SetFleetAssemblyPointResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetAssemblyPointResponse.ret)
}

// string msg_id = 3;
inline void SetFleetAssemblyPointResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetAssemblyPointResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetAssemblyPointResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void SetFleetAssemblyPointResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetAssemblyPointResponse.msg_id)
}
#if LANG_CXX11
inline void SetFleetAssemblyPointResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetAssemblyPointResponse.msg_id)
}
#endif
inline void SetFleetAssemblyPointResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetAssemblyPointResponse.msg_id)
}
inline void SetFleetAssemblyPointResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetAssemblyPointResponse.msg_id)
}
inline ::std::string* SetFleetAssemblyPointResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetAssemblyPointResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetAssemblyPointResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetAssemblyPointResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetAssemblyPointResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetAssemblyPointResponse.msg_id)
}

// -------------------------------------------------------------------

// AssemblyPointChangedSignal

// .common.msg.LocationMessage assembly_point = 1;
inline bool AssemblyPointChangedSignal::has_assembly_point() const {
  return this != internal_default_instance() && assembly_point_ != NULL;
}
inline const ::common::msg::LocationMessage& AssemblyPointChangedSignal::assembly_point() const {
  const ::common::msg::LocationMessage* p = assembly_point_;
  // @@protoc_insertion_point(field_get:outer.fleet.AssemblyPointChangedSignal.assembly_point)
  return p != NULL ? *p : *reinterpret_cast<const ::common::msg::LocationMessage*>(
      &::common::msg::_LocationMessage_default_instance_);
}
inline ::common::msg::LocationMessage* AssemblyPointChangedSignal::release_assembly_point() {
  // @@protoc_insertion_point(field_release:outer.fleet.AssemblyPointChangedSignal.assembly_point)
  
  ::common::msg::LocationMessage* temp = assembly_point_;
  assembly_point_ = NULL;
  return temp;
}
inline ::common::msg::LocationMessage* AssemblyPointChangedSignal::mutable_assembly_point() {
  
  if (assembly_point_ == NULL) {
    assembly_point_ = new ::common::msg::LocationMessage;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.AssemblyPointChangedSignal.assembly_point)
  return assembly_point_;
}
inline void AssemblyPointChangedSignal::set_allocated_assembly_point(::common::msg::LocationMessage* assembly_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(assembly_point_);
  }
  if (assembly_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      assembly_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, assembly_point, submessage_arena);
    }
    
  } else {
    
  }
  assembly_point_ = assembly_point;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.AssemblyPointChangedSignal.assembly_point)
}

// .outer.fleet.FleetCrew setter = 2;
inline bool AssemblyPointChangedSignal::has_setter() const {
  return this != internal_default_instance() && setter_ != NULL;
}
inline void AssemblyPointChangedSignal::clear_setter() {
  if (GetArenaNoVirtual() == NULL && setter_ != NULL) {
    delete setter_;
  }
  setter_ = NULL;
}
inline const ::outer::fleet::FleetCrew& AssemblyPointChangedSignal::setter() const {
  const ::outer::fleet::FleetCrew* p = setter_;
  // @@protoc_insertion_point(field_get:outer.fleet.AssemblyPointChangedSignal.setter)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetCrew*>(
      &::outer::fleet::_FleetCrew_default_instance_);
}
inline ::outer::fleet::FleetCrew* AssemblyPointChangedSignal::release_setter() {
  // @@protoc_insertion_point(field_release:outer.fleet.AssemblyPointChangedSignal.setter)
  
  ::outer::fleet::FleetCrew* temp = setter_;
  setter_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetCrew* AssemblyPointChangedSignal::mutable_setter() {
  
  if (setter_ == NULL) {
    setter_ = new ::outer::fleet::FleetCrew;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.AssemblyPointChangedSignal.setter)
  return setter_;
}
inline void AssemblyPointChangedSignal::set_allocated_setter(::outer::fleet::FleetCrew* setter) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete setter_;
  }
  if (setter) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      setter = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, setter, submessage_arena);
    }
    
  } else {
    
  }
  setter_ = setter;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.AssemblyPointChangedSignal.setter)
}

// -------------------------------------------------------------------

// GetFleetAssemblyPointRequest

// string username = 1;
inline void GetFleetAssemblyPointRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetAssemblyPointRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetAssemblyPointRequest.username)
  return username_.GetNoArena();
}
inline void GetFleetAssemblyPointRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetAssemblyPointRequest.username)
}
#if LANG_CXX11
inline void GetFleetAssemblyPointRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetAssemblyPointRequest.username)
}
#endif
inline void GetFleetAssemblyPointRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetAssemblyPointRequest.username)
}
inline void GetFleetAssemblyPointRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetAssemblyPointRequest.username)
}
inline ::std::string* GetFleetAssemblyPointRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetAssemblyPointRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetAssemblyPointRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetAssemblyPointRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetAssemblyPointRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetAssemblyPointRequest.username)
}

// string appkey = 2;
inline void GetFleetAssemblyPointRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetAssemblyPointRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetAssemblyPointRequest.appkey)
  return appkey_.GetNoArena();
}
inline void GetFleetAssemblyPointRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetAssemblyPointRequest.appkey)
}
#if LANG_CXX11
inline void GetFleetAssemblyPointRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetAssemblyPointRequest.appkey)
}
#endif
inline void GetFleetAssemblyPointRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetAssemblyPointRequest.appkey)
}
inline void GetFleetAssemblyPointRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetAssemblyPointRequest.appkey)
}
inline ::std::string* GetFleetAssemblyPointRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetAssemblyPointRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetAssemblyPointRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetAssemblyPointRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetAssemblyPointRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetAssemblyPointRequest.appkey)
}

// string fleet_uri = 3;
inline void GetFleetAssemblyPointRequest::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetAssemblyPointRequest::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetAssemblyPointRequest.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void GetFleetAssemblyPointRequest::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetAssemblyPointRequest.fleet_uri)
}
#if LANG_CXX11
inline void GetFleetAssemblyPointRequest::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetAssemblyPointRequest.fleet_uri)
}
#endif
inline void GetFleetAssemblyPointRequest::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetAssemblyPointRequest.fleet_uri)
}
inline void GetFleetAssemblyPointRequest::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetAssemblyPointRequest.fleet_uri)
}
inline ::std::string* GetFleetAssemblyPointRequest::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetAssemblyPointRequest.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetAssemblyPointRequest::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetAssemblyPointRequest.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetAssemblyPointRequest::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetAssemblyPointRequest.fleet_uri)
}

// string msg_id = 4;
inline void GetFleetAssemblyPointRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetAssemblyPointRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetAssemblyPointRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void GetFleetAssemblyPointRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetAssemblyPointRequest.msg_id)
}
#if LANG_CXX11
inline void GetFleetAssemblyPointRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetAssemblyPointRequest.msg_id)
}
#endif
inline void GetFleetAssemblyPointRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetAssemblyPointRequest.msg_id)
}
inline void GetFleetAssemblyPointRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetAssemblyPointRequest.msg_id)
}
inline ::std::string* GetFleetAssemblyPointRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetAssemblyPointRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetAssemblyPointRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetAssemblyPointRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetAssemblyPointRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetAssemblyPointRequest.msg_id)
}

// -------------------------------------------------------------------

// GetFleetAssemblyPointResponse

// .common.errcode.EErrorCode ret = 1;
inline void GetFleetAssemblyPointResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode GetFleetAssemblyPointResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetAssemblyPointResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void GetFleetAssemblyPointResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetAssemblyPointResponse.ret)
}

// .common.msg.LocationMessage assembly_point = 2;
inline bool GetFleetAssemblyPointResponse::has_assembly_point() const {
  return this != internal_default_instance() && assembly_point_ != NULL;
}
inline const ::common::msg::LocationMessage& GetFleetAssemblyPointResponse::assembly_point() const {
  const ::common::msg::LocationMessage* p = assembly_point_;
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetAssemblyPointResponse.assembly_point)
  return p != NULL ? *p : *reinterpret_cast<const ::common::msg::LocationMessage*>(
      &::common::msg::_LocationMessage_default_instance_);
}
inline ::common::msg::LocationMessage* GetFleetAssemblyPointResponse::release_assembly_point() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetAssemblyPointResponse.assembly_point)
  
  ::common::msg::LocationMessage* temp = assembly_point_;
  assembly_point_ = NULL;
  return temp;
}
inline ::common::msg::LocationMessage* GetFleetAssemblyPointResponse::mutable_assembly_point() {
  
  if (assembly_point_ == NULL) {
    assembly_point_ = new ::common::msg::LocationMessage;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetAssemblyPointResponse.assembly_point)
  return assembly_point_;
}
inline void GetFleetAssemblyPointResponse::set_allocated_assembly_point(::common::msg::LocationMessage* assembly_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(assembly_point_);
  }
  if (assembly_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      assembly_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, assembly_point, submessage_arena);
    }
    
  } else {
    
  }
  assembly_point_ = assembly_point;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetAssemblyPointResponse.assembly_point)
}

// string msg_id = 3;
inline void GetFleetAssemblyPointResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetAssemblyPointResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetAssemblyPointResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void GetFleetAssemblyPointResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetAssemblyPointResponse.msg_id)
}
#if LANG_CXX11
inline void GetFleetAssemblyPointResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetAssemblyPointResponse.msg_id)
}
#endif
inline void GetFleetAssemblyPointResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetAssemblyPointResponse.msg_id)
}
inline void GetFleetAssemblyPointResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetAssemblyPointResponse.msg_id)
}
inline ::std::string* GetFleetAssemblyPointResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetAssemblyPointResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetAssemblyPointResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetAssemblyPointResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetAssemblyPointResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetAssemblyPointResponse.msg_id)
}

// -------------------------------------------------------------------

// GetFleetInfoRequest

// string username = 1;
inline void GetFleetInfoRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetInfoRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetInfoRequest.username)
  return username_.GetNoArena();
}
inline void GetFleetInfoRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetInfoRequest.username)
}
#if LANG_CXX11
inline void GetFleetInfoRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetInfoRequest.username)
}
#endif
inline void GetFleetInfoRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetInfoRequest.username)
}
inline void GetFleetInfoRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetInfoRequest.username)
}
inline ::std::string* GetFleetInfoRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetInfoRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetInfoRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetInfoRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetInfoRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetInfoRequest.username)
}

// string appkey = 2;
inline void GetFleetInfoRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetInfoRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetInfoRequest.appkey)
  return appkey_.GetNoArena();
}
inline void GetFleetInfoRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetInfoRequest.appkey)
}
#if LANG_CXX11
inline void GetFleetInfoRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetInfoRequest.appkey)
}
#endif
inline void GetFleetInfoRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetInfoRequest.appkey)
}
inline void GetFleetInfoRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetInfoRequest.appkey)
}
inline ::std::string* GetFleetInfoRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetInfoRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetInfoRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetInfoRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetInfoRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetInfoRequest.appkey)
}

// string fleet_uri = 3;
inline void GetFleetInfoRequest::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetInfoRequest::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetInfoRequest.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void GetFleetInfoRequest::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetInfoRequest.fleet_uri)
}
#if LANG_CXX11
inline void GetFleetInfoRequest::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetInfoRequest.fleet_uri)
}
#endif
inline void GetFleetInfoRequest::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetInfoRequest.fleet_uri)
}
inline void GetFleetInfoRequest::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetInfoRequest.fleet_uri)
}
inline ::std::string* GetFleetInfoRequest::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetInfoRequest.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetInfoRequest::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetInfoRequest.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetInfoRequest::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetInfoRequest.fleet_uri)
}

// string msg_id = 4;
inline void GetFleetInfoRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetInfoRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetInfoRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void GetFleetInfoRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetInfoRequest.msg_id)
}
#if LANG_CXX11
inline void GetFleetInfoRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetInfoRequest.msg_id)
}
#endif
inline void GetFleetInfoRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetInfoRequest.msg_id)
}
inline void GetFleetInfoRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetInfoRequest.msg_id)
}
inline ::std::string* GetFleetInfoRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetInfoRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetInfoRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetInfoRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetInfoRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetInfoRequest.msg_id)
}

// -------------------------------------------------------------------

// GetFleetInfoResponse

// .common.errcode.EErrorCode ret = 1;
inline void GetFleetInfoResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode GetFleetInfoResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetInfoResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void GetFleetInfoResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetInfoResponse.ret)
}

// .outer.fleet.FleetInfo fleet_info = 2;
inline bool GetFleetInfoResponse::has_fleet_info() const {
  return this != internal_default_instance() && fleet_info_ != NULL;
}
inline void GetFleetInfoResponse::clear_fleet_info() {
  if (GetArenaNoVirtual() == NULL && fleet_info_ != NULL) {
    delete fleet_info_;
  }
  fleet_info_ = NULL;
}
inline const ::outer::fleet::FleetInfo& GetFleetInfoResponse::fleet_info() const {
  const ::outer::fleet::FleetInfo* p = fleet_info_;
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetInfoResponse.fleet_info)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetInfo*>(
      &::outer::fleet::_FleetInfo_default_instance_);
}
inline ::outer::fleet::FleetInfo* GetFleetInfoResponse::release_fleet_info() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetInfoResponse.fleet_info)
  
  ::outer::fleet::FleetInfo* temp = fleet_info_;
  fleet_info_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetInfo* GetFleetInfoResponse::mutable_fleet_info() {
  
  if (fleet_info_ == NULL) {
    fleet_info_ = new ::outer::fleet::FleetInfo;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetInfoResponse.fleet_info)
  return fleet_info_;
}
inline void GetFleetInfoResponse::set_allocated_fleet_info(::outer::fleet::FleetInfo* fleet_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fleet_info_;
  }
  if (fleet_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fleet_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fleet_info, submessage_arena);
    }
    
  } else {
    
  }
  fleet_info_ = fleet_info;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetInfoResponse.fleet_info)
}

// string msg_id = 3;
inline void GetFleetInfoResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetInfoResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetInfoResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void GetFleetInfoResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetInfoResponse.msg_id)
}
#if LANG_CXX11
inline void GetFleetInfoResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetInfoResponse.msg_id)
}
#endif
inline void GetFleetInfoResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetInfoResponse.msg_id)
}
inline void GetFleetInfoResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetInfoResponse.msg_id)
}
inline ::std::string* GetFleetInfoResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetInfoResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetInfoResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetInfoResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetInfoResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetInfoResponse.msg_id)
}

// -------------------------------------------------------------------

// GetFleetInvitationListRequest

// string username = 1;
inline void GetFleetInvitationListRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetInvitationListRequest::username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetInvitationListRequest.username)
  return username_.GetNoArena();
}
inline void GetFleetInvitationListRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetInvitationListRequest.username)
}
#if LANG_CXX11
inline void GetFleetInvitationListRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetInvitationListRequest.username)
}
#endif
inline void GetFleetInvitationListRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetInvitationListRequest.username)
}
inline void GetFleetInvitationListRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetInvitationListRequest.username)
}
inline ::std::string* GetFleetInvitationListRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetInvitationListRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetInvitationListRequest::release_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetInvitationListRequest.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetInvitationListRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetInvitationListRequest.username)
}

// string appkey = 2;
inline void GetFleetInvitationListRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetInvitationListRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetInvitationListRequest.appkey)
  return appkey_.GetNoArena();
}
inline void GetFleetInvitationListRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetInvitationListRequest.appkey)
}
#if LANG_CXX11
inline void GetFleetInvitationListRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetInvitationListRequest.appkey)
}
#endif
inline void GetFleetInvitationListRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetInvitationListRequest.appkey)
}
inline void GetFleetInvitationListRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetInvitationListRequest.appkey)
}
inline ::std::string* GetFleetInvitationListRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetInvitationListRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetInvitationListRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetInvitationListRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetInvitationListRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetInvitationListRequest.appkey)
}

// string msg_id = 3;
inline void GetFleetInvitationListRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetInvitationListRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetInvitationListRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void GetFleetInvitationListRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetInvitationListRequest.msg_id)
}
#if LANG_CXX11
inline void GetFleetInvitationListRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetInvitationListRequest.msg_id)
}
#endif
inline void GetFleetInvitationListRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetInvitationListRequest.msg_id)
}
inline void GetFleetInvitationListRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetInvitationListRequest.msg_id)
}
inline ::std::string* GetFleetInvitationListRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetInvitationListRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetInvitationListRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetInvitationListRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetInvitationListRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetInvitationListRequest.msg_id)
}

// uint32 page_index = 4;
inline void GetFleetInvitationListRequest::clear_page_index() {
  page_index_ = 0u;
}
inline ::google::protobuf::uint32 GetFleetInvitationListRequest::page_index() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetInvitationListRequest.page_index)
  return page_index_;
}
inline void GetFleetInvitationListRequest::set_page_index(::google::protobuf::uint32 value) {
  
  page_index_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetInvitationListRequest.page_index)
}

// uint32 page_size = 5;
inline void GetFleetInvitationListRequest::clear_page_size() {
  page_size_ = 0u;
}
inline ::google::protobuf::uint32 GetFleetInvitationListRequest::page_size() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetInvitationListRequest.page_size)
  return page_size_;
}
inline void GetFleetInvitationListRequest::set_page_size(::google::protobuf::uint32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetInvitationListRequest.page_size)
}

// -------------------------------------------------------------------

// GetFleetInvitationListResponse

// .common.errcode.EErrorCode ret = 1;
inline void GetFleetInvitationListResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode GetFleetInvitationListResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetInvitationListResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void GetFleetInvitationListResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetInvitationListResponse.ret)
}

// repeated .outer.fleet.InvitationNoticeInfo invitation_notice_info = 2;
inline int GetFleetInvitationListResponse::invitation_notice_info_size() const {
  return invitation_notice_info_.size();
}
inline void GetFleetInvitationListResponse::clear_invitation_notice_info() {
  invitation_notice_info_.Clear();
}
inline const ::outer::fleet::InvitationNoticeInfo& GetFleetInvitationListResponse::invitation_notice_info(int index) const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetInvitationListResponse.invitation_notice_info)
  return invitation_notice_info_.Get(index);
}
inline ::outer::fleet::InvitationNoticeInfo* GetFleetInvitationListResponse::mutable_invitation_notice_info(int index) {
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetInvitationListResponse.invitation_notice_info)
  return invitation_notice_info_.Mutable(index);
}
inline ::outer::fleet::InvitationNoticeInfo* GetFleetInvitationListResponse::add_invitation_notice_info() {
  // @@protoc_insertion_point(field_add:outer.fleet.GetFleetInvitationListResponse.invitation_notice_info)
  return invitation_notice_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::outer::fleet::InvitationNoticeInfo >*
GetFleetInvitationListResponse::mutable_invitation_notice_info() {
  // @@protoc_insertion_point(field_mutable_list:outer.fleet.GetFleetInvitationListResponse.invitation_notice_info)
  return &invitation_notice_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::outer::fleet::InvitationNoticeInfo >&
GetFleetInvitationListResponse::invitation_notice_info() const {
  // @@protoc_insertion_point(field_list:outer.fleet.GetFleetInvitationListResponse.invitation_notice_info)
  return invitation_notice_info_;
}

// uint64 total = 3;
inline void GetFleetInvitationListResponse::clear_total() {
  total_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetFleetInvitationListResponse::total() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetInvitationListResponse.total)
  return total_;
}
inline void GetFleetInvitationListResponse::set_total(::google::protobuf::uint64 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetInvitationListResponse.total)
}

// string msg_id = 4;
inline void GetFleetInvitationListResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetFleetInvitationListResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.GetFleetInvitationListResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void GetFleetInvitationListResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.GetFleetInvitationListResponse.msg_id)
}
#if LANG_CXX11
inline void GetFleetInvitationListResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.GetFleetInvitationListResponse.msg_id)
}
#endif
inline void GetFleetInvitationListResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.GetFleetInvitationListResponse.msg_id)
}
inline void GetFleetInvitationListResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.GetFleetInvitationListResponse.msg_id)
}
inline ::std::string* GetFleetInvitationListResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.GetFleetInvitationListResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetFleetInvitationListResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.GetFleetInvitationListResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetFleetInvitationListResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.GetFleetInvitationListResponse.msg_id)
}

// -------------------------------------------------------------------

// SetFleetNameRequest

// string fleet_uri = 1;
inline void SetFleetNameRequest::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetNameRequest::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetNameRequest.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void SetFleetNameRequest::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetNameRequest.fleet_uri)
}
#if LANG_CXX11
inline void SetFleetNameRequest::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetNameRequest.fleet_uri)
}
#endif
inline void SetFleetNameRequest::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetNameRequest.fleet_uri)
}
inline void SetFleetNameRequest::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetNameRequest.fleet_uri)
}
inline ::std::string* SetFleetNameRequest::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetNameRequest.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetNameRequest::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetNameRequest.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetNameRequest::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetNameRequest.fleet_uri)
}

// string actor_username = 2;
inline void SetFleetNameRequest::clear_actor_username() {
  actor_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetNameRequest::actor_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetNameRequest.actor_username)
  return actor_username_.GetNoArena();
}
inline void SetFleetNameRequest::set_actor_username(const ::std::string& value) {
  
  actor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetNameRequest.actor_username)
}
#if LANG_CXX11
inline void SetFleetNameRequest::set_actor_username(::std::string&& value) {
  
  actor_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetNameRequest.actor_username)
}
#endif
inline void SetFleetNameRequest::set_actor_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  actor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetNameRequest.actor_username)
}
inline void SetFleetNameRequest::set_actor_username(const char* value, size_t size) {
  
  actor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetNameRequest.actor_username)
}
inline ::std::string* SetFleetNameRequest::mutable_actor_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetNameRequest.actor_username)
  return actor_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetNameRequest::release_actor_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetNameRequest.actor_username)
  
  return actor_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetNameRequest::set_allocated_actor_username(::std::string* actor_username) {
  if (actor_username != NULL) {
    
  } else {
    
  }
  actor_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actor_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetNameRequest.actor_username)
}

// string appkey = 3;
inline void SetFleetNameRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetNameRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetNameRequest.appkey)
  return appkey_.GetNoArena();
}
inline void SetFleetNameRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetNameRequest.appkey)
}
#if LANG_CXX11
inline void SetFleetNameRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetNameRequest.appkey)
}
#endif
inline void SetFleetNameRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetNameRequest.appkey)
}
inline void SetFleetNameRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetNameRequest.appkey)
}
inline ::std::string* SetFleetNameRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetNameRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetNameRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetNameRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetNameRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetNameRequest.appkey)
}

// string fleet_name = 4;
inline void SetFleetNameRequest::clear_fleet_name() {
  fleet_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetNameRequest::fleet_name() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetNameRequest.fleet_name)
  return fleet_name_.GetNoArena();
}
inline void SetFleetNameRequest::set_fleet_name(const ::std::string& value) {
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetNameRequest.fleet_name)
}
#if LANG_CXX11
inline void SetFleetNameRequest::set_fleet_name(::std::string&& value) {
  
  fleet_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetNameRequest.fleet_name)
}
#endif
inline void SetFleetNameRequest::set_fleet_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetNameRequest.fleet_name)
}
inline void SetFleetNameRequest::set_fleet_name(const char* value, size_t size) {
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetNameRequest.fleet_name)
}
inline ::std::string* SetFleetNameRequest::mutable_fleet_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetNameRequest.fleet_name)
  return fleet_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetNameRequest::release_fleet_name() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetNameRequest.fleet_name)
  
  return fleet_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetNameRequest::set_allocated_fleet_name(::std::string* fleet_name) {
  if (fleet_name != NULL) {
    
  } else {
    
  }
  fleet_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_name);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetNameRequest.fleet_name)
}

// string msg_id = 5;
inline void SetFleetNameRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetNameRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetNameRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void SetFleetNameRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetNameRequest.msg_id)
}
#if LANG_CXX11
inline void SetFleetNameRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetNameRequest.msg_id)
}
#endif
inline void SetFleetNameRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetNameRequest.msg_id)
}
inline void SetFleetNameRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetNameRequest.msg_id)
}
inline ::std::string* SetFleetNameRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetNameRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetNameRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetNameRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetNameRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetNameRequest.msg_id)
}

// -------------------------------------------------------------------

// SetFleetNameResponse

// .common.errcode.EErrorCode ret = 1;
inline void SetFleetNameResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode SetFleetNameResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetNameResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void SetFleetNameResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetNameResponse.ret)
}

// string msg_id = 2;
inline void SetFleetNameResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetNameResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetNameResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void SetFleetNameResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetNameResponse.msg_id)
}
#if LANG_CXX11
inline void SetFleetNameResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetNameResponse.msg_id)
}
#endif
inline void SetFleetNameResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetNameResponse.msg_id)
}
inline void SetFleetNameResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetNameResponse.msg_id)
}
inline ::std::string* SetFleetNameResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetNameResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetNameResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetNameResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetNameResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetNameResponse.msg_id)
}

// -------------------------------------------------------------------

// FleetNameChangedSignal

// string fleet_name = 1;
inline void FleetNameChangedSignal::clear_fleet_name() {
  fleet_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetNameChangedSignal::fleet_name() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetNameChangedSignal.fleet_name)
  return fleet_name_.GetNoArena();
}
inline void FleetNameChangedSignal::set_fleet_name(const ::std::string& value) {
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetNameChangedSignal.fleet_name)
}
#if LANG_CXX11
inline void FleetNameChangedSignal::set_fleet_name(::std::string&& value) {
  
  fleet_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetNameChangedSignal.fleet_name)
}
#endif
inline void FleetNameChangedSignal::set_fleet_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetNameChangedSignal.fleet_name)
}
inline void FleetNameChangedSignal::set_fleet_name(const char* value, size_t size) {
  
  fleet_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetNameChangedSignal.fleet_name)
}
inline ::std::string* FleetNameChangedSignal::mutable_fleet_name() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetNameChangedSignal.fleet_name)
  return fleet_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetNameChangedSignal::release_fleet_name() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetNameChangedSignal.fleet_name)
  
  return fleet_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetNameChangedSignal::set_allocated_fleet_name(::std::string* fleet_name) {
  if (fleet_name != NULL) {
    
  } else {
    
  }
  fleet_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_name);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetNameChangedSignal.fleet_name)
}

// .outer.fleet.FleetCrew actor = 2;
inline bool FleetNameChangedSignal::has_actor() const {
  return this != internal_default_instance() && actor_ != NULL;
}
inline void FleetNameChangedSignal::clear_actor() {
  if (GetArenaNoVirtual() == NULL && actor_ != NULL) {
    delete actor_;
  }
  actor_ = NULL;
}
inline const ::outer::fleet::FleetCrew& FleetNameChangedSignal::actor() const {
  const ::outer::fleet::FleetCrew* p = actor_;
  // @@protoc_insertion_point(field_get:outer.fleet.FleetNameChangedSignal.actor)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetCrew*>(
      &::outer::fleet::_FleetCrew_default_instance_);
}
inline ::outer::fleet::FleetCrew* FleetNameChangedSignal::release_actor() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetNameChangedSignal.actor)
  
  ::outer::fleet::FleetCrew* temp = actor_;
  actor_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetCrew* FleetNameChangedSignal::mutable_actor() {
  
  if (actor_ == NULL) {
    actor_ = new ::outer::fleet::FleetCrew;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetNameChangedSignal.actor)
  return actor_;
}
inline void FleetNameChangedSignal::set_allocated_actor(::outer::fleet::FleetCrew* actor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete actor_;
  }
  if (actor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      actor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetNameChangedSignal.actor)
}

// string appkey = 3;
inline void FleetNameChangedSignal::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetNameChangedSignal::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetNameChangedSignal.appkey)
  return appkey_.GetNoArena();
}
inline void FleetNameChangedSignal::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetNameChangedSignal.appkey)
}
#if LANG_CXX11
inline void FleetNameChangedSignal::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetNameChangedSignal.appkey)
}
#endif
inline void FleetNameChangedSignal::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetNameChangedSignal.appkey)
}
inline void FleetNameChangedSignal::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetNameChangedSignal.appkey)
}
inline ::std::string* FleetNameChangedSignal::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetNameChangedSignal.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetNameChangedSignal::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetNameChangedSignal.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetNameChangedSignal::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetNameChangedSignal.appkey)
}

// -------------------------------------------------------------------

// SetFleetDescRequest

// string fleet_uri = 1;
inline void SetFleetDescRequest::clear_fleet_uri() {
  fleet_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetDescRequest::fleet_uri() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetDescRequest.fleet_uri)
  return fleet_uri_.GetNoArena();
}
inline void SetFleetDescRequest::set_fleet_uri(const ::std::string& value) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetDescRequest.fleet_uri)
}
#if LANG_CXX11
inline void SetFleetDescRequest::set_fleet_uri(::std::string&& value) {
  
  fleet_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetDescRequest.fleet_uri)
}
#endif
inline void SetFleetDescRequest::set_fleet_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetDescRequest.fleet_uri)
}
inline void SetFleetDescRequest::set_fleet_uri(const char* value, size_t size) {
  
  fleet_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetDescRequest.fleet_uri)
}
inline ::std::string* SetFleetDescRequest::mutable_fleet_uri() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetDescRequest.fleet_uri)
  return fleet_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetDescRequest::release_fleet_uri() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetDescRequest.fleet_uri)
  
  return fleet_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetDescRequest::set_allocated_fleet_uri(::std::string* fleet_uri) {
  if (fleet_uri != NULL) {
    
  } else {
    
  }
  fleet_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleet_uri);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetDescRequest.fleet_uri)
}

// string actor_username = 2;
inline void SetFleetDescRequest::clear_actor_username() {
  actor_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetDescRequest::actor_username() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetDescRequest.actor_username)
  return actor_username_.GetNoArena();
}
inline void SetFleetDescRequest::set_actor_username(const ::std::string& value) {
  
  actor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetDescRequest.actor_username)
}
#if LANG_CXX11
inline void SetFleetDescRequest::set_actor_username(::std::string&& value) {
  
  actor_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetDescRequest.actor_username)
}
#endif
inline void SetFleetDescRequest::set_actor_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  actor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetDescRequest.actor_username)
}
inline void SetFleetDescRequest::set_actor_username(const char* value, size_t size) {
  
  actor_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetDescRequest.actor_username)
}
inline ::std::string* SetFleetDescRequest::mutable_actor_username() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetDescRequest.actor_username)
  return actor_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetDescRequest::release_actor_username() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetDescRequest.actor_username)
  
  return actor_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetDescRequest::set_allocated_actor_username(::std::string* actor_username) {
  if (actor_username != NULL) {
    
  } else {
    
  }
  actor_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actor_username);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetDescRequest.actor_username)
}

// string appkey = 3;
inline void SetFleetDescRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetDescRequest::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetDescRequest.appkey)
  return appkey_.GetNoArena();
}
inline void SetFleetDescRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetDescRequest.appkey)
}
#if LANG_CXX11
inline void SetFleetDescRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetDescRequest.appkey)
}
#endif
inline void SetFleetDescRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetDescRequest.appkey)
}
inline void SetFleetDescRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetDescRequest.appkey)
}
inline ::std::string* SetFleetDescRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetDescRequest.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetDescRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetDescRequest.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetDescRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetDescRequest.appkey)
}

// string desc = 4;
inline void SetFleetDescRequest::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetDescRequest::desc() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetDescRequest.desc)
  return desc_.GetNoArena();
}
inline void SetFleetDescRequest::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetDescRequest.desc)
}
#if LANG_CXX11
inline void SetFleetDescRequest::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetDescRequest.desc)
}
#endif
inline void SetFleetDescRequest::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetDescRequest.desc)
}
inline void SetFleetDescRequest::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetDescRequest.desc)
}
inline ::std::string* SetFleetDescRequest::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetDescRequest.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetDescRequest::release_desc() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetDescRequest.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetDescRequest::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetDescRequest.desc)
}

// string msg_id = 5;
inline void SetFleetDescRequest::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetDescRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetDescRequest.msg_id)
  return msg_id_.GetNoArena();
}
inline void SetFleetDescRequest::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetDescRequest.msg_id)
}
#if LANG_CXX11
inline void SetFleetDescRequest::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetDescRequest.msg_id)
}
#endif
inline void SetFleetDescRequest::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetDescRequest.msg_id)
}
inline void SetFleetDescRequest::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetDescRequest.msg_id)
}
inline ::std::string* SetFleetDescRequest::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetDescRequest.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetDescRequest::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetDescRequest.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetDescRequest::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetDescRequest.msg_id)
}

// -------------------------------------------------------------------

// SetFleetDescResponse

// .common.errcode.EErrorCode ret = 1;
inline void SetFleetDescResponse::clear_ret() {
  ret_ = 0;
}
inline ::common::errcode::EErrorCode SetFleetDescResponse::ret() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetDescResponse.ret)
  return static_cast< ::common::errcode::EErrorCode >(ret_);
}
inline void SetFleetDescResponse::set_ret(::common::errcode::EErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetDescResponse.ret)
}

// string msg_id = 2;
inline void SetFleetDescResponse::clear_msg_id() {
  msg_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetFleetDescResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:outer.fleet.SetFleetDescResponse.msg_id)
  return msg_id_.GetNoArena();
}
inline void SetFleetDescResponse::set_msg_id(const ::std::string& value) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.SetFleetDescResponse.msg_id)
}
#if LANG_CXX11
inline void SetFleetDescResponse::set_msg_id(::std::string&& value) {
  
  msg_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.SetFleetDescResponse.msg_id)
}
#endif
inline void SetFleetDescResponse::set_msg_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.SetFleetDescResponse.msg_id)
}
inline void SetFleetDescResponse::set_msg_id(const char* value, size_t size) {
  
  msg_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.SetFleetDescResponse.msg_id)
}
inline ::std::string* SetFleetDescResponse::mutable_msg_id() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.SetFleetDescResponse.msg_id)
  return msg_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetFleetDescResponse::release_msg_id() {
  // @@protoc_insertion_point(field_release:outer.fleet.SetFleetDescResponse.msg_id)
  
  return msg_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetFleetDescResponse::set_allocated_msg_id(::std::string* msg_id) {
  if (msg_id != NULL) {
    
  } else {
    
  }
  msg_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_id);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.SetFleetDescResponse.msg_id)
}

// -------------------------------------------------------------------

// FleetDescChangedSignal

// string desc = 1;
inline void FleetDescChangedSignal::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetDescChangedSignal::desc() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetDescChangedSignal.desc)
  return desc_.GetNoArena();
}
inline void FleetDescChangedSignal::set_desc(const ::std::string& value) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetDescChangedSignal.desc)
}
#if LANG_CXX11
inline void FleetDescChangedSignal::set_desc(::std::string&& value) {
  
  desc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetDescChangedSignal.desc)
}
#endif
inline void FleetDescChangedSignal::set_desc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetDescChangedSignal.desc)
}
inline void FleetDescChangedSignal::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetDescChangedSignal.desc)
}
inline ::std::string* FleetDescChangedSignal::mutable_desc() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetDescChangedSignal.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetDescChangedSignal::release_desc() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetDescChangedSignal.desc)
  
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetDescChangedSignal::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetDescChangedSignal.desc)
}

// .outer.fleet.FleetCrew actor = 2;
inline bool FleetDescChangedSignal::has_actor() const {
  return this != internal_default_instance() && actor_ != NULL;
}
inline void FleetDescChangedSignal::clear_actor() {
  if (GetArenaNoVirtual() == NULL && actor_ != NULL) {
    delete actor_;
  }
  actor_ = NULL;
}
inline const ::outer::fleet::FleetCrew& FleetDescChangedSignal::actor() const {
  const ::outer::fleet::FleetCrew* p = actor_;
  // @@protoc_insertion_point(field_get:outer.fleet.FleetDescChangedSignal.actor)
  return p != NULL ? *p : *reinterpret_cast<const ::outer::fleet::FleetCrew*>(
      &::outer::fleet::_FleetCrew_default_instance_);
}
inline ::outer::fleet::FleetCrew* FleetDescChangedSignal::release_actor() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetDescChangedSignal.actor)
  
  ::outer::fleet::FleetCrew* temp = actor_;
  actor_ = NULL;
  return temp;
}
inline ::outer::fleet::FleetCrew* FleetDescChangedSignal::mutable_actor() {
  
  if (actor_ == NULL) {
    actor_ = new ::outer::fleet::FleetCrew;
  }
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetDescChangedSignal.actor)
  return actor_;
}
inline void FleetDescChangedSignal::set_allocated_actor(::outer::fleet::FleetCrew* actor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete actor_;
  }
  if (actor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      actor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetDescChangedSignal.actor)
}

// string appkey = 3;
inline void FleetDescChangedSignal::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleetDescChangedSignal::appkey() const {
  // @@protoc_insertion_point(field_get:outer.fleet.FleetDescChangedSignal.appkey)
  return appkey_.GetNoArena();
}
inline void FleetDescChangedSignal::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:outer.fleet.FleetDescChangedSignal.appkey)
}
#if LANG_CXX11
inline void FleetDescChangedSignal::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:outer.fleet.FleetDescChangedSignal.appkey)
}
#endif
inline void FleetDescChangedSignal::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:outer.fleet.FleetDescChangedSignal.appkey)
}
inline void FleetDescChangedSignal::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:outer.fleet.FleetDescChangedSignal.appkey)
}
inline ::std::string* FleetDescChangedSignal::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:outer.fleet.FleetDescChangedSignal.appkey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleetDescChangedSignal::release_appkey() {
  // @@protoc_insertion_point(field_release:outer.fleet.FleetDescChangedSignal.appkey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleetDescChangedSignal::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:outer.fleet.FleetDescChangedSignal.appkey)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fleet
}  // namespace outer

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::outer::fleet::FleetSignalType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::outer::fleet::FleetSignalType>() {
  return ::outer::fleet::FleetSignalType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_outer_2ffleet_2eproto__INCLUDED
