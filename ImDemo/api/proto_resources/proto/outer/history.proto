syntax = "proto3";
package outer.history;
import "common/errcode.proto";
import "common/msg.proto";

option java_multiple_files = false;
option java_package = "com.cmcc.littlec.proto.outer";
option java_outer_classname = "History";

//终端类型
enum END_TYPE {
    UNKNOWN = 0;
    MOBILE = 2; //移动端(ios,安卓)
    WEB = 1; //网页端(目前用户 车机端)
}

//单聊历史消息查询
message ChatHistoryMessageGetRequest {
    string from_username = 1; //请求方username
    string to_username = 2; //单聊会话另一端username
    uint64 begin_guid = 3; // 从哪条消息开始拉取(可选)
    uint32 limit = 4; // 拉取消息条数上限
    string appkey = 5; //appkey
    END_TYPE type = 6; //终端类型
}

//群聊历史消息查询
message GroupHistoryMessageGetRequest {
    string group_uri = 1; //群uri标识
    string from_username = 2; //消息发送用户名
    string appkey = 3; //应用标识
    uint64 begin_guid = 4; //群消息从哪条消息开始拉取
    uint32 limit = 5; //拉取消息条数上限
}

//消息同步请求
message MessageSyncRequest {
    uint64 guid = 1; //根据GUID查询消息(可选)
    string username = 2; //用户ID
    string appkey = 3; //appkey
    bool sor = 4; //false : 接收消息，true： 发送消息
    END_TYPE type = 5; //终端类型
    uint64 modified_timestamp = 6; //同步消息时间戳
}
//消息同步响应
message MsgGetResponse {
    common.errcode.EErrorCode ret = 1; // 错误码
    repeated common.msg.MessageUnit data = 2; // 消息列表
    uint64 modified_timestamp = 6; //消息时间戳，消息列表最新消息时间戳
}

//同步单聊会话已读位置请求
message SyncChatSessionReadRequest {
    string appkey = 1; //应用标识
    string from_username = 2; //消息发送者
    string to_username = 3; //消息接收者
}
//同步单聊会话已读位置响应
message SyncChatSessionReadResponse {
    common.errcode.EErrorCode ret = 1; // 错误码
    int64 read_guid = 2; //已读guid
}

//同步群聊会话已读位置请求
message SyncGroupSessionReadRequest {
    string appkey = 1; //应用标识
    string uri = 2; //群uri
    string to_username = 3; //消息接收者
}
//同步群聊会话已读位置响应
message SyncGroupSessionReadResponse {
    common.errcode.EErrorCode ret = 1; // 错误码
    int64 read_guid = 2; //已读guid
}
//单聊删除历史消息请求
message ChatMessageRemoveRequest {
    string appkey = 1; //应用标识
    string from_username = 2; //请求方username
    string to_username = 3; //单聊会话另一端username
    repeated uint64 guid = 4; //消息guid列表
    bool remove_session = 5; //是否移除session
}

//群聊删除历史消息
message GroupMessageRemoveRequest {
    string appkey = 1; //应用标识
    string from_username = 2; //请求方username
    string uri = 3; //群uri标识
    repeated uint64 guid = 4; //消息guid列表
}
//消息移除响应
message MessageRemoveResponse {
    common.errcode.EErrorCode ret = 1; // 错误码
}

//同步发送GUID请求
message SyncSendGUIDRequest {
    string username = 1; //用户名
    string appkey = 2; //应用标识
}
//同步发送GUID响应
message SyncSendGUIDResponse {
    common.errcode.EErrorCode ret = 1; // 错误码
    uint64 send_guid = 2; //发送guid
}

//同步接收GUID请求
message SyncReceivedGUIDRequest {
    string username = 1; //用户名
    string appkey = 2; //应用标识
}
//同步接收GUID响应
message SyncReceivedGUIDResponse {
    common.errcode.EErrorCode ret = 1; // 错误码
    uint64 received_guid = 2; //接收guid
}
message FleetHistoryMessageGetRequest {
    string fleet_uri = 1; //群uri标识
    string from_username = 2; //消息发送用户名
    string appkey = 3; //应用标识
    uint64 begin_guid = 4; //群消息从哪条消息开始拉取
    uint32 limit = 5; //拉取消息条数上限
}

// 联系人
message ContactInfo {
    string appkey = 1; //应用标识
    string contact_username = 2; //联系人用户名
    string contact_nick = 3; //联系人昵称
    string contact_display = 4; // 联系人备注名
    string original_link = 5; //联系人头像原图
    string thumbnail_link = 6; //联系人头像缩略图
    uint64 modified = 8; // 更新时间
    string phone = 10; //手机号码
}

//获取最近联系人请求
message GetLatestContactRequest {
    string appkey = 1; //应用标识
    string username = 2; //用户名
}
//获取最近联系人响应
message GetLatestContactResponse {
    common.errcode.EErrorCode ret = 1; // 错误码
    repeated ContactInfo contact_info = 2; //联系人列表
    repeated common.msg.MessageUnit message = 3; //最后一条消息列表
}
//单条消息同步请求
message SingleMessageSyncRequest {
    string appkey = 1; //应用标识
    uint64 guid = 2; //待同步消息guid
    string username = 3; //用户名
}
//单条消息同步响应
message SingleMessageSyncResponse {
    common.errcode.EErrorCode ret = 1; // 错误码
    common.msg.MessageUnit unit = 2; // 消息
}

//离线自定义消息同步请求
message OfflineCustomMessageSyncRequest {
    string username = 2; //用户ID
    string appkey = 3; //appkey
    bool sor = 4; //false : 接收消息，true： 发送消息
    uint64 modified_timestamp = 5; //同步消息时间戳 以时间戳和平台guid为并列条件需同时满足
    uint32 limit = 6; // 拉取消息条数上限，limit为空时同步全量消息
}

//单聊历史消息查询
message ChatHistoryMessageUnRegistGetRequest {
    string from_username = 1; //请求方username
    string to_phone = 2; //单聊会话另一端username
    uint64 begin_guid = 3; // 从哪条消息开始拉取(可选)
    uint32 limit = 4; // 拉取消息条数上限
    string appkey = 5; //appkey
    END_TYPE type = 6; //终端类型
}
//消息同步响应
message ChatHistoryMessageUnRegistGetResponse {
    bytes messageListJson = 1;
}

message CountMessageUnRegisterRequest {
    string unregiger_phone = 1;
    string app_key = 2;
    string platform_user_name = 3;
    uint64 start_time = 4;
    uint64 end_time = 5;

}

message CountMessageUnRegisterResponse {
    uint64 count = 1;
}

//合并消息请求体
message MergeMessageRequest {
    uint64 guid = 1;//要获取合并消息的guid
}

//合并消息请相应
message MergeMessageResponse {
    common.errcode.EErrorCode ret = 1; // 错误码
    repeated common.msg.MessageUnit data = 2; // 消息列表
}

//UnregisteredChatMsg
service HistoryService {
    //消息同步
    rpc MessageSync (MessageSyncRequest) returns (MsgGetResponse);
    //单聊历史消息获取
    rpc ChatHistoryMessageGet (ChatHistoryMessageGetRequest) returns (MsgGetResponse);
    //群历史消息获取
    rpc GroupHistoryMessageGet (GroupHistoryMessageGetRequest) returns (MsgGetResponse);
    //同步发送的guid
    rpc SyncSendGUID (SyncSendGUIDRequest) returns (SyncSendGUIDResponse);
    //同步接收的guid
    rpc SyncReceivedGUID (SyncReceivedGUIDRequest) returns (SyncReceivedGUIDResponse);
    //删除单聊消息
    rpc ChatMessageRemove (ChatMessageRemoveRequest) returns (MessageRemoveResponse);
    //删除群聊消息
    rpc GroupMessageRemove (GroupMessageRemoveRequest) returns (MessageRemoveResponse);
    //同步单聊会话已读记录
    rpc SyncChatSessionRead (SyncChatSessionReadRequest) returns (SyncChatSessionReadResponse);
    //同步群聊会话已读记录
    rpc SyncGroupSessionRead (SyncGroupSessionReadRequest) returns (SyncGroupSessionReadResponse);
    //车队历史消息获取
    /*    rpc FleetHistoryMessageGet (FleetHistoryMessageGetRequest) returns (MsgGetResponse);*/
    //获取最近联系人
    rpc GetLatestContact (GetLatestContactRequest) returns (GetLatestContactResponse);
    //单条消息同步
    rpc SingleMessageSync (SingleMessageSyncRequest) returns (SingleMessageSyncResponse);
    //离线自定义消息同步
    rpc OfflineCustomMessageSync (OfflineCustomMessageSyncRequest) returns (MsgGetResponse);
    //获取发给未注册用户的的信息
    rpc ChatMessageUnRegistGet (ChatHistoryMessageUnRegistGetRequest) returns (MsgGetResponse);
    //查看非注册用户当日发送消息数量
    rpc CountChatMessageUnRegisterDate (CountMessageUnRegisterRequest) returns (CountMessageUnRegisterResponse);
    //获取合并消息的消息内容
    rpc GetMergeMessage (MergeMessageRequest) returns (MergeMessageResponse);
}
