syntax = "proto3";

package outer.chat;

import "common/msg.proto";
import "common/errcode.proto";
import "common/enumeration.proto";

option java_multiple_files = false;
option java_package = "com.cmcc.littlec.proto.outer";
option java_outer_classname = "Chat";

// 单聊请求，发起于终端
message ChatMessageRequest {
    string from_username = 1; // 发送方username
    string appkey = 2; // appkey, 各应用在官网申请
    string from_nick = 3; // 发送方昵称，选填
    string to_username = 4; // 接收方username
    common.msg.EMsgContentType msg_content_type = 5; // 消息类型，文本、图片、语音、视频等
    bytes data = 6; // 业务层根据msg_content_type解析具体消息内容
    string msg_id = 7; // 终端生成，便于发送方重发&接收方去重
    bool burn_after_read = 8; // 是否阅后即焚
    common.enumeration.EClientType from_client_type = 9; // 发送者终端类型
    bool is_jimao = 10; // 是否鸡毛信
    bool to_user_is_unregistered = 11; // 接收方用户是否已经注册，true表示没有注册，fasle表示已经注册过
    string to_phone = 12; // 接收方的手机号码，，当to_user_is_unregistered=true时候必填
    string from_phone = 13; //发送方的手机号码
}

// 单聊响应
message ChatMessageResponse {
    common.errcode.EErrorCode ret = 1; // 返回码 参见EErrorCode
    uint64 guid = 2; // 消息guid
    string msg_id = 3; // 终端生成，便于发送方重发&接收方去重
    string jimao_left_num = 4; // 企业剩余能发送的鸡毛信的数量
    uint64 timestamp = 5; //消息时间戳
    uint32 user_enable = 6; // 接收方是否注销 0 是平台注销用户 1 不是平台注销用户
}

// 群发请求
message MultiMessageRequest {
    string from_username = 1; // 发送方username
    string appkey = 2; // appkey, 各应用在官网申请
    string from_nick = 3; // 发送方昵称，选填
    repeated string to_username = 4; // 接收方username
    common.msg.EMsgContentType msg_content_type = 5; // 消息类型，文本、图片、语音、视频等
    bytes data = 6; // 业务层根据msg_content_type解析具体消息内容
    string msg_id = 7; // 终端生成，便于发送方重发&接收方去重
    bool burn_after_read = 8; // 是否阅后即焚
    common.enumeration.EClientType from_client_type = 9; // 发送者终端类型
    bool is_jimao = 10; //是否鸡毛信
}
// 群发响应
message MultiMessageResponse {
    common.errcode.EErrorCode ret = 1; // 返回码 参见EErrorCode
    uint64 guid = 2; // 消息guid
    string msg_id = 3; // 终端生成，便于发送方重发&接收方去重
    string jimao_left_num = 4; // 企业剩余能发送的鸡毛信数量
}
// 群发消息，用于拉取消息&平台内部交互
message MultiMessage {
    string from_username = 1; // 发送方username
    string appkey = 2; // appkey, 各应用在官网申请
    string from_nick = 3; // 发送方昵称，选填
    common.msg.EMsgContentType msg_content_type = 4; // 消息类型，文本、图片、语音、视频等
    bytes data = 5; // 业务层根据msg_content_type解析具体消息内容
    uint64 guid = 6; // 全局唯一标识码，由chat服务生成
    string msg_id = 7; // 终端生成，便于发送方重发&接收方去重
    repeated string receiver = 8; // 接收者
    bool is_jimao = 9; // 是否鸡毛信
    bool is_read = 10; //是否已读
}

// 单聊请求，发起于终端
message PrivateMessageRequest {
    string from_username = 1; // 发送方username
    string appkey = 2; // appkey, 各应用在官网申请
    string from_nick = 3; // 发送方昵称，选填
    string to_username = 4; // 接收方username
    common.msg.EMsgContentType msg_content_type = 5; // 消息类型，文本、图片、语音、视频等
    bytes data = 6; // 业务层根据msg_content_type解析具体消息内容
    string msg_id = 7; // 终端生成，便于发送方重发&接收方去重
    bool burn_after_read = 8; // 是否阅后即焚
    common.enumeration.EClientType from_client_type = 9; // 发送者终端类型
    bool is_jimao = 10; // 是否鸡毛信
}

// 单聊响应
message PrivateMessageResponse {
    common.errcode.EErrorCode ret = 1; // 返回码 参见EErrorCode
    uint64 guid = 2; // 消息guid
    string msg_id = 3; // 终端生成，便于发送方重发&接收方去重
    string jimao_left_num = 4; // 企业剩余能发送的鸡毛信的数量
}

// 单聊消息，用于拉取消息&平台内部交互
message PrivateMessage {
    string from_username = 1; // 发送方username
    string appkey = 2; // appkey, 各应用在官网申请
    string from_nick = 3; // 发送方昵称，选填
    common.msg.EMsgContentType msg_content_type = 4; // 消息类型，文本、图片、语音、视频等
    bytes data = 5; // 业务层根据msg_content_type解析具体消息内容
    uint64 guid = 6; // 全局唯一标识码，由chat服务生成
    string msg_id = 7; // 终端生成，便于发送方重发&接收方去重
    bool burn_after_read = 8; // 是否阅后即焚
    string to_username = 9; // 接收者username
    bool is_jimao = 10; // 是否鸡毛信
}
message GetServerTimestampRequest {

}
message GetServerTimestampResponse {
    uint64 timestamp = 1;
}
// 单聊服务
service ChatService {
    // 发送单聊消息
    rpc SendChat (ChatMessageRequest) returns (ChatMessageResponse);
    // 群发消息
    rpc SendMulti (MultiMessageRequest) returns (MultiMessageResponse);
    // 发送私密聊消息
    rpc SendPrivate (PrivateMessageRequest) returns (PrivateMessageResponse);
    // 获取服务器时间戳
    rpc GetServerTimestamp (GetServerTimestampRequest) returns (GetServerTimestampResponse);

}
