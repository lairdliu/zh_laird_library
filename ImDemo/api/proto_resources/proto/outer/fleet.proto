syntax = "proto3";

package outer.fleet;

import "common/msg.proto";
import "common/errcode.proto";
import "common/enumeration.proto";

option java_multiple_files = false;
option java_package = "com.cmcc.littlec.proto.outer";
option java_outer_classname = "Fleet";

// 车队信息
message FleetInfo
{
	string fleet_uri = 1;	// 车队唯一标识
	string appkey = 2;      //与应用绑定，由能力平台分配
	string fleet_name = 3;	// 车队名称
	uint32 crew_count = 4;	// 车队人数
	uint64 created = 5;	// 车队创建时间
	string desc = 6;	// 车队描述
	common.msg.LocationMessage assembly_point = 7; // 集结点
}

// 车队队员结构
message FleetCrew
{
	string username = 1;//用户的唯一标识，登录流程图中的uid
	string appkey = 2; //与应用绑定，由能力平台分配
	string nick = 3;	// 成员昵称
	bool is_captain = 4;	// 是否为队长  true：为队长， false：成员
	uint64 created = 5;	// 加入车队时间
	common.enumeration.EEnable enable = 6;	// 1:有效，0:无效，，被踢或退出时，enable=0
	uint64 modified = 7;	// 成员更新时间
	bool is_authorization = 8;	// 临时位置是否授权  true：已经授权， false：未授权（取消授权）
	string fleet_uri = 9;	// 车队唯一标识
}

// 邀请通知详情结构
message InvitationNoticeInfo
{
	string fleet_uri = 1;//车队唯一标识
	string appkey = 2; //与应用绑定，由能力平台分配
	string invitee_username = 3;	// 被邀请者，用户唯一标识
	string invitee_nick = 4;	// 被邀者昵称
	string inviter_username = 5;	// 邀请者，用户唯一标识
	string inviter_nick = 6; // 邀请者昵称
	common.enumeration.EInvitationNoticeStatus status = 7;	// 邀请通知的状态
	uint64 created = 8;	// 创建时间
	uint64 modified = 9;	// 更新时间
	string fleet_name = 10;//车队名称
	common.enumeration.EEnable enable = 11;// 此通知是否有效  ENABLED：有效，DISABLED：无效
	string invite_reason = 12;	//邀请理由
}

// 车队信令类型
enum FleetSignalType
{
	UNKNOWNFLEETSIGNALTYPE = 0;
	INVITING_SIGNAL = 1;	// 邀请入车队信令
	INVITATION_ACCEPTED_SIGNAL = 2;	// 同意入车队邀请信令，发送给邀请者
	INVITEE_JOIN_FLEET_SIGNAL = 3;	// 受邀者入车队信令，发送给车队里所有人
	INVITATION_DECLINED_SIGNAL = 4;	// 拒绝入车队邀请信令，可能用不到，看需求中没有拒绝按钮，只有 同意和忽略
	BE_KICKED_SIGNAL = 5;	// 成员被踢出信令
	EXITED_SIGNAL = 6;	// 成员退车队信令
	FLEET_DESTROYED_SIGNAL = 7;	// 车队被解散信令
	OWNER_CHANGED_SIGNAL = 8;	// 车队队长变更信令
	NICK_CHANGED_SIGNAL = 9;	// 成员昵称变更信令
	AGGREGATION_POINT_CHANGE = 10;	// 集结点变化的信令
	INVITING_SIGNAL_INVALID = 11;	// 邀请信令失效
	FLEET_CREATED_SIGNAL = 12;	// 建车队信令
	SHARE_LOCATION_CHANGE = 13;	// 车队内成员共享位置变更信令
	LOCATION_AUTHORIZATION_CHANGE = 14; //临时位置是否授权 变更信令
	JOIN_FLEET_SIGNAL = 15; //加入车队信令, 和 INVITEE_JOIN_FLEET_SIGNAL 的区别：直接拉入车队触发的信令
	FLEET_NAME_CHANGED_SIGNAL = 16;	// 车队名称变更信令
	FLEET_DESC_CHANGED_SIGNAL = 17;	// 车队描述变更信令
}

// 车队信令
message FleetSignal
{
	FleetSignalType signal_type = 1;	//车队信令类型
	bytes data = 2;	// 业务层根据signal_type解析信令内容
	FleetInfo Fleet_info = 3;	// 车队信息
	uint64 guid = 4; // 全局唯一标识码
    repeated string receiver = 5;  // 接收者；用户的唯一标识，登录流程图中的uid
}

// 车队消息
message FleetMessage
{
	string from_username = 1; // 发送方username
	string from_nick = 2;	// 发送方昵称
	string appkey = 3;	// appkey
	string fleet_uri = 4; // 车队uri
	common.msg.EMsgContentType msg_content_type = 5; // 消息内容类型，文本、图片、语音、视频等
	bytes data = 6; // 业务层根据type解析具体消息内容
	uint64 guid = 7; // 全局唯一标识码，group服务生成
	string msg_id = 8;	// 终端生成，便于发送方重发&接收方去重
	string fleet_name = 9;	// 车队名称
	bool is_read = 10; //是否已读
}


// 车队消息请求
message SendFleetMessageRequest
{
	string from_username = 1; // 发送方username
	string appkey = 2;	// appkey
	string fleet_uri = 3; // 车队uri
	common.msg.EMsgContentType msg_content_type = 4; // 消息内容类型，文本、图片、语音、视频等
	bytes data = 5; // 业务层根据type解析具体消息内容
	string msg_id = 6;	// 终端生成，便于发送方重发&接收方去重
}
// 车队消息响应
message SendFleetMessageResponse
{
	common.errcode.EErrorCode ret = 1; // 返回码 参见EErrorCode
	uint64 guid = 2; // 消息guid
	string msg_id = 3;	// 终端生成，便于发送方重发&接收方去重
}

// 建车队请求
message CreateFleetRequest
{
	string fleet_name = 1;	// 车队名称
	string appkey = 2;//与应用绑定，由能力平台分配
	string captain_username = 3;	//队长；用户的唯一标识，登录流程图中的uid
	repeated string invitee_username = 4;	//受邀者（需要用户同意）；用户的唯一标识，登录流程图中的uid
	repeated string member_username = 5;	//这个目前用不到   直接进队者（拉人的时候，直接进队，不需要用户同意）； 用户的唯一标识，登录流程图中的uid
	string invite_reason = 6;	//邀请理由
	string msg_id = 7;	// 终端生成，便于发送方重发&接收方去重
}
// 建车队响应
message CreateFleetResponse
{
	common.errcode.EErrorCode ret = 1; // 返回码 
	FleetInfo Fleet_info = 2; //车队信息
	string msg_id = 3;	// 终端生成，便于发送方重发&接收方去重
}

// 车队创建成功信令
message FleetCreatedSignal
{
	FleetCrew captain = 1;	// 车队队长
	repeated FleetCrew member = 2;	// 队员
}

// 邀请入车队信令
message InvitingToFleetSignal
{
	FleetCrew from_crew = 1;	//邀请者
	string reason = 2;	//邀请理由
	uint64 invite_time = 3; // 邀请时间
}

// 同意入车队请求
message AcceptFleetInvitationRequest
{
	string fleet_uri = 1;	// 车队唯一标识
    string username = 2; // 接受邀请的人；用户的唯一标识，登录流程图中的uid
	string accept_to_username = 3;	// 邀请者；用户的唯一标识，登录流程图中的uid
	string appkey = 4;	// 与应用绑定，由能力平台分配
	string msg_id = 5;	// 终端生成，便于发送方重发&接收方去重
}
// 同意入车队响应
message AcceptFleetInvitationResponse
{
	common.errcode.EErrorCode ret = 1;
	string msg_id = 2;	// 终端生成，便于发送方重发&接收方去重
}

// 同意入车队邀请信令，发给邀请者
message AcceptFleetInvitationSignal
{
	FleetCrew accept_from = 1;	// 受邀者
}

// 受邀者入车队信令，向车队成员广播
message InviteeJoinFleetSignal
{
	FleetCrew invitee = 2;	// 受邀者
	FleetCrew inviter = 3;	// 邀请者
}

// 拒绝入车队请求，目前可能用不到，因为没有拒绝按钮
message DeclineFleetInvitationRequest
{
	string fleet_uri = 1;	// 车队uri
    string username = 2; // 拒绝邀请的人；用户的唯一标识，登录流程图中的uid
	string decline_to_username = 3;	// 邀请者；用户的唯一标识，登录流程图中的uid
	string appkey = 4;	// 与应用绑定，由能力平台分配
	string decline_reason = 5;	// 拒绝理由
	string msg_id = 6;	// 终端生成，便于发送方重发&接收方去重
}
// 拒绝入车队响应，目前可能用不到，因为没有拒绝按钮
message DeclineFleetInvitationResponse
{
	common.errcode.EErrorCode ret = 1;
	string msg_id = 2;	// 终端生成，便于发送方重发&接收方去重
}
// 拒绝入车队邀请信令，发送给邀请者，目前可能用不到，因为没有拒绝按钮
message FleetInvitationDeclinedSignal
{
	FleetCrew decline_from = 2;	// 受邀者
	string decline_reason = 3;	// 拒绝理由
}

// 拉人（或邀请）入车队请求
message AddFleetMemberRequest
{
	string fleet_uri = 1;	// 车队uri
	string from_username = 2;	//拉人者（或者邀请者）；用户的唯一标识，登录流程图中的uid
	string appkey = 3;	// 与应用绑定，由能力平台分配
	repeated string member_username = 4;	// 被拉者（或者被邀者）；用户的唯一标识，登录流程图中的uid
	string msg_id = 5;	// 终端生成，便于发送方重发&接收方去重
	bool is_direct_pull = 6; // 是直接拉人进入车队还是邀请入车队 true：是直接拉人的方式，false：是邀请的方式
	string invite_reason = 7;	//邀请理由
}
// 拉人（或邀请）入车队响应
message AddFleetMemberResponse
{
	common.errcode.EErrorCode ret = 1;
	string msg_id = 2;	// 终端生成，便于发送方重发&接收方去重
}
// 加入车队信令
message JoinFleetSignal
{
	repeated FleetCrew new_member = 1;	// 入车队者
	FleetCrew actor = 2;		// 拉人者
}

// 踢人请求
message KickFleetMemberRequest
{
	string fleet_uri = 1;	// 车队uri
	string kicker_username = 2;	// 踢人者；用户的唯一标识，登录流程图中的uid
	string appkey = 3;// 与应用绑定，由能力平台分配
	repeated string bekicked_username = 4;	// 被踢者；用户的唯一标识，登录流程图中的uid
	string msg_id = 5;	// 终端生成，便于发送方重发&接收方去重
}
// 踢人响应
message KickFleetMemberResponse
{
	common.errcode.EErrorCode ret = 1;
	string msg_id = 2;	// 终端生成，便于发送方重发&接收方去重
}
// 成员被踢出信令
message FleetMemberKickedSignal
{
	repeated FleetCrew be_kicked = 1;		// 被踢者
	FleetCrew kicker = 2;		// 踢人者
}

// 退车队请求
message FleetMemberExitRequest
{
	string fleet_uri = 1;	// 车队uri
	string exiter_username = 2;	// 退车队者；用户的唯一标识，登录流程图中的uid
	string appkey = 3;// 与应用绑定，由能力平台分配
	string msg_id = 4;	// 终端生成，便于发送方重发&接收方去重
}
// 退车队响应
message FleetMemberExitResponse
{
	common.errcode.EErrorCode ret = 1;
	string msg_id = 2;	// 终端生成，便于发送方重发&接收方去重
}
// 成员退车队信令
message FleetMemberExitedSignal
{
	FleetCrew exiter = 1;	// 退车队者
}

// 解散车队请求
message DestroyFleetRequest
{
	string fleet_uri = 1;	// 车队uri
	string destroy_username = 2;	// 解散者；用户的唯一标识，登录流程图中的uid
	string appkey = 3;// 与应用绑定，由能力平台分配
	string msg_id = 4;	// 终端生成，便于发送方重发&接收方去重
}
// 解散车队响应
message DestroyFleetResponse
{
	common.errcode.EErrorCode ret = 1;
	string msg_id = 2;	// 终端生成，便于发送方重发&接收方去重
}
// 车队解散信令
message FleetDestroyedSignal
{
	FleetCrew destroyer = 1;	// 解散者
}

// 转移车队主请求
message HandoverCaptainRequest
{
	string fleet_uri = 1;	// 车队uri
	string actor_username = 2;	// 请求发起者；用户的唯一标识，登录流程图中的uid
	string new_captain_username = 3;	// 新车队主；用户的唯一标识，登录流程图中的uid
	string appkey = 4;// 与应用绑定，由能力平台分配
	string msg_id = 5;	// 终端生成，便于发送方重发&接收方去重
}
// 转移车队主响应
message HandoverCaptainResponse
{
	common.errcode.EErrorCode ret = 1;
	string msg_id = 2;	// 终端生成，便于发送方重发&接收方去重
}
// 车队队长变更信令
message CaptainChangedSignal
{
	FleetCrew new_captain = 1;	// 新队长
}

// 修改成员昵称请求
message FleetMemberChangeNickRequest
{
	string fleet_uri = 1;	// 车队uri
	string actor_username = 2;	// 请求发起者；用户的唯一标识，登录流程图中的uid
	string appkey = 3;// 与应用绑定，由能力平台分配
	string nick = 4;	// 成员昵称
	string msg_id = 5;	// 终端生成，便于发送方重发&接收方去重
}
// 修改成员昵称响应
message FleetMemberChangeNickResponse
{
	common.errcode.EErrorCode ret = 1;
	string msg_id = 2;	// 终端生成，便于发送方重发&接收方去重
}
// 成员昵称变更信令
message FleetMemberNickChangedSignal
{
	FleetCrew nick_changed_crew = 1;	// 昵称变更者
}

// 成员 临时位置授权/取消 请求
message ChangeLocationAuthorizationRequest
{
	string fleet_uri = 1;	// 车队uri
	string actor_username = 2;	// 请求发起者；用户的唯一标识，登录流程图中的uid
	string appkey = 3;// 与应用绑定，由能力平台分配
	bool is_authorization = 4;	// 临时位置是否授权  true：已经授权， false：未授权（取消授权）
	string msg_id = 5;	// 终端生成，便于发送方重发&接收方去重
}
// 成员 临时位置授权/取消 响应
message ChangeLocationAuthorizationResponse
{
	common.errcode.EErrorCode ret = 1;
	string msg_id = 2;	// 终端生成，便于发送方重发&接收方去重
}
// 成员 临时位置授权/取消 信令
message ChangeLocationAuthorizationSignal
{
	FleetCrew location_authorization_changed_crew = 1;	// 位置授权改变的成员
	bool is_authorization = 2;	// 临时位置是否授权  true：已经授权， false：未授权（取消授权）
}

// 获取车队请求
message GetMyFleetRequest
{
	string username = 1;	// 请求发起者；用户的唯一标识，登录流程图中的uid
	string appkey = 2; // 与应用绑定，由能力平台分配
	string msg_id = 3;	// 终端生成，便于发送方重发&接收方去重
}
// 获取车队响应
message GetMyFleetResponse
{
	common.errcode.EErrorCode ret = 1;
	repeated FleetInfo fleet_info  = 2;	// 车队信息
	string msg_id = 3;	// 终端生成，便于发送方重发&接收方去重
}

// 获取车队成员列表请求
message GetFleetCrewListRequest
{
	string fleet_uri = 1;	// 车队唯一标识
	string appkey = 2; // 与应用绑定，由能力平台分配
	string username = 3;	// 请求者；用户的唯一标识，登录流程图中的uid
	uint64 modified = 4;	// 车队成员列表最新更新时间，新终端获取全量车队成员列表设置为0
	string msg_id = 5;	// 终端生成，便于发送方重发&接收方去重
}
// 获取车队成员列表响应
message GetFleetCrewListResponse
{
	common.errcode.EErrorCode ret = 1;
	repeated FleetCrew crews = 2;
	string msg_id = 3;	// 终端生成，便于发送方重发&接收方去重
}
//终端采用增量更新方式获取车队成员列表：
//1. 车队信息中crew_count大于0，且终端本地无该车队成员列表，在获取车队成员列表时，将modified设置为0，获取该车队的全量车队成员列表，终端从服务端返回的成员列表中提取最后更新的成员的modified，存储为modified；
//2. 后续再次获取该车队的成员列表时，携带上modified，服务器只返回该时间后有更新的车队成员给终端；


// 设置车队集结点请求
message SetFleetAssemblyPointRequest
{
	string setter_username = 1; // 设置者；用户的唯一标识，登录流程图中的uid
	string appkey = 2;	// // 与应用绑定，由能力平台分配
	string fleet_uri = 3; // 车队唯一标识
	common.msg.LocationMessage assembly_point = 4; // 集结点
	string msg_id = 5;	// 终端生成，便于发送方重发&接收方去重 
}
// 设置车队集结点响应
message SetFleetAssemblyPointResponse
{
	common.errcode.EErrorCode ret = 1; // 返回码 参见EErrorCode
	string msg_id = 3;	// 终端生成，便于发送方重发&接收方去重 
}
// 设置车队集结点信令
message AssemblyPointChangedSignal
{
	common.msg.LocationMessage assembly_point = 1; // 集结点
	FleetCrew setter = 2;	// 设置者
}

// 获取车队集结点请求
message GetFleetAssemblyPointRequest
{
	string username = 1; // 请求者；用户的唯一标识，登录流程图中的uid
	string appkey = 2;	// 与应用绑定，由能力平台分配
	string fleet_uri = 3; // 车队uri 
	string msg_id = 4;	// 终端生成，便于发送方重发&接收方去重 
}
// 获取车队集集结点响应
message GetFleetAssemblyPointResponse
{
	common.errcode.EErrorCode ret = 1; // 返回码 参见EErrorCode
	common.msg.LocationMessage assembly_point = 2; // 集结点
	string msg_id = 3;	// 终端生成，便于发送方重发&接收方去重 
}

// 获取车队详情请求
message GetFleetInfoRequest
{
	string username = 1; // 请求者；用户的唯一标识，登录流程图中的uid
	string appkey = 2;	// 与应用绑定，由能力平台分配
	string fleet_uri = 3; // 车队uri 
	string msg_id = 4;	// 终端生成，便于发送方重发&接收方去重 
}
// 获取车队详情响应
message GetFleetInfoResponse
{
	common.errcode.EErrorCode ret = 1; // 返回码 参见EErrorCode
	FleetInfo fleet_info = 2; // 车队详细信息
	string msg_id = 3;	// 终端生成，便于发送方重发&接收方去重 
}

// 获取车队邀请列表请求
message GetFleetInvitationListRequest
{
	string username = 1; // 请求者；用户的唯一标识，登录流程图中的uid
	string appkey = 2;	// 与应用绑定，由能力平台分配
	string msg_id = 3;	// 终端生成，便于发送方重发&接收方去重 
	uint32 page_index = 4; // 页码（默认是1）
	uint32 page_size = 5; // 页容量（默认是10）
}
// 获取车队邀请列表响应
message GetFleetInvitationListResponse
{
	common.errcode.EErrorCode ret = 1; // 返回码 参见EErrorCode
	repeated InvitationNoticeInfo invitation_notice_info = 2; // 邀请通知列表
	uint64 total = 3; // 总的数量
	string msg_id = 4;	// 终端生成，便于发送方重发&接收方去重 
}

// 修改车队名称请求
message SetFleetNameRequest
{
	string fleet_uri = 1;	// 车队uri
	string actor_username = 2;	// 请求发起者
	string appkey = 3;
	string fleet_name = 4;	// 车队名称
	string msg_id = 5;	// 终端生成
}
// 修改车队名称响应
message SetFleetNameResponse
{
	common.errcode.EErrorCode ret = 1;
	string msg_id = 2;	// 终端生成
}
// 车队名称变更信令
message FleetNameChangedSignal
{
	string fleet_name = 1;	// 车队名称
	FleetCrew actor = 2;	// 车队名称修改者
	string appkey = 3;
}

// 修改车队描述请求
message SetFleetDescRequest
{
	string fleet_uri = 1;	// 车队uri
	string actor_username = 2;	// 请求发起者
	string appkey = 3;
	string desc = 4;	// 车队描述
	string msg_id = 5;	// 终端生成
}
// 修改车队描述响应
message SetFleetDescResponse
{
	common.errcode.EErrorCode ret = 1;
	string msg_id = 2;	// 终端生成
}
// 车队描述变更信令
message FleetDescChangedSignal
{
	string desc = 1;	// 车队描述
	FleetCrew actor = 2;	// 车队描述修改者
	string appkey = 3;
}


// 车队服务
service FleetService {
	// 发送车队消息
	rpc SendFleetMessage (SendFleetMessageRequest) returns (SendFleetMessageResponse);
	// 创建车队
	rpc CreateFleet (CreateFleetRequest) returns (CreateFleetResponse);
	// 受邀者同意入车队
	rpc AcceptFleetInvitation (AcceptFleetInvitationRequest) returns (AcceptFleetInvitationResponse);
	// 受邀者拒绝入车队，可能用不到
	rpc DeclineFleetInvitation (DeclineFleetInvitationRequest) returns (DeclineFleetInvitationResponse);
	// 拉人（或者邀请）入车队
	rpc AddFleetMember (AddFleetMemberRequest) returns (AddFleetMemberResponse);
	// 踢人
	rpc KickFleetMember (KickFleetMemberRequest) returns (KickFleetMemberResponse);
	// 退车队
	rpc FleetMemberExit (FleetMemberExitRequest) returns (FleetMemberExitResponse);
	// 解散车队
	rpc DestroyFleet (DestroyFleetRequest) returns (DestroyFleetResponse);
	// 转移车队长
	rpc HandoverCaptain (HandoverCaptainRequest) returns (HandoverCaptainResponse);
	// 修改成员昵称
	rpc FleetMemberChangeNick (FleetMemberChangeNickRequest) returns (FleetMemberChangeNickResponse);
	// 成员 临时位置授权/取消
	rpc ChangeLocationAuthorization (ChangeLocationAuthorizationRequest) returns (ChangeLocationAuthorizationResponse);
	// 获取自己所在车队
	rpc GetMyFleet(GetMyFleetRequest) returns (GetMyFleetResponse);
	// 获取车队成员列表
	rpc GetFleetCrewList (GetFleetCrewListRequest) returns (GetFleetCrewListResponse);
	// 设置车队集结点
	rpc SetFleetAssemblyPoint (SetFleetAssemblyPointRequest) returns (SetFleetAssemblyPointResponse);
	// 获取车队集结点
	rpc GetFleetAssemblyPoint (GetFleetAssemblyPointRequest) returns (GetFleetAssemblyPointResponse);
	// 获取车队详情
	rpc GetFleetInfo (GetFleetInfoRequest) returns (GetFleetInfoResponse);
	// 获取车队邀请列表
	rpc GetFleetInvitationList (GetFleetInvitationListRequest) returns (GetFleetInvitationListResponse);
	// 修改车队名称
	rpc SetFleetName (SetFleetNameRequest) returns (SetFleetNameResponse);
	// 修改车队描述
	rpc SetFleetDesc (SetFleetDescRequest) returns (SetFleetDescResponse);
}
